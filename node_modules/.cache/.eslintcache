[{"/home/iam/Documents/network/src/index.tsx":"1","/home/iam/Documents/network/src/redux/store.js":"2","/home/iam/Documents/network/src/App.tsx":"3","/home/iam/Documents/network/src/useToken.js":"4","/home/iam/Documents/network/src/router.tsx":"5","/home/iam/Documents/network/src/components/keep-alive.tsx":"6","/home/iam/Documents/network/src/components/antd/login-box.tsx":"7","/home/iam/Documents/network/src/components/antd/logout-box.tsx":"8","/home/iam/Documents/network/src/redux/reducer/index.js":"9","/home/iam/Documents/network/src/pages/login.tsx":"10","/home/iam/Documents/network/src/pages/rootpage.tsx":"11","/home/iam/Documents/network/src/pages/status/overview.tsx":"12","/home/iam/Documents/network/src/pages/network/mesh/mesh.tsx":"13","/home/iam/Documents/network/src/pages/network/wireless/basicwifi.tsx":"14","/home/iam/Documents/network/src/redux/reducer/sessionSlice.ts":"15","/home/iam/Documents/network/src/pages/internet/wan/wan.tsx":"16","/home/iam/Documents/network/src/translations/i18n.js":"17","/home/iam/Documents/network/src/redux/reducer/appStateSlice.ts":"18","/home/iam/Documents/network/src/service/api/ubus-api.tsx":"19","/home/iam/Documents/network/src/pages/network/lan/index.tsx":"20","/home/iam/Documents/network/src/pages/internet/router/index.tsx":"21","/home/iam/Documents/network/src/pages/system/rsfactory/index.tsx":"22","/home/iam/Documents/network/src/pages/system/ulfirmware/index.tsx":"23","/home/iam/Documents/network/src/pages/system/ping/index.tsx":"24","/home/iam/Documents/network/src/pages/system/packet/index.tsx":"25","/home/iam/Documents/network/src/pages/system/settings/index.tsx":"26","/home/iam/Documents/network/src/pages/system/reboot/index.tsx":"27","/home/iam/Documents/network/src/pages/system/shutdown/index.tsx":"28","/home/iam/Documents/network/src/translations/vn/translations.js":"29","/home/iam/Documents/network/src/translations/en/translations.js":"30","/home/iam/Documents/network/src/components/antd/status/dashboard.tsx":"31","/home/iam/Documents/network/src/components/antd/layout/index.tsx":"32","/home/iam/Documents/network/src/components/antd/network/mesh/mesh.tsx":"33","/home/iam/Documents/network/src/components/antd/network/mesh/mesh_topo.tsx":"34","/home/iam/Documents/network/src/components/antd/network/wireless/wireless.tsx":"35","/home/iam/Documents/network/src/components/antd/internet/wan/wan.tsx":"36","/home/iam/Documents/network/src/components/antd/network/lan/edit.tsx":"37","/home/iam/Documents/network/src/components/antd/network/lan/table.tsx":"38","/home/iam/Documents/network/src/components/antd/internet/router/table.tsx":"39","/home/iam/Documents/network/src/components/antd/system/rsfactory/form.tsx":"40","/home/iam/Documents/network/src/components/antd/internet/router/edit.tsx":"41","/home/iam/Documents/network/src/components/antd/system/upfirmware/upload.tsx":"42","/home/iam/Documents/network/src/components/antd/system/ping/form.tsx":"43","/home/iam/Documents/network/src/components/antd/system/traceroute/form.tsx":"44","/home/iam/Documents/network/src/components/antd/system/settings/form.tsx":"45","/home/iam/Documents/network/src/components/antd/system/settings/authen.tsx":"46","/home/iam/Documents/network/src/components/antd/system/reboot/form.tsx":"47","/home/iam/Documents/network/src/components/antd/system/shutdown/form.tsx":"48","/home/iam/Documents/network/src/components/antd/main-menu.tsx":"49","/home/iam/Documents/network/src/components/antd/status/status-overview.tsx":"50","/home/iam/Documents/network/src/components/antd/status/network-statistic.tsx":"51","/home/iam/Documents/network/src/service/utils/data-format.js":"52","/home/iam/Documents/network/src/components/antd/status/system-info.tsx":"53"},{"size":387,"mtime":1698285652179,"results":"54","hashOfConfig":"55"},{"size":322,"mtime":1698285652183,"results":"56","hashOfConfig":"55"},{"size":1080,"mtime":1698285652167,"results":"57","hashOfConfig":"55"},{"size":402,"mtime":1698285652183,"results":"58","hashOfConfig":"55"},{"size":3528,"mtime":1698312193011,"results":"59","hashOfConfig":"55"},{"size":988,"mtime":1698285652179,"results":"60","hashOfConfig":"55"},{"size":3475,"mtime":1698315138683,"results":"61","hashOfConfig":"55"},{"size":568,"mtime":1698285652175,"results":"62","hashOfConfig":"55"},{"size":208,"mtime":1698285652183,"results":"63","hashOfConfig":"55"},{"size":186,"mtime":1698285652179,"results":"64","hashOfConfig":"55"},{"size":154,"mtime":1698285652179,"results":"65","hashOfConfig":"55"},{"size":435,"mtime":1698285652179,"results":"66","hashOfConfig":"55"},{"size":1010,"mtime":1698311597253,"results":"67","hashOfConfig":"55"},{"size":492,"mtime":1698311609509,"results":"68","hashOfConfig":"55"},{"size":1024,"mtime":1698285652183,"results":"69","hashOfConfig":"55"},{"size":501,"mtime":1698311547622,"results":"70","hashOfConfig":"55"},{"size":1044,"mtime":1698285652183,"results":"71","hashOfConfig":"55"},{"size":791,"mtime":1698285652183,"results":"72","hashOfConfig":"55"},{"size":21551,"mtime":1698285652183,"results":"73","hashOfConfig":"55"},{"size":3091,"mtime":1698311570402,"results":"74","hashOfConfig":"55"},{"size":4205,"mtime":1698311499227,"results":"75","hashOfConfig":"55"},{"size":161,"mtime":1698285652183,"results":"76","hashOfConfig":"55"},{"size":175,"mtime":1698285652183,"results":"77","hashOfConfig":"55"},{"size":858,"mtime":1698311645828,"results":"78","hashOfConfig":"55"},{"size":580,"mtime":1698311635412,"results":"79","hashOfConfig":"55"},{"size":602,"mtime":1698285652183,"results":"80","hashOfConfig":"55"},{"size":193,"mtime":1698285652183,"results":"81","hashOfConfig":"55"},{"size":197,"mtime":1698285652183,"results":"82","hashOfConfig":"55"},{"size":8354,"mtime":1698285652183,"results":"83","hashOfConfig":"55"},{"size":7215,"mtime":1698317904383,"results":"84","hashOfConfig":"55"},{"size":2716,"mtime":1698308388233,"results":"85","hashOfConfig":"55"},{"size":2985,"mtime":1698307095466,"results":"86","hashOfConfig":"55"},{"size":7535,"mtime":1698285652175,"results":"87","hashOfConfig":"55"},{"size":3087,"mtime":1698285652175,"results":"88","hashOfConfig":"55"},{"size":11795,"mtime":1698285652175,"results":"89","hashOfConfig":"55"},{"size":18250,"mtime":1698313491398,"results":"90","hashOfConfig":"55"},{"size":16274,"mtime":1698310799922,"results":"91","hashOfConfig":"55"},{"size":1923,"mtime":1698285652175,"results":"92","hashOfConfig":"55"},{"size":3216,"mtime":1698311333675,"results":"93","hashOfConfig":"55"},{"size":2126,"mtime":1698307061683,"results":"94","hashOfConfig":"55"},{"size":7856,"mtime":1698285652171,"results":"95","hashOfConfig":"55"},{"size":2589,"mtime":1698306755515,"results":"96","hashOfConfig":"55"},{"size":5744,"mtime":1698285652175,"results":"97","hashOfConfig":"55"},{"size":5414,"mtime":1698285652179,"results":"98","hashOfConfig":"55"},{"size":11596,"mtime":1698307052675,"results":"99","hashOfConfig":"55"},{"size":3444,"mtime":1698306704955,"results":"100","hashOfConfig":"55"},{"size":2114,"mtime":1698306663587,"results":"101","hashOfConfig":"55"},{"size":2127,"mtime":1698307046207,"results":"102","hashOfConfig":"55"},{"size":4227,"mtime":1698286829971,"results":"103","hashOfConfig":"55"},{"size":1376,"mtime":1698306443210,"results":"104","hashOfConfig":"55"},{"size":5850,"mtime":1698317738671,"results":"105","hashOfConfig":"55"},{"size":1707,"mtime":1698285652183,"results":"106","hashOfConfig":"55"},{"size":3497,"mtime":1698285652175,"results":"107","hashOfConfig":"55"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1nxcuzd",{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"159"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166"},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179"},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183"},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193"},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197"},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","suppressedMessages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210"},{"filePath":"211","messages":"212","suppressedMessages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214"},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218"},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222"},{"filePath":"223","messages":"224","suppressedMessages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226"},{"filePath":"227","messages":"228","suppressedMessages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230"},{"filePath":"231","messages":"232","suppressedMessages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234"},{"filePath":"235","messages":"236","suppressedMessages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238"},{"filePath":"239","messages":"240","suppressedMessages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242"},{"filePath":"243","messages":"244","suppressedMessages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246"},{"filePath":"247","messages":"248","suppressedMessages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250"},{"filePath":"251","messages":"252","suppressedMessages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254"},{"filePath":"255","messages":"256","suppressedMessages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258"},{"filePath":"259","messages":"260","suppressedMessages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262"},{"filePath":"263","messages":"264","suppressedMessages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266"},{"filePath":"267","messages":"268","suppressedMessages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270"},{"filePath":"271","messages":"272","suppressedMessages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274"},{"filePath":"275","messages":"276","suppressedMessages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278"},{"filePath":"279","messages":"280","suppressedMessages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282"},{"filePath":"283","messages":"284","suppressedMessages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286"},{"filePath":"287","messages":"288","suppressedMessages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290"},{"filePath":"291","messages":"292","suppressedMessages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294"},{"filePath":"295","messages":"296","suppressedMessages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298"},{"filePath":"299","messages":"300","suppressedMessages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302"},{"filePath":"303","messages":"304","suppressedMessages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306"},"/home/iam/Documents/network/src/index.tsx",[],[],"/home/iam/Documents/network/src/redux/store.js",[],[],"/home/iam/Documents/network/src/App.tsx",["307","308","309","310"],[],"import React from 'react'\nimport { RouterProvider } from 'react-router-dom'\nimport { Provider } from 'react-redux'\n\nimport router from './router'\nimport store from './redux/store'\nimport { SessionKeepAlive } from 'components/keep-alive'\n\nimport AntdLayout from 'components/antd/layout'\nimport { LoginBox } from 'components/antd/login-box'\nimport { Logout } from 'components/antd/logout-box'\n\nimport useToken from './useToken';\n\nfunction App() {\n\n  const { token, setToken } = useToken();\n  const logoutTimerIdRef = React.useRef<number | null>(null)\n\n  React.useEffect(() => {\n    const autoLogout = () => {\n        const timeOutId = window.setTimeout(Logout, 1000)\n        logoutTimerIdRef.current = timeOutId\n    };\n  \n    document.addEventListener('visibilitychange', autoLogout);\n  \n    return () => {\n      document.removeEventListener('visibilitychange', autoLogout);\n    };\n  }, []);\n\n  if (!token) {\n    return (\n        <LoginBox />\n    );\n  } \n\n  return (\n      <>\n      <SessionKeepAlive />\n      <RouterProvider router={router} />\n      </>\n  );\n}\n\nexport default App;\n","/home/iam/Documents/network/src/useToken.js",[],[],"/home/iam/Documents/network/src/router.tsx",["311"],[],"import { createBrowserRouter, Router } from 'react-router-dom'\nimport PageLogin from 'pages/login'\nimport StatusOverviewPage from 'pages/status/overview'\n// import NetworkInterfacesPage from 'pages/network/multicast'\n// import NetworkVlan from 'pages/network/vlan'\nimport NetworkLan from 'pages/network/lan'\nimport NetworkMesh from 'pages/network/mesh/mesh'\n// import PortForward from 'pages/security/port-forward'\n// import Ipfilter from 'pages/security/ipfilter'\n// import URLfilter from 'pages/security/URLfilter/URLfilterindex'\n// import ResgisLinksafe from 'pages/linksafe/resgistration'\nimport UlSystem from 'pages/system/ulfirmware'\nimport FactorySystem from 'pages/system/rsfactory'\nimport PingSystem from 'pages/system/ping'\nimport PacketSystem from 'pages/system/packet'\nimport SettingsSystem from 'pages/system/settings'\nimport RebootSystem from 'pages/system/reboot'\nimport ShutdownSystem from 'pages/system/shutdown'\nimport WirelessInterfacesPage from 'pages/network/wireless/basicwifi'\nimport WanSettingPage from 'pages/internet/wan/wan'\n// import DdnsSettingPage from 'pages/internet/ddns/ddns'\n// import OpenVpnInternet from 'pages/internet/openvpn'\nimport RootPage from 'pages/rootpage'\n\n\nimport StaticRoutes from 'pages/internet/router'\nimport { Logout } from 'components/antd/logout-box'\n\nexport default createBrowserRouter([\n  {\n    path: '/login',\n    element: <PageLogin />,\n  },\n  {\n    path: '/',\n    element: <RootPage />,\n    children: [\n  {\n    path: '/',\n    element: <StatusOverviewPage />,\n  },\n  {\n    path: 'network',\n    children: [\n      // {\n      //   path: 'igmp',\n      //   // element: <NetworkInterfacesPage />\n      // },\n      // {\n      //   path: 'vlan',\n      //   element: <NetworkVlan />\n      // },\n\n      {\n        path: 'lan',\n        element: <NetworkLan />\n      },\n      {\n        path: 'mesh',\n        element: <NetworkMesh />\n      },\n      {\n        path: 'basicwifi',\n        element: <WirelessInterfacesPage />\n      }\n    ],\n  },\n  {\n    path: 'internet',\n    children: [\n      {\n        path: 'wan',\n        element: <WanSettingPage />,\n      },\n      // {\n      //   path: 'ddns',\n      //   element: <DdnsSettingPage />,\n      // },\n      // {\n      //   path: 'openvpn',\n      //   element: <OpenVpnInternet />,\n      // },\n      {\n        path: 'routing',\n        element: <StaticRoutes />,\n      },\n    ],\n  },\n  // {\n  //   path: 'security',\n  //   children: [\n  //     {\n  //       path: 'portforward',\n  //       element: <PortForward />,\n  //     },\n  //     {\n  //       path: 'ipfilter',\n  //       element: <Ipfilter />,\n  //     },\n  //     {\n  //       path: 'urlfilter',\n  //       element: <URLfilter />,\n  //     },\n\n  //   ],\n  // },\n  // {\n  //   path: 'linksafe',\n  //   children: [\n  //     {\n  //       path: 'register',\n  //       element: <ResgisLinksafe />,\n  //     },\n\n  //   ],\n  // },\n  {\n    path: 'system',\n    children: [\n      {\n        path: 'update',\n        element: <UlSystem />,\n      },\n      {\n        path: 'reboot',\n        element: <RebootSystem />,\n      },\n      {\n        path: 'shutdown',\n        element: <ShutdownSystem />,\n      },\n      {\n        path: 'rsfactory',\n        element: <FactorySystem />,\n      },\n      {\n        path: 'ping',\n        element: <PingSystem />,\n      },\n      {\n        path: 'system',\n        element: <SettingsSystem />,\n      },\n      {\n        path: 'traceroute',\n        element: <PacketSystem />,\n      },\n    ],\n  },\n  {\n    path: '/logout',\n    element: <Logout />,\n  }\n],\n  }\n])\n","/home/iam/Documents/network/src/components/keep-alive.tsx",["312","313"],[],"import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { sessionActions, sessionSelector } from '../redux/reducer/sessionSlice'\nimport ubusApi from '../service/api/ubus-api'\n\n/**\n * Headless component keeping session alive by periodically calling ubus\n * @param {*} props\n * @returns\n */\nexport const SessionKeepAlive = (props:any) => {\n  const { interval = 10 } = props\n  const dispatch = useDispatch()\n  const { session } = useSelector(sessionSelector)\n  const beatFunc = async () => {\n    dispatch(sessionActions.keepAliveBeat())\n    updateSystemInfo()\n  }\n  const updateSystemInfo = async () => {\n    const result = await ubusApi.systemInfo()\n    if (result?.code === 0) {\n      dispatch(sessionActions.updateSystemInfo(result?.data))\n    }\n  }\n  React.useEffect(() => {\n    const handle = setInterval(beatFunc, interval * 1000)\n    return () => clearInterval(handle)\n  }, [])\n\n  React.useEffect(() => {\n    beatFunc()\n  }, [session])\n  return null\n}\n","/home/iam/Documents/network/src/components/antd/login-box.tsx",["314","315","316","317","318","319"],[],"import { Button, Col, Form, Input, Row, Typography, Checkbox, Tooltip } from 'antd'\nimport api from '../../service/api/ubus-api'\nimport BgProfile from \"../../assets/icon/bg.png\";\nimport { useTranslation } from \"react-i18next\";\nimport \"../../translations/i18n\";\nimport { LocaleSwitch } from \"../../translations/i18n\"\nimport { LockOutlined, UserOutlined, DingtalkOutlined, InfoCircleOutlined, SyncOutlined } from '@ant-design/icons';\nimport React from 'react';\nimport { redirect } from 'react-router-dom';\nimport './main.css'\n\nexport const LoginForm = () => {\n\tconst { t } = useTranslation();\n\tconst u = t('fill_username')\n\tconst p = t('fill_password')\n\tconst [form] = Form.useForm();\n\tconst [, forceUpdate] = React.useState({});\n\tReact.useEffect(() => {\n\t\tforceUpdate({});\n\t}, []);\n\n\tconst onFinish = async (values: any) => {\n\t\tconst result = await api.login(values.username, values.password)\n\t\tif (result.code === 0) {\n\t\t\tconst { ubus_rpc_session } = result.data\n\t\t\tsessionStorage.setItem('token', ubus_rpc_session);\n\t\t\twindow.location.href = '/'\n\t\t}\n\t}\n\n\tconst onClick = async () => {\n\t\tconst ip = window.location.href.split('/')[2]\n\t\twindow.location.replace('http://' + ip + ':2050')\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Typography.Title level={1} style={{\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tfontSize: '150%',\n\t\t\t\tfontWeight: '600',\n\t\t\t\tcolor: 'black',\n\t\t\t\tbackgroundClip: 'text',\n\t\t\t\tWebkitBackgroundClip: 'text',\n\t\t\t\t// textShadow: \"2px 2px 4px rgba(0, 0, 0, 0.5)\",\n\t\t\t\t// textShadow: \"1px 1px 0px #8268886e,1px 2px 0px #8268886e,1px 3px 0px #957dad,1px 4px 0px #957dad,1px 5px 0px #957dad,1px 6px 0px #826888,1px 10px 5px #826888,1px 15px 10px #826888,1px 20px 30px #826888,1px 25px 50px #826888\",\n\t\t\t}}>Have a good time</Typography.Title>\n\t\t\t<Form form={form} layout=\"vertical\" onFinish={onFinish}>\n\t\t\t\t<Form.Item name=\"username\" rules={[{ required: true, message: String(t(\"fill_username\")) }]}>\n\t\t\t\t\t<Input className='inputusername' placeholder={u} prefix={<UserOutlined className=\"site-form-item-icon\" />}\n\t\t\t\t\t\tsuffix={\n\t\t\t\t\t\t\t<Tooltip title={t('ex')}>\n\t\t\t\t\t\t\t\t<InfoCircleOutlined style={{ color: 'rgba(0,0,0,45)' }} />\n\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t} />\n\t\t\t\t</Form.Item>\n\t\t\t\t<Form.Item name=\"password\" rules={[{ required: true, message: String(t(\"fill_password\")) }]}>\n\t\t\t\t\t<Input.Password className='inputpassword' placeholder={p} prefix={<LockOutlined className=\"site-form-item-icon\" />} />\n\t\t\t\t</Form.Item>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col md={17}>\n\t\t\t\t\t\t<Form.Item shouldUpdate>\n\t\t\t\t\t\t\t{() => (\n\t\t\t\t\t\t\t\t<Button className='buttonlogin' htmlType=\"submit\" type=\"primary\" size='large' danger style={{  backgroundColor: '#0033FF',\n\t\t\t\t\t\t\t\t\ttextTransform: 'uppercase',\n\t\t\t\t\t\t\t\t}}>Login</Button>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Form.Item>\n\t\t\t\t\t</Col>\n\t\t\t\t\t{/* <Col md={7}>\n\t\t\t\t\t\t<Button className='buttonswitch' size='large' type=\"primary\" onClick={onClick} icon={<SyncOutlined />}>\n\t\t\t\t\t\t\tSwitch Account\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Col> */}\n\t\t\t\t</Row>\n\t\t\t</Form>\n\t\t</>\n\t)\n}\n\nexport const LoginBox = (props: any) => {\n\treturn (\n\t\t<>\n\t\t\t<LocaleSwitch />\n\t\t\t<div className='container'\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: '100%',\n\t\t\t\t\theight: '100vh',\n\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\tflexDirection: 'column',\n\t\t\t\t\tjustifyContent: 'space-between',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<div style={{ display: 'flex', flexDirection: 'column', flex: 1, justifyContent: 'center' }}>\n\t\t\t\t\t<Row justify={'center'} style={{ justifySelf: 'auto' }}>\n\t\t\t\t\t\t<Col xs={24} sm={12} xxl={8}>\n\t\t\t\t\t\t\t<LoginForm {...props} />\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t)\n}\n","/home/iam/Documents/network/src/components/antd/logout-box.tsx",["320","321"],[],"import { Button, Card } from 'antd'\nimport { useNavigate } from 'react-router-dom'\nimport { useTranslation } from \"react-i18next\";\nimport \"../../translations/i18n\";\n\nexport const Logout = (props:any) => {\n  const { t } = useTranslation();\n  const navigate = useNavigate()\n  const onLogout = () => {\n    sessionStorage.removeItem('token')\n    sessionStorage.removeItem('theme')\n    sessionStorage.removeItem('menu')\n    window.location.href = '/'\n  }\n    return (\n      <Button type=\"primary\" danger onClick={onLogout} >\n          {t(\"logout\")}\n      </Button>\n    )\n}\n","/home/iam/Documents/network/src/redux/reducer/index.js",[],[],"/home/iam/Documents/network/src/pages/login.tsx",["322"],[],"import AntdLayout from '../components/antd/layout'\nimport { LoginBox } from '../components/antd/login-box'\n\nconst Page = () => {\n  return (\n      <LoginBox />\n  )\n}\n\nexport default Page\n","/home/iam/Documents/network/src/pages/rootpage.tsx",[],[],"/home/iam/Documents/network/src/pages/status/overview.tsx",["323","324","325","326","327","328"],[],"import Layout from 'antd/es/layout/layout'\nimport AntdLayout from '../../components/antd/layout'\nimport AntdLayoutMenu from '../../components/antd/layoutmenu'\nimport { StatusOverview } from '../../components/antd/status/status-overview'\nimport { Outlet, Link } from \"react-router-dom\";\nimport { Dashboard } from \"../../components/antd/status/dashboard\"\n\nconst Page = () => {\n  return (\n       <Dashboard />\n  );\n}\n\nexport default Page\n","/home/iam/Documents/network/src/pages/network/mesh/mesh.tsx",["329","330","331","332"],[],"import AntdLayout from 'components/antd/layout'\nimport { Button, Card, Col, Modal } from \"antd\"\nimport React from \"react\"\nimport { MeshTable } from 'components/antd/network/mesh/mesh'\nimport { MeshTopo } from 'components/antd/network/mesh/mesh_topo';\nimport \"../../../translations/i18n\";\nimport { useTranslation } from \"react-i18next\"\n\nconst Page = () => {\n  const {t} = useTranslation()\n  const [loading, setLoading] = React.useState(true)\n    setTimeout(() => {\n        setLoading(false)\n    }, 2000);\n  return (\n    <Card>\n      <Card title={t(\"Global_Configuration\")} type=\"inner\" headStyle={{ background:\"linear-gradient(45deg, #07117e, #07117e\", color: 'white' }}>\n        <MeshTable />\n      </Card>\n      <Card loading={loading} title={t(\"Mesh_Topo_Information\")} type=\"inner\" headStyle={{background:\"linear-gradient(45deg, #07117e, #07117e\", color: 'white' }}>\n        <div style={{ overflowX: 'auto' }}>\n          <MeshTopo />\n        </div>\n      </Card>\n    </Card>\n    \n  )\n}\n\nexport default Page\n","/home/iam/Documents/network/src/pages/network/wireless/basicwifi.tsx",["333"],[],"import { Card } from \"antd\"\nimport AntdLayout from \"components/antd/layout\"\nimport { Wireless } from \"components/antd/network/wireless/wireless\"\nimport { useTranslation } from \"react-i18next\";\nimport \"../../../translations/i18n\"\nconst Page = () => {\n  const { t } = useTranslation();\n  return (\n      <Card title={t(\"basic_wireless\")} type=\"inner\" headStyle={{background:\"linear-gradient(45deg, #07117e, #07117e\",color: 'white'}}>\n        <Wireless />\n      </Card>\n  )\n}\n\nexport default Page",[],"/home/iam/Documents/network/src/redux/reducer/sessionSlice.ts",[],[],"/home/iam/Documents/network/src/pages/internet/wan/wan.tsx",["334"],[],"import { WanSettings } from 'components/antd/internet/wan/wan'\nimport AntdLayout from 'components/antd/layout'\nimport React from 'react'\nimport { useTranslation } from \"react-i18next\";\nimport \"../../../translations/i18n\";\nimport { Card } from \"antd\"\n\nconst Page = () => {\n  const { t } = useTranslation()\n  return (\n    <Card title={t('config_wan_setting')} headStyle={{background:\"linear-gradient(45deg, #07117e, #07117e\",color: 'white'}}>\n      <WanSettings />\n    </Card>\n  )\n}\n\nexport default Page","/home/iam/Documents/network/src/translations/i18n.js",[],[],"/home/iam/Documents/network/src/redux/reducer/appStateSlice.ts",[],[],"/home/iam/Documents/network/src/service/api/ubus-api.tsx",[],[],"/home/iam/Documents/network/src/pages/network/lan/index.tsx",["335","336","337","338"],[],"import AntdLayout from 'components/antd/layout'\nimport { Button, Card, Col, Modal, Row } from \"antd\"\nimport React from \"react\"\nimport { LanEdit } from 'components/antd/network/lan/edit'\nimport { LanTable } from 'components/antd/network/lan/table'\nimport ubusApi from 'service/api/ubus-api'\nimport { useTranslation } from \"react-i18next\"\nimport \"../../../translations/i18n\"\n\nconst Page = () => {\n    const { t } = useTranslation()\n    const [dhcpdata, SetDhcpData] = React.useState(null)\n    const refreshData = async () => {\n        const dataF = await ubusApi.show_network_dhcp_leases()\n        SetDhcpData(dataF.leases)\n    }\n    React.useEffect(() => {\n        refreshData()\n    }, [])\n\n    //Fake call Api\n\n    const [value, setValue] = React.useState('')\n    const handleChange = (value: any) => setValue(value)\n    const [item, setItem] = React.useState(null)\n    const [showModal, setShowModal] = React.useState(false)\n    const onEditItem = (group: any) => {\n        if (group.name) {\n            setItem(Object.assign({}, group))\n            setShowModal(true)\n            setValue('access')\n        } else {\n            setItem(Object.assign({}, group))\n            setShowModal(true)\n            setValue('trunk')\n        }\n    }\n    const onCreateItem = (group: any) => {\n        setItem({} as any)\n        setShowModal(true)\n    }\n    const onModalCancel = () => {\n        setShowModal(false)\n        setItem(null)\n    }\n    const onModalOk = () => {\n        setShowModal(false)\n    }\n    const onDone = () => {\n        setShowModal(false)\n        setItem(null)\n    }\n\n\n    const showModalContent = () => {\n        if (!showModal) {\n            return null\n        }\n        return (\n            <Modal width={900} open={true} onCancel={onModalCancel} onOk={onModalOk} footer={null}>\n                <Col span={23}>\n                    <LanEdit item={item}\n                        onDone={onDone} value={value} handleChange={handleChange} />\n\n                </Col>\n            </Modal>\n        )\n    }\n    return (\n        <div>\n            <Row gutter={[24, 10]}>\n                <Col span={12}>\n                <Card title={t('config_lan_setting')} type='inner' hoverable headStyle={{background:\"linear-gradient(45deg, #07117e, #07117e\",color: 'white'}}>\n                    <div style={{ overflowX: 'auto' }}>\n                    <LanEdit item={item}\n                        onDone={onDone} value={value} handleChange={handleChange} />\n                    </div>\n                </Card>\n                </Col>\n                <br></br>\n                <Col span={12}>\n                    <Card title={t('allocated')} type='inner' headStyle={{background:\"linear-gradient(45deg, #07117e, #07117e\",color: 'white'}}>\n                        <div style={{ overflowX: 'auto' }}>   \n                        <LanTable\n                            data1={dhcpdata}\n                        ></LanTable>\n                        </div>\n                    </Card>\n                </Col>\n                {showModalContent()}\n            </Row>\n        </div>\n\n    )\n}\nexport default Page\n","/home/iam/Documents/network/src/pages/internet/router/index.tsx",["339","340","341","342","343","344","345","346","347"],[],"import { Button, Card, Col, Modal, Typography ,Space} from \"antd\"\nimport { RouterEdit } from \"components/antd/internet/router/edit\"\nimport { RouterTable , Router2Table } from \"components/antd/internet/router/table\"\nimport AntdLayout from \"components/antd/layout\"\nimport React from \"react\"\nimport ubusApi from \"service/api/ubus-api\"\nimport { useTranslation } from \"react-i18next\"\nimport \"../../../translations/i18n\"\n\nconst { Title, Paragraph, Text, Link } = Typography;\nconst Page = () => {\n    const { t } = useTranslation()\n    const [item, setItem] = React.useState(null)\n    const [showModal, setShowModal] = React.useState(false)\n    const [data, setData] = React.useState(null)\n    //const [data1, setData1] = React.useState(null)\n    const [data2, setData2] = React.useState(null)\n    const [data32, setData32] = React.useState(null);\n    const [route_wan, setRoute_wan] = React.useState(null)\n    const [route_lan, setRoute_lan] = React.useState(null)\n \n    const refreshData = async () => {\n        const data = await ubusApi.show_network_routing(\"net\")\n        //const dataF = await ubusApi.show_network_routing(\"net6\")\n        const dataF1 = await ubusApi.show_network_routing(\"static\")\n        const dataF4 = await ubusApi.show_network_routing(\"default_route\")\n        const dataF3 = await ubusApi.show_web_data(\"32\")\n        setData(data.route_net)\n        // setData1(dataF.route_net6)\n        setData2(dataF1.static_routing)\n        setData32(dataF3.data)\n        setRoute_wan(dataF4.default_route_wan[0])\n        setRoute_lan(dataF4.default_route_lan)\n\n    }\n    React.useEffect(() => {\n        refreshData()\n    }, [])\n\n    const onEditItem = (group: any) => {\n        setItem(Object.assign({}, group))\n        setShowModal(true)\n    }\n    const onCreateItem = (group: any) => {\n        setItem({} as any)\n        setShowModal(true)\n    }\n    const onModalCancel = () => {\n        setShowModal(false)\n        setItem(null)\n    }\n    const onModalOk = () => {\n        setShowModal(false)\n    }\n    const onDone = () => {\n        setShowModal(false)\n        setItem(null)\n    }\n\n    const showModalContent = () => {\n        if (!showModal) {\n            return null\n        }\n        return (\n            <Modal width={700} open={true} onCancel={onModalCancel} onOk={onModalOk} footer={null}>\n                <Col span={23}>\n                    <Card title={t('route_configure')} type=\"inner\" headStyle={{background:\"linear-gradient(109.6deg, rgb(44, 83, 131), rgb(44, 83, 131) 18.9%, rgb(68, 124, 143), rgb(44, 83, 131) 91.1%, rgb(44, 83, 131))\",color: 'white'}}>\n                        <RouterEdit item={item} route_wan ={route_wan} route_lan={route_lan}\n                            data32={data32} \n                        onDone={onDone} />\n                    </Card>\n                </Col>\n            </Modal>\n        )\n    }\n    return (\n        <Space\n                direction=\"vertical\"\n                size=\"middle\"\n                style={{\n                    display: 'flex',\n                }}\n            >\n            {/* <Card title={t('route_list')} headStyle={{background:\"linear-gradient(109.6deg, rgb(44, 83, 131), rgb(44, 83, 131) 18.9%, rgb(68, 124, 143), rgb(44, 83, 131) 91.1%, rgb(44, 83, 131))\",color: 'white'}}>\n                <div style={{ overflowX: 'auto' }}>\n                    <Router2Table\n                        haha={data2}\n                        onEditItem={onEditItem}\n                    />\n                </div>\n            {showModalContent()}\n            <Button type=\"primary\" onClick={onCreateItem} >\n                {t('create')}\n            </Button>\n            </Card> */}\n            <Card title={t('route_list_IPv4')} headStyle={{background:\"linear-gradient(45deg, #07117e, #07117e\",color: 'white'}}>\n                <div style={{ overflowX: 'auto' }}>\n                    <RouterTable\n                        hihi={data}\n                        onEditItem={onEditItem}\n                    />\n                </div>\n            {showModalContent()}\n            {/* <Button type=\"primary\" onClick={onCreateItem} >\n                {t('create')}\n            </Button> */}\n            </Card>\n        </Space>\n    )\n}\nexport default Page\n","/home/iam/Documents/network/src/pages/system/rsfactory/index.tsx",[],[],"/home/iam/Documents/network/src/pages/system/ulfirmware/index.tsx",[],[],"/home/iam/Documents/network/src/pages/system/ping/index.tsx",["348","349","350","351","352","353","354","355","356","357","358","359","360","361"],[],"import { Button, Col, Row, Space, Table, Typography, Modal, Input, Select, message, Form, Card } from 'antd'\nimport AntdLayout from 'components/antd/layout';\nimport { PingSystem } from 'components/antd/system/ping/form';\n\nimport { UploadFirmware } from 'components/antd/system/upfirmware/upload';\nimport React, { useState, useRef } from 'react';\nimport ubusApi from '../../../service/api/ubus-api';\n\nconst Page = () => {\n    return (\n            <Row>\n            <Col span={4}></Col>\n            <Col span={16}>\n            <Card title=\"Ping\" type=\"inner\" headStyle={{background:\"linear-gradient(45deg, #07117e, #07117e\",color: 'white'}}>\n                <br></br>\n                <div style={{ overflowX: 'auto' }}>\n                <PingSystem />\n                </div>\n            </Card>\n            </Col>\n            </Row>\n    )\n}\nexport default Page\n","/home/iam/Documents/network/src/pages/system/packet/index.tsx",["362","363","364","365"],[],"import { Col, Row, Card } from 'antd'\nimport { TraceRoute } from 'components/antd/system/traceroute/form';\nimport React from 'react';\n\nconst Page = () => {\n    const [item, setItem] = React.useState(null)\n    const [showModal, setShowModal] = React.useState(false)\n\n    return (\n        <Row>\n        <Col span={4}></Col>\n        <Col span={16}>\n        <Card title=\"Traceroute\" type=\"inner\" headStyle={{background:\"linear-gradient(45deg, #07117e, #07117e\",color: 'white'}}>\n                <TraceRoute />\n        </Card>\n        </Col>\n        </Row>\n    )\n}\nexport default Page\n","/home/iam/Documents/network/src/pages/system/settings/index.tsx",[],[],"/home/iam/Documents/network/src/pages/system/reboot/index.tsx",[],[],"/home/iam/Documents/network/src/pages/system/shutdown/index.tsx",[],[],"/home/iam/Documents/network/src/translations/vn/translations.js",["366","367"],[],"export const TRANSLATIONS_VN = {\n    login: \"Đăng nhập\",\n    username: \"Tên người dùng\",\n    password: \"Mật khẩu\",\n    basic: \"Cơ bản\",\n    settings: \"Cấu hình\",\n    submit_system: \"Chấp nhận\",\n    basic_settings: \"Cấu hình cơ bản\",\n    overview: \"Tổng quan\",\n    wireless_clients: \"Các thiết bị kết nối wifi\",\n    memory_usage: \"Bộ nhớ đã dùng\",\n    internet_connection: \"Tình trạng kết nối internet\",\n    wan_statistic: \"Lưu lượng cổng wan\",\n    lan_statistic: \"Lưu lượng cổng lan\",\n    wifi_statistic: \"Lưu lượng wifi\",\n    mac_address: \"Địa chỉ MAC\",\n    dashboard: \"Trang chính\",\n    system: \"Hệ thống\",\n    security: \"Bảo mật\",\n    port_forward: \"Chuyển tiếp cổng\",\n    ip_filter: \"Bộ lọc IP\",\n    url_filter: \"Bộ lọc URL\",\n    linksafe_service: \"Dịch vụ LINKSAFE\",\n    register: \"Đăng ký\",\n    internet: \"Internet\",\n    routing: \"Định tuyến\",\n    openvpn: \"OpenVPN\",\n    wan_settings: \"Mạng WAN\",\n    ddns: \"DDNS\",\n    local_network: \"Mạng nội bộ\",\n    lan_settings: \"Mạng LAN\",\n    vlan_settings: \"VLAN\",\n    igmp: \"IGMP\",\n    mesh: \"Mesh\",\n    ipaddr: \"Địa chỉ IP\",\n    source: \"Địa chỉ MAC nguồn\",\n    type: \"Loại thiết bị\",\n    Global_Configuration:\"Cấu hình toàn cầu\",\n    Mesh_Topo_Information: \"Thông tin mô hình mesh\",\n    mesh_ssid: \"Tên mạng mesh\",\n    wpa_passphrase: \"Mật khẩu\",\n    basic_wireless: \"Wifi cơ bản\",\n    ssid_name: \"Tên wifi\",\n    encryption_type: \" Loại mã hóa\",\n    guest_wifi: \"Wifi khách\",\n    enabled: \"Kích hoạt giới hạn băng thông\",\n    bandwidth_limit: \"Giới hạn băng thông\",\n    update_firmware: \"Nâng cấp phần mềm\",\n    upload: \"Tải lên\",\n    factory_reset: \"Khôi phục cài đặt gốc\",\n    reboot: \"Khởi động lại\",\n    logout: \"Đăng xuất\",\n    change_password: \"Đổi mật khẩu\",\n    timezone: \"Múi giờ\",\n    hostname: \"Tên thiết bị\",\n    current_password: \"Mật khẩu cũ\",\n    new_password: \"Mật khẩu mới\",\n    confirm_new_password: \"Xác nhận mật khẩu\",\n    update: \"Nâng cấp\",\n    choose_firmware: \"Chọn file\",\n    frequency: \"Tần số hoạt động\",\n    signal: \"Cường độ tín hiệu (dBm)\",\n    tx_bytes: \"TX bytes\",\n    rx_bytes: \"RX bytes\",\n    has_registerd: \"Thiết bị của bạn đã được đăng ký với hệ thống LINKSAFE\",\n    not_register: \"Thiết bị của bạn chưa được đăng ký với hệ thống LINKSAFE\",\n    Qr_note: \"Quét mã QR đăng kí vs hệ thống LINKSAFE\",\n    device_id: \"ID của thiết bị: \",\n    port_forward_configuration: \"Cấu hình chuyển tiếp cổng\",\n    url_filter_configuration: \"Cấu hình bộ lọc URL\",\n    ip_filter_configuration: \"Cấu hình bộ lọc IP\",\n    port_forward_list: \"Danh sách luật chuyển tiếp cổng\",\n    create: \"Tạo mới\",\n    name: \"Tên\",\n    wan_ip: \"IP miền WAN\",\n    wan_port: \"Cổng miền WAN\",\n    lan_ip: \"IP miền LAN\",\n    lan_port: \"Cổng miền LAN\",\n    protocol: \"Giao thức\",\n    action: \"Hành động\",\n    edit: \"Chỉnh sửa\",\n    delete: \"Xoá\",\n    delete_cf: \"Bạn có chắc là muốn xóa cấu hình này không?\",\n    yes: \"Có\",\n    no: \"Không\",\n    status: \"Trạng thái\",\n    enable: \"Cho phép\",\n    disable: \"Vô hiệu hóa\",\n    error_fill: \"Hãy điên đầy đủ!\",\n    select_proto: \"Chọn giao thức\",\n    ip: \"Địa chỉ IP\",\n    port: \"Cổng\",\n    submit: \"Tạo\",\n    loading: \"Đang tải...\",\n    success: \"Thành công!\",\n    fail: \"Thất bại, Không có gì được cấu hình!\",\n    source_ip: \"Địa chỉ nguồn\",\n    source_port: \"Cổng nguồn\",\n    dest_ip: \"Địa chỉ đích\",\n    dest_port: \"Cổng đích\",\n    block: \"Chặn lại\",\n    permit: \"Cho qua\",\n    default_action: \"Chọn hành động\",\n    none: \"Không chọn\",\n    url_list: \"Danh sách bộ lọc URL\",\n    ip_list: \"Danh sách bộ lọc IP\",\n    help_name: 'Tên của bí danh chỉ có thể bao gồm các ký tự \"a-z, A-Z, 0-9 và _\".',\n    config_wan_setting: \"Cài đặt cấu hình miền WAN\",\n    provider: \"Nhà cung cấp\",\n    provider_url: \"URL được cấp\",\n    custom_url: \"URL tùy chỉnh\",\n    mode: \"Chế độ\",\n    server: \"Máy chủ\",\n    client: \"Máy khách\",\n    subnet: \"Dải mạng\",\n    type_access: \"Loại truy cập\",\n    select_status: \"Chọn trạng thái\",\n    openvpn_configure: \"Cấu hình OpenVPN\",\n    openvpn_list: \"Danh sách cấu hình OpenVPN\",\n    certificate_list: \"Danh sách Certificate\",\n    dest_network: \"Mạng đích\",\n    interface: \"Giao diện\",\n    route_configure: \"Cấu hình định tuyến\",\n    route_list: \"Danh sách định tuyến\",\n    config_lan_setting: \"Cài đặt cấu hình miền LAN\",\n    interface_name: \"Cổng\",\n    macaddr: \"Địa chỉ MAC\",\n    speed: \"Tốc độ\",\n    enable_dhcpv4_server: \"Bật DHCPv4 Server\",\n    dhcp_range: \"Dải DHCP\",\n    leasetime: \"Thời gian thuê\",\n    enable_dhcpv6_server: \"Bật DHCPv6 Server\",\n    ipv6addr: \"Địa chỉ IPv6\",\n    start: \"Bắt đầu\",\n    stop: \"Kết thúc\",\n    primary: \"Ưu tiên thứ nhất\",\n    secondary: \"Ưu tiên thứ hai\",\n    ipv4_configure: \"Cấu hình IPv4\",\n    ipv6_configure: \"Cấu hình IPv6\",\n    expires: \"Hết hạn\",\n    allocated: \"Địa chỉ được phân bổ (DHCP)\",\n    vlan_configure: \"Cấu hình Vlan\",\n    local_time: \"Thời gian:\",\n    uptime: \"Thời gian hoạt động:\",\n    wrong_confirm_password: \"Mật khẩu nhập lại không đúng!\",\n    wrong_current_password: \"Mật khẩu cũ không đúng!\",\n    change_password_ok: \"Đổi mật khẩu thành công!\",\n    upload_success: \"Tải file thành công, đợi quá trình nâng cấp\",\n    invalid_firmware: \"File tải lên không đúng định dạng\",\n    upgrade_success: \"Nâng cấp thành công, thiết bị sẽ khởi động lại\",\n    hostname_system: \"Domain hoặc Địa chỉ IP\",\n    src_ip: \"Địa chỉ IP nguồn\",\n    ip_version: \"Phiên bản giao thức IP\",\n    max_hops: \"Số nút tối đa\",\n    max_pings: \"Số gói ping\",\n    seconds_between_pings: \"Thời gian giữa các gói ping\",\n    fill_username: \"Hãy điền tài khoản!\",\n    fill_password: \"Hãy điền mật khẩu!\",\n    ex: 'Tài khoản và mật khẩu của thiết bị được sử dụng để đăng nhập vào WebUI.',\n    restore: 'Đặt lại',\n    factory_default: 'Đặt lại cấu hình mặc định',\n    help_reset: 'Nhấp vào nút sau để đặt lại tất cả các cài đặt cấu hình về giá trị mặc định của chúng.',\n    cancel: 'Hủy bỏ',\n    title_reset: 'Tất cả cấu hình sẽ trở về mặc định, thiết bị sẽ khởi động lại.',\n    help_reboot: 'Nhấp vào nút này để khởi động lại thiết bị.',\n    shutdown:'Tắt nguồn',\n    title_shutdown:'Bạn có chắc chắn muốn tắt nguồn  thiết bị không?',\n    title_reboot: 'Bạn có chắc chắn muốn khởi động lại thiết bị không?',\n    enable_dhcpv4_relay: 'Bật DHCPv4 Relay',\n    enable_dhcpv6_relay: 'Bật DHCPv6 Relay',\n    error_dhcp: 'DHCP relay phải được tắt trước khi bật DHCP Server hoặc ngược lại.',\n    iface:'giao diện cổng',\n    Ports:'cổng',\n    Type:'loại giao thức',\n    Port_could_not_be_larger_than_65535: 'Cổng không thể lớn hơn 65535',\n    Error_Ip_address: 'Lỗi địa chỉ IP',\n    White_space_and_special_characters_are_not_valid: \"Khoảng trắng và ký tự đặc biệt không hợp lệ\",\n    Password_must_be_minimum_6_characters:'Mật khẩu phải có ít nhất 6 ký tự',\n    Password_must_be_minimum_8_characters: 'Mật khẩu phải có ít nhất 8 ký tự',\n    timeout: 'Thời gian chờ',\n    IGMP_List: 'Danh sách IGMP',\n    Please_wait_for_configuration: 'Vui lòng chờ',\n    route_list_IPv4: 'Danh sách định tuyến IPV4',\n    vlanid_could_not_be_larger_than_4094: 'Vlanid không thể lớn hơn 4094',\n    enter_number: 'Nhập số nguyên dương',\n    White_space_and_special_characters_are_not_valid:\"Khoảng trắng và ký tự đặc biệt không hợp lệ\",\n    Password_must_be_minimum_8_characters: 'Mật khẩu phải có tối thiểu 8 ký tự',\n};\n","/home/iam/Documents/network/src/translations/en/translations.js",["368","369","370"],[],"export const TRANSLATIONS_EN = {\n    login: \"Login\",\n    username: \"Username\",\n    password: \"Password\",\n    basic: \"Basic\",\n    settings: \"Settings\",\n    submit: \"Submit\",\n    basic_settings: \"Basic Settings\",\n    overview: \"Overview\",\n    wireless_clients: \"Wireless clients\",\n    memory_usage: \"Memory Usage\",\n    internet_connection: \"Internet status\",\n    wan_statistic: \"WAN Statistic\",\n    lan_statistic: \"LAN Statistic\",\n    wifi_statistic: \"Wireless Statistic\",\n    mac_address: \"MAC Address\",\n    total: \"Total\",\n    dashboard: \"Dashboard\",\n    system: \"System\",\n    security: \"Security\",\n    port_forward: \"Port Forwarding\",\n    ip_filter: \"IP Filtering\",\n    url_filter: \"URL Filtering\",\n    linksafe_service: \"LINKSAFE Service\",\n    register: \"Register\",\n    internet: \"Internet\",\n    routing: \"Routing\",\n    openvpn: \"OpenVPN\",\n    wan_settings: \"WAN Settings\",\n    ddns: \"DDNS\",\n    local_network: \"Local Network\",\n    lan_settings: \"LAN Settings\",\n    vlan_settings: \"VLAN\",\n    igmp: \"IGMP\",\n    mesh: \"Mesh\",\n    ipaddr: \"Ip Address\",\n    source : \"Source Mac Adress\",\n    type : \"Type\",\n    Global_Configuration: \"Global Configuration\",\n    Mesh_Topo_Information: \"Mesh Topo Information\",\n    mode: \"Mode\",\n    mesh_ssid: \"Mesh SSID\",\n    wpa_passphrase: \"WPA_Passphrase\",\n    basic_wireless: \"Basic Wireless\",\n    ssid_name: \"SSID Name\",\n    encryption_type: \"Encryption Type\",\n    enabled: \"Enable Bandwidth Limit\",\n    bandwidth_limit: \"Bandwidth Limit\",\n    guest_wifi: \"Guest Wireless\",\n    update_firmware: \"Firmware Update\",\n    factory_reset: \"Reset Factory\",\n    reboot: \"Reboot\",\n    logout: \"Logout\",\n    change_password: \"Change Password\",\n    current_password: \"Current Password\",\n    new_password: \"New Password\",\n    confirm_new_password: \"Confirm New Password\",\n    update: \"Update\",\n    choose_firmware: \"Choose File\",\n    frequency: \"Frequency\",\n    signal: \"Signal (dBm)\",\n    tx_bytes: \"Transmit bytes\",\n    rx_bytes: \"Receive bytes\",\n    has_registerd: \"Your device has been registered with LINKSAFE system\",\n    not_register: \"Your device has not been registered with LINKSAFE system\",\n    Qr_note: \" Scan the QR code to register with LINKSAFE system\",\n    device_id: \"Device ID: \",\n    port_forward_configuration: \"Port Forward Configuration\",\n    url_filter_configuration: \"URL Filter Configuration\",\n    ip_filter_configuration: \"IP Filter Configuration\",\n    port_forward_list: \"Port Forward List\",\n    create_port_forward: \"Create New\",\n    create: \"Create\",\n    name: \"Name\",\n    wan_ip: \"WAN IP\",\n    wan_port: \"WAN Port\",\n    lan_ip: \"LAN IP\",\n    lan_port: \"LAN Port\",\n    protocol: \"Protocol\",\n    action: \"Action\",\n    edit: \"Edit\",\n    delete: \"Delete\",\n    delete_cf: \"Are you sure to delete this config?\",\n    yes: \"Yes\",\n    no: \"No\",\n    status: \"Status\",\n    enable: \"Enable\",\n    disable: \"Disable\",\n    error_fill: \"Please fill in!\",\n    select_proto: \"Select Protocol\",\n    ip: \"IP\",\n    port: \"Port\",\n    submit_system: \"Submit\",\n    loading: \"Loading...\",\n    success: \"Successfully!\",\n    fail: \"Fail, Nothing has been configured!\",\n    source_ip: \"Source IP\",\n    source_port: \"Source Port\",\n    dest_ip: \"Destination IP\",\n    dest_port: \"Destination Port\",\n    block: \"Block\",\n    permit: \"Permit\",\n    default_action: \"Select action\",\n    none: \"None\",\n    url_list: \"URL Filter List\",\n    ip_list: \"IP Filter List\",\n    help_name: 'The name of the alias may only consist of the characters \"a-z, A-Z, 0-9 and _\".',\n    static: 'Static',\n    dhcp: \"DHCP\",\n    config_wan_setting: \"Config WAN Settings\",\n    provider: \"Provider\",\n    provider_url: \"Provider URL\",\n    custom_url: \"Custom URL\",\n    hostname: \"Hostname\",\n    server: \"Server\",\n    client: \"Client\",\n    subnet: \"Subnet\",\n    type_access: \"Type Access\",\n    select_status: \"Select Status\",\n    upload: \"Upload\",\n    openvpn_configure: \"OpenVPN Configuration\",\n    openvpn_list: \"OpenVPN List\",\n    certificate_list: \"Certificate List\",\n    dest_network: \"Destination Network\",\n    interface: \"Interface\",\n    route_configure: \"Routes Configuration\",\n    route_list: \"Routes List\",\n    config_lan_setting: \"LAN Configuration\",\n    interface_name: \"Interface Name\",\n    macaddr: \"MAC Address\",\n    speed: \"Speed\",\n    enable_dhcpv4_server: \"Enable DHCPv4 Server\",\n    dhcp_range: \"DHCP Range\",\n    leasetime: \"Leasetime\",\n    enable_dhcpv6_server: \"Enable DHCPv6 Server\",\n    ipv6addr: \"IPv6 Address\",\n    start: \"Start\",\n    stop: \"Stop\",\n    primary: \"Primary\",\n    secondary: \"Secondary\",\n    ipv4_configure: \"IPv4 Configuration\",\n    ipv6_configure: \"IPv6 Configuration\",\n    expires: \"Expires\",\n    allocated: \"Allocated Address (DHCP)\",\n    vlan_configure: \"VLAN Configuration\",\n    local_time: \"Local Time\",\n    uptime: \"Uptime\",\n    wrong_confirm_password: \"The new password is not match!\",\n    wrong_current_password: \"Wrong current password!\",\n    change_password_ok: \"Password was changed successfuly!\",\n    upload_success: \"Upload firmware successful, waiting for upgrade process\",\n    invalid_firmware: \"Invalid firmware or Unknown error\",\n    upgrade_success: \"Upgrade successfully! Device will reboot\",\n    hostname_system: \"Domain or IP address\",\n    src_ip: \"Source IP address\",\n    ip_version: \"IP version\",\n    max_hops: \"Maximum of hops\",\n    max_pings: \"Maximum ping packets\",\n    seconds_between_pings: \"Time between ping packet (second)\",\n    fill_username: 'Please input your username!',\n    fill_password: 'Please input your password!',\n    ex: 'Username and password of this device are used to login to WebUI.',\n    timezone: 'Timezone',\n    restore: 'Restore',\n    factory_default: 'Factory Defaults',\n    help_reset: 'Click the following button to reset all configuration settings to their default values.',\n    cancel: 'Cancel',\n    title_reset: 'All setting will back to default, device will reboot.',\n    help_reboot: 'Click this button to reboot the device.',\n    title_reboot: 'Are you sure to reboot this device?',\n    title_shutdown: 'Are you sure to shutdown this device?',\n    shutdown: 'Shutdown',\n    enable_dhcpv4_relay: 'Enable DHCPv4 Relay',\n    enable_dhcpv6_relay: 'Enable DHCPv6 Relay',\n    error_dhcp: 'The DHCP relay must be disabled before enabling the DHCP Server or the opposite.',\n    iface:'Iface',\n    Type:'Type',\n    Ports:'Ports',\n    Port_could_not_be_larger_than_65535: 'Port could not be larger than 65535',\n    Error_Ip_address: 'Error Ip address',\n    White_space_and_special_characters_are_not_valid: 'White space and special characters are not valid',\n    Password_must_be_minimum_6_characters: 'Password must be minimum 6 characters',\n    Password_must_be_minimum_8_characters:'Password must be minimum 8 characters',\n    timeout: 'Timeout',\n    IGMP_List: 'IGMP List',\n    Please_wait_for_configuration: 'Please wait for configuration',\n    route_list_IPv4: 'Route List IPv4',\n    vlanid_could_not_be_larger_than_4094: 'Vlanid could not be larger than 4094',\n    enter_number: 'Enter Number',\n    White_space_and_special_characters_are_not_valid: 'White space and special characters are not valid',\n    Password_must_be_minimum_8_characters: 'Password must be minimum 8 characters',\n    wpa_passphrase: 'WPA Passphrase'\n};\n","/home/iam/Documents/network/src/components/antd/status/dashboard.tsx",["371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386"],[],"/*!\n  =========================================================\n  * Muse Ant Design Dashboard - v1.0.0\n  =========================================================\n  * Product Page: https://www.creative-tim.com/product/muse-ant-design-dashboard\n  * Copyright 2021 Creative Tim (https://www.creative-tim.com)\n  * Licensed under MIT (https://github.com/creativetimofficial/muse-ant-design-dashboard/blob/main/LICENSE.md)\n  * Coded by Creative Tim\n  =========================================================\n  * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n*/\nimport { useState } from \"react\";\nimport \"./test.css\"\n//import Grap from \"./line\"\nimport { useSelector } from 'react-redux'\nimport { sessionSelector } from 'redux/reducer/sessionSlice'\nimport { StatusOverview } from './status-overview'\nimport { NetworkStatistic, ClientsConnected } from './network-statistic'\nimport { useTranslation } from \"react-i18next\";\nimport \"../../../translations/i18n\";\n\nimport {\n  Row,\n  Col,\n  Card,\n  Button,\n  List,\n  Descriptions,\n  Avatar,\n  Radio,\n  Switch,\n  Upload,\n  message,\n  Typography,\n} from \"antd\";\n\nimport {\n  FacebookOutlined,\n  TwitterOutlined,\n  InstagramOutlined,\n  VerticalAlignTopOutlined,\n} from \"@ant-design/icons\";\n\nexport const Dashboard = (props: any) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <Row gutter={[24, 10]}>\n        <Col md={8}>\n          <Card >\n            <StatusOverview></StatusOverview>\n          </Card>\n        </Col>\n\n        <Col md={16}>\n          <Card title={t(\"wireless_clients\")} headStyle={{background:\"linear-gradient(45deg, #07117e, #07117e\",color: 'white'}} bodyStyle={{height: \"398px\"}}>\n            <div style={{ overflowX: 'auto' }}>\n              <ClientsConnected></ClientsConnected>\n            </div>\n          </Card>\n        </Col>\n      </Row>\n      <br></br>\n      <Row gutter={[24, 10]}>\n        <Col span={24} md={8}>\n          <Card title={t(\"wan_statistic\")} headStyle={{background:\"linear-gradient(45deg, #07117e, #07117e\",color: 'white'}} >\n            <NetworkStatistic name=\"wan\"></NetworkStatistic>\n          </Card>\n        </Col>\n\n        <Col md={8}>\n          <Card title={t(\"lan_statistic\")} headStyle={{background:\"linear-gradient(45deg, #07117e, #07117e\",color: 'white'}}>\n            <NetworkStatistic name=\"lan\"></NetworkStatistic>\n          </Card>\n        </Col>\n\n        <Col md={8}>\n          <Card title={t(\"wifi_statistic\")} headStyle={{background:\"linear-gradient(45deg, #07117e, #07117e\",color: 'white'}}>\n            <NetworkStatistic name=\"wifi\" ></NetworkStatistic>\n          </Card>\n        </Col>\n        \n      </Row>\n    </>\n  );\n}\n","/home/iam/Documents/network/src/components/antd/layout/index.tsx",["387","388","389","390","391","392","393"],[],"import React, { useState } from 'react'\nimport { Layout, Typography, Image, } from 'antd'\nimport { MainMenu } from '../main-menu'\nimport LancsnetIcon from '../../../assets/icon/LancsnetIcon'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { appStateActions, appStateSelector } from '../../../redux/reducer/appStateSlice'\nimport { LoginButton } from '../login-button'\nimport { ThemeSwitch } from '../theme-switch'\nimport { Outlet, Link } from \"react-router-dom\";\nimport { LocaleSwitch } from \"../../../translations/i18n\"\nimport { Session } from 'inspector'\nimport ReactLogo from '../../../lancs.jpg'\n\nconst { Header, Footer, Sider, Content } = Layout\n\nconst AntdLayout = (props: any) => {\n  const { children, ...restProps } = props\n  const { theme, sideBarCollapsed } = useSelector(appStateSelector)\n  const dispatch = useDispatch()\n  const [selectmenu, setselectmenu] = useState('')\n\n  const refreshData = async () => {\n    const mainmenu = sessionStorage.getItem('menu')\n    if (!mainmenu || mainmenu === \"\") {\n      setselectmenu(\"\")\n    } else {\n      setselectmenu(mainmenu)\n    }\n  }\n  React.useEffect(() => {\n    refreshData()\n  }, [])\n  // console.log('dad: ', selectmenu)\n  // window.location.reload();\n  return (\n    <Layout {...restProps}>\n      <Sider\n        theme=\"light\"\n        breakpoint=\"lg\"\n        collapsible\n        collapsedWidth={64}\n        defaultCollapsed={false}\n        onCollapse={(_collapsed) => {\n          dispatch(appStateActions.setSideBarCollapsed(_collapsed))\n        }}\n      >\n        <span>\n          {/* <LancsnetIcon\n            style={{ fontSize: 32, color: '#1890ff', margin: 16 }}\n          /> */}\n          <Image src={ReactLogo} width=\"4em\" preview={false} alt=\"lancsnet\"></Image>\n          {!sideBarCollapsed ? (\n            <span style={{\n              textAlign: 'center',\n              fontSize: 'large',\n              fontWeight: '600',\n              color: '#006af0',\n              // textTransform: 'uppercase',\n              // textShadow: \"1px 1px 0px #8268886e,1px 2px 0px #8268886e,1px 3px 0px #957dad,1px 4px 0px #957dad,1px 5px 0px #957dad,1px 6px 0px #826888,1px 10px 5px #826888,1px 15px 10px #826888,1px 20px 30px #826888,1px 25px 50px #826888\",\n            }}>Local Web</span>\n          ) : null}\n        </span>\n        <MainMenu setmenu={selectmenu} />\n      </Sider>\n      <Layout style={{ minHeight: '100vh' }}>\n        <Header\n          // theme={theme}\n          style={{ padding: 16, display: 'flex', alignItems: 'center',  background: \"linear-gradient(45deg, #07117e, #07117e\" }}\n        >\n          <div style={{ flex: 1 }} />\n          {/* <ThemeSwitch /> */}\n          <LocaleSwitch />\n        </Header>\n        <Content style={{ padding: 16, minHeight: '100vh' }}>\n          <Outlet />\n        </Content>\n        <Footer style={{ textAlign: 'center' }}>\n          {/* &copy; 2023&nbsp;<strong>Diem Tho</strong> */}\n        </Footer>\n      </Layout>\n    </Layout>\n  )\n}\n\nexport default AntdLayout\n","/home/iam/Documents/network/src/components/antd/network/mesh/mesh.tsx",["394","395","396","397","398","399","400","401","402","403","404","405","406","407","408"],[],"import { DeleteOutlined, EditOutlined } from '@ant-design/icons'\nimport { message as antdMessage, Form, Input, Button, message, Select, Switch, Checkbox, Card } from 'antd'\nimport { CheckboxChangeEvent } from 'antd/es/checkbox';\nimport React, { useRef, useState } from 'react'\nimport ubusApi from 'service/api/ubus-api';\nimport { useTranslation } from \"react-i18next\";\nimport \"../../../../translations/i18n\";\n\n\nexport const MeshTable = () => {\n    const [form] = Form.useForm()\n    let pattern = /^[a-zA-Z0-9_.]+$/\n    const { t } = useTranslation()\n    const [loading, setLoading] = React.useState(true)\n    setTimeout(() => {\n        setLoading(false)\n    }, 1000);\n    const loadPWD = async () => {\n        const result = await ubusApi.show_network_wireless()\n        const mode_mesh = await ubusApi.show_mesh_config()\n\n        if (mode_mesh['enabled_mode'] == \"controller\") {\n            form.setFieldsValue({ enabled: true, mode: \"controller\", ssid: result['values']['ssid'], key: result['values']['key'] })\n        } else if (mode_mesh['enabled_mode'] == \"agent\") {\n            form.setFieldsValue({ enabled: true, mode: \"agent\", ssid: result['values']['ssid'], key: result['values']['key'] })\n        } else {\n            form.setFieldsValue({ enabled: false, ssid: result['values']['ssid'], key: result['values']['key'] })\n        }\n    }\n    React.useEffect(() => { loadPWD() }, [])\n\n    const onFinish = async (values: any) => {\n        message.info(t('Please_wait_for_configuration'))\n        if (values.mode == \"controller\") {\n            const paramContro = await ubusApi.config_mesh_controller(values.enabled.toString(), values.ssid, values.key)\n            console.log(\"controller\", paramContro)\n        } else {\n            const paramAgent = await ubusApi.config_mesh_agent(values.enabled.toString())\n            console.log(\"agent\", paramAgent)\n        }\n        const key = 'updatable';\n        message.loading({ content: t('loading'), key });\n        setTimeout(() => {\n            message.success({ content: t('success'), key, duration: 2 });\n        }, 1000);\n        setTimeout(() => {\n            window.location.reload()\n        }, 1500);\n\n    }\n    const [value, setValue] = React.useState('')\n    const handleChange = (value: any) => setValue(value)\n    const [value1, setValue1] = React.useState('')\n    const handleChange1 = (value1: any) => setValue1(value1)\n    return (\n        <Form\n            form={form}\n            labelCol={{ span: 6 }}\n            wrapperCol={{ span: 16 }}\n            onFinish={onFinish}\n        >\n            <Card loading={loading}>\n                <Form.Item label={t(\"status\")} valuePropName=\"checked\" name=\"enabled\">\n                    <Switch onChange={handleChange1} />\n                </Form.Item>\n                <Form.Item\n                    noStyle\n                    shouldUpdate={(prevValues, currentValues) => prevValues.gender !== currentValues.gender}\n                >\n                    {\n                        ({ getFieldValue }) =>\n                            getFieldValue('enabled') ==\n                                true ? (\n                                <>\n                                    <Form.Item label={t(\"mode\")} name=\"mode\" rules={[{ required: true, message: \"\" }]}\n                                    >\n                                        <Select\n                                            defaultValue=\"Select Mode\"\n                                            onChange={handleChange}\n                                            options={[\n                                                {\n                                                    value: \"agent\",\n                                                    label: \"Agent\"\n                                                },\n                                                {\n                                                    value: \"controller\",\n                                                    label: \"Controller\"\n                                                },\n                                            ]}\n                                        ></Select>\n                                    </Form.Item>\n                                    <Form.Item\n                                        noStyle\n                                        shouldUpdate={(prevValues, currentValues) => prevValues.gender !== currentValues.gender}\n                                    >\n                                        {\n                                            ({ getFieldValue }) =>\n                                                getFieldValue('mode') ==\n                                                    \"agent\" ? (\n                                                    <>\n                                                        <Form.Item label={t(\"mesh_ssid\")} name=\"ssid\"\n                                                        >\n                                                            <Input disabled></Input>\n                                                        </Form.Item>\n                                                        <Form.Item label={t(\"wpa_passphrase\")} name=\"key\"\n                                                        >\n                                                            <Input.Password disabled></Input.Password>\n                                                        </Form.Item>\n                                                    </>\n                                                ) : (\n                                                    <>\n                                                        <Form.Item label={t(\"mesh_ssid\")} name=\"ssid\" \n                                                            rules={[\n                                                                { required: true, message: String(t(\"error_fill\")) },\n                                                                {\n                                                                    validator: (_, value) =>\n                                                                    pattern.test(value) ? Promise.resolve() : Promise.reject(t('White_space_and_special_characters_are_not_valid'))\n                                                                }\n                                                            ]}\n                                                        >\n                                                            <Input></Input>\n                                                        </Form.Item>\n                                                        <Form.Item label={t(\"wpa_passphrase\")} name=\"key\" rules={[{ required: true, min : 8, message: String(t(\"Password_must_be_minimum_8_characters\"))}]}\n                                                        >\n                                                            <Input.Password></Input.Password>\n                                                        </Form.Item>\n                                                    </>\n                                                )}\n                                    </Form.Item>\n                                </>\n                            ) : null}\n                </Form.Item>\n                <Form.Item wrapperCol={{ offset: 6, span: 16 }}>\n                    <Button\n                        type='primary'\n                        htmlType=\"submit\"\n                    >\n                        {t(\"submit\")}\n                    </Button>\n                </Form.Item>\n            </Card>\n        </Form>\n    )\n}\n","/home/iam/Documents/network/src/components/antd/network/mesh/mesh_topo.tsx",["409","410","411","412","413","414","415","416","417","418","419","420"],[],"import ubusApi from 'service/api/ubus-api'\nimport React, { Component, useReducer } from 'react';\nimport { message, Space, Table, Tag } from 'antd';\nimport { useTranslation } from \"react-i18next\";\nimport \"../../../../translations/i18n\";\nimport { render } from '@testing-library/react';\nimport { DecompositionTreeGraph, RadialTreeGraph } from '@ant-design/graphs';\nimport { t } from 'i18next';\nimport { escape } from 'querystring';\nexport const MeshTopo = () => {   \n    const [data, setData] = React.useState({ hits: [] });\n    const [data1, setData1] = React.useState();\n    React.useEffect(() => {\n        const fetchData = async () => {\n            const result1= await ubusApi.show_mesh_config()\n            setData1(result1.enabled_mode)\n            const result = await ubusApi.show_mesh_topology()\n            setData(result);\n        };\n        const interval = setInterval(() => {\n            fetchData();\n        }, 5000);\n        return () => clearInterval(interval);\n    },[]);\n    const config: any = {\n        data,\n        data1,\n        width: 1500,\n        height: 750,\n        behaviors: ['drag-canvas', 'zoom-canvas', 'drag-node'],\n        layout: {\n            type: 'indented',\n            direction: 'LR',\n            dropCap: false,\n            indent: 500,\n            getHeight: () => {\n                return 200;\n            },\n            getWidth: () => {   \n                return 500;\n            },\n        },\n        nodeCfg: {\n            autoWidth: true,\n            size: [150, 40],\n            title: {\n                containerStyle: {\n                    fill: '#0e4778',\n                },\n                style: (cfg: any) => {\n                    return {\n                        fill: cfg?.value?.title === '青年' ? 'yellow' : '#fff',\n                    };\n                },\n            },\n            items: {    \n                containerStyle: {\n                    fill: '#fff',\n                },\n                style: (cfg: any, group: any, type: any) => {\n                    const styles: any = {\n                        value: {\n                            fill: '#000',\n                        },\n                        text: {\n                            fill: '#000',\n                        },\n                        icon: {\n                            width: 20,\n                            height: 20,\n                        },\n                    };\n                    return styles[type];\n                },\n            },\n            nodeStateStyles: {\n                hover: {\n                    stroke: '#1890ff',\n                    lineWidth: 2,\n                },\n            },\n            style: {\n                radius: [5, 5, 5, 5],\n            },\n        },\n        markerCfg: (cfg: any) => {\n            const { children } = cfg;\n            return {\n                show: children?.length,\n            };\n        },\n    };\n    const config1: any = {}\n    if(data1 === \"controller\"){\n    return <DecompositionTreeGraph {...config} />;\n    }\n    else{\n        return <></>;\n    }\n}\nexport default MeshTopo;","/home/iam/Documents/network/src/components/antd/network/wireless/wireless.tsx",["421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439","440","441","442","443","444","445"],[],"import { Button, Col, Row, Space, Table, Typography, Modal, Input, Select, message, Form, Checkbox, Switch, Card } from 'antd'\nimport React, { useState, useRef } from 'react';\nimport ubusApi from 'service/api/ubus-api';\nimport { useTranslation } from \"react-i18next\";\nimport \"../../../../translations/i18n\";\n\nexport const Wireless = (props: any) => {\n    const { t } = useTranslation();\n    let pattern = /^[a-zA-Z0-9_.]+$/\n    const [status, setDisabled] = React.useState(\"\")\n    const [checked, setChecked] = React.useState(\"\")\n    const [encryption, setEncryption] = React.useState([])\n    const [pwd, setPWD] = React.useState(null)\n\n    const optionStatusGuest = useRef([\n        {\n            label: \"Enable\",\n            value: \"false\"\n        },\n        {\n            label: \"Disable\",\n            value: \"true\"\n        },\n    ]).current;\n\n    const optionGuestEncryption = useRef([\n        {\n            label: \"None\",\n            value: \"none\"\n        },\n        {\n            label: \"PSK2\",\n            value: \"psk2\"\n        },\n        {\n            label: \"PSK\",\n            value: \"psk\"\n        },\n    ]).current;\n\n    const [form] = Form.useForm()\n\n    const formItemLayout = {\n        labelCol: {\n            xs: { span: 24 },\n            sm: { span: 4 },\n        },\n        wrapperCol: {\n            xs: { span: 24 },\n            sm: { span: 16 },\n        },\n    }\n\n    const formItemLayoutWithOutLabel = {\n        wrapperCol: {\n            xs: { span: 24, offset: 0 },\n            sm: { span: 20, offset: 4 },\n        },\n    }\n\n    const optionUnit = useRef([\n        {\n            label: \"Kbit\",\n            value: \"kbit\"\n        },\n        {\n            label: \"Mbit\",\n            value: \"mbit\"\n        },\n    ]).current;\n\n    const refreshData = async () => {\n        const result = await ubusApi.show_network_wireless()\n        const result1 = await ubusApi.show_mesh_config()\n        const { disabled, encryption, ssid, key } = result.values\n        const { enabled_mode } = result1\n        if(enabled_mode === \"controller\" || enabled_mode === \"agent\"){\n            setChecked(\"enable\")\n        }\n        else{\n            setChecked(\"disable\")\n        }\n\n        if (disabled === \"0\") {\n            setDisabled(\"false\")\n        } else {\n            setDisabled(\"true\")\n        }\n\n        if (disabled === \"0\") {\n            form.setFieldsValue({ disabled: \"false\", ssid: ssid, encryption: encryption, key: key, checklimit: true })\n        } else {\n            form.setFieldsValue({ disabled: \"true\", ssid: ssid, encryption: encryption, key: key, checklimit: true })\n        }\n    }\n\n    React.useEffect(() => {\n        refreshData()\n    }, [])\n\n    const handleSubmit = async (values: any) => {\n        message.info(t('Please_wait_for_configuration'))\n        if (values.checklimit === true) {\n            const result = await ubusApi.config_network_wireless(values.disabled, values.ssid, values.encryption, values.key)\n        } else {\n            const result = await ubusApi.config_network_wireless(values.disabled, values.ssid, values.encryption, values.key)\n        }\n        const key = 'updatable';\n        message.loading({ content: t('loading'), key });\n        setTimeout(() => {\n            message.success({ content: t('success'), key, duration: 2 });\n        }, 1000);\n        setTimeout(() => {\n            window.location.reload()\n        }, 1500);\n    }\n\n    const [value, setValue] = React.useState('')\n    const handleChange = (value: any) => setValue(value)\n    const [value1, setValue1] = React.useState('')\n    const handleChange1 = (value: any) => setValue1(value)\n    const handleChangeStatus = (value: any) => setDisabled(value)\n    const [loading, setLoading] = React.useState(true)\n    setTimeout(() => {\n        setLoading(false)\n    }, 1000);\n    if (status == \"false\") {\n        if(checked == \"disable\"){\n            return (\n                <>\n                    <Form\n                        labelCol={{ span: 6 }}\n                        wrapperCol={{ span: 16 }}\n                        form={form} \n                        onFinish={handleSubmit}>\n                        <Card loading={loading}>\n                            <Form.Item name=\"disabled\"\n                                label={t(\"status\")} rules={[{ required: true, message:  String(t(\"error_fill\")) }]}\n                            >\n                                <Select\n                                    options={optionStatusGuest}\n                                    onChange={handleChangeStatus}\n                                />\n                            </Form.Item>\n                            <Form.Item name=\"ssid\"\n                                label={t(\"ssid_name\")}\n                                rules={[\n                                    { required: true, message:  String(t(\"error_fill\")) },\n                                    {\n                                        validator: (_, value) =>\n                                            pattern.test(value) ? Promise.resolve() : Promise.reject(t('White_space_and_special_characters_are_not_valid'))\n                                    }\n                                ]}\n                            >\n                                <Input></Input>\n                            </Form.Item>\n                            <Form.Item name=\"encryption\"\n                                label={t(\"encryption_type\")} rules={[{ required: true, message:  String(t(\"error_fill\")) }]}\n                            >\n                                <Select\n                                    defaultValue=\"Select Encryption\"\n                                    options={optionGuestEncryption}\n                                    onChange={handleChange1}\n                                />\n                            </Form.Item>\n                            <Form.Item\n                                noStyle\n                                shouldUpdate={(prevValues, currentValues) => prevValues.gender !== currentValues.gender}\n                            >\n                                {\n                                    ({ getFieldValue }) =>\n                                        getFieldValue('encryption') !=\n                                            \"none\" ? (\n                                            <Form.Item name=\"key\"\n                                                label={t(\"wpa_passphrase\")} rules={[{ required: true, min: 8, message: String(t(\"Password_must_be_minimum_8_characters\")) }]}\n                                            >\n                                                <Input.Password></Input.Password>\n                                            </Form.Item>\n                                        ) : null}\n                            </Form.Item>\n\n                            <Form.Item {...formItemLayoutWithOutLabel} wrapperCol={{ offset: 6, span: 16 }}>\n                                <Button\n                                    type='primary'\n                                    htmlType=\"submit\"\n                                >\n                                    {t(\"submit\")}\n                                </Button>\n                            </Form.Item>\n                        </Card>\n                    </Form>\n                </>\n            )\n        }\n        else{\n\n            return (\n                <>\n                    <Form\n                        labelCol={{ span: 6 }}\n                        wrapperCol={{ span: 16 }}\n                        form={form} \n                        onFinish={handleSubmit}>\n                        <Card loading={loading}>\n                            <Form.Item name=\"disabled\"\n                                label={t(\"status\")} rules={[{ required: true, message:  String(t(\"error_fill\")) }]}\n                            >\n                                <Select\n                                    options={optionStatusGuest}\n                                    onChange={handleChangeStatus}\n                                    disabled\n                                />\n                            </Form.Item>\n                            <Form.Item name=\"ssid\"\n                                label={t(\"ssid_name\")}\n                                rules={[\n                                    { required: true, message:  String(t(\"error_fill\")) },\n                                    {\n                                        validator: (_, value) =>\n                                            pattern.test(value) ? Promise.resolve() : Promise.reject('White space and special characters are not valid')\n                                    }\n                                ]}\n                            >\n                                <Input disabled></Input>\n                            </Form.Item>\n                            <Form.Item name=\"encryption\"\n                                label={t(\"encryption_type\")} rules={[{ required: true, message:  String(t(\"error_fill\")) }]}\n                            >\n                                <Select\n                                    defaultValue=\"Select Encryption\"\n                                    options={optionGuestEncryption}\n                                    onChange={handleChange1}\n                                    disabled\n                                />\n                            </Form.Item>\n                            <Form.Item\n                                noStyle\n                                shouldUpdate={(prevValues, currentValues) => prevValues.gender !== currentValues.gender}\n                            >\n                                {\n                                    ({ getFieldValue }) =>\n                                        getFieldValue('encryption') !=\n                                            \"none\" ? (\n                                            <Form.Item name=\"key\"\n                                                label={t(\"wpa_passphrase\")} rules={[{ required: true, min: 8, message: \"Password must be minimum 8 characters\" }]}\n                                            >\n                                                <Input.Password disabled ></Input.Password>\n                                            </Form.Item>\n                                        ) : null}\n                            </Form.Item>\n\n                            <Form.Item {...formItemLayoutWithOutLabel} wrapperCol={{ offset: 6, span: 16 }}>\n                                <Button\n                                    type='primary'\n                                    htmlType=\"submit\"\n                                >\n                                    {t(\"submit\")}\n                                </Button>\n                            </Form.Item>\n                        </Card>\n                    </Form>\n                </>\n            )\n        }\n    } \n    else {\n        return (\n            <>\n                <Form\n                    labelCol={{ span: 6 }}\n                    wrapperCol={{ span: 16 }}\n                    form={form} \n                    onFinish={handleSubmit}>\n                    <Form.Item name=\"disabled\"\n                        label={t(\"status\")}\n                    >\n                        <Select\n                            options={optionStatusGuest}\n                            onChange={handleChangeStatus}\n                        />\n                    </Form.Item>\n\n                    <Form.Item {...formItemLayoutWithOutLabel}>\n                        <Button\n                            type='primary'\n                            htmlType=\"submit\"\n                        >\n                            {t(\"submit\")}\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </>)\n    }\n}","/home/iam/Documents/network/src/components/antd/internet/wan/wan.tsx",["446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475"],[],"\nimport { Button, Col, Row, Space, Table, Typography, Modal, Input, Select, message, Form, Checkbox, Switch, Card , SelectProps} from 'antd'\nimport React, { useState, useRef } from 'react'\nimport ubusApi from '../../../../service/api/ubus-api'\nimport { useTranslation } from \"react-i18next\"\nimport \"../../../../translations/i18n\"\nimport { current } from '@reduxjs/toolkit'\n\nexport const WanSettings = (props: any) => {\n    const { t } = useTranslation()\n    let pattern = /^[a-zA-Z0-9_.]+$/\n    let patternIpv4 = /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/\n    let check1: any\n    let check2: any\n    const [form] = Form.useForm()\n    const [loading, setLoading] = React.useState(true)\n    setTimeout(() => {\n        setLoading(false)\n    }, 1000);\n    // const [protov4, setProtov4] = React.useState(\"\")\n    // const [protov6, setProtov6] = React.useState(\"\")\n    // const [ipaddrv4, setIpaddrv4] = React.useState(\"\")\n    // const [netmaskv4, setNetmaskv4] = React.useState(null)\n    // const [gtwv4, setGtwv4] = React.useState(null)\n    // const [ipaddrv6, setIpaddrv6] = React.useState(null)\n    // const [gtwv6, setGtwv6] = React.useState(null)\n\n    const optionStatusWan = useRef([\n        {\n            label: t('enable'),\n            value: \"enable\"\n        },\n        {\n            label: t('disable'),\n            value: \"disable\"\n        },\n    ]).current;\n\n    const optionProtoWanv4 = useRef([\n        {\n            label: t('none'),\n            value: \"none\"\n        },\n        {\n            label: \"DHCP\",\n            value: \"dhcp\"\n        },\n        {\n            label: \"Static\",\n            value: \"static\"\n        },\n        {\n            label: \"PPPOE\",\n            value: \"pppoe\"\n        },\n    ]).current;\n\n    // const optionProtoWanv6 = useRef([\n    //     {\n    //         value: \"none\",\n    //         label: t('none'),\n    //     },\n    //     {\n    //         value: \"dhcpv6\",\n    //         label: \"DHCP\",\n    //     },\n    //     {\n    //         value: \"static\",\n    //         label: \"Static\",\n    //     },\n    // ]).current;\n\n    const refreshData = async () => {\n        const result = await ubusApi.show_network_wan_congfig()\n        const { gateway, ipaddr, netmask, proto, username, password, timeout } = result['wan'][0]['values']\n        const { ip6addr, ip6gw } = result['wan_6'][0]['values']\n        const protov6  = result['wan_6'][0]['values']['proto']\n\n        //console.log(\"data: \",protov6)\n        if (proto == \"static\") {\n            if (ipaddr == null) {\n                // setProtov4(\"none\")\n                if (protov6 == \"static\") {\n                    if (ip6addr == null) {\n                        if (proto == \"pppoe\") {\n                            form.setFieldsValue({ protov4: \"pppoe\", protov6: \"none\", username: username, password: password, timeout: timeout })\n                        } else {\n                            // setProtov6(\"none\")\n                            form.setFieldsValue({ protov4: \"none\", protov6: \"none\" })\n                        }\n                    } else {\n                        // setProtov6(\"static\")\n                        // form.setFieldsValue({ gtwv4: gateway, ipaddrv4: ipaddr, netmaskv4: netmask, protov4: protov4, protov6: \"none\", ipaddrv6: ip6addr, gtwv6: ip6gw })\n                        form.setFieldsValue({ protov4: \"none\", protov6: \"static\", ipaddrv6: ip6addr, gtwv6: ip6gw })\n                    }\n                } else {\n                    // setProtov6(protov6)\n                    form.setFieldsValue({ protov4: \"none\", protov6: protov6 })\n                }\n            } else {\n                // setProtov4(proto)\n                if (protov6 == \"static\") {\n                    if (ip6addr == null) {\n                        // setProtov6(\"none\")\n                        if (proto == \"pppoe\") {\n                            form.setFieldsValue({ gtwv4: gateway, ipaddrv4: ipaddr, netmaskv4: netmask, protov4: \"pppoe\", username: username, password: password, timeout: timeout, protov6: \"none\" })\n                        }\n                        else {\n                            form.setFieldsValue({ gtwv4: gateway, ipaddrv4: ipaddr, netmaskv4: netmask, protov4: proto, protov6: \"none\" })\n                        }\n                        //form.setFieldsValue({ gtwv4: gateway, ipaddrv4: ipaddr, netmaskv4: netmask, protov4: proto, protov6: \"none\" })\n                    } else {\n                        if (proto == \"pppoe\") {\n                            form.setFieldsValue({ gtwv4: gateway, ipaddrv4: ipaddr, netmaskv4: netmask, protov4: \"pppoe\", username: username, password: password, timeout: timeout, protov6: \"static\", ipaddrv6: ip6addr, gtwv6: ip6gw })\n                        }\n                        else {\n                            // setProtov6(protov6)\n                            form.setFieldsValue({ gtwv4: gateway, ipaddrv4: ipaddr, netmaskv4: netmask, protov4: proto, protov6: \"static\", ipaddrv6: ip6addr, gtwv6: ip6gw })\n                        }\n                    }\n                } else {\n                    if (proto == \"pppoe\") {\n                        // setProtov6(protov6)\n                        form.setFieldsValue({ gtwv4: gateway, ipaddrv4: ipaddr, netmaskv4: netmask, protov4: \"pppoe\", username: username, password: password, timeout: timeout, protov6: protov6, ipaddrv6: ip6addr, gtwv6: ip6gw })\n                    } else {\n                        form.setFieldsValue({ gtwv4: gateway, ipaddrv4: ipaddr, netmaskv4: netmask, protov4: proto, protov6: protov6, ipaddrv6: ip6addr, gtwv6: ip6gw })\n                    }\n                }\n            }\n        } else {\n            // setProtov4(proto)\n            if (protov6 == \"static\") {\n                if (ip6addr == null) {\n                    // setProtov6(\"none\")\n                    if (proto == \"pppoe\") {\n                        form.setFieldsValue({ protov4: \"pppoe\", username: username, password: password, timeout: timeout, protov6: \"none\" })\n                    }\n                    form.setFieldsValue({ protov4: proto, username: username, password: password, timeout: timeout, protov6: \"none\" })\n                } else {\n                    // setProtov6(\"static\")\n                    // form.setFieldsValue({ gtwv4: gateway, ipaddrv4: ipaddr, netmaskv4: netmask, protov4: protov4, protov6: \"none\", ipaddrv6: ip6addr, gtwv6: ip6gw })\n                    if (proto == \"pppoe\") {\n                        form.setFieldsValue({ protov4: \"pppoe\", username: username, password: password, timeout: timeout, protov6: \"static\", ipaddrv6: ip6addr, gtwv6: ip6gw })\n                    } else {\n                        form.setFieldsValue({ protov4: proto, protov6: \"static\", ipaddrv6: ip6addr, gtwv6: ip6gw })\n                    }\n                }\n            } else {\n                // setProtov6(protov6)\n                if (proto == \"pppoe\") {\n                    form.setFieldsValue({ protov4: \"pppoe\", username: username, password: password, timeout: timeout, protov6: protov6 })\n                } else {\n                    form.setFieldsValue({ protov4: proto, protov6: protov6 })\n                }\n            }\n        }\n\n        // if (protov6 == \"static\") {\n        //     if (ip6addr == null) {\n        //         setProtov6(\"none\")\n        //     } else {\n        //         setProtov6(protov6)\n        //     }\n        // } else {\n        //     setProtov6(protov6)\n        // }\n\n    }\n    React.useEffect(() => { refreshData() }, [])\n\n    const formItemLayout = {\n        labelCol: {\n            xs: { span: 24 },\n            sm: { span: 4 },\n        },\n        wrapperCol: {\n            xs: { span: 24 },\n            sm: { span: 16 },\n        },\n    }\n\n    const formItemLayoutWithOutLabel = {\n        wrapperCol: {\n            xs: { span: 24, offset: 0 },\n            sm: { span: 20, offset: 4 },\n        },\n    }\n    // const refreshData = async () => {\n    // }\n    // React.useEffect(() => {\n    //     refreshData()\n    // }, [])\n    const handleSubmit = async (values: any) => {\n        message.info(t('Please_wait_for_configuration'))\n        // if (values.protov4 === \"none\") {\n        //     const result = await ubusApi.config_network_wan()\n        //     console.log(\"result: \", result)\n        // } else {\n        //     const result = await ubusApi.config_network_wan(values.disabled, values.ssid, values.encryption, values.key, null, null)\n        //     console.log(\"result: \", result)\n        // }\n        //const resultpppoe = await ubusApi.config_network_ppoe(values.protov4, values.username, values.password, values.timeout)\n        if (values.protov6 == \"DHCP\"){\n            values.protov6=\"dhcpv6\"\n        }\n\n        const result = await ubusApi.config_network_wan(values.protov4, values.username, values.password, values.timeout, values.ipaddrv4, values.netmaskv4, values.gtwv4, values.protov6, values.ipaddrv6, values.gtwv6)     \n        console.log(\"result: \", result)\n        values.protov6=\"\"\n        const key = 'updatable';\n        message.loading({ content: t('loading'), key });\n        setTimeout(() => {\n            message.success({ content: t('success'), key, duration: 2 });\n        }, 1000);\n        setTimeout(() => {\n            window.location.reload()\n        }, 1500);\n    }\n    const slectport: SelectProps['options'] = [];\n    for (let i = 10; i < 120; i++) {\n        slectport.push({\n            value: i,\n            label: i,\n        });\n    }\n    const [valuev4, setValuev4] = React.useState('')\n    const handleChangev4 = (value: any) => setValuev4(value)\n    const [valuev6, setValuev6] = React.useState('')\n    const handleChangev6 = (value: any) => setValuev6(value)\n    // console.log(\"valuev4: \", valuev4)\n\n    return (\n        // <>\n        <Form form={form}\n            labelCol={{ span: 6 }}\n            wrapperCol={{ span: 16 }}\n            onFinish={handleSubmit}>\n            <Space\n                direction=\"vertical\"\n                size=\"middle\"\n                style={{\n                    display: 'flex',\n                }}\n            >\n                <Card title=\"IPV4\" loading={loading}>\n                    <Form.Item name=\"protov4\" label={t('protocol')}\n                    >\n                        <Select\n                            onChange={handleChangev4}\n                            options={optionProtoWanv4}\n                        />\n                    </Form.Item>\n                    <Form.Item\n                        noStyle\n                        shouldUpdate={(prevValues, currentValues) => prevValues.gender !== currentValues.gender}\n                    >\n                        {\n                            ({ getFieldValue }) =>\n                                getFieldValue('protov4') ==\n                                    'pppoe' ? (\n                                    <>\n                                        <Form.Item name=\"username\"\n                                             label={t('username')} \n                                             rules={[\n                                                { required: true, message: String(t(\"error_fill\"))  },\n                                                {\n                                                    validator: (_, value) =>\n                                                        pattern.test(value) ? Promise.resolve() : Promise.reject(t('White_space_and_special_characters_are_not_valid'))\n                                                }\n                                            ]}\n                                        >\n                                            <Input allowClear></Input>\n                                        </Form.Item>\n                                        <Form.Item name=\"password\"\n                                            label={t('password')} rules={[{ required: true, min: 6, message: String(t(\"Password_must_be_minimum_6_characters\")) }]}\n                                        >\n                                            <Input.Password></Input.Password>\n                                        </Form.Item>\n                                        <Form.Item name=\"timeout\"\n                                            label={t('timeout')} \n                                        >  \n                                        <Input></Input>\n                                        </Form.Item>\n                                    </>\n                                ) : null\n                        }\n                    </Form.Item>\n                    <Form.Item\n                        noStyle\n                        shouldUpdate={(prevValues, currentValues) => prevValues.gender !== currentValues.gender}\n                    >\n                        {\n                            ({ getFieldValue }) =>\n                                getFieldValue('protov4') ==\n                                    'static' ? (\n                                    <>\n                                        <Form.Item name=\"ipaddrv4\"\n                                            label={t('ip')} \n                                            rules={[\n                                                { required: true, message: String(t(\"error_fill\")) },\n                                                {\n                                                    validator: (_, value) => {\n                                                      check1 = value.split(\".\")\n                                                      check2 = check1[check1.length - 1]\n                                                      return (Number(check2) < 256 && patternIpv4.test(value)) ? Promise.resolve() : Promise.reject(t('Error_Ip_address'))\n                                                    }\n                                                }\n                                            ]}\n                                        >\n                                            <Input allowClear ></Input>\n                                        </Form.Item>\n                                        <Form.Item name=\"netmaskv4\"\n                                            label=\"Netmask\"\n                                            rules={[\n                                                { required: true, message: String(t(\"error_fill\")) },\n                                                {\n                                                    validator: (_, value) => {\n                                                      check1 = value.split(\".\")\n                                                      check2 = check1[check1.length - 1]\n                                                      return (Number(check2) < 256 && patternIpv4.test(value)) ? Promise.resolve() : Promise.reject(t('Error_Ip_address'))\n                                                    }\n                                                }\n                                            ]}\n                                        >\n                                            <Input allowClear ></Input>\n                                        </Form.Item>\n                                        <Form.Item name=\"gtwv4\"\n                                            label=\"Gateway\"\n                                            rules={[\n                                                { required: true, message: String(t(\"error_fill\")) },\n                                                {\n                                                    validator: (_, value) => {\n                                                      check1 = value.split(\".\")\n                                                      check2 = check1[check1.length - 1]\n                                                      return (Number(check2) < 256 && patternIpv4.test(value)) ? Promise.resolve() : Promise.reject(t('Error_Ip_address'))\n                                                    }\n                                                }\n                                            ]}\n                                        >\n                                            <Input allowClear ></Input>\n                                        </Form.Item>\n                                    </>\n                                ) : null\n                        }\n                    </Form.Item>\n\n                </Card>\n                {/* <Card title=\"IPV6\" loading={loading}>\n                    <Form.Item name=\"protov6\"\n                        label={t('protocol')}\n                    >\n                        <Select\n                            onChange={handleChangev6}\n                            options={optionProtoWanv6}\n                        />\n                    </Form.Item>\n                    <Form.Item\n                        noStyle\n                        shouldUpdate={(prevValues, currentValues) => prevValues.gender !== currentValues.gender}\n                    >\n                        {\n                            ({ getFieldValue }) =>\n                                getFieldValue('protov6') ==\n                                    'static' ? (\n                                    <>\n                                        <Form.Item name=\"ipaddrv6\"\n                                            label={t('ip')}\n                                        >\n                                            <Input></Input>\n                                        </Form.Item>\n                                        <Form.Item name=\"gtwv6\"\n                                            label=\"Gateway\"\n                                        >\n                                            <Input></Input>\n                                        </Form.Item>\n                                    </>\n                                ) : null}\n                    </Form.Item>\n                </Card> */}\n                <Form.Item wrapperCol={{ offset: 12, span: 16 }}>\n                    <Button\n                        type='primary'\n                        htmlType=\"submit\"\n                        style={{ backgroundColor: '#0033FF', color: 'white' }}\n                    >\n                        {t('submit')}\n                    </Button>\n                </Form.Item>\n            </Space>\n        </Form>\n        // </>\n    )\n}\n\n","/home/iam/Documents/network/src/components/antd/network/lan/edit.tsx",["476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496","497","498","499","500"],[],"import { message as antdMessage, Form, Input, Button, message, Select, Card, Switch, Space, Col } from 'antd'\nimport { constants } from 'buffer'\nimport { access } from 'fs'\nimport React from 'react'\nimport { Await } from 'react-router-dom'\nimport ubusApi from 'service/api/ubus-api'\nimport { useTranslation } from \"react-i18next\"\nimport \"../../../../translations/i18n\"\n\nexport const LanEdit = (props: any) => {\n    const { t } = useTranslation()\n    let pattern = /^[a-zA-Z0-9_.]+$/\n    let patternIpv4 = /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/\n    let check1: any\n    let check2: any\n    const abc = t('error_fill')\n    const { item, onDone, optionsParentInterface } = props\n    const [form] = Form.useForm()\n    const [loading, setLoading] = React.useState(true)\n    setTimeout(() => {\n        setLoading(false)\n    }, 1000);\n    const refreshData = async () => {\n        const uciLan = await ubusApi.show_network_lan_config()\n        const uciDhcp = await ubusApi.show_network_dhcp_config()\n        //const relay = await ubusApi.show_network_relay()\n\n        const { ifname, ipaddr, proto, netmask, ip6addr } = uciLan?.values || \"\"\n        const { leasetime } = uciDhcp?.values || \"\"\n        const { start, limit, dhcpv4, dhcpv6 } = uciDhcp?.values || \"\"\n        //const { modev4, modev6 } = relay\n        const stop: number = Number.parseInt(start) + Number.parseInt(limit)\n        if (ip6addr) {\n            form.setFieldsValue({\n                ifname: ifname, protov4: proto, ipaddrv4: ipaddr, netmaskv4: netmask, protov6: proto, ipaddrv6: ip6addr\n            })\n        } else {\n            form.setFieldsValue({\n                ifname: ifname, protov4: proto, ipaddrv4: ipaddr, netmaskv4: netmask, protov6: \"none\"\n            })\n        }\n        form.setFieldsValue({ start: start, stop: stop, leasetime: leasetime, dhcpv4_status: (dhcpv4 === \"server\") ? true : false, dhcpv6_status: (dhcpv6 === \"server\") ? true : false })\n    }\n\n    React.useEffect(() => {\n        refreshData()\n    }, [])                                \n    const [state, setState] = React.useState<boolean>()\n    const onChangeIP = async (props: any) => {\n        const form_ip = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/\n        if (props.target.defaultValue.match(form_ip)) {\n            return true;\n        }\n    }\n    const onFinish = async (values: any) => {\n        const { dhcpv4_status, dhcpv6_status, dhcpv4_relay, dhcpv6_relay } = values\n        if (dhcpv4_relay === dhcpv4_status && dhcpv4_status === true || dhcpv6_relay === dhcpv6_status && dhcpv6_status === true) {\n            message.error(t('error_dhcp'))\n        } else {\n            const key = 'updatable';\n            message.loading({ content: t('loading'), key });\n            const config_ip = await ubusApi.config_network_lan(values.ifname, values.protov4, values.ipaddrv4, values.netmaskv4, values.protov6, values.ipaddrv6)\n            if (dhcpv4_status === true || dhcpv6_status === true) {\n                const config_dhcp = await ubusApi.config_network_dhcp((dhcpv4_status === true) ? \"enable\" : \"disable\", (dhcpv6_status === true) ? \"enable\" : \"disable\", values.start, values.end, values.leasetime)\n            } else {\n                const config_dhcp = await ubusApi.config_network_dhcp(\"disable\", \"disable\", values.start, values.end, values.leasetime)\n            }\n            \n            // if (dhcpv4_relay === true || dhcpv6_relay === true) {\n            //     const config_relay = await ubusApi.config_network_relay((dhcpv4_relay === true) ? \"enable\" : \"disable\", (dhcpv6_relay === true) ? \"enable\" : \"disable\")\n            // } else {\n            //     const config_relay = await ubusApi.config_network_relay(\"disable\", \"disable\")\n            // }\n            message.success({ content: t('success'), key, duration: 2 });\n            setTimeout(() => {\n                window.location.reload()\n            }, 1500);\n        }\n    }\n    const [value, setValue] = React.useState('')\n    const handleChange = (value: any) => setValue(value)\n    const [value1, setValue1] = React.useState('')\n    const handleChange1 = (value1: any) => setValue1(value1)\n    const [value2, setValue2] = React.useState('')\n    const handleChange2 = (value2: any) => setValue2(value2)\n\n    return (\n        // <Card title={t('config_lan_setting')} type='inner' hoverable headStyle={{background:\"linear-gradient(109.6deg, rgb(44, 83, 131), rgb(44, 83, 131) 18.9%, rgb(68, 124, 143), rgb(44, 83, 131) 91.1%, rgb(44, 83, 131))\",color: 'white'}}>\n            <Form\n                form={form}\n                labelCol={{ span: 6 }}\n                wrapperCol={{ span: 16 }}\n                onFinish={onFinish}\n            >\n                <Space\n                    direction=\"vertical\"\n                    size=\"middle\"\n                    style={{\n                        display: 'flex',\n                    }}\n                >\n                    {/* <Col> */}\n                    <Card title={t('ipv4_configure')} loading={loading} headStyle={{ background: \"#eeeeee\", }}>\n                        <Form.Item label={t('interface_name')} name=\"ifname\"\n                        >\n                            <Input></Input>\n                        </Form.Item>\n                        <Form.Item label={t('protocol')} name=\"protov4\"\n                        >\n                            <Select\n                                defaultValue={t('select_proto')}\n                                onChange={handleChange1}\n                                options={[\n                                    {\n                                        value: \"none\",\n                                        label: t('none')\n                                    },\n                                    {\n                                        value: \"dhcp\",\n                                        label: \"DHCP\"\n                                    },\n                                    {\n                                        value: \"static\",\n                                        label: \"Static\"\n                                    },\n                                ]}\n                            ></Select>\n                        </Form.Item>\n                        <Form.Item label={t('macaddr')} name=\"macaddr\" hidden\n                        >\n                            <Input ></Input>\n                        </Form.Item>\n                        <Form.Item\n                            noStyle\n                            shouldUpdate={(prevValues, currentValues) => prevValues.gender !== currentValues.gender}\n                        >\n                            {\n                                ({ getFieldValue }) =>\n                                    getFieldValue('protov4') ==\n                                        \"static\" ? (\n                                        <>\n                                            <Form.Item label={t('ip')} name=\"ipaddrv4\"\n                                                rules={[\n                                                    { required: true, message: abc },\n                                                    {\n                                                    validator: (_, value) => {\n                                                        check1 = value.split(\".\")\n                                                        check2 = check1[check1.length - 1]\n                                                        return (Number(check2) < 256 && patternIpv4.test(value)) ? Promise.resolve() : Promise.reject(t('Error_Ip_address'))\n                                                    }\n                                                    }\n                                                ]}\n                                            >\n                                                <Input allowClear></Input>\n                                            </Form.Item>\n                                            <Form.Item label=\"Sub Netmask\" name=\"netmaskv4\"\n                                                     rules={[\n                                                        { required: true, message: abc },\n                                                        {\n                                                        validator: (_, value) => {\n                                                            check1 = value.split(\".\")\n                                                            check2 = check1[check1.length - 1]\n                                                            return (Number(check2) < 256 && patternIpv4.test(value)) ? Promise.resolve() : Promise.reject(t('Error_Ip_address'))\n                                                        }\n                                                        }\n                                                    ]}                               \n                                            >\n                                                <Input allowClear></Input>\n                                            </Form.Item>\n                                            <Form.Item label=\"MTU\" name=\"mtu\" hidden\n                                            >\n                                                <Input></Input>\n                                            </Form.Item>\n                                            <Form.Item label={t('speed')} name=\"speed\" hidden\n                                            >\n                                                <Input></Input>\n                                            </Form.Item>\n                                        </>\n                                    ) : null}\n                        </Form.Item>\n                        <Form.Item label={t('enable_dhcpv4_server')} name=\"dhcpv4_status\" valuePropName=\"checked\"\n                        style={{ height: \"auto\", maxWidth: \"200%\", width: \"768px\" }}\n                        >\n                            {/* <Switch onChange={handleChange}></Switch> */}\n                            <Switch\n                                onChange={() =>setState(!state)}\n                                checked={state}\n                            />\n                        </Form.Item>\n                        <Form.Item\n                            noStyle\n                            shouldUpdate={(prevValues, currentValues) => prevValues.gender !== currentValues.gender}\n                        >\n                            {\n                                ({ getFieldValue }) =>\n                                    getFieldValue('dhcpv4_status') ==\n                                        true ? (\n                                        <>\n                                            <Form.Item style={{ height: 30 }} label={t('dhcp_range')}>\n                                                <Input.Group compact>\n                                                    <Form.Item name=\"start\">\n                                                        <Input\n                                                            type='number'\n                                                            style={{\n                                                                width: 100,\n                                                                textAlign: 'center',\n                                                            }}\n                                                            placeholder=\"start\"\n                                                        />\n                                                    </Form.Item>\n                                                    <Input\n                                                        className=\"site-input-split\"\n                                                        style={{\n                                                            width: 30,\n                                                            borderLeft: 0,\n                                                            borderRight: 0,\n                                                            pointerEvents: 'none',\n                                                        }}\n                                                        placeholder=\"~\"\n                                                        disabled\n                                                    />\n                                                    <Form.Item name=\"stop\">\n                                                        <Input\n                                                            className=\"site-input-right\"\n                                                            style={{\n                                                                width: 100,\n                                                                textAlign: 'center',\n                                                            }}\n                                                            placeholder=\"Stop\"\n                                                        />\n                                                    </Form.Item>\n                                                </Input.Group>\n                                            </Form.Item>\n                                            <Form.Item label={t('leasetime')} name=\"leasetime\"\n                                            >\n                                                <Input></Input>\n                                            </Form.Item>\n                                        </>\n                                    ) : null}\n                        </Form.Item>\n                    </Card>\n                    {/* <Card title={t('ipv6_configure')} loading={loading} headStyle={{ background: \"#eeeeee\", }} >\n                        <Form.Item label={t('protocol')} name=\"protov6\"\n                        >\n                            <Select\n                                onChange={handleChange2}\n                                options={[\n                                    {\n                                        value: \"none\",\n                                        label: t('none')\n                                    },\n                                    {\n                                        value: \"static\",\n                                        label: \"Static\"\n                                    },\n                                    {\n                                        value: \"dhcp\",\n                                        label: \"DHCP\"\n                                    },\n\n                                ]}\n                            ></Select>\n                        </Form.Item> */}\n                        {/* <Form.Item\n                            noStyle\n                            shouldUpdate={(prevValues, currentValues) => prevValues.gender !== currentValues.gender}\n                        >\n                            {\n                                ({ getFieldValue }) =>\n                                    getFieldValue('protov6') ==\n                                        \"static\" ? (\n                                        <Form.Item label={t('ipv6addr')} name=\"ipaddrv6\"\n                                        >\n                                            <Input></Input>\n                                        </Form.Item>\n                                    ) : null}\n                        </Form.Item>\n                        <Form.Item label={t('enable_dhcpv6_server')} name=\"dhcpv6_status\" valuePropName=\"checked\"\n                        style={{ height: \"auto\", maxWidth: \"200%\", width: \"768px\" }}\n                        >\n                            <Switch></Switch>\n                        </Form.Item> */}\n\n                    {/* </Card> */}\n                    <Form.Item\n                        wrapperCol={{ offset: 12, span: 16 }}\n                    >\n                        <Button\n                            type='primary'\n                            htmlType=\"submit\"\n                        >\n                            {t('submit')}\n                        </Button>\n                    </Form.Item>\n                </Space>\n            </Form>\n\n        // </Card>\n\n    )\n}\n","/home/iam/Documents/network/src/components/antd/network/lan/table.tsx",["501","502","503","504","505","506","507","508"],[],"import { DeleteOutlined, EditOutlined } from '@ant-design/icons'\nimport { Table, Space, Button, Popconfirm } from 'antd'\nimport {\n    formatTimeSecond,\n    humanReadableSize as hrsize,\n  } from '../../../../service/utils/data-format'\nimport React from 'react'\nimport { useTranslation } from \"react-i18next\"\nimport \"../../../../translations/i18n\"\n\nexport const LanTable = (props: any) => {\n    const { onEditItem, onDeleteItem, data1 } = props\n    // console.log(data1)\n    const { t } = useTranslation()\n    const confirmDeleteGroup = async (group: any) => {\n        return onDeleteItem(group)\n    }\n    const columns = [\n\n        { title: t('ip'), key: 'ipaddr', dataIndex: 'ipaddr' },\n        { title: t('hostname'), key: 'hostname',\n        render: (_: string, record: any) => {\n            if (record.hostname == undefined) {\n                const cert =  \"unknown\"\n                return <Space>\n                    {cert}\n                </Space>\n            } else {\n                return (\n                    <Space>\n                        {record.hostname}\n                    </Space>\n                )\n            }\n        },\n        },\n        { title: t('macaddr'), key: 'macaddr', dataIndex: 'macaddr' },\n        { title: t('expires'), key: 'expires', \n        render: (_: string, record: any) => {\n            if (record.expires) {\n                const cert =  formatTimeSecond(record.expires)\n                return <Space>\n                    {cert}\n                </Space>\n            } else {\n                return (\n                    <Space>\n                    </Space>\n                )\n            }\n        },},\n    ]\n\n    if (!data1) {\n        return (\n            <Table columns={columns} dataSource={data1} loading style={{ minWidth: 400 }} />\n        )\n    } else {\n        return (\n            <Table columns={columns} dataSource={data1} style={{ minWidth: 400 }} />\n        )\n    }\n}\n","/home/iam/Documents/network/src/components/antd/internet/router/table.tsx",["509","510","511","512","513","514","515"],[],"import { DeleteOutlined, EditOutlined } from '@ant-design/icons'\nimport { Table, Space, Button, Popconfirm, message } from 'antd'\nimport React from 'react'\nimport ubusApi from 'service/api/ubus-api'\nimport { useTranslation } from \"react-i18next\"\nimport \"../../../../translations/i18n\"\n\nexport const Router2Table = (props: any) => {\n  const { onEditItem, onDeleteItem, tableData, haha } = props\n  const { t } = useTranslation()\n  const abc = t('edit')\n  const def = t('delete')\n  const confirmDeleteGroup = async (group: any) => {\n    const { target, nexthop, metric, device ,id} = group\n    const deleteRoute = await ubusApi.config_network_static(\"del\", id, target, nexthop, metric, device)\n    const key = 'updatable';\n    message.loading({ content: t('loading'), key });\n    setTimeout(() => {\n      message.success({ content: t('success'), key, duration: 2 });\n    }, 1000);\n    setTimeout(() => {\n      window.location.reload()\n    }, 1500);\n    return onDeleteItem(group)\n  }\n  const columns = [\n    { title: t('dest_network'), key: 'target', dataIndex: 'target' }, \n    { title: 'GateWay', key: 'nexthop', dataIndex: 'nexthop' },\n    { title: 'Metric', key: 'metric', dataIndex: 'metric' },\n    { title: t('device'), key: 'device', dataIndex: 'device' },\n    {\n      title: t('action'),\n      key: 'action',\n      render: (_: string, record: any) => {\n          if (record.admin_id <= 0) {\n              return null\n          }\n          return (\n              <Space>\n                  <Button icon={<EditOutlined />} title={abc} onClick={() => onEditItem(record)} />\n                  <Popconfirm\n                      placement=\"top\"\n                      title={t('delete_cf')}\n                      onConfirm={() => confirmDeleteGroup(record)}\n                      okText={t('yes')}\n                      cancelText={t('no')}\n                  >\n                      <Button icon={<DeleteOutlined />} danger type=\"primary\" title={def} />\n                  </Popconfirm>\n              </Space>\n          )\n      },\n  },\n  ]\n  if (!haha) {\n    return (\n      <Table columns={columns} dataSource={haha} loading style={{ minWidth: 400 }} />\n    )\n  } else {\n    return (\n      <Table columns={columns} dataSource={haha} style={{ minWidth: 400 }} />\n    )\n  }\n}\n\nexport const RouterTable = (props: any) => {\n  const { onEditItem, onDeleteItem, tableData, hihi } = props\n  const { t } = useTranslation()\n  const abc = t('edit')\n  const def = t('delete')\n  const columns = [\n    { title: t('dest_network'), key: 'destination', dataIndex: 'destination' }, \n    { title: 'GateWay', key: 'gateway', dataIndex: 'gateway' },\n    { title: 'Netmask', key: 'genmask', dataIndex: 'genmask' },\n    { title: t('Flags'), key: 'flags', dataIndex: 'flags' },\n    { title: 'Metric', key: 'metric', dataIndex: 'metric' },\n    { title: 'Ref', key: 'ref', dataIndex: 'ref' },\n    { title: 'Use', key: 'use', dataIndex: 'use' },\n    { title: t('device'), key: 'iface', dataIndex: 'iface' },\n  ]\n  if (!hihi) {\n    return (\n      <Table columns={columns} dataSource={hihi} loading style={{ minWidth: 400 }} />\n    )\n  } else {\n    return (\n      <Table columns={columns} dataSource={hihi} style={{ minWidth: 400 }} />\n    )\n  }\n}\n","/home/iam/Documents/network/src/components/antd/system/rsfactory/form.tsx",["516"],[],"import { Button, Modal, Card, Col, Space } from 'antd'\nimport React from 'react';\nimport ubusApi from '../../../../service/api/ubus-api'\nimport { useTranslation } from \"react-i18next\";\nimport \"../../../../translations/i18n\";\n\nexport const FactorySystem = (props: any) => {\n    const { t } = useTranslation();\n\n    const [showModal, setShowModal] = React.useState(false)\n\n    const onShowModal = (group: any) => {\n        setShowModal(true)\n    }\n\n    const onModalCancel = () => {\n        setShowModal(false)\n    }\n    const onModalOk = () => {\n        setShowModal(false)\n    }\n\n    const onFinish = async () => {\n        const reboot = await ubusApi.config_system_rsfactory()\n        setShowModal(false)\n    }\n\n    const onConfirm = () => {\n        if (!showModal) {\n            return null\n        }\n        return (\n            <Modal width={500} open={true} onCancel={onModalCancel} onOk={onModalOk} footer={null}>\n                <Col md={23}>\n                    <Card title={t('title_reset')} type=\"inner\" headStyle={{ background: \"#faad14\"}}>\n                        <Space size='large' >\n                            <Button onClick={onModalCancel} >\n                                {t(\"cancel\")}\n                            </Button>\n                            <Button type=\"primary\" danger onClick={onFinish} >\n                                {t(\"factory_reset\")}\n                            </Button>\n                        </Space>\n                    </Card>\n                </Col>\n            </Modal>\n        )\n    }\n    return (\n        <Card title={t(\"factory_default\")} type=\"inner\" headStyle={{  background: \"linear-gradient(45deg, #07117e, #07117e\", color: 'white' }}>\n            <Space\n                direction=\"vertical\"\n                size=\"middle\"\n                style={{\n                    display: 'flex',\n                }}\n            >\n                <span>{t(\"help_reset\")}</span>\n                {onConfirm()}\n                <Button type=\"primary\" danger onClick={onShowModal} >\n                    {t(\"restore\")}\n                </Button>\n            </Space>\n        </Card>\n    )\n}\n","/home/iam/Documents/network/src/components/antd/internet/router/edit.tsx",["517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533"],[],"import { message as antdMessage, Form, Input, Button, message, Select, InputNumber } from 'antd'\nimport React from 'react'\nimport ubusApi from 'service/api/ubus-api'\nimport { useTranslation } from \"react-i18next\"\nimport \"../../../../translations/i18n\"\n\n\nexport const RouterEdit = (props: any) => {\n    const {t} = useTranslation()\n    let pattern = /^[a-zA-Z0-9_.]+$/\n    let patternIpv4 = /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/\n    let check1: any\n    let check2: any\n    const abc = t('error_fill')\n    const { item,data32, onDone, route_wan,route_lan } = props\n    const [form] = Form.useForm()\n    const refreshData = async () => {\n        if (item) {\n            const { target, nexthop, metric, device, id} = item\n            form.setFieldsValue({\n                 target, nexthop, metric, device, id:id, network:target.split(\"/\")[0],subnet:target.split(\"/\")[1] \n            })\n        }\n    }\n    //console.log(\"\",route_wan)\n    React.useEffect(() => {\n        refreshData()\n    }, [])\n    const refreshPage = ()=>{\n        window.location.reload()\n    }\n    var ip2long = function(ip:any){\n        var components;\n    \n        if(components = ip.match(/^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$/))\n        {\n            var iplong = 0;\n            var power  = 1;\n            for(var i=4; i>=1; i-=1)\n            {\n                iplong += power * parseInt(components[i]);\n                power  *= 256;\n            }\n            return iplong;\n        }\n        else return -1;\n    };\n    \n    var inSubNet = function(ip:any, subnet:any)\n    {   \n        var mask, base_ip, long_ip = ip2long(ip);\n        if( (mask = subnet.match(/^(.*?)\\/(\\d{1,2})$/)) && ((base_ip=ip2long(mask[1])) >= 0) )\n        {\n            var freedom = Math.pow(2, 32 - parseInt(mask[2]));\n            return (long_ip > base_ip) && (long_ip < base_ip + freedom - 1);\n        }\n        else return false;\n    };\n    \n    const onFinish = async (values: any) => {\n        if(inSubNet(values.nexthop,route_wan ) == false && values.device == \"br-wan\" || inSubNet(values.nexthop, route_lan ) == false && values.device == \"br-lan\" ){\n            message.error(t('The_gateway_address_does_not_lie_within_one_of_the_chosen_interface_subnets'))\n        }\n        else{\n            if (values.id == null) {\n                const network_conf = values.network + \"/\" + values.subnet\n                const param = await ubusApi.config_network_static(\"add\", \"\", network_conf, values.nexthop, values.metric, values.device)\n                const key = 'updatable';\n                message.loading({ content: t('loading'), key });\n                setTimeout(() => {\n                    message.success({ content: t('success'), key, duration: 2 });\n                }, 1000);\n                setTimeout(() => {\n                    window.location.reload()\n                }, 1500);\n            }\n            else {\n\n                const network_conf = values.network + \"/\" + values.subnet\n                const param = await ubusApi.config_network_static(\"add\", values.id, network_conf, values.nexthop, values.metric, values.device)\n                const key = 'updatable';\n                message.loading({ content: t('loading'), key });\n                setTimeout(() => {\n                    message.success({ content: t('success'), key, duration: 2 });\n                }, 1000);\n                setTimeout(() => {\n                    window.location.reload()\n                }, 1500);\n            }\n        }\n    }\n\n    const [value, setValue] = React.useState('')\n    const handleChange = (value: any) => {\n        setValue(value)\n    }\n\n    return (\n        <Form\n            form={form}\n            labelCol={{ span: 6 }}\n            wrapperCol={{ span: 16 }}\n            onFinish={onFinish}\n        >\n            <Form.Item label=\"id\" name=\"id\"  hidden\n            >\n                <Input></Input>\n            </Form.Item>\n            \n            <Form.Item label=\"Gateway\" name=\"nexthop\"\n                rules={[\n                    { required: true, message: String(t(\"error_fill\")) },\n                    {    \n                    validator: (_, value, callback) => {\n                        if(value=== undefined){\n                            callback();\n                        }\n                        else{\n                        check1 = value.split(\".\")\n                        check2 = check1[check1.length - 1]\n                        return Number(check2) < 256 && patternIpv4.test(value) ? Promise.resolve() : Promise.reject(t('Error_Ip_address'))\n                        }\n                    }\n                    }\n                ]}\n            >\n                <Input ></Input>\n            </Form.Item>\n            <Form.Item label=\"Metric\" name=\"metric\"\n            >\n                <InputNumber style={{ width: '100%' }} placeholder='10' ></InputNumber>\n            </Form.Item>\n            \n            <Form.Item label={t('interface')} name=\"device\" rules={[{ required: true, message: String(t(\"error_fill\")) }]}\n            >\n                <Select\n                    options={[\n                        {\n                            value: 0,\n                            label: t('none')\n                        },\n                        {\n                            label: \"WAN\",\n                            value: \"br-wan\"\n                        },\n                        {\n                            label: \"LAN\",\n                            value: \"br-lan\"\n                        },\n                    ]}\n                ></Select>\n            </Form.Item>\n            <Form.Item label={t('dest_network')}\n            >\n                <Input.Group compact>\n                    <Form.Item name=\"network\" style={{ width: \"70% \" }}\n                        rules={[\n                            { required: true, message: String(t(\"error_fill\")) },\n                            {    \n                            validator: (_, value, callback) => {\n                                if(value=== undefined){\n                                    callback();\n                                }\n                                else{\n                                check1 = value.split(\".\")\n                                check2 = check1[check1.length - 1]\n                                return Number(check2) < 256 && patternIpv4.test(value) ? Promise.resolve() : Promise.reject(t('Error_Ip_address'))\n                                }\n                            }\n                            }\n                        ]}\n                    >\n                        <Input allowClear placeholder='Ex:192.168.1.1'></Input>\n                    </Form.Item>\n                    <Input\n                        style={{\n                            width: \"10%\",\n                            textAlign: 'center',\n                            pointerEvents: 'none',\n                        }}\n                        placeholder=\"/\"\n                        disabled\n                    />\n                    <Form.Item name=\"subnet\" style={{ width: \"20%\" }}\n                        rules={[\n                            { required: true, message: String(t(\"error_fill\")) },\n                        ]}\n                    >\n                        <Select\n                            onChange={handleChange}\n                            value={value}\n                            options={data32}\n                        ></Select>\n                    </Form.Item>\n                </Input.Group>\n            </Form.Item>\n            <Form.Item wrapperCol={{ offset: 6, span: 16 }}>\n                <Button\n                    type='primary'\n                    htmlType=\"submit\"\n                >\n                    {t('submit')}\n                </Button>\n            </Form.Item>\n\n        </Form>\n    )\n}\n","/home/iam/Documents/network/src/components/antd/system/upfirmware/upload.tsx",["534","535","536","537"],[],"\nimport { message as antdMessage, Form, Button, message, Upload, Card } from 'antd'\n\nimport axios from \"axios\"\nimport ubusApi from 'service/api/ubus-api'\nimport { UploadOutlined } from '@ant-design/icons';\nimport React from 'react';\n\nimport { useTranslation } from \"react-i18next\";\nimport \"../../../../translations/i18n\";\n  \nexport const UploadFirmware = (props: any) => {\n    const { t } = useTranslation();\n    const [form] = Form.useForm()\n    const [do_upgrade, setDoUpgrade] = React.useState(false)\n\n    let tokenString = sessionStorage.getItem('token');\n\n    const URL = \"/cgi-bin/luci-upload\"\n\n    const uploadFile = async (values: any) => {\n    \n        const data = new FormData();\n        values.token = tokenString;\n        data.append(\"sessionid\", values.token)\n        data.append(\"filename\", \"/tmp/firmware.bin\")\n        data.append(\"filedata\", values.imageFile.file.originFileObj)\n        axios.post(URL, data, {\n            headers: {\n                \"Content-Type\": \"multipart/form-data\"\n            }\n        }).then(response => {\n            message.success(t(\"upload_success\"));\n            doUpgrade()\n        }).catch(error => {            \n            message.error(t(\"fail\"));\n        })\n    }\n\n    const doUpgrade = async () => {\n        let result = await ubusApi.config_system_update()\n\n        const { code } = result\n        console.log('upgrade', code)\n\n        const key = 'updatable';\n        antdMessage.loading({ content: t(\"loading\"), key });\n        setTimeout(() => {\n            if (code == 1 || code == 2) \n            antdMessage.error({ content: t(\"invalid_firmware\"), key, duration: 2 });\n            else \n                antdMessage.success({ content: t(\"upgrade_success\"), key, duration: 2 });\n        }, 5000);\n    }\n\n    return (\n        <Card title={t(\"update_firmware\")} type=\"inner\" headStyle={{ background: \"linear-gradient(45deg, #07117e, #07117e\",color: 'white'}}>\n        <Form\n            form={form}\n            labelCol={{ span: 10 }}\n            wrapperCol={{ span: 24 }}\n            onFinish={uploadFile}\n        >\n\n            <Form.Item label={t(\"choose_firmware\")} name=\"imageFile\">\n                <Upload maxCount={1} {...props}>\n                    <Button icon={<UploadOutlined />} onClick={uploadFile}>{t(\"upload\")}</Button>\n                </Upload>\n\n            </Form.Item>\n            <Form.Item wrapperCol={{ offset: 10, span: 24 }}>\n                <Button type='primary' htmlType=\"submit\">\n                    {t(\"update\")}\n                </Button>\n            </Form.Item>\n        </Form>\n        </Card>\n    )\n}\n","/home/iam/Documents/network/src/components/antd/system/ping/form.tsx",["538","539","540"],[],"\nimport { Form, Input, Button, Select, SelectProps } from 'antd'\nimport React from 'react'\nimport ubusApi from 'service/api/ubus-api'\nimport { Alert, Spin, Result } from 'antd';\n\nimport { useTranslation } from \"react-i18next\";\nimport \"../../../../translations/i18n\";\n\nconst formItemLayout = {\n    labelCol: {\n        xs: { span: 24 },\n        sm: { span: 8 },\n    },\n    wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 },\n    },\n}\n\nexport const PingSystem = (props: any) => {\n    let patternIpv4 = /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/\n    let check1: any\n    let check2: any\n    const { item, value } = props\n    const [hostname, setValue] = React.useState(\"\");\n    const [data, setData] = React.useState(\"\");\n    const [loading, setLoading] = React.useState(false);\n    const { t } = useTranslation();\n\n    const [form] = Form.useForm()\n    const refreshData = async () => {\n        if (item) {\n            const { name, vid, dev, } = item\n            form.setFieldsValue({\n                name, mode: value, interface: dev, vid\n            })\n        }\n    }\n    React.useEffect(() => {\n        refreshData()\n    }, [])\n\n    const onFinish = async (values: any) => {\n        setLoading(true)\n        const param = {\n            hostname: values.hostname, version: values.version, source: values.source,\n            max: values.max, second: values.second,\n            ttl: values.ttl,\n        }\n        const result = await ubusApi.config_system_ping(param)\n        setLoading(false)\n        console.log(result)\n        setData(result.output)\n    }\n\n    const options: SelectProps['options'] = [];\n    const ttl: SelectProps['options'] = [];\n\n    for (let i = 1; i < 11; i++) {\n        options.push({\n            value: i,\n            label: i,\n        });\n    }\n\n    for (let i = 1; i < 255; i++) {\n        ttl.push({\n            value: i,\n            label: i,\n        });\n    }\n\n    return (\n        <>\n            <Form\n                form={form}\n                labelCol={{ span: 6 }}\n                wrapperCol={{ span: 10 }}\n                onFinish={onFinish}\n            >\n                <Form.Item {...formItemLayout} label={t(\"hostname_system\")} name=\"hostname\" rules={[{ required: true, message: 'Please input hostname!' }]}\n                >\n                    <Input allowClear style={{ width: '40%' }} />\n                </Form.Item>\n                <Form.Item {...formItemLayout} label={t(\"ip_version\")} name=\"version\"\n                >\n                    <Select\n                        style={{ width: '40%' }}\n                        defaultValue='IPv4'\n                        options={[\n                            {\n                                value: '4',\n                                label: 'IPv4'\n                            },\n                            {\n                                value: '6',\n                                label: 'IPv6'\n                            },\n                        ]}\n                    ></Select>\n                </Form.Item>\n                <Form.Item {...formItemLayout} label={t(\"src_ip\")} name=\"source\"\n                    rules={[\n                        { required: true, message: String(t(\"error_fill\")) },\n                        {\n                            validator: (_, value, callback) => {\n                                if (value === undefined) {\n                                    callback();\n                                }\n                                else {\n                                    check1 = value.split(\".\")\n                                    check2 = check1[check1.length - 1]\n                                    return Number(check2) < 256 && patternIpv4.test(value) ? Promise.resolve() : Promise.reject(t('Error_Ip_address'))\n                                }\n                            }\n                        }\n                    ]}\n                >\n                    <Input style={{ width: '40%' }} ></Input>\n                </Form.Item>\n                <Form.Item {...formItemLayout} label=\"TTL\" name=\"ttl\"\n                >\n                    <Select\n                        style={{ width: '40%' }}\n                        showSearch\n                        defaultValue='255'\n                        placeholder=\"Select TTL\"\n                        options={ttl}\n                    />\n                </Form.Item>\n                <Form.Item {...formItemLayout} label={t(\"max_pings\")} name=\"max\"\n                >\n                    <Select\n                        style={{ width: '40%' }}\n                        defaultValue='5'\n                        options={options}\n                    ></Select>\n                </Form.Item>\n\n                <Form.Item {...formItemLayout} label={t(\"seconds_between_pings\")} name=\"second\"\n                >\n                    <Select\n                        style={{ width: '40%' }}\n                        defaultValue='1'\n                        options={options}\n                    ></Select>\n                </Form.Item>\n                <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n                    <Button\n                        type='primary'\n                        htmlType=\"submit\"\n                    >\n                        {t(\"submit_system\")}\n                    </Button>\n                </Form.Item>\n                <div>\n                    <Result style={{ whiteSpace: 'pre-wrap' }} >\n                        <Spin spinning={loading}>\n                            <Alert\n                                message={data}\n                            />\n                        </Spin>\n                    </Result>\n                </div>\n            </Form>\n        </>\n    )\n}\n","/home/iam/Documents/network/src/components/antd/system/traceroute/form.tsx",["541","542","543"],[],"\nimport { Form, Input, Button, Select, SelectProps } from 'antd'\nimport React from 'react'\nimport ubusApi from 'service/api/ubus-api'\nimport { Alert, Spin, Result } from 'antd';\n\nimport { useTranslation } from \"react-i18next\";\nimport \"../../../../translations/i18n\";\n\nconst formItemLayout = {\n    labelCol: {\n        xs: { span: 24 },\n        sm: { span: 8 },\n    },\n    wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 },\n    },\n}\n\nexport const TraceRoute = (props: any) => {\n    let patternIpv4 = /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/\n    let check1: any\n    let check2: any\n    const { item, value } = props\n    const [hostname, setValue] = React.useState(\"\");\n    const [data, setData] = React.useState(\"\");\n    const [loading, setLoading] = React.useState(false);\n    const { t } = useTranslation();\n\n    const [form] = Form.useForm()\n    const refreshData = async () => {\n        if (item) {\n            const { name, vid, dev, } = item\n            form.setFieldsValue({\n                name, mode: value, interface: dev, vid\n            })\n        }\n    }\n    React.useEffect(() => {\n        refreshData()\n    }, [])\n\n    const onFinish = async (values: any) => {\n        setLoading(true)\n        const param = {\n            hostname: values.hostname, version: values.version, source: values.source,\n            max: values.max, second: values.second,\n            ttl: values.ttl,\n        }\n        const result = await ubusApi.config_system_traceroute(param)\n        setLoading(false)\n        console.log(result)\n        setData(result.output)\n    }\n\n    const options: SelectProps['options'] = [];\n    const ttl: SelectProps['options'] = [];\n\n    for (let i = 1; i < 11; i++) {\n        options.push({\n            value: i,\n            label: i,\n        });\n    }\n\n    for (let i = 1; i < 255; i++) {\n        ttl.push({\n            value: i,\n            label: i,\n        });\n    }\n\n    return (\n        <>\n            <Form\n                form={form}\n                labelCol={{ span: 6 }}\n                wrapperCol={{ span: 10 }}\n                onFinish={onFinish}\n            >\n                <Form.Item {...formItemLayout} label={t(\"hostname_system\")} name=\"hostname\" rules={[{ required: true, message: 'Please input hostname!' }]}\n                >\n                    <Input allowClear style={{ width: '40%' }} />\n                </Form.Item>\n                <Form.Item {...formItemLayout} label={t(\"ip_version\")} name=\"version\"\n                >\n                    <Select\n                        style={{ width: '40%' }}\n                        defaultValue='IPv4'\n                        options={[\n                            {\n                                value: '4',\n                                label: 'IPv4'\n                            },\n                            {\n                                value: '6',\n                                label: 'IPv6'\n                            },\n                        ]}\n                    ></Select>\n                </Form.Item>\n                <Form.Item {...formItemLayout} label={t(\"src_ip\")} name=\"source\"\n                    rules={[\n                        { required: true, message: String(t(\"error_fill\")) },\n                        {\n                            validator: (_, value, callback) => {\n                                if (value === undefined) {\n                                    callback();\n                                }\n                                else {\n                                    check1 = value.split(\".\")\n                                    check2 = check1[check1.length - 1]\n                                    return Number(check2) < 256 && patternIpv4.test(value) ? Promise.resolve() : Promise.reject(t('Error_Ip_address'))\n                                }\n                            }\n                        }\n                    ]}\n                >\n                    <Input style={{ width: '40%' }} ></Input>\n                </Form.Item>\n                <Form.Item {...formItemLayout} label=\"TTL\" name=\"ttl\"\n                >\n                    <Select\n                        style={{ width: '40%' }}\n                        showSearch\n                        defaultValue='255'\n                        placeholder=\"Select TTL\"\n                        options={ttl}\n                    />\n                </Form.Item>\n                <Form.Item {...formItemLayout} label={t(\"max_hops\")} name=\"max\"\n                >\n                    <Select\n                        style={{ width: '40%' }}\n                        defaultValue='3'\n                        options={options}\n                    ></Select>\n                </Form.Item>\n                <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n                    <Button\n                        type='primary'\n                        htmlType=\"submit\"\n                    >\n                        {t(\"submit_system\")}\n                    </Button>\n                </Form.Item>\n                <div>\n                    <Result style={{ whiteSpace: 'pre-wrap' }} >\n                        <Spin spinning={loading}>\n                            <Alert\n                                message={data}\n                            />\n                        </Spin>\n                    </Result>\n                </div>\n            </Form>\n        </>\n    )\n}\n","/home/iam/Documents/network/src/components/antd/system/settings/form.tsx",["544","545","546","547"],[],"import React from 'react'\nimport ubusApi from '../../../../service/api/ubus-api'\nimport { Button, Form, Input, Row, Card, Col, Select, message as antdMessage } from 'antd'\nimport { useTranslation } from \"react-i18next\";\nimport \"../../../../translations/i18n\";\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    lg: { span: 4 },\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    lg: { span: 16 },\n  },\n}\nconst formItemLayoutWithOutLabel = {\n  wrapperCol: {\n    xs: { span: 24, offset: 0 },\n    sm: { span: 16, offset: 4 },\n  },\n}\n\nconst timezoneSelect = [\n  {value:\"GMT0\",label:\"Africa/GMT0\"},\n  {value:\"GMT0\",label:\"America/GMT0\"},\n  {value:\"GMT0\",label:\"Atlantic/GMT0\"},\n  {value:\"GMT0\",label:\"Etc/GMT0\"},\n  {value:\"EAT-3\",label:\"Africa/EAT-3\"},\n  {value:\"EAT-3\",label:\"Indian/EAT-3\"},\n  {value:\"CET-1\",label:\"Africa/CET-1\"},\n  {value:\"WAT-1\",label:\"Africa/WAT-1\"},\n  {value:\"CAT-2\",label:\"Africa/CAT-2\"},\n  {value:\"EET-2\",label:\"Africa/EET-2\"},\n  {value:\"EET-2\",label:\"Europe/EET-2\"},\n  {value:\"<+01>-1\",label:\"Africa/<+01>-1\"},\n  {value:\"<+01>-1\",label:\"Etc/<+01>-1\"},\n  {value:\"CET-1CEST,M3.5.0,M10.5.0/3\",label:\"Africa/CET-1CEST,M3.5.0,M10.5.0/3\"},\n  {value:\"CET-1CEST,M3.5.0,M10.5.0/3\",label:\"Arctic/CET-1CEST,M3.5.0,M10.5.0/3\"},\n  {value:\"CET-1CEST,M3.5.0,M10.5.0/3\",label:\"Europe/CET-1CEST,M3.5.0,M10.5.0/3\"},\n  {value:\"SAST-2\",label:\"Africa/SAST-2\"},\n  {value:\"HST10HDT,M3.2.0,M11.1.0\",label:\"America/HST10HDT,M3.2.0,M11.1.0\"},\n  {value:\"AKST9AKDT,M3.2.0,M11.1.0\",label:\"America/AKST9AKDT,M3.2.0,M11.1.0\"},\n  {value:\"AST4\",label:\"America/AST4\"},\n  {value:\"<-03>3\",label:\"America/<-03>3\"},\n  {value:\"<-03>3\",label:\"Antarctica/<-03>3\"},\n  {value:\"<-03>3\",label:\"Atlantic/<-03>3\"},\n  {value:\"<-03>3\",label:\"Etc/<-03>3\"},\n  {value:\"<-04>4<-03>,M10.1.0/0,M3.4.0/0\",label:\"America/<-04>4<-03>,M10.1.0/0,M3.4.0/0\"},\n  {value:\"EST5\",label:\"America/EST5\"},\n  {value:\"CST6CDT,M4.1.0,M10.5.0\",label:\"America/CST6CDT,M4.1.0,M10.5.0\"},\n  {value:\"CST6\",label:\"America/CST6\"},\n  {value:\"<-04>4\",label:\"America/<-04>4\"},\n  {value:\"<-04>4\",label:\"Etc/<-04>4\"},\n  {value:\"<-05>5\",label:\"America/<-05>5\"},\n  {value:\"<-05>5\",label:\"Etc/<-05>5\"},\n  {value:\"MST7MDT,M3.2.0,M11.1.0\",label:\"America/MST7MDT,M3.2.0,M11.1.0\"},\n  {value:\"CST6CDT,M3.2.0,M11.1.0\",label:\"America/CST6CDT,M3.2.0,M11.1.0\"},\n  {value:\"MST7MDT,M4.1.0,M10.5.0\",label:\"America/MST7MDT,M4.1.0,M10.5.0\"},\n  {value:\"MST7\",label:\"America/MST7\"},\n  {value:\"PST8PDT,M3.2.0,M11.1.0\",label:\"America/PST8PDT,M3.2.0,M11.1.0\"},\n  {value:\"EST5EDT,M3.2.0,M11.1.0\",label:\"America/EST5EDT,M3.2.0,M11.1.0\"},\n  {value:\"AST4ADT,M3.2.0,M11.1.0\",label:\"America/AST4ADT,M3.2.0,M11.1.0\"},\n  {value:\"AST4ADT,M3.2.0,M11.1.0\",label:\"Atlantic/AST4ADT,M3.2.0,M11.1.0\"},\n  {value:\"<-03>3<-02>,M3.5.0/-2,M10.5.0/-1\",label:\"America/<-03>3<-02>,M3.5.0/-2,M10.5.0/-1\"},\n  {value:\"CST5CDT,M3.2.0/0,M11.1.0/1\",label:\"America/CST5CDT,M3.2.0/0,M11.1.0/1\"},\n  {value:\"<-03>3<-02>,M3.2.0,M11.1.0\",label:\"America/<-03>3<-02>,M3.2.0,M11.1.0\"},\n  {value:\"<-02>2\",label:\"America/<-02>2\"},\n  {value:\"<-02>2\",label:\"Atlantic/<-02>2\"},\n  {value:\"<-02>2\",label:\"Etc/<-02>2\"},\n  {value:\"<-04>4<-03>,M9.1.6/24,M4.1.6/24\",label:\"America/<-04>4<-03>,M9.1.6/24,M4.1.6/24\"},\n  {value:\"<-01>1<+00>,M3.5.0/0,M10.5.0/1\",label:\"America/<-01>1<+00>,M3.5.0/0,M10.5.0/1\"},\n  {value:\"<-01>1<+00>,M3.5.0/0,M10.5.0/1\",label:\"Atlantic/<-01>1<+00>,M3.5.0/0,M10.5.0/1\"},\n  {value:\"NST3:30NDT,M3.2.0,M11.1.0\",label:\"America/NST3:30NDT,M3.2.0,M11.1.0\"},\n  {value:\"<+08>-8\",label:\"Antarctica/<+08>-8\"},\n  {value:\"<+08>-8\",label:\"Asia/<+08>-8\"},\n  {value:\"<+08>-8\",label:\"Etc/<+08>-8\"},\n  {value:\"<+07>-7\",label:\"Antarctica/<+07>-7\"},\n  {value:\"<+07>-7\",label:\"Asia/<+07>-7\"},\n  {value:\"<+07>-7\",label:\"Etc/<+07>-7\"},\n  {value:\"<+07>-7\",label:\"Indian/<+07>-7\"},\n  {value:\"<+10>-10\",label:\"Antarctica/<+10>-10\"},\n  {value:\"<+10>-10\",label:\"Asia/<+10>-10\"},\n  {value:\"<+10>-10\",label:\"Etc/<+10>-10\"},\n  {value:\"<+10>-10\",label:\"Pacific/<+10>-10\"},\n  {value:\"<+11>-11\",label:\"Antarctica/<+11>-11\"},\n  {value:\"<+11>-11\",label:\"Asia/<+11>-11\"},\n  {value:\"<+11>-11\",label:\"Etc/<+11>-11\"},\n  {value:\"<+11>-11\",label:\"Pacific/<+11>-11\"},\n  {value:\"<+05>-5\",label:\"Antarctica/<+05>-5\"},\n  {value:\"<+05>-5\",label:\"Asia/<+05>-5\"},\n  {value:\"<+05>-5\",label:\"Etc/<+05>-5\"},\n  {value:\"<+05>-5\",label:\"Indian/<+05>-5\"},\n  {value:\"NZST-12NZDT,M9.5.0,M4.1.0/3\",label:\"Antarctica/NZST-12NZDT,M9.5.0,M4.1.0/3\"},\n  {value:\"NZST-12NZDT,M9.5.0,M4.1.0/3\",label:\"Pacific/NZST-12NZDT,M9.5.0,M4.1.0/3\"},\n  {value:\"<+03>-3\",label:\"Antarctica/<+03>-3\"},\n  {value:\"<+03>-3\",label:\"Asia/<+03>-3\"},\n  {value:\"<+03>-3\",label:\"Etc/<+03>-3\"},\n  {value:\"<+03>-3\",label:\"Europe/<+03>-3\"},\n  {value:\"<+00>0<+02>-2,M3.5.0/1,M10.5.0/3\",label:\"Antarctica/<+00>0<+02>-2,M3.5.0/1,M10.5.0/3\"},\n  {value:\"<+06>-6\",label:\"Antarctica/<+06>-6\"},\n  {value:\"<+06>-6\",label:\"Asia/<+06>-6\"},\n  {value:\"<+06>-6\",label:\"Etc/<+06>-6\"},\n  {value:\"<+06>-6\",label:\"Indian/<+06>-6\"},\n  {value:\"EET-2EEST,M3.5.4/24,M10.5.5/1\",label:\"Asia/EET-2EEST,M3.5.4/24,M10.5.5/1\"},\n  {value:\"<+12>-12\",label:\"Asia/<+12>-12\"},\n  {value:\"<+12>-12\",label:\"Etc/<+12>-12\"},\n  {value:\"<+12>-12\",label:\"Pacific/<+12>-12\"},\n  {value:\"<+04>-4\",label:\"Asia/<+04>-4\"},\n  {value:\"<+04>-4\",label:\"Etc/<+04>-4\"},\n  {value:\"<+04>-4\",label:\"Europe/<+04>-4\"},\n  {value:\"<+04>-4\",label:\"Indian/<+04>-4\"},\n  {value:\"EET-2EEST,M3.5.0/0,M10.5.0/0\",label:\"Asia/EET-2EEST,M3.5.0/0,M10.5.0/0\"},\n  {value:\"<+09>-9\",label:\"Asia/<+09>-9\"},\n  {value:\"<+09>-9\",label:\"Etc/<+09>-9\"},\n  {value:\"<+09>-9\",label:\"Pacific/<+09>-9\"},\n  {value:\"<+0530>-5:30\",label:\"Asia/<+0530>-5:30\"},\n  {value:\"EET-2EEST,M3.5.5/0,M10.5.5/0\",label:\"Asia/EET-2EEST,M3.5.5/0,M10.5.5/0\"},\n  {value:\"EET-2EEST,M3.5.0/3,M10.5.0/4\",label:\"Asia/EET-2EEST,M3.5.0/3,M10.5.0/4\"},\n  {value:\"EET-2EEST,M3.5.0/3,M10.5.0/4\",label:\"Europe/EET-2EEST,M3.5.0/3,M10.5.0/4\"},\n  {value:\"EET-2EEST,M3.5.5/0,M10.5.6/1\",label:\"Asia/EET-2EEST,M3.5.5/0,M10.5.6/1\"},\n  {value:\"HKT-8\",label:\"Asia/HKT-8\"},\n  {value:\"WIB-7\",label:\"Asia/WIB-7\"},\n  {value:\"WIT-9\",label:\"Asia/WIT-9\"},\n  {value:\"IST-2IDT,M3.4.4/26,M10.5.0\",label:\"Asia/IST-2IDT,M3.4.4/26,M10.5.0\"},\n  {value:\"<+0430>-4:30\",label:\"Asia/<+0430>-4:30\"},\n  {value:\"PKT-5\",label:\"Asia/PKT-5\"},\n  {value:\"<+0545>-5:45\",label:\"Asia/<+0545>-5:45\"},\n  {value:\"IST-5:30\",label:\"Asia/IST-5:30\"},\n  {value:\"CST-8\",label:\"Asia/CST-8\"},\n  {value:\"WITA-8\",label:\"Asia/WITA-8\"},\n  {value:\"PST-8\",label:\"Asia/PST-8\"},\n  {value:\"KST-9\",label:\"Asia/KST-9\"},\n  {value:\"<+0330>-3:30<+0430>,J79/24,J263/24\",label:\"Asia/<+0330>-3:30<+0430>,J79/24,J263/24\"},\n  {value:\"JST-9\",label:\"Asia/JST-9\"},\n  {value:\"<+0630>-6:30\",label:\"Asia/<+0630>-6:30\"},\n  {value:\"<+0630>-6:30\",label:\"Indian/<+0630>-6:30\"},\n  {value:\"WET0WEST,M3.5.0/1,M10.5.0\",label:\"Atlantic/WET0WEST,M3.5.0/1,M10.5.0\"},\n  {value:\"WET0WEST,M3.5.0/1,M10.5.0\",label:\"Europe/WET0WEST,M3.5.0/1,M10.5.0\"},\n  {value:\"<-01>1\",label:\"Atlantic/<-01>1\"},\n  {value:\"<-01>1\",label:\"Etc/<-01>1\"},\n  {value:\"ACST-9:30ACDT,M10.1.0,M4.1.0/3\",label:\"Australia/ACST-9:30ACDT,M10.1.0,M4.1.0/3\"},\n  {value:\"AEST-10\",label:\"Australia/AEST-10\"},\n  {value:\"AEST-10AEDT,M10.1.0,M4.1.0/3\",label:\"Australia/AEST-10AEDT,M10.1.0,M4.1.0/3\"},\n  {value:\"ACST-9:30\",label:\"Australia/ACST-9:30\"},\n  {value:\"<+0845>-8:45\",label:\"Australia/<+0845>-8:45\"},\n  {value:\"<+1030>-10:30<+11>-11,M10.1.0,M4.1.0\",label:\"Australia/<+1030>-10:30<+11>-11,M10.1.0,M4.1.0\"},\n  {value:\"AWST-8\",label:\"Australia/AWST-8\"},\n  {value:\"<-10>10\",label:\"Etc/<-10>10\"},\n  {value:\"<-10>10\",label:\"Pacific/<-10>10\"},\n  {value:\"<-11>11\",label:\"Etc/<-11>11\"},\n  {value:\"<-11>11\",label:\"Pacific/<-11>11\"},\n  {value:\"<-12>12\",label:\"Etc/<-12>12\"},\n  {value:\"<-06>6\",label:\"Etc/<-06>6\"},\n  {value:\"<-06>6\",label:\"Pacific/<-06>6\"},\n  {value:\"<-07>7\",label:\"Etc/<-07>7\"},\n  {value:\"<-08>8\",label:\"Etc/<-08>8\"},\n  {value:\"<-08>8\",label:\"Pacific/<-08>8\"},\n  {value:\"<-09>9\",label:\"Etc/<-09>9\"},\n  {value:\"<-09>9\",label:\"Pacific/<-09>9\"},\n  {value:\"<+13>-13\",label:\"Etc/<+13>-13\"},\n  {value:\"<+13>-13\",label:\"Pacific/<+13>-13\"},\n  {value:\"<+14>-14\",label:\"Etc/<+14>-14\"},\n  {value:\"<+14>-14\",label:\"Pacific/<+14>-14\"},\n  {value:\"<+02>-2\",label:\"Etc/<+02>-2\"},\n  {value:\"EET-2EEST,M3.5.0,M10.5.0/3\",label:\"Europe/EET-2EEST,M3.5.0,M10.5.0/3\"},\n  {value:\"IST-1GMT0,M10.5.0,M3.5.0/1\",label:\"Europe/IST-1GMT0,M10.5.0,M3.5.0/1\"},\n  {value:\"GMT0BST,M3.5.0/1,M10.5.0\",label:\"Europe/GMT0BST,M3.5.0/1,M10.5.0\"},\n  {value:\"MSK-3\",label:\"Europe/MSK-3\"},\n  {value:\"<+13>-13<+14>,M9.5.0/3,M4.1.0/4\",label:\"Pacific/<+13>-13<+14>,M9.5.0/3,M4.1.0/4\"},\n  {value:\"<+1245>-12:45<+1345>,M9.5.0/2:45,M4.1.0/3:45\",label:\"Pacific/<+1245>-12:45<+1345>,M9.5.0/2:45,M4.1.0/3:45\"},\n  {value:\"<-06>6<-05>,M9.1.6/22,M4.1.6/22\",label:\"Pacific/<-06>6<-05>,M9.1.6/22,M4.1.6/22\"},\n  {value:\"<+12>-12<+13>,M11.1.0,M1.2.2/123\",label:\"Pacific/<+12>-12<+13>,M11.1.0,M1.2.2/123\"},\n  {value:\"ChST-10\",label:\"Pacific/ChST-10\"},\n  {value:\"HST10\",label:\"Pacific/HST10\"},\n  {value:\"<-0930>9:30\",label:\"Pacific/<-0930>9:30\"},\n  {value:\"SST11\",label:\"Pacific/SST11\"}\n]\n\nexport const SettingsSystem = () => {\n  const [hostname, setHostname] = React.useState(null)\n  const [timezone, setTimezone] = React.useState(null)\n\n  const loadConfig = async () => {\n    const result = await ubusApi.uciGet('system', '@system[0]', '')\n\n    const  hostname  = result.sections[0]?.hostname || \"\"\n    const  timezone  = result.sections[0]?.timezone || \"\"\n\n    setHostname(hostname)\n    setTimezone(timezone)\n  }\n  \n  React.useEffect(() => { loadConfig() }, [])\n\n  return (\n    <ConfigSystem\n      hostname={hostname}\n      timezone={timezone}\n    ></ConfigSystem>\n  )\n}\n\nexport const ConfigSystem = (props: any) => {\n  const { hostname, timezone } = props\n  const [form] = Form.useForm()\n  const { t } = useTranslation();\n\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 8 },\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 16 },\n    },\n  }\n\n  const formItemLayoutWithOutLabel = {\n    wrapperCol: {\n      xs: { span: 24, offset: 0 },\n      sm: { span: 20, offset: 4 },\n    },\n  }\n\n  form.setFieldsValue({ hostname: hostname, timezone: timezone })\n\n  const handleSubmit = async (values: any) => {\n    const { hostname, timezone } = values\n    const key = 'updatable';\n    antdMessage.loading({ content: t(\"loading\"), key });\n    setTimeout(() => {\n        antdMessage.success({ content: t(\"success\"), key, duration: 2 });\n    }, 1000);\n    const result = await ubusApi.config_system(hostname, timezone)\n  }\n\n  return (\n    <Row>\n    <Col span={4}></Col>\n    <Col span={16}>\n    <Card title={t(\"settings\")} type=\"inner\" headStyle={{  background: \"linear-gradient(45deg, #07117e, #07117e\",color: 'white' }}>\n    <Form form={form} onFinish={handleSubmit}>\n        <Form.Item {...formItemLayout} name=\"hostname\" label={t(\"hostname\")} rules={[{ required: true, message: String(t(\"error_fill\")) }]}>\n          <Input style={{ width: '40%' }} />\n        </Form.Item>\n        <Form.Item {...formItemLayout} name=\"timezone\" label={t(\"timezone\")} rules={[{ required: true, message: String(t(\"error_fill\")) }]}>\n          <Select\n            style={{ width: '40%' }}\n            showSearch\n            filterOption={(input, option) =>\n              (option?.label ?? '').toLowerCase().includes(input.toLowerCase())\n            }\n            defaultValue={timezone}\n            options={timezoneSelect}\n          />\n        </Form.Item>\n        <Form.Item wrapperCol={{ offset: 8, span: 16 }}> <Button htmlType=\"submit\" type='primary'>{t(\"submit_system\")}</Button></Form.Item>\n      </Form>\n    </Card>\n    </Col>\n    </Row>\n  )\n}\n","/home/iam/Documents/network/src/components/antd/system/settings/authen.tsx",["548","549"],[],"import { message as antdMessage, Form, Input, Button, Space, Row, Card, Col } from 'antd'\nimport React from 'react'\nimport ubusApi from '../../../../service/api/ubus-api'\nimport { useTranslation } from \"react-i18next\";\nimport \"../../../../translations/i18n\";\n\nexport const EditPassword = (props: any) => {\n    const { item } = props\n    const [form] = Form.useForm()\n    const [passwordVisible, setPasswordVisible] = React.useState(false);\n    const { t } = useTranslation();\n    const abc = t('error_fill')\n\n    if (item) {\n        const { account_type } = item\n        form.setFieldsValue({ type: account_type })\n    }\n    const onFinish = async (values: any) => {\n        const param = {\n            current_password: values.current_password, new_password: values.new_password,\n        }\n        if (values.new_password !== values.confim_password) {\n            antdMessage.error(t(\"wrong_confirm_password\"))\n        } else {\n            const key = 'updatable';\n            antdMessage.loading({ content: t(\"loading\"), key });\n            setTimeout(() => {\n                antdMessage.success({ content: t(\"success\"), key, duration: 2 });\n            }, 1000);\n            let result = await ubusApi.config_system_password(param)\n\n            const { code, status } = result\n\n            if (code === 1)\n                antdMessage.error(t(\"wrong_current_password\"))\n            else\n                antdMessage.success(t(\"change_password_ok\"))\n        }\n    }\n    return (\n        <Row>\n            <Col span={4}></Col>\n            <Col span={16}>\n                <Card title={t(\"change_password\")} type=\"inner\" headStyle={{background:\"linear-gradient(45deg, #07117e, #07117e\",color: 'white'}}>\n                    <Form labelCol={{ span: 6 }}\n                        wrapperCol={{ span: 20 }} form={form} onFinish={onFinish}>\n                        <Form.Item name=\"current_password\" label={t(\"current_password\")} rules={[{ required: true, message: String(t(\"error_fill\")) }]}>\n                            <Space direction=\"horizontal\">\n                                <Input.Password\n                                    visibilityToggle={{ visible: passwordVisible, onVisibleChange: setPasswordVisible }}\n                                />\n                            </Space>\n                        </Form.Item>\n                        <Form.Item name=\"new_password\" label={t(\"new_password\")} rules={[{ required: true, message: String(t(\"error_fill\")) }]}>\n                            <Space direction=\"horizontal\">\n                                <Input.Password \n                                    visibilityToggle={{ visible: passwordVisible, onVisibleChange: setPasswordVisible }}\n                                />\n                            </Space>\n                        </Form.Item>\n                        <Form.Item name=\"confim_password\" label={t(\"confirm_new_password\")} rules={[{ required: true, message: String(t(\"error_fill\")) }]}>\n                            <Space direction=\"horizontal\">\n                                <Input.Password />\n                            </Space>\n                        </Form.Item>\n                        <Form.Item wrapperCol={{ offset: 6, span: 16 }}>\n                            <Button htmlType=\"submit\" type=\"primary\" >{t(\"submit\")}</Button>\n                        </Form.Item>\n                    </Form>\n                </Card>\n            </Col>\n        </Row>\n    )\n}\n\n","/home/iam/Documents/network/src/components/antd/system/reboot/form.tsx",["550"],[],"import { Button, Modal, Card, Space, Col } from 'antd'\nimport React from 'react';\nimport ubusApi from '../../../../service/api/ubus-api'\nimport { useTranslation } from \"react-i18next\";\nimport \"../../../../translations/i18n\";\n\nexport const RebootSystem = (props: any) => {\n    const { t } = useTranslation();\n\n    const [showModal, setShowModal] = React.useState(false)\n\n    const onShowModal = (group: any) => {\n        setShowModal(true)\n    }\n\n    const onModalCancel = () => {\n        setShowModal(false)\n    }\n    const onModalOk = () => {\n        setShowModal(false)\n    }\n\n    const onFinish = async () => {\n        const reboot = await ubusApi.config_system_reboot()\n        setShowModal(false)\n    }\n\n    const onConfirm = () => {\n        if (!showModal) {\n            return null\n        }\n        return (\n            <Modal width={500} open={true} onCancel={onModalCancel} onOk={onModalOk} footer={null}>\n                <Col md={23}>\n                    <Card title={t('title_reboot')} type=\"inner\" headStyle={{ background: \"#faad14\"}}>\n                        <Space size='large' >\n                            <Button onClick={onModalCancel} >\n                                {t(\"cancel\")}\n                            </Button>\n                            <Button type=\"primary\" danger onClick={onFinish} >\n                                {t(\"reboot\")}\n                            </Button>\n                        </Space>\n                    </Card>\n                </Col>\n            </Modal>\n        )\n    }\n    return (\n        <Card title={t(\"reboot\")} type=\"inner\" headStyle={{ background: \"linear-gradient(45deg, #07117e, #07117e\", color: 'white', }}>\n            <Space\n                direction=\"vertical\"\n                size=\"middle\"\n                style={{\n                    display: 'flex',\n                }}\n            >\n                {/* <span>{t(\"help_reset\")}</span> */}\n                {onConfirm()}\n                <Button type=\"primary\" danger onClick={onShowModal} >\n                    {t(\"reboot\")}\n                </Button>\n            </Space>\n        </Card>\n    )\n}\n","/home/iam/Documents/network/src/components/antd/system/shutdown/form.tsx",["551"],[],"import { Button, Modal, Card, Space, Col } from 'antd'\nimport React from 'react';\nimport ubusApi from '../../../../service/api/ubus-api'\nimport { useTranslation } from \"react-i18next\";\nimport \"../../../../translations/i18n\";\n\nexport const ShutdownSystem = (props: any) => {\n    const { t } = useTranslation();\n\n    const [showModal, setShowModal] = React.useState(false)\n\n    const onShowModal = (group: any) => {\n        setShowModal(true)\n    }\n\n    const onModalCancel = () => {\n        setShowModal(false)\n    }\n    const onModalOk = () => {\n        setShowModal(false)\n    }\n\n    const onFinish = async () => {\n        const shutdown = await ubusApi.config_system_shutdown()\n        setShowModal(false)\n    }\n\n    const onConfirm = () => {\n        if (!showModal) {\n            return null\n        }\n        return (\n            <Modal width={500} open={true} onCancel={onModalCancel} onOk={onModalOk} footer={null}>\n                <Col md={23}>\n                    <Card title={t('title_shutdown')} type=\"inner\" headStyle={{ background: \"#faad14\"}}>\n                        <Space size='large' >\n                            <Button onClick={onModalCancel} >\n                                {t(\"cancel\")}\n                            </Button>\n                            <Button type=\"primary\" danger onClick={onFinish} >\n                                {t(\"shutdown\")}\n                            </Button>\n                        </Space>\n                    </Card>\n                </Col>\n            </Modal>\n        )\n    }\n    return (\n        <Card title={t(\"shutdown\")} type=\"inner\" headStyle={{ background: \"linear-gradient(45deg, #07117e, #07117e\", color: 'white', }}>\n            <Space\n                direction=\"vertical\"\n                size=\"middle\"\n                style={{\n                    display: 'flex',\n                }}\n            >\n                {/* <span>{t(\"help_reset\")}</span> */}\n                {onConfirm()}\n                <Button type=\"primary\" danger onClick={onShowModal} >\n                    {t(\"shutdown\")}\n                </Button>\n            </Space>\n        </Card>\n    )\n}","/home/iam/Documents/network/src/components/antd/main-menu.tsx",["552","553","554","555","556","557","558","559","560","561","562"],[],"import {\n  TableOutlined,\n  GlobalOutlined,\n  PartitionOutlined,\n  HomeOutlined,\n  UserOutlined,\n  SafetyCertificateOutlined,\n  SettingOutlined,\n  WifiOutlined,\n  SafetyOutlined,\n  LogoutOutlined,\n  SolutionOutlined,\n} from '@ant-design/icons'\nimport { Menu } from 'antd'\nimport React from 'react'\n\nimport { useSelector } from 'react-redux'\nimport { useNavigate } from 'react-router-dom'\nimport { appStateSelector } from '../../redux/reducer/appStateSlice'\n\nimport type { MenuProps } from 'antd';\n\nimport { useTranslation } from \"react-i18next\";\nimport \"../../translations/i18n\";\n\ntype MenuItem = Required<MenuProps>['items'][number];\n\nfunction GetItem(\n  label: React.ReactNode,\n  key: React.Key,\n  icon?: React.ReactNode,\n  children?: MenuItem[],\n  type?: 'group',\n): MenuItem {\n\n  return {\n    key,\n    icon,\n    children,\n    label,\n    type,\n  } as MenuItem;\n}\n\nexport const MainMenu = (props: any) => {\n  const { t } = useTranslation();\n\n  const items: MenuProps['items'] = [\n\n    GetItem(t('dashboard'), '', <HomeOutlined />),\n\n    GetItem(t('internet'), 'internet', <GlobalOutlined />, [\n      GetItem(t('basic_wireless'), 'network/basicwifi'),\n      GetItem(t('wan_settings'), 'internet/wan'),\n      GetItem(t('lan_settings'), 'network/lan'),\n      GetItem(t('mesh'), 'network/mesh'),\n      // GetItem(t('ddns'), 'internet/ddns'),\n      // GetItem(t('openvpn'), 'internet/openvpn'),\n      GetItem(t('routing'), 'internet/routing'),\n      \n      // GetItem(t('vlan_settings'), 'network/vlan'),\n      // GetItem(t('igmp'), 'network/igmp'),\n      \n      \n\n    ]),\n\n    // GetItem(t('local_network'), 'network', <PartitionOutlined />, [\n    //   GetItem(t('lan_settings'), 'network/lan'),\n    //   // GetItem(t('vlan_settings'), 'network/vlan'),\n    //   // GetItem(t('igmp'), 'network/igmp'),\n    //   GetItem(t('mesh'), 'network/mesh'),\n    //   GetItem(t('basic_wireless'), 'network/basicwifi'),\n    //   // GetItem(t('guest_wifi'), 'network/guest'),\n    // ]),\n\n    // GetItem(t('security'), 'security', <SafetyCertificateOutlined />, [\n    //   GetItem(t('port_forward'), 'security/portforward'),\n    //   GetItem(t('ip_filter'), 'security/ipfilter'),\n    //   GetItem(t('url_filter'), 'security/urlfilter'),\n    // ]),\n\n    // GetItem(t('linksafe_service'), 'linksafe', <SolutionOutlined />, [\n    //   GetItem(t('register'), 'linksafe/register'),\n    // ]),\n\n    GetItem(t('system'), 'system', <SettingOutlined />, [\n      GetItem(t('basic_settings'), 'system/system'),\n      // GetItem(t('Ping'), 'system/ping'),\n      // GetItem(t('Traceroute'), 'system/traceroute'),\n      GetItem(t('update_firmware'), 'system/update'),\n      GetItem(t('factory_reset'), 'system/rsfactory'),\n      GetItem(t('reboot'), 'system/reboot'),\n      GetItem(t('shutdown'), 'system/shutdown'),\n    ]),\n\n    GetItem(t('logout'), 'logout', <LogoutOutlined />),\n\n  ];\n\n  const { setmenu, selected } = props\n  const [selectedKey, setSelectedKey] = React.useState(setmenu)\n  const [openKeys, setOpenKeys] = React.useState(['']);\n  const navigate = useNavigate()\n\n\n  const refreshData = async () => {\n    if (setmenu === null || setmenu === \"\") {\n      setOpenKeys(['dashboard'])\n      setSelectedKey(\"\")\n    } else {\n      setOpenKeys([setmenu.split('/')[0]])\n      setSelectedKey(setmenu)\n    }\n  }\n  // setTimeout(() => {\n  //   refreshData()\n  // }, 1000);\n  // console.log('xinchao: ', setmenu)\n\n  const onMenuItemClicked = ({ item, key, keyPath, domEvent }: any) => {\n    setSelectedKey(key)\n    sessionStorage.setItem(\"menu\", key)\n    navigate('/' + key)\n  }\n\n  const rootSubmenuKeys = ['', 'internet', 'network', 'security', 'linksafe', 'system'];\n\n  const onOpenChange = (keys: any) => {\n    const latestOpenKey = keys.find((key: string) => openKeys.indexOf(key) === -1);\n    if (rootSubmenuKeys.indexOf(latestOpenKey) === -1) {\n      setOpenKeys(keys);\n    } else {\n      setOpenKeys(latestOpenKey ? [latestOpenKey] : []);\n    }\n  }\n\n  return (\n    <Menu\n      onClick={onMenuItemClicked}\n      openKeys={openKeys}\n      mode=\"inline\"\n      onOpenChange={onOpenChange}\n      items={items}\n      theme=\"light\"\n      triggerSubMenuAction=\"click\"\n      selectedKeys={[selectedKey]}\n      style={{ fontWeight: \"bold\" }}\n    />\n  );\n\n};\n","/home/iam/Documents/network/src/components/antd/status/status-overview.tsx",["563"],[],"import { Typography, Row, Col, Card } from 'antd'\nimport { SystemGeneralInfoTable, SystemMemoryInfoTable, InternetStatus, InfoInterface } from './system-info'\nimport { useSelector } from 'react-redux'\nimport { sessionSelector } from '../../../redux/reducer/sessionSlice'\nimport { useTranslation } from \"react-i18next\";\nimport \"../../../translations/i18n\";\n\nexport const StatusOverview = () => {\n  const { systemInfo } = useSelector(sessionSelector)\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <Row gutter={[24, 0]}>\n        <Col span={2}></Col>\n        <Col span={20}>\n          <SystemGeneralInfoTable systemInfo={systemInfo} />\n          <InfoInterface systemInfo={systemInfo} />\n        </Col>\n      </Row>\n      <br></br>\n      <Row gutter={[24, 0]} >\n        <Col span={12}>\n          <Card title={t(\"memory_usage\")} size=\"small\" style={{ textAlign: \"center\" }} headStyle={{background:\"linear-gradient(45deg, #07117e, #07117e\",color: 'white'}}>\n            <SystemMemoryInfoTable systemInfo={systemInfo} />\n          </Card>\n        </Col>\n        <Col span={12}>\n          <Card title={t(\"internet_connection\")} size=\"small\" style={{ textAlign: 'center' }} headStyle={{background:\"linear-gradient(45deg, #07117e, #07117e\",color: 'white'}}>\n            <InternetStatus systemInfo={systemInfo} />\n          </Card>\n        </Col>\n      </Row>\n    </>\n  )\n}\n","/home/iam/Documents/network/src/components/antd/status/network-statistic.tsx",["564","565","566"],[],"import { Table } from 'antd'\nimport { Line } from '@ant-design/plots';\nimport { useSelector } from 'react-redux'\nimport { sessionSelector } from '../../../redux/reducer/sessionSlice'\nimport type { ColumnsType } from 'antd/es/table';\n\nimport { useTranslation } from \"react-i18next\";\nimport \"../../../translations/i18n\";\n\nexport const ClientsConnected = (props:any) => {\n    const { t } = useTranslation();\n\n    interface DataType {\n    mac: string;\n    freq: string;\n    total: string;\n    tx: string;\n    rx: string;\n    signal: number;\n    }\n\n    const columns: ColumnsType<DataType> = [\n    {\n        title: t(\"mac_address\"),\n        dataIndex: 'mac',\n        key: 'mac',\n        render: (text) => <a>{text}</a>,\n    },\n    // {\n    //     title: t('frequency'),\n    //     dataIndex: 'freq',\n    //     key: 'freq',\n    // },\n    {\n        title: t('tx_bytes'),\n        dataIndex: 'tx',\n        key: 'tx',\n    },\n    {\n        title: t('rx_bytes'),\n        dataIndex: 'rx',\n        key: 'rx',\n    },\n    {\n        title: t('total'),\n        dataIndex: 'total',\n        key: 'total',\n    },\n    {\n        title: t('signal'),\n        dataIndex: 'signal',\n        key: 'signal',\n    },\n    ];\n\n    const data: DataType[] = [];\n\n    const { systemInfo } = useSelector(sessionSelector)\n    const { wlan0_clients = {}, wlan1_clients = {} } = systemInfo?.data || {}  \n    let  clients_24 = wlan0_clients.clients \n    const  clients_5 = wlan1_clients.clients \n    const freq24 = wlan0_clients.freq\n    const freq5 = wlan1_clients.freq\n    let i = 0 \n\n    for (var client in clients_24) {\n        // skip loop if the property is from prototype\n        if (!clients_24.hasOwnProperty(client)) continue;\n        const totalValue = (clients_24[client].bytes?.tx + clients_24[client].bytes?.rx || 0) / 1000000;\n        const txValue = (clients_24[client].bytes?.tx || 0) / 1000000;\n        const rxValue = (clients_24[client].bytes?.rx || 0) / 1000000;\n\n        data.push({\n                mac: client,\n                freq: freq24,\n                total: totalValue.toFixed(2) + \" Mb\",\n                tx: txValue.toFixed(2) + \" Mb\",\n                rx: rxValue.toFixed(2) + \" Mb\",\n                signal: clients_24[client]?.signal || 0\n            })\n    }\n\n    for (var client in clients_5) {\n        // skip loop if the property is from prototype\n        if (!clients_5.hasOwnProperty(client)) continue;\n        const totalValue = (clients_5[client].bytes?.tx + clients_5[client].bytes?.rx || 0) / 1000000;\n        const txValue = (clients_5[client].bytes?.tx || 0) / 1000000;\n        const rxValue = (clients_5[client].bytes?.rx || 0) / 1000000;\n\n        data.push({\n                mac: client,\n                freq: freq5,\n                total: totalValue.toFixed(2) + \" Mb\",\n                tx: txValue.toFixed(2) + \" Mb\",\n                rx: rxValue.toFixed(2) + \" Mb\",\n                signal: clients_5[client]?.signal || 0\n            })\n    }\n\n    return  <Table columns={columns} dataSource={data} pagination={{ pageSize: 4 }}/>\n}\n\nexport const NetworkStatistic = (props:any) => {\n    const { name } = props\n    const { systemInfo } = useSelector(sessionSelector)\n    const { wan = {}, lan1 = {}, lan2 = {}, wlan0 = {}, wlan1= {} } = systemInfo?.data || {}\n    const data: { value: any; category: string, time: number }[] = [];\n\n    if (name === \"wan\") {\n        const rx_bytes = wan.statistics?.rx_bytes || []\n        const tx_bytes = wan.statistics?.tx_bytes || []\n        \n        for (let i = 0; i < 120; i++) {\n            data.push({\n                value: rx_bytes[i]/1000,\n                category: 'Receive (KB/s)',\n                time: i,\n            });\n        }\n\n        for (let i = 0; i < 120; i++) {\n            data.push({\n                value: tx_bytes[i]/1000,\n                category: 'Transmit (KB/s)',\n                time: i,\n            });\n        }\n    }\n    else if (name === \"lan\") {\n        const rx_bytes_lan1 = lan1.statistics?.rx_bytes || []\n        const rx_bytes_lan2 = lan2.statistics?.rx_bytes || []\n\n        const tx_bytes_lan1 = lan1.statistics?.tx_bytes || []\n        const tx_bytes_lan2 = lan2.statistics?.tx_bytes || []\n        \n        for (let i = 0; i < 120; i++) {\n            data.push({\n                value: (rx_bytes_lan1[i] + rx_bytes_lan2[i])/1000,\n                category: 'Receive (KB/s)',\n                time: i,\n            });\n        }\n\n        for (let i = 0; i < 120; i++) {\n            data.push({\n                value: (tx_bytes_lan1[i] + tx_bytes_lan2[i])/1000,\n                category: 'Transmit (KB/s)',\n                time: i,\n            });\n        }\n    }     \n    else if (name === \"wifi\") {\n        const rx_bytes_wlan1 = wlan1.statistics?.rx_bytes || []\n        const rx_bytes_wlan0 = wlan0.statistics?.rx_bytes || []\n\n        const tx_bytes_wlan1 = wlan1.statistics?.tx_bytes || []\n        const tx_bytes_wlan0 = wlan0.statistics?.tx_bytes || []\n  \n        for (let i = 0; i < 120; i++) {\n            data.push({\n                value: (rx_bytes_wlan1[i] + rx_bytes_wlan0[i])/1000 > 0 ? (rx_bytes_wlan1[i] + rx_bytes_wlan0[i])/1000 : -(rx_bytes_wlan1[i] + rx_bytes_wlan0[i])/1000,\n                category: 'Receive (KB/s)',\n                time: i,\n            });\n        }\n\n        for (let i = 0; i < 120; i++) {\n            data.push({\n                value: (tx_bytes_wlan1[i] + tx_bytes_wlan0[i])/1000 > 0 ? (tx_bytes_wlan1[i] + tx_bytes_wlan0[i])/1000 : - (tx_bytes_wlan1[i] + tx_bytes_wlan0[i])/1000,\n                category: 'Transmit (KB/s)',\n                time: i,\n            });\n        }\n    }\n  \n    const config = {\n        data,\n        xField: 'time',\n        yField: 'value',\n        seriesField: 'category',\n        color: ['#0000FF', '#FF0000', '#FF0000'],\n        };\n\n    return <Line {...config} />;\n};\n\nexport default NetworkStatistic;\n","/home/iam/Documents/network/src/service/utils/data-format.js",["567","568","569"],[],"/**\n * Format number of seconds into days, hours, minutes\n * @param {*} seconds \n * @returns \n */\nexport function formatTimeSecond(sec) {\n  const secsPerDay = 86400\n  const secsPerHour = 3600\n  const secsPerMinute = 60\n\n  let seconds = Math.abs(sec)\n  let minus = this < 0 ? '-' : ''\n\n  let days = Math.floor(seconds / secsPerDay)\n  seconds = seconds % secsPerDay\n  let hours = Math.floor(seconds / secsPerHour)\n  seconds = seconds % secsPerHour\n  let minutes = Math.floor(seconds / secsPerMinute)\n  seconds = seconds % secsPerMinute\n\n  let sDays = days > 0 ? new String(days).padStart(1, '0') + 'd ' : ''\n  let sHours = hours > 0 ? new String(hours).padStart(2, '0') + 'h ' : ''\n  let sMinutes = new String(minutes).padStart(2, '0') + 'm '\n\n  return `${minus}${sDays}${sHours}${sMinutes}${seconds}s`\n}\n\n// https://stackoverflow.com/questions/10420352/converting-file-size-in-bytes-to-human-readable-string\n/**\n * Format bytes as human-readable text.\n *\n * @param bytes Number of bytes.\n * @param si True to use metric (SI) units, aka powers of 1000. False to use\n *           binary (IEC), aka powers of 1024.\n * @param dp Number of decimal places to display.\n *\n * @return Formatted string.\n */\nexport function humanReadableSize(bytes, si = false, dp = 1) {\n  const thresh = si ? 1000 : 1024\n\n  if (Math.abs(bytes) < thresh) {\n    return bytes + ' B'\n  }\n\n  const units = si\n    ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n    : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n  let u = -1\n  const r = 10 ** dp\n\n  do {\n    bytes /= thresh\n    ++u\n  } while (\n    Math.round(Math.abs(bytes) * r) / r >= thresh &&\n    u < units?.length - 1\n  )\n\n  return bytes.toFixed(dp) + ' ' + units[u]\n}\n","/home/iam/Documents/network/src/components/antd/status/system-info.tsx",["570","571","572","573","574","575"],[],"import { Table, Result, Statistic, Card } from 'antd'\nimport {\n  formatTimeSecond,\n  humanReadableSize as hrsize,\n} from '../../../service/utils/data-format'\n\nimport {\n  ArrowDownOutlined,\n  ArrowUpOutlined\n} from '@ant-design/icons'\n\nimport { RingProgress } from '@ant-design/plots';\nimport { useTranslation } from \"react-i18next\";\nimport \"../../../translations/i18n\";\nimport Icon from '@ant-design/icons/lib/components/Icon';\n\n\nconst SimpleTable = (props: any) => {\n  const { showHeader, pagination, ...restProps } = props\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n      render: (text: any) => <b>{text}</b>,\n      responsive: ['md'],\n    },\n    {\n      title: 'Value',\n      dataIndex: 'value',\n      key: 'value',\n      responsive: ['md'],\n    },\n  ]\n  return (\n    <Table\n      columns={columns}\n      showHeader={false}\n      pagination={false}\n      {...restProps}\n    />\n  )\n}\n\nexport const SystemGeneralInfoTable = (props: any) => {\n  const { t } = useTranslation();\n  const { systemInfo = {} } = props\n  const { localtime, uptime } = systemInfo.data?.system || {}\n\n  const localTimeStr = new Date(Date.now()).toTimeString()\n  const data = [\n    { name: t(\"local_time\"), value: localTimeStr },\n    { name: t(\"uptime\"), value: formatTimeSecond(uptime) },\n  ]\n  return (\n    <>\n      <SimpleTable dataSource={data} />\n    </>\n  )\n}\n\nexport const InfoInterface = (props: any) => {\n  const { t } = useTranslation();\n  const { systemInfo = {} } = props\n  const { wan_interface, lan_interface } = systemInfo.data || {}\n\n  const columns2 = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n      render: (text: any) => <b>{text}</b>,\n    },\n    {\n      title: 'Icon',\n      dataIndex: 'icon',\n      key: 'icon',\n      render: (text: any) => <b>{text}</b>,\n    },\n    {\n      title: 'Value',\n      dataIndex: 'value',\n      key: 'value',\n    }\n  ]\n  const data = [\n    { name: t(\"WAN\"), value: wan_interface?.up ? wan_interface['ipv4-address'][0]['address'] : \"n/a\", icon: wan_interface?.up ? <ArrowUpOutlined style={{color : \"#3f8600\"}}/> : <ArrowDownOutlined style={{ color: '#cf1322' }}/> },\n    { name: t(\"LAN\"), value: lan_interface?.up ? lan_interface['ipv4-address'][0]['address'] : \"n/a\", icon: lan_interface?.up ? <ArrowUpOutlined style={{color : \"#3f8600\"}}/> : <ArrowDownOutlined style={{ color: '#cf1322' }}/> },\n  ]\n  return (\n    <>\n      {/* <Card bordered={false}> */}\n        <Table columns={columns2} dataSource={data} showHeader={false} pagination={false} style={{width : \"375px\"}}/>\n      {/* </Card> */}\n    </>\n  )\n}\n\nexport const SystemMemoryInfoTable = (props: any) => {\n  const { systemInfo = {} } = props\n  const { memory = {} } = systemInfo.data?.system || {}\n  let {\n    total = 1,\n    free = 0,\n    available = 0,\n  } = memory\n\n  const usage = (total - available) / total\n\n  const config = {\n    height: 100,\n    width: 100,\n    autoFit: true,\n    percent: usage,\n    color: ['#5B8FF9', '#E8EDF3'],\n  };\n  return <RingProgress {...config} />;\n}\n\nexport const InternetStatus = (props: any) => {\n  const { systemInfo = {} } = props\n  const { internet } = systemInfo?.data || 0\n\n  if (internet === 1) {\n    return <Statistic valueStyle={{ color: '#3f8600' }} value=\"Up\" prefix={<ArrowUpOutlined />} style={{ height: \"100px\", paddingTop: \"30px\" }} />\n  } else {\n    return <Statistic valueStyle={{ color: '#cf1322' }} value=\"Down\" prefix={<ArrowDownOutlined />} style={{ height: \"100px\" }} />\n  }\n}\n",{"ruleId":"576","severity":1,"message":"577","line":3,"column":10,"nodeType":"578","messageId":"579","endLine":3,"endColumn":18},{"ruleId":"576","severity":1,"message":"580","line":6,"column":8,"nodeType":"578","messageId":"579","endLine":6,"endColumn":13},{"ruleId":"576","severity":1,"message":"581","line":9,"column":8,"nodeType":"578","messageId":"579","endLine":9,"endColumn":18},{"ruleId":"576","severity":1,"message":"582","line":17,"column":18,"nodeType":"578","messageId":"579","endLine":17,"endColumn":26},{"ruleId":"576","severity":1,"message":"583","line":1,"column":31,"nodeType":"578","messageId":"579","endLine":1,"endColumn":37},{"ruleId":"584","severity":1,"message":"585","line":28,"column":6,"nodeType":"586","endLine":28,"endColumn":8,"suggestions":"587"},{"ruleId":"584","severity":1,"message":"588","line":32,"column":6,"nodeType":"586","endLine":32,"endColumn":15,"suggestions":"589"},{"ruleId":"576","severity":1,"message":"590","line":1,"column":53,"nodeType":"578","messageId":"579","endLine":1,"endColumn":61},{"ruleId":"576","severity":1,"message":"591","line":3,"column":8,"nodeType":"578","messageId":"579","endLine":3,"endColumn":17},{"ruleId":"576","severity":1,"message":"592","line":7,"column":38,"nodeType":"578","messageId":"579","endLine":7,"endColumn":54},{"ruleId":"576","severity":1,"message":"593","line":7,"column":76,"nodeType":"578","messageId":"579","endLine":7,"endColumn":88},{"ruleId":"576","severity":1,"message":"594","line":9,"column":10,"nodeType":"578","messageId":"579","endLine":9,"endColumn":18},{"ruleId":"576","severity":1,"message":"595","line":31,"column":8,"nodeType":"578","messageId":"579","endLine":31,"endColumn":15},{"ruleId":"576","severity":1,"message":"596","line":1,"column":18,"nodeType":"578","messageId":"579","endLine":1,"endColumn":22},{"ruleId":"576","severity":1,"message":"597","line":8,"column":9,"nodeType":"578","messageId":"579","endLine":8,"endColumn":17},{"ruleId":"576","severity":1,"message":"581","line":1,"column":8,"nodeType":"578","messageId":"579","endLine":1,"endColumn":18},{"ruleId":"576","severity":1,"message":"598","line":1,"column":8,"nodeType":"578","messageId":"579","endLine":1,"endColumn":14},{"ruleId":"576","severity":1,"message":"581","line":2,"column":8,"nodeType":"578","messageId":"579","endLine":2,"endColumn":18},{"ruleId":"576","severity":1,"message":"599","line":3,"column":8,"nodeType":"578","messageId":"579","endLine":3,"endColumn":22},{"ruleId":"576","severity":1,"message":"600","line":4,"column":10,"nodeType":"578","messageId":"579","endLine":4,"endColumn":24},{"ruleId":"576","severity":1,"message":"601","line":5,"column":10,"nodeType":"578","messageId":"579","endLine":5,"endColumn":16},{"ruleId":"576","severity":1,"message":"602","line":5,"column":18,"nodeType":"578","messageId":"579","endLine":5,"endColumn":22},{"ruleId":"576","severity":1,"message":"581","line":1,"column":8,"nodeType":"578","messageId":"579","endLine":1,"endColumn":18},{"ruleId":"576","severity":1,"message":"603","line":2,"column":10,"nodeType":"578","messageId":"579","endLine":2,"endColumn":16},{"ruleId":"576","severity":1,"message":"604","line":2,"column":24,"nodeType":"578","messageId":"579","endLine":2,"endColumn":27},{"ruleId":"576","severity":1,"message":"605","line":2,"column":29,"nodeType":"578","messageId":"579","endLine":2,"endColumn":34},{"ruleId":"576","severity":1,"message":"581","line":2,"column":8,"nodeType":"578","messageId":"579","endLine":2,"endColumn":18},{"ruleId":"576","severity":1,"message":"581","line":2,"column":8,"nodeType":"578","messageId":"579","endLine":2,"endColumn":18},{"ruleId":"576","severity":1,"message":"581","line":1,"column":8,"nodeType":"578","messageId":"579","endLine":1,"endColumn":18},{"ruleId":"576","severity":1,"message":"603","line":2,"column":10,"nodeType":"578","messageId":"579","endLine":2,"endColumn":16},{"ruleId":"576","severity":1,"message":"606","line":27,"column":11,"nodeType":"578","messageId":"579","endLine":27,"endColumn":21},{"ruleId":"576","severity":1,"message":"607","line":38,"column":11,"nodeType":"578","messageId":"579","endLine":38,"endColumn":23},{"ruleId":"576","severity":1,"message":"603","line":1,"column":10,"nodeType":"578","messageId":"579","endLine":1,"endColumn":16},{"ruleId":"576","severity":1,"message":"608","line":3,"column":24,"nodeType":"578","messageId":"579","endLine":3,"endColumn":36},{"ruleId":"576","severity":1,"message":"581","line":4,"column":8,"nodeType":"578","messageId":"579","endLine":4,"endColumn":18},{"ruleId":"576","severity":1,"message":"609","line":10,"column":9,"nodeType":"578","messageId":"579","endLine":10,"endColumn":14},{"ruleId":"576","severity":1,"message":"610","line":10,"column":16,"nodeType":"578","messageId":"579","endLine":10,"endColumn":25},{"ruleId":"576","severity":1,"message":"611","line":10,"column":27,"nodeType":"578","messageId":"579","endLine":10,"endColumn":31},{"ruleId":"576","severity":1,"message":"612","line":10,"column":33,"nodeType":"578","messageId":"579","endLine":10,"endColumn":37},{"ruleId":"576","severity":1,"message":"613","line":17,"column":12,"nodeType":"578","messageId":"579","endLine":17,"endColumn":17},{"ruleId":"576","severity":1,"message":"607","line":44,"column":11,"nodeType":"578","messageId":"579","endLine":44,"endColumn":23},{"ruleId":"576","severity":1,"message":"603","line":1,"column":10,"nodeType":"578","messageId":"579","endLine":1,"endColumn":16},{"ruleId":"576","severity":1,"message":"614","line":1,"column":28,"nodeType":"578","messageId":"579","endLine":1,"endColumn":33},{"ruleId":"576","severity":1,"message":"615","line":1,"column":35,"nodeType":"578","messageId":"579","endLine":1,"endColumn":40},{"ruleId":"576","severity":1,"message":"616","line":1,"column":42,"nodeType":"578","messageId":"579","endLine":1,"endColumn":52},{"ruleId":"576","severity":1,"message":"605","line":1,"column":54,"nodeType":"578","messageId":"579","endLine":1,"endColumn":59},{"ruleId":"576","severity":1,"message":"617","line":1,"column":61,"nodeType":"578","messageId":"579","endLine":1,"endColumn":66},{"ruleId":"576","severity":1,"message":"618","line":1,"column":68,"nodeType":"578","messageId":"579","endLine":1,"endColumn":74},{"ruleId":"576","severity":1,"message":"619","line":1,"column":76,"nodeType":"578","messageId":"579","endLine":1,"endColumn":83},{"ruleId":"576","severity":1,"message":"620","line":1,"column":85,"nodeType":"578","messageId":"579","endLine":1,"endColumn":89},{"ruleId":"576","severity":1,"message":"581","line":2,"column":8,"nodeType":"578","messageId":"579","endLine":2,"endColumn":18},{"ruleId":"576","severity":1,"message":"621","line":5,"column":10,"nodeType":"578","messageId":"579","endLine":5,"endColumn":24},{"ruleId":"576","severity":1,"message":"622","line":6,"column":17,"nodeType":"578","messageId":"579","endLine":6,"endColumn":25},{"ruleId":"576","severity":1,"message":"623","line":6,"column":27,"nodeType":"578","messageId":"579","endLine":6,"endColumn":33},{"ruleId":"576","severity":1,"message":"624","line":7,"column":8,"nodeType":"578","messageId":"579","endLine":7,"endColumn":15},{"ruleId":"576","severity":1,"message":"625","line":6,"column":12,"nodeType":"578","messageId":"579","endLine":6,"endColumn":16},{"ruleId":"576","severity":1,"message":"626","line":6,"column":18,"nodeType":"578","messageId":"579","endLine":6,"endColumn":25},{"ruleId":"576","severity":1,"message":"627","line":7,"column":12,"nodeType":"578","messageId":"579","endLine":7,"endColumn":21},{"ruleId":"576","severity":1,"message":"628","line":7,"column":23,"nodeType":"578","messageId":"579","endLine":7,"endColumn":35},{"ruleId":"629","severity":1,"message":"630","line":186,"column":5,"nodeType":"631","messageId":"632","endLine":186,"endColumn":53},{"ruleId":"629","severity":1,"message":"633","line":187,"column":5,"nodeType":"631","messageId":"632","endLine":187,"endColumn":42},{"ruleId":"629","severity":1,"message":"630","line":190,"column":5,"nodeType":"631","messageId":"632","endLine":190,"endColumn":53},{"ruleId":"629","severity":1,"message":"633","line":191,"column":5,"nodeType":"631","messageId":"632","endLine":191,"endColumn":42},{"ruleId":"629","severity":1,"message":"634","line":192,"column":5,"nodeType":"631","messageId":"632","endLine":192,"endColumn":19},{"ruleId":"576","severity":1,"message":"622","line":12,"column":10,"nodeType":"578","messageId":"579","endLine":12,"endColumn":18},{"ruleId":"576","severity":1,"message":"635","line":15,"column":10,"nodeType":"578","messageId":"579","endLine":15,"endColumn":21},{"ruleId":"576","severity":1,"message":"636","line":16,"column":10,"nodeType":"578","messageId":"579","endLine":16,"endColumn":25},{"ruleId":"576","severity":1,"message":"603","line":26,"column":3,"nodeType":"578","messageId":"579","endLine":26,"endColumn":9},{"ruleId":"576","severity":1,"message":"637","line":27,"column":3,"nodeType":"578","messageId":"579","endLine":27,"endColumn":7},{"ruleId":"576","severity":1,"message":"638","line":28,"column":3,"nodeType":"578","messageId":"579","endLine":28,"endColumn":15},{"ruleId":"576","severity":1,"message":"639","line":29,"column":3,"nodeType":"578","messageId":"579","endLine":29,"endColumn":9},{"ruleId":"576","severity":1,"message":"640","line":30,"column":3,"nodeType":"578","messageId":"579","endLine":30,"endColumn":8},{"ruleId":"576","severity":1,"message":"641","line":31,"column":3,"nodeType":"578","messageId":"579","endLine":31,"endColumn":9},{"ruleId":"576","severity":1,"message":"642","line":32,"column":3,"nodeType":"578","messageId":"579","endLine":32,"endColumn":9},{"ruleId":"576","severity":1,"message":"619","line":33,"column":3,"nodeType":"578","messageId":"579","endLine":33,"endColumn":10},{"ruleId":"576","severity":1,"message":"616","line":34,"column":3,"nodeType":"578","messageId":"579","endLine":34,"endColumn":13},{"ruleId":"576","severity":1,"message":"643","line":38,"column":3,"nodeType":"578","messageId":"579","endLine":38,"endColumn":19},{"ruleId":"576","severity":1,"message":"644","line":39,"column":3,"nodeType":"578","messageId":"579","endLine":39,"endColumn":18},{"ruleId":"576","severity":1,"message":"645","line":40,"column":3,"nodeType":"578","messageId":"579","endLine":40,"endColumn":20},{"ruleId":"576","severity":1,"message":"646","line":41,"column":3,"nodeType":"578","messageId":"579","endLine":41,"endColumn":27},{"ruleId":"576","severity":1,"message":"616","line":2,"column":18,"nodeType":"578","messageId":"579","endLine":2,"endColumn":28},{"ruleId":"576","severity":1,"message":"647","line":4,"column":8,"nodeType":"578","messageId":"579","endLine":4,"endColumn":20},{"ruleId":"576","severity":1,"message":"648","line":7,"column":10,"nodeType":"578","messageId":"579","endLine":7,"endColumn":21},{"ruleId":"576","severity":1,"message":"649","line":8,"column":10,"nodeType":"578","messageId":"579","endLine":8,"endColumn":21},{"ruleId":"576","severity":1,"message":"602","line":9,"column":18,"nodeType":"578","messageId":"579","endLine":9,"endColumn":22},{"ruleId":"576","severity":1,"message":"650","line":11,"column":10,"nodeType":"578","messageId":"579","endLine":11,"endColumn":17},{"ruleId":"576","severity":1,"message":"651","line":18,"column":11,"nodeType":"578","messageId":"579","endLine":18,"endColumn":16},{"ruleId":"576","severity":1,"message":"652","line":1,"column":10,"nodeType":"578","messageId":"579","endLine":1,"endColumn":24},{"ruleId":"576","severity":1,"message":"653","line":1,"column":26,"nodeType":"578","messageId":"579","endLine":1,"endColumn":38},{"ruleId":"576","severity":1,"message":"654","line":2,"column":21,"nodeType":"578","messageId":"579","endLine":2,"endColumn":32},{"ruleId":"576","severity":1,"message":"590","line":2,"column":80,"nodeType":"578","messageId":"579","endLine":2,"endColumn":88},{"ruleId":"576","severity":1,"message":"655","line":3,"column":10,"nodeType":"578","messageId":"579","endLine":3,"endColumn":29},{"ruleId":"576","severity":1,"message":"623","line":4,"column":17,"nodeType":"578","messageId":"579","endLine":4,"endColumn":23},{"ruleId":"576","severity":1,"message":"622","line":4,"column":25,"nodeType":"578","messageId":"579","endLine":4,"endColumn":33},{"ruleId":"656","severity":1,"message":"657","line":22,"column":39,"nodeType":"658","messageId":"632","endLine":22,"endColumn":41},{"ruleId":"656","severity":1,"message":"657","line":24,"column":46,"nodeType":"658","messageId":"632","endLine":24,"endColumn":48},{"ruleId":"584","severity":1,"message":"659","line":30,"column":42,"nodeType":"586","endLine":30,"endColumn":44,"suggestions":"660"},{"ruleId":"656","severity":1,"message":"657","line":34,"column":25,"nodeType":"658","messageId":"632","endLine":34,"endColumn":27},{"ruleId":"576","severity":1,"message":"661","line":51,"column":12,"nodeType":"578","messageId":"579","endLine":51,"endColumn":17},{"ruleId":"576","severity":1,"message":"662","line":53,"column":12,"nodeType":"578","messageId":"579","endLine":53,"endColumn":18},{"ruleId":"656","severity":1,"message":"657","line":72,"column":54,"nodeType":"658","messageId":"632","endLine":72,"endColumn":56},{"ruleId":"656","severity":1,"message":"657","line":98,"column":71,"nodeType":"658","messageId":"632","endLine":98,"endColumn":73},{"ruleId":"576","severity":1,"message":"663","line":2,"column":17,"nodeType":"578","messageId":"579","endLine":2,"endColumn":26},{"ruleId":"576","severity":1,"message":"664","line":2,"column":28,"nodeType":"578","messageId":"579","endLine":2,"endColumn":38},{"ruleId":"576","severity":1,"message":"619","line":3,"column":10,"nodeType":"578","messageId":"579","endLine":3,"endColumn":17},{"ruleId":"576","severity":1,"message":"614","line":3,"column":19,"nodeType":"578","messageId":"579","endLine":3,"endColumn":24},{"ruleId":"576","severity":1,"message":"615","line":3,"column":26,"nodeType":"578","messageId":"579","endLine":3,"endColumn":31},{"ruleId":"576","severity":1,"message":"665","line":3,"column":33,"nodeType":"578","messageId":"579","endLine":3,"endColumn":36},{"ruleId":"576","severity":1,"message":"666","line":4,"column":10,"nodeType":"578","messageId":"579","endLine":4,"endColumn":24},{"ruleId":"576","severity":1,"message":"667","line":6,"column":10,"nodeType":"578","messageId":"579","endLine":6,"endColumn":16},{"ruleId":"576","severity":1,"message":"668","line":7,"column":34,"nodeType":"578","messageId":"579","endLine":7,"endColumn":49},{"ruleId":"576","severity":1,"message":"669","line":8,"column":10,"nodeType":"578","messageId":"579","endLine":8,"endColumn":11},{"ruleId":"576","severity":1,"message":"670","line":9,"column":10,"nodeType":"578","messageId":"579","endLine":9,"endColumn":16},{"ruleId":"576","severity":1,"message":"671","line":93,"column":11,"nodeType":"578","messageId":"579","endLine":93,"endColumn":23},{"ruleId":"576","severity":1,"message":"604","line":1,"column":18,"nodeType":"578","messageId":"579","endLine":1,"endColumn":21},{"ruleId":"576","severity":1,"message":"672","line":1,"column":23,"nodeType":"578","messageId":"579","endLine":1,"endColumn":26},{"ruleId":"576","severity":1,"message":"614","line":1,"column":28,"nodeType":"578","messageId":"579","endLine":1,"endColumn":33},{"ruleId":"576","severity":1,"message":"615","line":1,"column":35,"nodeType":"578","messageId":"579","endLine":1,"endColumn":40},{"ruleId":"576","severity":1,"message":"616","line":1,"column":42,"nodeType":"578","messageId":"579","endLine":1,"endColumn":52},{"ruleId":"576","severity":1,"message":"605","line":1,"column":54,"nodeType":"578","messageId":"579","endLine":1,"endColumn":59},{"ruleId":"576","severity":1,"message":"590","line":1,"column":91,"nodeType":"578","messageId":"579","endLine":1,"endColumn":99},{"ruleId":"576","severity":1,"message":"641","line":1,"column":101,"nodeType":"578","messageId":"579","endLine":1,"endColumn":107},{"ruleId":"576","severity":1,"message":"622","line":2,"column":17,"nodeType":"578","messageId":"579","endLine":2,"endColumn":25},{"ruleId":"576","severity":1,"message":"673","line":12,"column":12,"nodeType":"578","messageId":"579","endLine":12,"endColumn":22},{"ruleId":"576","severity":1,"message":"674","line":12,"column":24,"nodeType":"578","messageId":"579","endLine":12,"endColumn":37},{"ruleId":"576","severity":1,"message":"675","line":13,"column":12,"nodeType":"578","messageId":"579","endLine":13,"endColumn":15},{"ruleId":"576","severity":1,"message":"676","line":13,"column":17,"nodeType":"578","messageId":"579","endLine":13,"endColumn":23},{"ruleId":"576","severity":1,"message":"677","line":43,"column":11,"nodeType":"578","messageId":"579","endLine":43,"endColumn":25},{"ruleId":"576","severity":1,"message":"678","line":61,"column":11,"nodeType":"578","messageId":"579","endLine":61,"endColumn":21},{"ruleId":"584","severity":1,"message":"679","line":99,"column":8,"nodeType":"586","endLine":99,"endColumn":10,"suggestions":"680"},{"ruleId":"576","severity":1,"message":"681","line":104,"column":19,"nodeType":"578","messageId":"579","endLine":104,"endColumn":25},{"ruleId":"576","severity":1,"message":"681","line":106,"column":19,"nodeType":"578","messageId":"579","endLine":106,"endColumn":25},{"ruleId":"576","severity":1,"message":"661","line":118,"column":12,"nodeType":"578","messageId":"579","endLine":118,"endColumn":17},{"ruleId":"576","severity":1,"message":"682","line":119,"column":11,"nodeType":"578","messageId":"579","endLine":119,"endColumn":23},{"ruleId":"576","severity":1,"message":"662","line":120,"column":12,"nodeType":"578","messageId":"579","endLine":120,"endColumn":18},{"ruleId":"656","severity":1,"message":"657","line":127,"column":16,"nodeType":"658","messageId":"632","endLine":127,"endColumn":18},{"ruleId":"656","severity":1,"message":"657","line":128,"column":20,"nodeType":"658","messageId":"632","endLine":128,"endColumn":22},{"ruleId":"656","severity":1,"message":"683","line":172,"column":69,"nodeType":"658","messageId":"632","endLine":172,"endColumn":71},{"ruleId":"656","severity":1,"message":"683","line":242,"column":69,"nodeType":"658","messageId":"632","endLine":242,"endColumn":71},{"ruleId":"576","severity":1,"message":"604","line":2,"column":18,"nodeType":"578","messageId":"579","endLine":2,"endColumn":21},{"ruleId":"576","severity":1,"message":"672","line":2,"column":23,"nodeType":"578","messageId":"579","endLine":2,"endColumn":26},{"ruleId":"576","severity":1,"message":"615","line":2,"column":35,"nodeType":"578","messageId":"579","endLine":2,"endColumn":40},{"ruleId":"576","severity":1,"message":"616","line":2,"column":42,"nodeType":"578","messageId":"579","endLine":2,"endColumn":52},{"ruleId":"576","severity":1,"message":"605","line":2,"column":54,"nodeType":"578","messageId":"579","endLine":2,"endColumn":59},{"ruleId":"576","severity":1,"message":"590","line":2,"column":91,"nodeType":"578","messageId":"579","endLine":2,"endColumn":99},{"ruleId":"576","severity":1,"message":"641","line":2,"column":101,"nodeType":"578","messageId":"579","endLine":2,"endColumn":107},{"ruleId":"576","severity":1,"message":"622","line":3,"column":17,"nodeType":"578","messageId":"579","endLine":3,"endColumn":25},{"ruleId":"576","severity":1,"message":"684","line":7,"column":10,"nodeType":"578","messageId":"579","endLine":7,"endColumn":17},{"ruleId":"576","severity":1,"message":"685","line":28,"column":11,"nodeType":"578","messageId":"579","endLine":28,"endColumn":26},{"ruleId":"656","severity":1,"message":"657","line":80,"column":19,"nodeType":"658","messageId":"632","endLine":80,"endColumn":21},{"ruleId":"656","severity":1,"message":"657","line":83,"column":29,"nodeType":"658","messageId":"632","endLine":83,"endColumn":31},{"ruleId":"656","severity":1,"message":"657","line":85,"column":35,"nodeType":"658","messageId":"632","endLine":85,"endColumn":37},{"ruleId":"656","severity":1,"message":"657","line":102,"column":29,"nodeType":"658","messageId":"632","endLine":102,"endColumn":31},{"ruleId":"656","severity":1,"message":"657","line":105,"column":35,"nodeType":"658","messageId":"632","endLine":105,"endColumn":37},{"ruleId":"656","severity":1,"message":"657","line":113,"column":35,"nodeType":"658","messageId":"632","endLine":113,"endColumn":37},{"ruleId":"656","severity":1,"message":"657","line":122,"column":31,"nodeType":"658","messageId":"632","endLine":122,"endColumn":33},{"ruleId":"656","severity":1,"message":"657","line":132,"column":25,"nodeType":"658","messageId":"632","endLine":132,"endColumn":27},{"ruleId":"656","severity":1,"message":"657","line":135,"column":31,"nodeType":"658","messageId":"632","endLine":135,"endColumn":33},{"ruleId":"656","severity":1,"message":"657","line":142,"column":31,"nodeType":"658","messageId":"632","endLine":142,"endColumn":33},{"ruleId":"656","severity":1,"message":"657","line":150,"column":27,"nodeType":"658","messageId":"632","endLine":150,"endColumn":29},{"ruleId":"584","severity":1,"message":"679","line":169,"column":46,"nodeType":"586","endLine":169,"endColumn":48,"suggestions":"686"},{"ruleId":"576","severity":1,"message":"677","line":171,"column":11,"nodeType":"578","messageId":"579","endLine":171,"endColumn":25},{"ruleId":"576","severity":1,"message":"687","line":182,"column":11,"nodeType":"578","messageId":"579","endLine":182,"endColumn":37},{"ruleId":"656","severity":1,"message":"657","line":203,"column":28,"nodeType":"658","messageId":"632","endLine":203,"endColumn":30},{"ruleId":"576","severity":1,"message":"688","line":226,"column":12,"nodeType":"578","messageId":"579","endLine":226,"endColumn":19},{"ruleId":"576","severity":1,"message":"689","line":228,"column":12,"nodeType":"578","messageId":"579","endLine":228,"endColumn":19},{"ruleId":"576","severity":1,"message":"690","line":229,"column":11,"nodeType":"578","messageId":"579","endLine":229,"endColumn":25},{"ruleId":"656","severity":1,"message":"657","line":259,"column":58,"nodeType":"658","messageId":"632","endLine":259,"endColumn":60},{"ruleId":"656","severity":1,"message":"657","line":294,"column":58,"nodeType":"658","messageId":"632","endLine":294,"endColumn":60},{"ruleId":"576","severity":1,"message":"654","line":1,"column":21,"nodeType":"578","messageId":"579","endLine":1,"endColumn":32},{"ruleId":"576","severity":1,"message":"604","line":1,"column":93,"nodeType":"578","messageId":"579","endLine":1,"endColumn":96},{"ruleId":"576","severity":1,"message":"691","line":2,"column":10,"nodeType":"578","messageId":"579","endLine":2,"endColumn":19},{"ruleId":"576","severity":1,"message":"692","line":3,"column":10,"nodeType":"578","messageId":"579","endLine":3,"endColumn":16},{"ruleId":"576","severity":1,"message":"693","line":5,"column":10,"nodeType":"578","messageId":"579","endLine":5,"endColumn":15},{"ruleId":"576","severity":1,"message":"694","line":12,"column":9,"nodeType":"578","messageId":"579","endLine":12,"endColumn":16},{"ruleId":"576","severity":1,"message":"625","line":17,"column":13,"nodeType":"578","messageId":"579","endLine":17,"endColumn":17},{"ruleId":"576","severity":1,"message":"695","line":17,"column":19,"nodeType":"578","messageId":"579","endLine":17,"endColumn":25},{"ruleId":"576","severity":1,"message":"696","line":17,"column":27,"nodeType":"578","messageId":"579","endLine":17,"endColumn":49},{"ruleId":"584","severity":1,"message":"679","line":47,"column":8,"nodeType":"586","endLine":47,"endColumn":10,"suggestions":"697"},{"ruleId":"576","severity":1,"message":"698","line":49,"column":11,"nodeType":"578","messageId":"579","endLine":49,"endColumn":21},{"ruleId":"699","severity":1,"message":"700","line":57,"column":44,"nodeType":"701","messageId":"702","endLine":57,"endColumn":46},{"ruleId":"699","severity":1,"message":"700","line":57,"column":70,"nodeType":"701","messageId":"702","endLine":57,"endColumn":72},{"ruleId":"699","severity":1,"message":"703","line":57,"column":70,"nodeType":"701","messageId":"702","endLine":57,"endColumn":72},{"ruleId":"699","severity":1,"message":"703","line":57,"column":104,"nodeType":"701","messageId":"702","endLine":57,"endColumn":106},{"ruleId":"576","severity":1,"message":"704","line":62,"column":19,"nodeType":"578","messageId":"579","endLine":62,"endColumn":28},{"ruleId":"576","severity":1,"message":"705","line":64,"column":23,"nodeType":"578","messageId":"579","endLine":64,"endColumn":34},{"ruleId":"576","severity":1,"message":"705","line":66,"column":23,"nodeType":"578","messageId":"579","endLine":66,"endColumn":34},{"ruleId":"576","severity":1,"message":"661","line":80,"column":12,"nodeType":"578","messageId":"579","endLine":80,"endColumn":17},{"ruleId":"576","severity":1,"message":"682","line":81,"column":11,"nodeType":"578","messageId":"579","endLine":81,"endColumn":23},{"ruleId":"576","severity":1,"message":"662","line":82,"column":12,"nodeType":"578","messageId":"579","endLine":82,"endColumn":18},{"ruleId":"576","severity":1,"message":"706","line":84,"column":12,"nodeType":"578","messageId":"579","endLine":84,"endColumn":18},{"ruleId":"576","severity":1,"message":"707","line":85,"column":11,"nodeType":"578","messageId":"579","endLine":85,"endColumn":24},{"ruleId":"656","severity":1,"message":"657","line":139,"column":62,"nodeType":"658","messageId":"632","endLine":139,"endColumn":64},{"ruleId":"656","severity":1,"message":"657","line":196,"column":68,"nodeType":"658","messageId":"632","endLine":196,"endColumn":70},{"ruleId":"576","severity":1,"message":"652","line":1,"column":10,"nodeType":"578","messageId":"579","endLine":1,"endColumn":24},{"ruleId":"576","severity":1,"message":"653","line":1,"column":26,"nodeType":"578","messageId":"579","endLine":1,"endColumn":38},{"ruleId":"576","severity":1,"message":"603","line":2,"column":24,"nodeType":"578","messageId":"579","endLine":2,"endColumn":30},{"ruleId":"576","severity":1,"message":"708","line":2,"column":32,"nodeType":"578","messageId":"579","endLine":2,"endColumn":42},{"ruleId":"576","severity":1,"message":"709","line":5,"column":26,"nodeType":"578","messageId":"579","endLine":5,"endColumn":32},{"ruleId":"576","severity":1,"message":"606","line":12,"column":13,"nodeType":"578","messageId":"579","endLine":12,"endColumn":23},{"ruleId":"576","severity":1,"message":"710","line":15,"column":11,"nodeType":"578","messageId":"579","endLine":15,"endColumn":29},{"ruleId":"656","severity":1,"message":"657","line":23,"column":33,"nodeType":"658","messageId":"632","endLine":23,"endColumn":35},{"ruleId":"576","severity":1,"message":"711","line":9,"column":37,"nodeType":"578","messageId":"579","endLine":9,"endColumn":46},{"ruleId":"576","severity":1,"message":"712","line":15,"column":11,"nodeType":"578","messageId":"579","endLine":15,"endColumn":22},{"ruleId":"576","severity":1,"message":"606","line":67,"column":11,"nodeType":"578","messageId":"579","endLine":67,"endColumn":21},{"ruleId":"576","severity":1,"message":"713","line":67,"column":23,"nodeType":"578","messageId":"579","endLine":67,"endColumn":35},{"ruleId":"576","severity":1,"message":"711","line":67,"column":37,"nodeType":"578","messageId":"579","endLine":67,"endColumn":46},{"ruleId":"576","severity":1,"message":"714","line":69,"column":9,"nodeType":"578","messageId":"579","endLine":69,"endColumn":12},{"ruleId":"576","severity":1,"message":"715","line":70,"column":9,"nodeType":"578","messageId":"579","endLine":70,"endColumn":12},{"ruleId":"576","severity":1,"message":"716","line":24,"column":15,"nodeType":"578","messageId":"579","endLine":24,"endColumn":21},{"ruleId":"576","severity":1,"message":"654","line":1,"column":21,"nodeType":"578","messageId":"579","endLine":1,"endColumn":32},{"ruleId":"576","severity":1,"message":"694","line":10,"column":9,"nodeType":"578","messageId":"579","endLine":10,"endColumn":16},{"ruleId":"576","severity":1,"message":"714","line":14,"column":11,"nodeType":"578","messageId":"579","endLine":14,"endColumn":14},{"ruleId":"576","severity":1,"message":"695","line":15,"column":26,"nodeType":"578","messageId":"579","endLine":15,"endColumn":32},{"ruleId":"584","severity":1,"message":"679","line":28,"column":8,"nodeType":"586","endLine":28,"endColumn":10,"suggestions":"717"},{"ruleId":"576","severity":1,"message":"718","line":29,"column":11,"nodeType":"578","messageId":"579","endLine":29,"endColumn":22},{"ruleId":"719","severity":1,"message":"720","line":35,"column":12,"nodeType":"721","messageId":"722","endLine":35,"endColumn":81},{"ruleId":"656","severity":1,"message":"657","line":61,"column":48,"nodeType":"658","messageId":"632","endLine":61,"endColumn":50},{"ruleId":"699","severity":1,"message":"700","line":61,"column":57,"nodeType":"701","messageId":"702","endLine":61,"endColumn":59},{"ruleId":"656","severity":1,"message":"657","line":61,"column":74,"nodeType":"658","messageId":"632","endLine":61,"endColumn":76},{"ruleId":"699","severity":1,"message":"700","line":61,"column":86,"nodeType":"701","messageId":"702","endLine":61,"endColumn":88},{"ruleId":"699","severity":1,"message":"703","line":61,"column":86,"nodeType":"701","messageId":"702","endLine":61,"endColumn":88},{"ruleId":"656","severity":1,"message":"657","line":61,"column":126,"nodeType":"658","messageId":"632","endLine":61,"endColumn":128},{"ruleId":"699","severity":1,"message":"703","line":61,"column":135,"nodeType":"701","messageId":"702","endLine":61,"endColumn":137},{"ruleId":"656","severity":1,"message":"657","line":61,"column":152,"nodeType":"658","messageId":"632","endLine":61,"endColumn":154},{"ruleId":"576","severity":1,"message":"723","line":67,"column":23,"nodeType":"578","messageId":"579","endLine":67,"endColumn":28},{"ruleId":"576","severity":1,"message":"723","line":80,"column":23,"nodeType":"578","messageId":"579","endLine":80,"endColumn":28},{"ruleId":"576","severity":1,"message":"724","line":15,"column":12,"nodeType":"578","messageId":"579","endLine":15,"endColumn":22},{"ruleId":"576","severity":1,"message":"725","line":15,"column":24,"nodeType":"578","messageId":"579","endLine":15,"endColumn":36},{"ruleId":"656","severity":1,"message":"657","line":49,"column":22,"nodeType":"658","messageId":"632","endLine":49,"endColumn":24},{"ruleId":"656","severity":1,"message":"657","line":49,"column":35,"nodeType":"658","messageId":"632","endLine":49,"endColumn":37},{"ruleId":"576","severity":1,"message":"726","line":26,"column":12,"nodeType":"578","messageId":"579","endLine":26,"endColumn":20},{"ruleId":"576","severity":1,"message":"727","line":26,"column":22,"nodeType":"578","messageId":"579","endLine":26,"endColumn":30},{"ruleId":"584","severity":1,"message":"679","line":42,"column":8,"nodeType":"586","endLine":42,"endColumn":10,"suggestions":"728"},{"ruleId":"576","severity":1,"message":"726","line":26,"column":12,"nodeType":"578","messageId":"579","endLine":26,"endColumn":20},{"ruleId":"576","severity":1,"message":"727","line":26,"column":22,"nodeType":"578","messageId":"579","endLine":26,"endColumn":30},{"ruleId":"584","severity":1,"message":"679","line":42,"column":8,"nodeType":"586","endLine":42,"endColumn":10,"suggestions":"729"},{"ruleId":"576","severity":1,"message":"677","line":7,"column":7,"nodeType":"578","messageId":"579","endLine":7,"endColumn":21},{"ruleId":"576","severity":1,"message":"687","line":17,"column":7,"nodeType":"578","messageId":"579","endLine":17,"endColumn":33},{"ruleId":"576","severity":1,"message":"687","line":220,"column":9,"nodeType":"578","messageId":"579","endLine":220,"endColumn":35},{"ruleId":"576","severity":1,"message":"681","line":236,"column":11,"nodeType":"578","messageId":"579","endLine":236,"endColumn":17},{"ruleId":"576","severity":1,"message":"714","line":12,"column":11,"nodeType":"578","messageId":"579","endLine":12,"endColumn":14},{"ruleId":"576","severity":1,"message":"730","line":32,"column":27,"nodeType":"578","messageId":"579","endLine":32,"endColumn":33},{"ruleId":"576","severity":1,"message":"716","line":24,"column":15,"nodeType":"578","messageId":"579","endLine":24,"endColumn":21},{"ruleId":"576","severity":1,"message":"731","line":24,"column":15,"nodeType":"578","messageId":"579","endLine":24,"endColumn":23},{"ruleId":"576","severity":1,"message":"732","line":2,"column":3,"nodeType":"578","messageId":"579","endLine":2,"endColumn":16},{"ruleId":"576","severity":1,"message":"733","line":4,"column":3,"nodeType":"578","messageId":"579","endLine":4,"endColumn":20},{"ruleId":"576","severity":1,"message":"734","line":6,"column":3,"nodeType":"578","messageId":"579","endLine":6,"endColumn":15},{"ruleId":"576","severity":1,"message":"735","line":7,"column":3,"nodeType":"578","messageId":"579","endLine":7,"endColumn":28},{"ruleId":"576","severity":1,"message":"736","line":9,"column":3,"nodeType":"578","messageId":"579","endLine":9,"endColumn":15},{"ruleId":"576","severity":1,"message":"737","line":10,"column":3,"nodeType":"578","messageId":"579","endLine":10,"endColumn":17},{"ruleId":"576","severity":1,"message":"738","line":12,"column":3,"nodeType":"578","messageId":"579","endLine":12,"endColumn":19},{"ruleId":"576","severity":1,"message":"635","line":17,"column":10,"nodeType":"578","messageId":"579","endLine":17,"endColumn":21},{"ruleId":"576","severity":1,"message":"739","line":19,"column":10,"nodeType":"578","messageId":"579","endLine":19,"endColumn":26},{"ruleId":"576","severity":1,"message":"740","line":101,"column":20,"nodeType":"578","messageId":"579","endLine":101,"endColumn":28},{"ruleId":"576","severity":1,"message":"741","line":107,"column":9,"nodeType":"578","messageId":"579","endLine":107,"endColumn":20},{"ruleId":"576","severity":1,"message":"616","line":1,"column":10,"nodeType":"578","messageId":"579","endLine":1,"endColumn":20},{"ruleId":"742","severity":1,"message":"743","line":27,"column":27,"nodeType":"744","endLine":27,"endColumn":30},{"ruleId":"576","severity":1,"message":"745","line":64,"column":9,"nodeType":"578","messageId":"579","endLine":64,"endColumn":10},{"ruleId":"746","severity":1,"message":"747","line":83,"column":14,"nodeType":"578","messageId":"748","endLine":83,"endColumn":20},{"ruleId":"749","severity":1,"message":"750","line":21,"column":26,"nodeType":"751","messageId":"752","endLine":21,"endColumn":42},{"ruleId":"749","severity":1,"message":"750","line":22,"column":28,"nodeType":"751","messageId":"752","endLine":22,"endColumn":45},{"ruleId":"749","severity":1,"message":"750","line":23,"column":18,"nodeType":"751","messageId":"752","endLine":23,"endColumn":37},{"ruleId":"576","severity":1,"message":"753","line":1,"column":17,"nodeType":"578","messageId":"579","endLine":1,"endColumn":23},{"ruleId":"576","severity":1,"message":"596","line":1,"column":36,"nodeType":"578","messageId":"579","endLine":1,"endColumn":40},{"ruleId":"576","severity":1,"message":"709","line":4,"column":24,"nodeType":"578","messageId":"579","endLine":4,"endColumn":30},{"ruleId":"576","severity":1,"message":"754","line":15,"column":8,"nodeType":"578","messageId":"579","endLine":15,"endColumn":12},{"ruleId":"576","severity":1,"message":"755","line":48,"column":11,"nodeType":"578","messageId":"579","endLine":48,"endColumn":20},{"ruleId":"576","severity":1,"message":"756","line":104,"column":5,"nodeType":"578","messageId":"579","endLine":104,"endColumn":9},"@typescript-eslint/no-unused-vars","'Provider' is defined but never used.","Identifier","unusedVar","'store' is defined but never used.","'AntdLayout' is defined but never used.","'setToken' is assigned a value but never used.","'Router' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'beatFunc' and 'interval'. Either include them or remove the dependency array.","ArrayExpression",["757"],"React Hook React.useEffect has a missing dependency: 'beatFunc'. Either include it or remove the dependency array.",["758"],"'Checkbox' is defined but never used.","'BgProfile' is defined but never used.","'DingtalkOutlined' is defined but never used.","'SyncOutlined' is defined but never used.","'redirect' is defined but never used.","'onClick' is assigned a value but never used.","'Card' is defined but never used.","'navigate' is assigned a value but never used.","'Layout' is defined but never used.","'AntdLayoutMenu' is defined but never used.","'StatusOverview' is defined but never used.","'Outlet' is defined but never used.","'Link' is defined but never used.","'Button' is defined but never used.","'Col' is defined but never used.","'Modal' is defined but never used.","'onEditItem' is assigned a value but never used.","'onCreateItem' is assigned a value but never used.","'Router2Table' is defined but never used.","'Title' is assigned a value but never used.","'Paragraph' is assigned a value but never used.","'Text' is assigned a value but never used.","'Link' is assigned a value but never used.","'data2' is assigned a value but never used.","'Space' is defined but never used.","'Table' is defined but never used.","'Typography' is defined but never used.","'Input' is defined but never used.","'Select' is defined but never used.","'message' is defined but never used.","'Form' is defined but never used.","'UploadFirmware' is defined but never used.","'useState' is defined but never used.","'useRef' is defined but never used.","'ubusApi' is defined but never used.","'item' is assigned a value but never used.","'setItem' is assigned a value but never used.","'showModal' is assigned a value but never used.","'setShowModal' is assigned a value but never used.","no-dupe-keys","Duplicate key 'White_space_and_special_characters_are_not_valid'.","ObjectExpression","unexpected","Duplicate key 'Password_must_be_minimum_8_characters'.","Duplicate key 'wpa_passphrase'.","'useSelector' is defined but never used.","'sessionSelector' is defined but never used.","'List' is defined but never used.","'Descriptions' is defined but never used.","'Avatar' is defined but never used.","'Radio' is defined but never used.","'Switch' is defined but never used.","'Upload' is defined but never used.","'FacebookOutlined' is defined but never used.","'TwitterOutlined' is defined but never used.","'InstagramOutlined' is defined but never used.","'VerticalAlignTopOutlined' is defined but never used.","'LancsnetIcon' is defined but never used.","'LoginButton' is defined but never used.","'ThemeSwitch' is defined but never used.","'Session' is defined but never used.","'theme' is assigned a value but never used.","'DeleteOutlined' is defined but never used.","'EditOutlined' is defined but never used.","'antdMessage' is defined but never used.","'CheckboxChangeEvent' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","React Hook React.useEffect has a missing dependency: 'loadPWD'. Either include it or remove the dependency array.",["759"],"'value' is assigned a value but never used.","'value1' is assigned a value but never used.","'Component' is defined but never used.","'useReducer' is defined but never used.","'Tag' is defined but never used.","'useTranslation' is defined but never used.","'render' is defined but never used.","'RadialTreeGraph' is defined but never used.","'t' is defined but never used.","'escape' is defined but never used.","'config1' is assigned a value but never used.","'Row' is defined but never used.","'encryption' is assigned a value but never used.","'setEncryption' is assigned a value but never used.","'pwd' is assigned a value but never used.","'setPWD' is assigned a value but never used.","'formItemLayout' is assigned a value but never used.","'optionUnit' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'refreshData'. Either include it or remove the dependency array.",["760"],"'result' is assigned a value but never used.","'handleChange' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'current' is defined but never used.","'optionStatusWan' is assigned a value but never used.",["761"],"'formItemLayoutWithOutLabel' is assigned a value but never used.","'valuev4' is assigned a value but never used.","'valuev6' is assigned a value but never used.","'handleChangev6' is assigned a value but never used.","'constants' is defined but never used.","'access' is defined but never used.","'Await' is defined but never used.","'pattern' is assigned a value but never used.","'onDone' is assigned a value but never used.","'optionsParentInterface' is assigned a value but never used.",["762"],"'onChangeIP' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","'config_ip' is assigned a value but never used.","'config_dhcp' is assigned a value but never used.","'value2' is assigned a value but never used.","'handleChange2' is assigned a value but never used.","'Popconfirm' is defined but never used.","'hrsize' is defined but never used.","'confirmDeleteGroup' is assigned a value but never used.","'tableData' is assigned a value but never used.","'deleteRoute' is assigned a value but never used.","'onDeleteItem' is assigned a value but never used.","'abc' is assigned a value but never used.","'def' is assigned a value but never used.","'reboot' is assigned a value but never used.",["763"],"'refreshPage' is assigned a value but never used.","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'param' is assigned a value but never used.","'do_upgrade' is assigned a value but never used.","'setDoUpgrade' is assigned a value but never used.","'hostname' is assigned a value but never used.","'setValue' is assigned a value but never used.",["764"],["765"],"'status' is assigned a value but never used.","'shutdown' is assigned a value but never used.","'TableOutlined' is defined but never used.","'PartitionOutlined' is defined but never used.","'UserOutlined' is defined but never used.","'SafetyCertificateOutlined' is defined but never used.","'WifiOutlined' is defined but never used.","'SafetyOutlined' is defined but never used.","'SolutionOutlined' is defined but never used.","'appStateSelector' is defined but never used.","'selected' is assigned a value but never used.","'refreshData' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'i' is assigned a value but never used.","@typescript-eslint/no-redeclare","'client' is already defined.","redeclared","no-new-wrappers","Do not use String as a constructor.","NewExpression","noConstructor","'Result' is defined but never used.","'Icon' is defined but never used.","'localtime' is assigned a value but never used.","'free' is assigned a value but never used.",{"desc":"766","fix":"767"},{"desc":"768","fix":"769"},{"desc":"770","fix":"771"},{"desc":"772","fix":"773"},{"desc":"772","fix":"774"},{"desc":"772","fix":"775"},{"desc":"772","fix":"776"},{"desc":"772","fix":"777"},{"desc":"772","fix":"778"},"Update the dependencies array to be: [beatFunc, interval]",{"range":"779","text":"780"},"Update the dependencies array to be: [beatFunc, session]",{"range":"781","text":"782"},"Update the dependencies array to be: [loadPWD]",{"range":"783","text":"784"},"Update the dependencies array to be: [refreshData]",{"range":"785","text":"786"},{"range":"787","text":"786"},{"range":"788","text":"786"},{"range":"789","text":"786"},{"range":"790","text":"786"},{"range":"791","text":"786"},[910,912],"[beatFunc, interval]",[961,970],"[beatFunc, session]",[1388,1390],"[loadPWD]",[2662,2664],"[refreshData]",[7501,7503],[2046,2048],[1038,1040],[1184,1186],[1184,1186]]