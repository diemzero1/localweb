{"ast":null,"code":"/**\n * 获取分类字段 key 值 一个分类值的时候， 返回非索引 key 值，在 tooltip 不做索引区分\n * @param values 数据量\n * @param field 指标字段\n * @param index 索引\n * @returns string\n */\nfunction getSeriesFieldKey(values, field, index) {\n  return values.length > 1 ? field + \"_\" + index : \"\" + field;\n}\n/**\n * bullet 处理数据\n * @param options\n */\nexport function transformData(options) {\n  var data = options.data,\n    xField = options.xField,\n    measureField = options.measureField,\n    rangeField = options.rangeField,\n    targetField = options.targetField,\n    layout = options.layout;\n  var ds = [];\n  var scales = [];\n  data.forEach(function (item, index) {\n    // 构建 title * range\n    var rangeValues = [item[rangeField]].flat();\n    rangeValues.sort(function (a, b) {\n      return a - b;\n    });\n    rangeValues.forEach(function (d, i) {\n      var _a;\n      var range = i === 0 ? d : rangeValues[i] - rangeValues[i - 1];\n      ds.push((_a = {\n        rKey: rangeField + \"_\" + i\n      }, _a[xField] = xField ? item[xField] : String(index), _a[rangeField] = range, _a));\n    });\n    // 构建 title * measure\n    var measureValues = [item[measureField]].flat();\n    measureValues.forEach(function (d, i) {\n      var _a;\n      ds.push((_a = {\n        mKey: getSeriesFieldKey(measureValues, measureField, i)\n      }, _a[xField] = xField ? item[xField] : String(index), _a[measureField] = d, _a));\n    });\n    // 构建 title * target\n    var targetValues = [item[targetField]].flat();\n    targetValues.forEach(function (d, i) {\n      var _a;\n      ds.push((_a = {\n        tKey: getSeriesFieldKey(targetValues, targetField, i)\n      }, _a[xField] = xField ? item[xField] : String(index), _a[targetField] = d, _a));\n    });\n    // 为了取最大值和最小值，先存储\n    scales.push(item[rangeField], item[measureField], item[targetField]);\n  });\n  // scales 是嵌套的需要拍平\n  var min = Math.min.apply(Math, scales.flat(Infinity));\n  var max = Math.max.apply(Math, scales.flat(Infinity));\n  // min 大于 0 从 0 开始\n  min = min > 0 ? 0 : min;\n  // 垂直情况，需要反转数据\n  if (layout === 'vertical') {\n    ds.reverse();\n  }\n  return {\n    min: min,\n    max: max,\n    ds: ds\n  };\n}","map":{"version":3,"mappings":"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","names":["getSeriesFieldKey","values","field","index","length","transformData","options","xField","measureField","rangeField","targetField","layout","ds","scales","data","forEach","item","rangeValues","flat","sort","a","b","d","i","range","push","rKey","_a","String","measureValues","mKey","targetValues","tKey","min","Math","Infinity","max","reverse"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/g2plot/src/plots/bullet/utils.ts"],"sourcesContent":["import { BulletOptions } from './types';\n\ntype TransformData = {\n  min: number;\n  max: number;\n  ds: any[];\n};\n\n/**\n * 获取分类字段 key 值 一个分类值的时候， 返回非索引 key 值，在 tooltip 不做索引区分\n * @param values 数据量\n * @param field 指标字段\n * @param index 索引\n * @returns string\n */\nfunction getSeriesFieldKey(values: number[], field: string, index: number): string {\n  return values.length > 1 ? `${field}_${index}` : `${field}`;\n}\n\n/**\n * bullet 处理数据\n * @param options\n */\nexport function transformData(options: BulletOptions): TransformData {\n  const { data, xField, measureField, rangeField, targetField, layout } = options;\n  const ds: any[] = [];\n  const scales: number[] = [];\n  data.forEach((item: any, index: number) => {\n    // 构建 title * range\n    const rangeValues = [item[rangeField]].flat();\n    rangeValues.sort((a: number, b: number) => a - b);\n    rangeValues.forEach((d: number, i: number) => {\n      const range = i === 0 ? d : rangeValues[i] - rangeValues[i - 1];\n      ds.push({\n        rKey: `${rangeField}_${i}`,\n        [xField]: xField ? item[xField] : String(index), // 没有xField就用索引\n        [rangeField]: range,\n      });\n    });\n\n    // 构建 title * measure\n    const measureValues = [item[measureField]].flat();\n    measureValues.forEach((d: number, i: number) => {\n      ds.push({\n        mKey: getSeriesFieldKey(measureValues, measureField, i),\n        [xField]: xField ? item[xField] : String(index),\n        [measureField]: d,\n      });\n    });\n\n    // 构建 title * target\n    const targetValues = [item[targetField]].flat();\n    targetValues.forEach((d: number, i: number) => {\n      ds.push({\n        tKey: getSeriesFieldKey(targetValues, targetField, i),\n        [xField]: xField ? item[xField] : String(index),\n        [targetField]: d,\n      });\n    });\n\n    // 为了取最大值和最小值，先存储\n    scales.push(item[rangeField], item[measureField], item[targetField]);\n  });\n  // scales 是嵌套的需要拍平\n  let min = Math.min(...scales.flat(Infinity));\n  const max = Math.max(...scales.flat(Infinity));\n  // min 大于 0 从 0 开始\n  min = min > 0 ? 0 : min;\n\n  // 垂直情况，需要反转数据\n  if (layout === 'vertical') {\n    ds.reverse();\n  }\n  return { min, max, ds };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}