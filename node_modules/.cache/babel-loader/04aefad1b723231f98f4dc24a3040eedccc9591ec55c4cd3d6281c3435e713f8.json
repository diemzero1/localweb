{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { ext } from '@antv/matrix-util';\nimport { each, filter, get, isFunction, isNil, isNumberEqual, mix, size } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nimport { getMatrixByAngle } from '../util/matrix';\nimport { getStatesStyle } from '../util/state';\nimport Theme from '../util/theme';\nvar AxisBase = /** @class */function (_super) {\n  __extends(AxisBase, _super);\n  function AxisBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  AxisBase.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    return __assign(__assign({}, cfg), {\n      name: 'axis',\n      ticks: [],\n      line: {},\n      tickLine: {},\n      subTickLine: null,\n      title: null,\n      /**\n       * 文本标签的配置项\n       */\n      label: {},\n      /**\n       * 垂直于坐标轴方向的因子，决定文本、title、tickLine 在坐标轴的哪一侧\n       */\n      verticalFactor: 1,\n      // 垂直方向限制的长度，对文本自适应有很大影响\n      verticalLimitLength: null,\n      overlapOrder: ['autoRotate', 'autoEllipsis', 'autoHide'],\n      tickStates: {},\n      optimize: {},\n      defaultCfg: {\n        line: {\n          // @type {Attrs} 坐标轴线的图形属性,如果设置成null，则不显示轴线\n          style: {\n            lineWidth: 1,\n            stroke: Theme.lineColor\n          }\n        },\n        tickLine: {\n          // @type {Attrs} 标注坐标线的图形属性\n          style: {\n            lineWidth: 1,\n            stroke: Theme.lineColor\n          },\n          alignTick: true,\n          length: 5,\n          displayWithLabel: true\n        },\n        subTickLine: {\n          // @type {Attrs} 标注坐标线的图形属性\n          style: {\n            lineWidth: 1,\n            stroke: Theme.lineColor\n          },\n          count: 4,\n          length: 2\n        },\n        label: {\n          autoRotate: true,\n          autoHide: false,\n          autoEllipsis: false,\n          style: {\n            fontSize: 12,\n            fill: Theme.textColor,\n            fontFamily: Theme.fontFamily,\n            fontWeight: 'normal'\n          },\n          offset: 10,\n          offsetX: 0,\n          offsetY: 0\n        },\n        title: {\n          autoRotate: true,\n          spacing: 5,\n          position: 'center',\n          style: {\n            fontSize: 12,\n            fill: Theme.textColor,\n            textBaseline: 'middle',\n            fontFamily: Theme.fontFamily,\n            textAlign: 'center'\n          },\n          iconStyle: {\n            fill: Theme.descriptionIconFill,\n            stroke: Theme.descriptionIconStroke\n          },\n          description: ''\n        },\n        tickStates: {\n          active: {\n            labelStyle: {\n              fontWeight: 500\n            },\n            tickLineStyle: {\n              lineWidth: 2\n            }\n          },\n          inactive: {\n            labelStyle: {\n              fill: Theme.uncheckedColor\n            }\n          }\n        },\n        // 针对大数据量进行优化配置\n        optimize: {\n          enable: true,\n          threshold: 400\n        }\n      },\n      theme: {}\n    });\n  };\n  /**\n   * 绘制组件\n   */\n  AxisBase.prototype.renderInner = function (group) {\n    if (this.get('line')) {\n      this.drawLine(group);\n    }\n    // drawTicks 包括 drawLabels 和 drawTickLines\n    this.drawTicks(group);\n    if (this.get('title')) {\n      this.drawTitle(group);\n    }\n  };\n  // 实现 IList 接口\n  AxisBase.prototype.isList = function () {\n    return true;\n  };\n  /**\n   * 获取图例项\n   * @return {ListItem[]} 列表项集合\n   */\n  AxisBase.prototype.getItems = function () {\n    return this.get('ticks');\n  };\n  /**\n   * 设置列表项\n   * @param {ListItem[]} items 列表项集合\n   */\n  AxisBase.prototype.setItems = function (items) {\n    this.update({\n      ticks: items\n    });\n  };\n  /**\n   * 更新列表项\n   * @param {ListItem} item 列表项\n   * @param {object}   cfg  列表项\n   */\n  AxisBase.prototype.updateItem = function (item, cfg) {\n    mix(item, cfg);\n    this.clear(); // 由于单个图例项变化，会引起全局变化，所以全部更新\n    this.render();\n  };\n  /**\n   * 清空列表\n   */\n  AxisBase.prototype.clearItems = function () {\n    var itemGroup = this.getElementByLocalId('label-group');\n    itemGroup && itemGroup.clear();\n  };\n  /**\n   * 设置列表项的状态\n   * @param {ListItem} item  列表项\n   * @param {string}   state 状态名\n   * @param {boolean}  value 状态值, true, false\n   */\n  AxisBase.prototype.setItemState = function (item, state, value) {\n    item[state] = value;\n    this.updateTickStates(item); // 应用状态样式\n  };\n  /**\n   * 是否存在指定的状态\n   * @param {ListItem} item  列表项\n   * @param {boolean} state 状态名\n   */\n  AxisBase.prototype.hasState = function (item, state) {\n    return !!item[state];\n  };\n  AxisBase.prototype.getItemStates = function (item) {\n    var tickStates = this.get('tickStates');\n    var rst = [];\n    each(tickStates, function (v, k) {\n      if (item[k]) {\n        // item.selected\n        rst.push(k);\n      }\n    });\n    return rst;\n  };\n  /**\n   * 清楚所有列表项的状态\n   * @param {string} state 状态值\n   */\n  AxisBase.prototype.clearItemsState = function (state) {\n    var _this = this;\n    var items = this.getItemsByState(state);\n    each(items, function (item) {\n      _this.setItemState(item, state, false);\n    });\n  };\n  /**\n   * 根据状态获取图例项\n   * @param  {string}     state [description]\n   * @return {ListItem[]}       [description]\n   */\n  AxisBase.prototype.getItemsByState = function (state) {\n    var _this = this;\n    var items = this.getItems();\n    return filter(items, function (item) {\n      return _this.hasState(item, state);\n    });\n  };\n  AxisBase.prototype.getSidePoint = function (point, offset) {\n    var self = this;\n    var vector = self.getSideVector(offset, point);\n    return {\n      x: point.x + vector[0],\n      y: point.y + vector[1]\n    };\n  };\n  AxisBase.prototype.getTextAnchor = function (vector) {\n    var align;\n    if (isNumberEqual(vector[0], 0)) {\n      align = 'center';\n    } else if (vector[0] > 0) {\n      align = 'start';\n    } else if (vector[0] < 0) {\n      align = 'end';\n    }\n    return align;\n  };\n  AxisBase.prototype.getTextBaseline = function (vector) {\n    var base;\n    if (isNumberEqual(vector[1], 0)) {\n      base = 'middle';\n    } else if (vector[1] > 0) {\n      base = 'top';\n    } else if (vector[1] < 0) {\n      base = 'bottom';\n    }\n    return base;\n  };\n  AxisBase.prototype.processOverlap = function (labelGroup) {};\n  // 绘制坐标轴线\n  AxisBase.prototype.drawLine = function (group) {\n    var path = this.getLinePath();\n    var line = this.get('line'); // line 的判空在调用 drawLine 之前，不在这里判定\n    this.addShape(group, {\n      type: 'path',\n      id: this.getElementId('line'),\n      name: 'axis-line',\n      attrs: mix({\n        path: path\n      }, line.style)\n    });\n  };\n  AxisBase.prototype.getTickLineItems = function (ticks) {\n    var _this = this;\n    var tickLineItems = [];\n    var tickLine = this.get('tickLine');\n    var alignTick = tickLine.alignTick;\n    var tickLineLength = tickLine.length;\n    var tickSegment = 1;\n    var tickCount = ticks.length;\n    if (tickCount >= 2) {\n      tickSegment = ticks[1].value - ticks[0].value;\n    }\n    each(ticks, function (tick) {\n      var point = tick.point;\n      if (!alignTick) {\n        // tickLine 不同 tick 对齐时需要调整 point\n        point = _this.getTickPoint(tick.value - tickSegment / 2);\n      }\n      var endPoint = _this.getSidePoint(point, tickLineLength);\n      tickLineItems.push({\n        startPoint: point,\n        tickValue: tick.value,\n        endPoint: endPoint,\n        tickId: tick.id,\n        id: \"tickline-\" + tick.id\n      });\n    });\n    // 如果 tickLine 不居中对齐，则需要在最后面补充一个 tickLine\n    // if (!alignTick && tickCount > 0) {\n    //   const tick = ticks[tickCount - 1];\n    //   const point = this.getTickPoint(tick.value + tickSegment / 2);\n    // }\n    return tickLineItems;\n  };\n  AxisBase.prototype.getSubTickLineItems = function (tickLineItems) {\n    var subTickLineItems = [];\n    var subTickLine = this.get('subTickLine');\n    var subCount = subTickLine.count;\n    var tickLineCount = tickLineItems.length;\n    // 刻度线的数量大于 2 时，才绘制子刻度\n    if (tickLineCount >= 2) {\n      for (var i = 0; i < tickLineCount - 1; i++) {\n        var pre = tickLineItems[i];\n        var next = tickLineItems[i + 1];\n        for (var j = 0; j < subCount; j++) {\n          var percent = (j + 1) / (subCount + 1);\n          var tickValue = (1 - percent) * pre.tickValue + percent * next.tickValue;\n          var point = this.getTickPoint(tickValue);\n          var endPoint = this.getSidePoint(point, subTickLine.length);\n          subTickLineItems.push({\n            startPoint: point,\n            endPoint: endPoint,\n            tickValue: tickValue,\n            id: \"sub-\" + pre.id + \"-\" + j\n          });\n        }\n      }\n    }\n    return subTickLineItems;\n  };\n  AxisBase.prototype.getTickLineAttrs = function (tickItem, type, index, tickItems) {\n    var style = this.get(type).style;\n    // 保持和 grid 相同的数据结构\n    var item = {\n      points: [tickItem.startPoint, tickItem.endPoint]\n    };\n    var defaultTickLineStyle = get(this.get('theme'), ['tickLine', 'style'], {});\n    style = isFunction(style) ? mix({}, defaultTickLineStyle, style(item, index, tickItems)) : style;\n    var startPoint = tickItem.startPoint,\n      endPoint = tickItem.endPoint;\n    return __assign({\n      x1: startPoint.x,\n      y1: startPoint.y,\n      x2: endPoint.x,\n      y2: endPoint.y\n    }, style);\n  };\n  // 绘制坐标轴刻度线\n  AxisBase.prototype.drawTick = function (tickItem, tickLineGroup, type, index, tickItems) {\n    this.addShape(tickLineGroup, {\n      type: 'line',\n      id: this.getElementId(tickItem.id),\n      name: \"axis-\" + type,\n      attrs: this.getTickLineAttrs(tickItem, type, index, tickItems)\n    });\n  };\n  // 绘制坐标轴刻度线，包括子刻度线\n  AxisBase.prototype.drawTickLines = function (group) {\n    var _this = this;\n    var ticks = this.get('ticks');\n    var subTickLine = this.get('subTickLine');\n    var tickLineItems = this.getTickLineItems(ticks);\n    var tickLineGroup = this.addGroup(group, {\n      name: 'axis-tickline-group',\n      id: this.getElementId('tickline-group')\n    });\n    var tickCfg = this.get('tickLine');\n    each(tickLineItems, function (item, index) {\n      if (tickCfg.displayWithLabel) {\n        // 如果跟随 label 显示，则检测是否存在对应的 label\n        var labelId = _this.getElementId(\"label-\" + item.tickId);\n        if (group.findById(labelId)) {\n          _this.drawTick(item, tickLineGroup, 'tickLine', index, tickLineItems);\n        }\n      } else {\n        _this.drawTick(item, tickLineGroup, 'tickLine', index, tickLineItems);\n      }\n    });\n    if (subTickLine) {\n      var subTickLineItems_1 = this.getSubTickLineItems(tickLineItems);\n      each(subTickLineItems_1, function (item, index) {\n        _this.drawTick(item, tickLineGroup, 'subTickLine', index, subTickLineItems_1);\n      });\n    }\n  };\n  // 预处理 ticks 确定位置和补充 id\n  AxisBase.prototype.processTicks = function () {\n    var _this = this;\n    var ticks = this.get('ticks');\n    each(ticks, function (tick) {\n      tick.point = _this.getTickPoint(tick.value);\n      // 补充 tick 的 id，为动画和更新做准备\n      if (isNil(tick.id)) {\n        // 默认使用 tick.name 作为id\n        tick.id = tick.name;\n      }\n    });\n  };\n  // 绘制 ticks 包括文本和 tickLine\n  AxisBase.prototype.drawTicks = function (group) {\n    var _this = this;\n    this.optimizeTicks();\n    this.processTicks();\n    if (this.get('label')) {\n      this.drawLabels(group);\n    }\n    if (this.get('tickLine')) {\n      this.drawTickLines(group);\n    }\n    var ticks = this.get('ticks');\n    each(ticks, function (tick) {\n      _this.applyTickStates(tick, group);\n    });\n  };\n  /**\n   * 根据 optimize 配置对 ticks 进行抽样，对抽样过后的 ticks 才进行真实的渲染\n   */\n  AxisBase.prototype.optimizeTicks = function () {\n    var optimize = this.get('optimize');\n    var ticks = this.get('ticks');\n    if (optimize && optimize.enable && optimize.threshold > 0) {\n      var len = size(ticks);\n      if (len > optimize.threshold) {\n        var page_1 = Math.ceil(len / optimize.threshold);\n        var optimizedTicks = ticks.filter(function (tick, idx) {\n          return idx % page_1 === 0;\n        });\n        this.set('ticks', optimizedTicks);\n        this.set('originalTicks', ticks);\n      }\n    }\n  };\n  // 获取 label 的配置项\n  AxisBase.prototype.getLabelAttrs = function (tick, index, ticks) {\n    var labelCfg = this.get('label');\n    var offset = labelCfg.offset,\n      offsetX = labelCfg.offsetX,\n      offsetY = labelCfg.offsetY,\n      rotate = labelCfg.rotate,\n      formatter = labelCfg.formatter;\n    var point = this.getSidePoint(tick.point, offset);\n    var vector = this.getSideVector(offset, point);\n    var text = formatter ? formatter(tick.name, tick, index) : tick.name;\n    var style = labelCfg.style;\n    style = isFunction(style) ? get(this.get('theme'), ['label', 'style'], {}) : style;\n    var attrs = mix({\n      x: point.x + offsetX,\n      y: point.y + offsetY,\n      text: text,\n      textAlign: this.getTextAnchor(vector),\n      textBaseline: this.getTextBaseline(vector)\n    }, style);\n    if (rotate) {\n      attrs.matrix = getMatrixByAngle(point, rotate);\n    }\n    return attrs;\n  };\n  // 绘制文本\n  AxisBase.prototype.drawLabels = function (group) {\n    var _this = this;\n    var ticks = this.get('ticks');\n    var labelGroup = this.addGroup(group, {\n      name: 'axis-label-group',\n      id: this.getElementId('label-group')\n    });\n    each(ticks, function (tick, index) {\n      _this.addShape(labelGroup, {\n        type: 'text',\n        name: 'axis-label',\n        id: _this.getElementId(\"label-\" + tick.id),\n        attrs: _this.getLabelAttrs(tick, index, ticks),\n        delegateObject: {\n          tick: tick,\n          item: tick,\n          index: index\n        }\n      });\n    });\n    this.processOverlap(labelGroup);\n    // 处理完后再进行 style 回调处理\n    var labels = labelGroup.getChildren();\n    var defaultLabelStyle = get(this.get('theme'), ['label', 'style'], {});\n    var _a = this.get('label'),\n      style = _a.style,\n      formatter = _a.formatter;\n    if (isFunction(style)) {\n      var afterProcessTicks_1 = labels.map(function (label) {\n        return get(label.get('delegateObject'), 'tick');\n      });\n      each(labels, function (label, index) {\n        var tick = label.get('delegateObject').tick;\n        var text = formatter ? formatter(tick.name, tick, index) : tick.name;\n        var newStyle = mix({}, defaultLabelStyle, style(text, index, afterProcessTicks_1));\n        label.attr(newStyle);\n      });\n    }\n  };\n  // 标题的属性\n  AxisBase.prototype.getTitleAttrs = function () {\n    var titleCfg = this.get('title');\n    var style = titleCfg.style,\n      position = titleCfg.position,\n      offset = titleCfg.offset,\n      _a = titleCfg.spacing,\n      spacing = _a === void 0 ? 0 : _a,\n      autoRotate = titleCfg.autoRotate;\n    var titleHeight = style.fontSize;\n    var percent = 0.5;\n    if (position === 'start') {\n      percent = 0;\n    } else if (position === 'end') {\n      percent = 1;\n    }\n    var point = this.getTickPoint(percent); // 标题对应的坐标轴上的点\n    // 如果没有指定 titleOffset 也没有渲染 label，这里需要自动计算 offset\n    var titlePoint = this.getSidePoint(point, offset || spacing + titleHeight / 2); // 标题的点\n    var attrs = mix({\n      x: titlePoint.x,\n      y: titlePoint.y,\n      text: titleCfg.text\n    }, style);\n    var rotate = titleCfg.rotate; // rotate 是角度值\n    var angle = rotate;\n    if (isNil(rotate) && autoRotate) {\n      // 用户没有设定旋转角度，同时设置自动旋转\n      var vector = this.getAxisVector(point);\n      var v1 = [1, 0]; // 水平方向的向量\n      angle = ext.angleTo(vector, v1, true);\n    }\n    if (angle) {\n      var matrix = getMatrixByAngle(titlePoint, angle);\n      attrs.matrix = matrix;\n    }\n    return attrs;\n  };\n  // 绘制标题\n  AxisBase.prototype.drawTitle = function (group) {\n    var _a;\n    var titleAttrs = this.getTitleAttrs();\n    var titleShape = this.addShape(group, {\n      type: 'text',\n      id: this.getElementId('title'),\n      name: 'axis-title',\n      attrs: titleAttrs\n    });\n    // description字段存在时，显示icon\n    if ((_a = this.get('title')) === null || _a === void 0 ? void 0 : _a.description) {\n      this.drawDescriptionIcon(group, titleShape, titleAttrs.matrix);\n    }\n  };\n  AxisBase.prototype.drawDescriptionIcon = function (group, titleShape, matrix) {\n    var descriptionShape = this.addGroup(group, {\n      name: 'axis-description',\n      id: this.getElementById('description')\n    });\n    var _a = titleShape.getBBox(),\n      maxX = _a.maxX,\n      maxY = _a.maxY,\n      height = _a.height;\n    var iconStyle = this.get('title').iconStyle;\n    var spacing = 4; // 设置icon与文本之间距离\n    var r = height / 2;\n    var lineWidth = r / 6;\n    var startX = maxX + spacing;\n    var startY = maxY - height / 2;\n    // 绘制 information icon 路径\n    // 外圆环path\n    var _b = [startX + r, startY - r],\n      x0 = _b[0],\n      y0 = _b[1];\n    var _c = [x0 + r, y0 + r],\n      x1 = _c[0],\n      y1 = _c[1];\n    var _d = [x0, y1 + r],\n      x2 = _d[0],\n      y2 = _d[1];\n    var _e = [startX, y0 + r],\n      x3 = _e[0],\n      y3 = _e[1];\n    // i path\n    var _f = [startX + r, startY - height / 4],\n      x4 = _f[0],\n      y4 = _f[1];\n    var _g = [x4, y4 + lineWidth],\n      x5 = _g[0],\n      y5 = _g[1];\n    var _h = [x5, y5 + lineWidth],\n      x6 = _h[0],\n      y6 = _h[1];\n    var _j = [x6, y6 + r * 3 / 4],\n      x7 = _j[0],\n      y7 = _j[1];\n    this.addShape(descriptionShape, {\n      type: 'path',\n      id: this.getElementId('title-description-icon'),\n      name: 'axis-title-description-icon',\n      attrs: __assign({\n        path: [['M', x0, y0], ['A', r, r, 0, 0, 1, x1, y1], ['A', r, r, 0, 0, 1, x2, y2], ['A', r, r, 0, 0, 1, x3, y3], ['A', r, r, 0, 0, 1, x0, y0], ['M', x4, y4], ['L', x5, y5], ['M', x6, y6], ['L', x7, y7]],\n        lineWidth: lineWidth,\n        matrix: matrix\n      }, iconStyle)\n    });\n    // 点击热区，设置透明矩形\n    this.addShape(descriptionShape, {\n      type: 'rect',\n      id: this.getElementId('title-description-rect'),\n      name: 'axis-title-description-rect',\n      attrs: {\n        x: startX,\n        y: startY - height / 2,\n        width: height,\n        height: height,\n        stroke: '#000',\n        fill: '#000',\n        opacity: 0,\n        matrix: matrix,\n        cursor: 'pointer'\n      }\n    });\n  };\n  AxisBase.prototype.applyTickStates = function (tick, group) {\n    var states = this.getItemStates(tick);\n    if (states.length) {\n      var tickStates = this.get('tickStates');\n      // 分别更新 label 和 tickLine\n      var labelId = this.getElementId(\"label-\" + tick.id);\n      var labelShape = group.findById(labelId);\n      if (labelShape) {\n        var labelStateStyle = getStatesStyle(tick, 'label', tickStates);\n        labelStateStyle && labelShape.attr(labelStateStyle);\n      }\n      var tickLineId = this.getElementId(\"tickline-\" + tick.id);\n      var tickLineShape = group.findById(tickLineId);\n      if (tickLineShape) {\n        var tickLineStateStyle = getStatesStyle(tick, 'tickLine', tickStates);\n        tickLineStateStyle && tickLineShape.attr(tickLineStateStyle);\n      }\n    }\n  };\n  AxisBase.prototype.updateTickStates = function (tick) {\n    var states = this.getItemStates(tick);\n    var tickStates = this.get('tickStates');\n    var labelCfg = this.get('label');\n    var labelShape = this.getElementByLocalId(\"label-\" + tick.id);\n    var tickLineCfg = this.get('tickLine');\n    var tickLineShape = this.getElementByLocalId(\"tickline-\" + tick.id);\n    if (states.length) {\n      if (labelShape) {\n        var labelStateStyle = getStatesStyle(tick, 'label', tickStates);\n        labelStateStyle && labelShape.attr(labelStateStyle);\n      }\n      if (tickLineShape) {\n        var tickLineStateStyle = getStatesStyle(tick, 'tickLine', tickStates);\n        tickLineStateStyle && tickLineShape.attr(tickLineStateStyle);\n      }\n    } else {\n      if (labelShape) {\n        labelShape.attr(labelCfg.style);\n      }\n      if (tickLineShape) {\n        tickLineShape.attr(tickLineCfg.style);\n      }\n    }\n  };\n  return AxisBase;\n}(GroupComponent);\nexport default AxisBase;","map":{"version":3,"mappings":"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","names":["ext","each","filter","get","isFunction","isNil","isNumberEqual","mix","size","GroupComponent","getMatrixByAngle","getStatesStyle","Theme","__extends","AxisBase","cfg","_super","getDefaultCfg","name","ticks","line","tickLine","subTickLine","title","label","verticalFactor","verticalLimitLength","overlapOrder","tickStates","optimize","defaultCfg","style","lineWidth","stroke","lineColor","alignTick","length","displayWithLabel","count","autoRotate","autoHide","autoEllipsis","fontSize","fill","textColor","fontFamily","fontWeight","offset","offsetX","offsetY","spacing","position","textBaseline","textAlign","iconStyle","descriptionIconFill","descriptionIconStroke","description","active","labelStyle","tickLineStyle","inactive","uncheckedColor","enable","threshold","theme","group","drawLine","drawTicks","drawTitle","items","update","item","clear","render","itemGroup","getElementByLocalId","state","value","updateTickStates","rst","v","k","push","getItemsByState","_this","setItemState","getItems","hasState","point","self","vector","getSideVector","x","y","align","base","labelGroup","path","getLinePath","addShape","type","id","getElementId","attrs","tickLineItems","tickLineLength","tickSegment","tickCount","tick","getTickPoint","endPoint","getSidePoint","startPoint","tickValue","tickId","subTickLineItems","subCount","tickLineCount","i","pre","next","j","percent","tickItem","index","tickItems","points","defaultTickLineStyle","x1","y1","x2","y2","tickLineGroup","getTickLineAttrs","getTickLineItems","addGroup","tickCfg","labelId","findById","drawTick","subTickLineItems_1","getSubTickLineItems","optimizeTicks","processTicks","drawLabels","drawTickLines","applyTickStates","len","page_1","Math","ceil","optimizedTicks","idx","set","labelCfg","rotate","formatter","text","getTextAnchor","getTextBaseline","matrix","getLabelAttrs","delegateObject","processOverlap","labels","getChildren","defaultLabelStyle","afterProcessTicks_1","map","newStyle","attr","titleCfg","_a","titleHeight","titlePoint","angle","getAxisVector","v1","angleTo","titleAttrs","getTitleAttrs","titleShape","drawDescriptionIcon","descriptionShape","getElementById","getBBox","maxX","maxY","height","r","startX","startY","x0","y0","x3","y3","x4","y4","x5","y5","x6","y6","x7","y7","width","opacity","cursor","states","getItemStates","labelShape","labelStateStyle","tickLineId","tickLineShape","tickLineStateStyle","tickLineCfg"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/component/src/axis/base.ts"],"sourcesContent":["import { IGroup, IShape } from '@antv/g-base';\nimport { ext } from '@antv/matrix-util';\nimport { each, filter, get, isFunction, isNil, isNumberEqual, mix, size, isArray } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nimport { IList } from '../interfaces';\nimport { AxisBaseCfg, ListItem, OptimizeCfg, Point } from '../types';\nimport { getMatrixByAngle } from '../util/matrix';\nimport { getStatesStyle } from '../util/state';\nimport Theme from '../util/theme';\n\nabstract class AxisBase<T extends AxisBaseCfg = AxisBaseCfg> extends GroupComponent<T> implements IList {\n  public getDefaultCfg() {\n    const cfg = super.getDefaultCfg();\n    return {\n      ...cfg,\n      name: 'axis',\n      ticks: [],\n      line: {},\n      tickLine: {},\n      subTickLine: null,\n      title: null,\n      /**\n       * 文本标签的配置项\n       */\n      label: {},\n      /**\n       * 垂直于坐标轴方向的因子，决定文本、title、tickLine 在坐标轴的哪一侧\n       */\n      verticalFactor: 1,\n      // 垂直方向限制的长度，对文本自适应有很大影响\n      verticalLimitLength: null,\n      overlapOrder: ['autoRotate', 'autoEllipsis', 'autoHide'],\n      tickStates: {},\n      optimize: {},\n      defaultCfg: {\n        line: {\n          // @type {Attrs} 坐标轴线的图形属性,如果设置成null，则不显示轴线\n          style: {\n            lineWidth: 1,\n            stroke: Theme.lineColor,\n          },\n        },\n        tickLine: {\n          // @type {Attrs} 标注坐标线的图形属性\n          style: {\n            lineWidth: 1,\n            stroke: Theme.lineColor,\n          },\n          alignTick: true, // 是否同 tick 对齐\n          length: 5,\n          displayWithLabel: true,\n        },\n        subTickLine: {\n          // @type {Attrs} 标注坐标线的图形属性\n          style: {\n            lineWidth: 1,\n            stroke: Theme.lineColor,\n          },\n          count: 4, // 子刻度线的数量，将两个刻度线划分成 5 份\n          length: 2,\n        },\n        label: {\n          autoRotate: true,\n          autoHide: false,\n          autoEllipsis: false,\n          style: {\n            fontSize: 12,\n            fill: Theme.textColor,\n            fontFamily: Theme.fontFamily,\n            fontWeight: 'normal',\n          },\n          offset: 10,\n          offsetX: 0,\n          offsetY: 0,\n        },\n        title: {\n          autoRotate: true,\n          spacing: 5,\n          position: 'center', // start, center, end\n          style: {\n            fontSize: 12,\n            fill: Theme.textColor,\n            textBaseline: 'middle',\n            fontFamily: Theme.fontFamily,\n            textAlign: 'center',\n          },\n          iconStyle: {\n            fill: Theme.descriptionIconFill,\n            stroke: Theme.descriptionIconStroke,\n          },\n          description: ''\n        },\n        tickStates: {\n          active: {\n            labelStyle: {\n              fontWeight: 500,\n            },\n            tickLineStyle: {\n              lineWidth: 2,\n            },\n          },\n          inactive: {\n            labelStyle: {\n              fill: Theme.uncheckedColor,\n            },\n          },\n        },\n        // 针对大数据量进行优化配置\n        optimize: {\n          enable: true,\n          threshold: 400,\n        },\n      },\n      theme: {},\n    };\n  }\n\n  /**\n   * 绘制组件\n   */\n  public renderInner(group: IGroup) {\n    if (this.get('line')) {\n      this.drawLine(group);\n    }\n    // drawTicks 包括 drawLabels 和 drawTickLines\n    this.drawTicks(group);\n    if (this.get('title')) {\n      this.drawTitle(group);\n    }\n  }\n\n  // 实现 IList 接口\n  public isList(): boolean {\n    return true;\n  }\n\n  /**\n   * 获取图例项\n   * @return {ListItem[]} 列表项集合\n   */\n  public getItems(): ListItem[] {\n    return this.get('ticks');\n  }\n\n  /**\n   * 设置列表项\n   * @param {ListItem[]} items 列表项集合\n   */\n  public setItems(items: ListItem[]) {\n    this.update({\n      ticks: items,\n    } as Partial<T>);\n  }\n\n  /**\n   * 更新列表项\n   * @param {ListItem} item 列表项\n   * @param {object}   cfg  列表项\n   */\n  public updateItem(item: ListItem, cfg: object) {\n    mix(item, cfg);\n    this.clear(); // 由于单个图例项变化，会引起全局变化，所以全部更新\n    this.render();\n  }\n\n  /**\n   * 清空列表\n   */\n  public clearItems() {\n    const itemGroup = this.getElementByLocalId('label-group');\n    itemGroup && itemGroup.clear();\n  }\n\n  /**\n   * 设置列表项的状态\n   * @param {ListItem} item  列表项\n   * @param {string}   state 状态名\n   * @param {boolean}  value 状态值, true, false\n   */\n  public setItemState(item: ListItem, state: string, value: boolean) {\n    item[state] = value;\n    this.updateTickStates(item); // 应用状态样式\n  }\n\n  /**\n   * 是否存在指定的状态\n   * @param {ListItem} item  列表项\n   * @param {boolean} state 状态名\n   */\n  public hasState(item: ListItem, state: string): boolean {\n    return !!item[state];\n  }\n\n  public getItemStates(item: ListItem): string[] {\n    const tickStates = this.get('tickStates');\n    const rst = [];\n    each(tickStates, (v, k) => {\n      if (item[k]) {\n        // item.selected\n        rst.push(k);\n      }\n    });\n    return rst;\n  }\n\n  /**\n   * 清楚所有列表项的状态\n   * @param {string} state 状态值\n   */\n  public clearItemsState(state: string) {\n    const items = this.getItemsByState(state);\n    each(items, (item) => {\n      this.setItemState(item, state, false);\n    });\n  }\n\n  /**\n   * 根据状态获取图例项\n   * @param  {string}     state [description]\n   * @return {ListItem[]}       [description]\n   */\n  public getItemsByState(state: string): ListItem[] {\n    const items = this.getItems();\n    return filter(items, (item) => {\n      return this.hasState(item, state);\n    });\n  }\n\n  /**\n   * @protected\n   * 获取坐标轴线的路径，不同的坐标轴不一样\n   */\n  protected abstract getLinePath(): any[];\n\n  /**\n   * 获取坐标轴垂直方向的向量\n   * @param {number} offset 距离点距离\n   * @param {Point} point  坐标轴上的一点\n   */\n  protected abstract getSideVector(offset: number, point: Point);\n  /**\n   * 获取坐标轴的向量\n   * @param {Point} point 坐标轴上的点\n   */\n  protected abstract getAxisVector(point: Point): [number, number];\n\n  protected getSidePoint(point: Point, offset: number): Point {\n    const self = this;\n    const vector = self.getSideVector(offset, point);\n    return {\n      x: point.x + vector[0],\n      y: point.y + vector[1],\n    };\n  }\n\n  /**\n   * 根据 tick.value 获取坐标轴上对应的点\n   * @param {number} tickValue\n   * @returns {Point}\n   */\n  protected abstract getTickPoint(tickValue: number): Point;\n\n  protected getTextAnchor(vector: number[]): string {\n    let align;\n    if (isNumberEqual(vector[0], 0)) {\n      align = 'center';\n    } else if (vector[0] > 0) {\n      align = 'start';\n    } else if (vector[0] < 0) {\n      align = 'end';\n    }\n    return align;\n  }\n\n  protected getTextBaseline(vector: number[]): string {\n    let base;\n    if (isNumberEqual(vector[1], 0)) {\n      base = 'middle';\n    } else if (vector[1] > 0) {\n      base = 'top';\n    } else if (vector[1] < 0) {\n      base = 'bottom';\n    }\n    return base;\n  }\n\n  protected processOverlap(labelGroup) {}\n\n  // 绘制坐标轴线\n  private drawLine(group: IGroup) {\n    const path = this.getLinePath();\n    const line = this.get('line'); // line 的判空在调用 drawLine 之前，不在这里判定\n    this.addShape(group, {\n      type: 'path',\n      id: this.getElementId('line'),\n      name: 'axis-line',\n      attrs: mix(\n        {\n          path,\n        },\n        line.style\n      ),\n    });\n  }\n\n  private getTickLineItems(ticks: ListItem[]) {\n    const tickLineItems = [];\n    const tickLine = this.get('tickLine');\n    const alignTick = tickLine.alignTick;\n    const tickLineLength = tickLine.length;\n    let tickSegment = 1;\n    const tickCount = ticks.length;\n    if (tickCount >= 2) {\n      tickSegment = ticks[1].value - ticks[0].value;\n    }\n\n    each(ticks, (tick) => {\n      let point = tick.point;\n      if (!alignTick) {\n        // tickLine 不同 tick 对齐时需要调整 point\n        point = this.getTickPoint(tick.value - tickSegment / 2);\n      }\n      const endPoint = this.getSidePoint(point, tickLineLength);\n      tickLineItems.push({\n        startPoint: point,\n        tickValue: tick.value,\n        endPoint,\n        tickId: tick.id,\n        id: `tickline-${tick.id}`,\n      });\n    });\n\n    // 如果 tickLine 不居中对齐，则需要在最后面补充一个 tickLine\n    // if (!alignTick && tickCount > 0) {\n    //   const tick = ticks[tickCount - 1];\n    //   const point = this.getTickPoint(tick.value + tickSegment / 2);\n    // }\n    return tickLineItems;\n  }\n\n  private getSubTickLineItems(tickLineItems) {\n    const subTickLineItems = [];\n    const subTickLine = this.get('subTickLine');\n    const subCount = subTickLine.count;\n    const tickLineCount = tickLineItems.length;\n    // 刻度线的数量大于 2 时，才绘制子刻度\n    if (tickLineCount >= 2) {\n      for (let i = 0; i < tickLineCount - 1; i++) {\n        const pre = tickLineItems[i];\n        const next = tickLineItems[i + 1];\n        for (let j = 0; j < subCount; j++) {\n          const percent = (j + 1) / (subCount + 1);\n          const tickValue = (1 - percent) * pre.tickValue + percent * next.tickValue;\n          const point = this.getTickPoint(tickValue);\n          const endPoint = this.getSidePoint(point, subTickLine.length);\n          subTickLineItems.push({\n            startPoint: point,\n            endPoint,\n            tickValue,\n            id: `sub-${pre.id}-${j}`,\n          });\n        }\n      }\n    }\n    return subTickLineItems;\n  }\n\n  private getTickLineAttrs(tickItem: ListItem, type: string, index: number, tickItems: ListItem[]) {\n    let style = this.get(type).style;\n\n    // 保持和 grid 相同的数据结构\n    const item = {\n      points: [tickItem.startPoint, tickItem.endPoint],\n    };\n\n    const defaultTickLineStyle = get(this.get('theme'), ['tickLine', 'style'], {});\n    style = isFunction(style) ? mix({}, defaultTickLineStyle, style(item, index, tickItems)) : style;\n\n    const { startPoint, endPoint } = tickItem;\n    return {\n      x1: startPoint.x,\n      y1: startPoint.y,\n      x2: endPoint.x,\n      y2: endPoint.y,\n      ...style,\n    };\n  }\n\n  // 绘制坐标轴刻度线\n  private drawTick(tickItem: ListItem, tickLineGroup: IGroup, type: string, index: number, tickItems: ListItem[]) {\n    this.addShape(tickLineGroup, {\n      type: 'line',\n      id: this.getElementId(tickItem.id),\n      name: `axis-${type}`,\n      attrs: this.getTickLineAttrs(tickItem, type, index, tickItems),\n    });\n  }\n\n  // 绘制坐标轴刻度线，包括子刻度线\n  private drawTickLines(group: IGroup) {\n    const ticks = this.get('ticks');\n    const subTickLine = this.get('subTickLine');\n    const tickLineItems = this.getTickLineItems(ticks);\n    const tickLineGroup = this.addGroup(group, {\n      name: 'axis-tickline-group',\n      id: this.getElementId('tickline-group'),\n    });\n    const tickCfg = this.get('tickLine');\n    each(tickLineItems, (item, index) => {\n      if (tickCfg.displayWithLabel) {\n        // 如果跟随 label 显示，则检测是否存在对应的 label\n        const labelId = this.getElementId(`label-${item.tickId}`);\n        if (group.findById(labelId)) {\n          this.drawTick(item, tickLineGroup, 'tickLine', index, tickLineItems);\n        }\n      } else {\n        this.drawTick(item, tickLineGroup, 'tickLine', index, tickLineItems);\n      }\n    });\n\n    if (subTickLine) {\n      const subTickLineItems = this.getSubTickLineItems(tickLineItems);\n      each(subTickLineItems, (item, index: number) => {\n        this.drawTick(item, tickLineGroup, 'subTickLine', index, subTickLineItems);\n      });\n    }\n  }\n\n  // 预处理 ticks 确定位置和补充 id\n  private processTicks() {\n    const ticks = this.get('ticks');\n    each(ticks, (tick) => {\n      tick.point = this.getTickPoint(tick.value);\n      // 补充 tick 的 id，为动画和更新做准备\n      if (isNil(tick.id)) {\n        // 默认使用 tick.name 作为id\n        tick.id = tick.name;\n      }\n    });\n  }\n\n  // 绘制 ticks 包括文本和 tickLine\n  private drawTicks(group: IGroup) {\n    this.optimizeTicks();\n    this.processTicks();\n    if (this.get('label')) {\n      this.drawLabels(group);\n    }\n\n    if (this.get('tickLine')) {\n      this.drawTickLines(group);\n    }\n\n    const ticks = this.get('ticks');\n    each(ticks, (tick) => {\n      this.applyTickStates(tick, group);\n    });\n  }\n\n  /**\n   * 根据 optimize 配置对 ticks 进行抽样，对抽样过后的 ticks 才进行真实的渲染\n   */\n  private optimizeTicks() {\n    const optimize: OptimizeCfg = this.get('optimize');\n    const ticks = this.get('ticks');\n    if (optimize && optimize.enable && optimize.threshold > 0) {\n      const len = size(ticks);\n      if (len > optimize.threshold) {\n        const page = Math.ceil(len / optimize.threshold);\n        const optimizedTicks = ticks.filter((tick, idx) => idx % page === 0);\n        this.set('ticks', optimizedTicks);\n        this.set('originalTicks', ticks);\n      }\n    }\n  }\n\n  // 获取 label 的配置项\n  private getLabelAttrs(tick: ListItem, index: number, ticks: ListItem[]) {\n    const labelCfg = this.get('label');\n    const { offset, offsetX, offsetY, rotate, formatter } = labelCfg;\n    const point = this.getSidePoint(tick.point, offset);\n    const vector = this.getSideVector(offset, point);\n    const text = formatter ? formatter(tick.name, tick, index) : tick.name;\n    let { style } = labelCfg;\n    style = isFunction(style) ? get(this.get('theme'), ['label', 'style'], {}) : style;\n\n    const attrs = mix(\n      {\n        x: point.x + offsetX,\n        y: point.y + offsetY,\n        text,\n        textAlign: this.getTextAnchor(vector),\n        textBaseline: this.getTextBaseline(vector),\n      },\n      style\n    );\n    if (rotate) {\n      attrs.matrix = getMatrixByAngle(point, rotate);\n    }\n    return attrs;\n  }\n\n  // 绘制文本\n  private drawLabels(group: IGroup) {\n    const ticks = this.get('ticks');\n    const labelGroup = this.addGroup(group, {\n      name: 'axis-label-group',\n      id: this.getElementId('label-group'),\n    });\n    each(ticks, (tick: ListItem, index: number) => {\n      this.addShape(labelGroup, {\n        type: 'text',\n        name: 'axis-label',\n        id: this.getElementId(`label-${tick.id}`),\n        attrs: this.getLabelAttrs(tick, index, ticks),\n        delegateObject: {\n          tick,\n          item: tick,\n          index,\n        },\n      });\n    });\n    this.processOverlap(labelGroup);\n\n    // 处理完后再进行 style 回调处理\n    const labels = labelGroup.getChildren();\n    const defaultLabelStyle = get(this.get('theme'), ['label', 'style'], {});\n    const { style, formatter } = this.get('label');\n    if (isFunction(style)) {\n      const afterProcessTicks = labels.map((label) => get(label.get('delegateObject'), 'tick'));\n      each(labels, (label, index) => {\n        const { tick } = label.get('delegateObject');\n        const text = formatter ? formatter(tick.name, tick, index) : tick.name;\n        const newStyle = mix({}, defaultLabelStyle, style(text, index, afterProcessTicks));\n        label.attr(newStyle);\n      });\n    }\n  }\n\n  // 标题的属性\n  private getTitleAttrs() {\n    const titleCfg = this.get('title');\n    const { style, position, offset, spacing = 0, autoRotate } = titleCfg;\n    const titleHeight = style.fontSize;\n    let percent = 0.5;\n    if (position === 'start') {\n      percent = 0;\n    } else if (position === 'end') {\n      percent = 1;\n    }\n    const point = this.getTickPoint(percent); // 标题对应的坐标轴上的点\n    // 如果没有指定 titleOffset 也没有渲染 label，这里需要自动计算 offset\n    const titlePoint = this.getSidePoint(point, offset || spacing + titleHeight / 2); // 标题的点\n\n    const attrs = mix(\n      {\n        x: titlePoint.x,\n        y: titlePoint.y,\n        text: titleCfg.text,\n      },\n      style\n    );\n\n    const rotate = titleCfg.rotate; // rotate 是角度值\n    let angle = rotate;\n    if (isNil(rotate) && autoRotate) {\n      // 用户没有设定旋转角度，同时设置自动旋转\n      const vector = this.getAxisVector(point);\n      const v1: [number, number] = [1, 0]; // 水平方向的向量\n      angle = ext.angleTo(vector, v1, true);\n    }\n    if (angle) {\n      const matrix = getMatrixByAngle(titlePoint, angle);\n      attrs.matrix = matrix;\n    }\n    return attrs;\n  }\n\n  // 绘制标题\n  private drawTitle(group: IGroup) {\n    const titleAttrs = this.getTitleAttrs();\n    const titleShape = this.addShape(group, {\n      type: 'text',\n      id: this.getElementId('title'),\n      name: 'axis-title',\n      attrs: titleAttrs\n    });\n    // description字段存在时，显示icon\n    if(this.get('title')?.description) {\n      this.drawDescriptionIcon(group, titleShape, titleAttrs.matrix)\n    }\n  }\n\n  private drawDescriptionIcon(group: IGroup, titleShape: IShape, matrix: number[]) {\n    const descriptionShape = this.addGroup(group, {\n      name: 'axis-description',\n      id: this.getElementById('description')\n    })\n\n    const { maxX, maxY, height } = titleShape.getBBox();\n    const { iconStyle } = this.get('title')\n    const spacing = 4; // 设置icon与文本之间距离\n    const r = height / 2;\n    const lineWidth =  r / 6;\n    const startX = maxX + spacing;\n    const startY = maxY - height / 2;\n    // 绘制 information icon 路径\n    // 外圆环path\n    const [x0, y0] = [startX + r, startY - r];\n    const [x1, y1] = [x0 + r, y0 + r];\n    const [x2, y2] = [x0, y1 + r];\n    const [x3, y3] = [startX, y0 + r];\n    // i path\n    const [x4, y4] = [startX + r, startY - height / 4];\n    const [x5, y5] = [x4, y4 + lineWidth];\n    const [x6, y6] = [x5, y5 + lineWidth];\n    const [x7, y7] = [x6, y6 + r * 3 / 4];\n    this.addShape(descriptionShape, {\n      type: 'path',\n      id: this.getElementId('title-description-icon'),\n      name: 'axis-title-description-icon',\n      attrs: {\n        path: [\n          ['M', x0, y0],\n          ['A', r, r, 0, 0, 1, x1, y1],\n          ['A', r, r, 0, 0, 1, x2, y2],\n          ['A', r, r, 0, 0, 1, x3, y3],\n          ['A', r, r, 0, 0, 1, x0, y0],\n          ['M', x4, y4],\n          ['L', x5, y5],\n          ['M', x6, y6],\n          ['L', x7, y7]\n        ],\n        lineWidth,\n        matrix,\n        ...iconStyle\n      },\n    });\n    // 点击热区，设置透明矩形\n    this.addShape(descriptionShape, {\n      type: 'rect',\n      id: this.getElementId('title-description-rect'),\n      name: 'axis-title-description-rect',\n      attrs: {\n        x: startX,\n        y: startY - height / 2,\n        width: height,\n        height,\n        stroke: '#000',\n        fill: '#000',\n        opacity: 0,\n        matrix,\n        cursor: 'pointer'\n      }\n    })\n\n  }\n\n  private applyTickStates(tick, group) {\n    const states = this.getItemStates(tick);\n    if (states.length) {\n      const tickStates = this.get('tickStates');\n      // 分别更新 label 和 tickLine\n      const labelId = this.getElementId(`label-${tick.id}`);\n      const labelShape = group.findById(labelId);\n      if (labelShape) {\n        const labelStateStyle = getStatesStyle(tick, 'label', tickStates);\n        labelStateStyle && labelShape.attr(labelStateStyle);\n      }\n      const tickLineId = this.getElementId(`tickline-${tick.id}`);\n      const tickLineShape = group.findById(tickLineId);\n      if (tickLineShape) {\n        const tickLineStateStyle = getStatesStyle(tick, 'tickLine', tickStates);\n        tickLineStateStyle && tickLineShape.attr(tickLineStateStyle);\n      }\n    }\n  }\n\n  private updateTickStates(tick) {\n    const states = this.getItemStates(tick);\n    const tickStates = this.get('tickStates');\n    const labelCfg = this.get('label');\n    const labelShape = this.getElementByLocalId(`label-${tick.id}`);\n    const tickLineCfg = this.get('tickLine');\n    const tickLineShape = this.getElementByLocalId(`tickline-${tick.id}`);\n\n    if (states.length) {\n      if (labelShape) {\n        const labelStateStyle = getStatesStyle(tick, 'label', tickStates);\n        labelStateStyle && labelShape.attr(labelStateStyle);\n      }\n      if (tickLineShape) {\n        const tickLineStateStyle = getStatesStyle(tick, 'tickLine', tickStates);\n        tickLineStateStyle && tickLineShape.attr(tickLineStateStyle);\n      }\n    } else {\n      if (labelShape) {\n        labelShape.attr(labelCfg.style);\n      }\n      if (tickLineShape) {\n        tickLineShape.attr(tickLineCfg.style);\n      }\n    }\n  }\n}\n\nexport default AxisBase;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}