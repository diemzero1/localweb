{"ast":null,"code":"import { __read } from \"tslib\";\nimport { deepMix, each, every, get, isNil, isNumber } from '@antv/util';\nimport { LAYER } from '../constant';\nimport { getAxisOption } from '../util/axis';\n/**\n * facet 基类\n *  - 定义生命周期，方便自定义 facet\n *  - 提供基础的生命流程方法\n *\n * 生命周期：\n *\n * 初始化 init\n * 1. 初始化容器\n * 2. 数据分面，生成分面布局信息\n *\n * 渲染阶段 render\n * 1. view 创建\n * 2. title\n * 3. axis\n *\n * 清除阶段 clear\n * 1. 清除 view\n *\n * 销毁阶段 destroy\n * 1. clear\n * 2. 清除事件\n * 3. 清除 group\n */\nvar Facet = /** @class */function () {\n  function Facet(view, cfg) {\n    /** 是否销毁 */\n    this.destroyed = false;\n    /** 分面之后的所有分面数据结构 */\n    this.facets = [];\n    this.view = view;\n    this.cfg = deepMix({}, this.getDefaultCfg(), cfg);\n  }\n  /**\n   * 初始化过程\n   */\n  Facet.prototype.init = function () {\n    // 初始化容器\n    if (!this.container) {\n      this.container = this.createContainer();\n    }\n    // 生成分面布局信息\n    var data = this.view.getData();\n    this.facets = this.generateFacets(data);\n  };\n  /**\n   * 渲染分面，由上层 view 调用。包括：\n   *  - 分面 view\n   *  - 轴\n   *  - title\n   *\n   *  子类可以复写，添加一些其他组件，比如滚动条等\n   */\n  Facet.prototype.render = function () {\n    this.renderViews();\n  };\n  /**\n   * 更新 facet\n   */\n  Facet.prototype.update = function () {\n    // 其实不用做任何事情，因为 facet 最终生成的 View 和 Geometry 都在父 view 的更新中处理了\n  };\n  /**\n   * 清空，clear 之后如果还需要使用，需要重新调用 init 初始化过程\n   * 一般在数据有变更的时候调用，重新进行数据的分面逻辑\n   */\n  Facet.prototype.clear = function () {\n    this.clearFacetViews();\n  };\n  /**\n   * 销毁\n   */\n  Facet.prototype.destroy = function () {\n    this.clear();\n    if (this.container) {\n      this.container.remove(true);\n      this.container = undefined;\n    }\n    this.destroyed = true;\n    this.view = undefined;\n    this.facets = [];\n  };\n  /**\n   * 根据 facet 生成 view，可以给上层自定义使用\n   * @param facet\n   */\n  Facet.prototype.facetToView = function (facet) {\n    var region = facet.region,\n      data = facet.data,\n      _a = facet.padding,\n      padding = _a === void 0 ? this.cfg.padding : _a;\n    var view = this.view.createView({\n      region: region,\n      padding: padding\n    });\n    // 设置分面的数据\n    view.data(data || []);\n    facet.view = view;\n    // 前置钩子\n    this.beforeEachView(view, facet);\n    var eachView = this.cfg.eachView;\n    if (eachView) {\n      eachView(view, facet);\n    }\n    // 后置钩子\n    this.afterEachView(view, facet);\n    return view;\n  };\n  // 创建容器\n  Facet.prototype.createContainer = function () {\n    var foregroundGroup = this.view.getLayer(LAYER.FORE);\n    return foregroundGroup.addGroup();\n  };\n  /**\n   * 初始化 view\n   */\n  Facet.prototype.renderViews = function () {\n    this.createFacetViews();\n  };\n  /**\n   * 创建 分面 view\n   */\n  Facet.prototype.createFacetViews = function () {\n    var _this = this;\n    // 使用分面数据 创建分面 view\n    return this.facets.map(function (facet) {\n      return _this.facetToView(facet);\n    });\n  };\n  /**\n   * 从 view 中清除 facetView\n   */\n  Facet.prototype.clearFacetViews = function () {\n    var _this = this;\n    // 从 view 中移除分面 view\n    each(this.facets, function (facet) {\n      if (facet.view) {\n        _this.view.removeView(facet.view);\n        facet.view = undefined;\n      }\n    });\n  };\n  /**\n   * 解析 spacing\n   */\n  Facet.prototype.parseSpacing = function () {\n    /**\n     * @example\n     *\n     * // 仅使用百分比或像素值\n     * // 横向间隔为 10%，纵向间隔为 10%\n     * ['10%', '10%']\n     * // 横向间隔为 10px，纵向间隔为 10px\n     * [10, 10]\n     *\n     * // 同时使用百分比和像素值\n     * ['10%', 10]\n     * // 横向间隔为 10%，纵向间隔为 10px\n     */\n    var _a = this.view.viewBBox,\n      width = _a.width,\n      height = _a.height;\n    var spacing = this.cfg.spacing;\n    return spacing.map(function (s, idx) {\n      if (isNumber(s)) return s / (idx === 0 ? width : height);else return parseFloat(s) / 100;\n    });\n  };\n  // 其他一些提供给子类使用的方法\n  /**\n   * 获取这个字段对应的所有值，数组\n   * @protected\n   * @param data 数据\n   * @param field 字段名\n   * @return 字段对应的值\n   */\n  Facet.prototype.getFieldValues = function (data, field) {\n    var rst = [];\n    var cache = {};\n    // 去重、去除 Nil 值\n    each(data, function (d) {\n      var value = d[field];\n      if (!isNil(value) && !cache[value]) {\n        rst.push(value);\n        cache[value] = true;\n      }\n    });\n    return rst;\n  };\n  /**\n   * 获得每个分面的 region，平分区域\n   * @param rows row 总数\n   * @param cols col 总数\n   * @param xIndex x 方向 index\n   * @param yIndex y 方向 index\n   */\n  Facet.prototype.getRegion = function (rows, cols, xIndex, yIndex) {\n    var _a = __read(this.parseSpacing(), 2),\n      xSpacing = _a[0],\n      ySpacing = _a[1];\n    // 每两个分面区域横向间隔xSPacing, 纵向间隔ySpacing\n    // 每个分面区域的横纵占比\n    /**\n     * ratio * num + spacing * (num - 1) = 1\n     * => ratio = (1 - (spacing * (num - 1))) / num\n     *          = (1 + spacing) / num - spacing\n     *\n     * num 对应 cols/rows\n     * spacing 对应 xSpacing/ySpacing\n     */\n    var xRatio = (1 + xSpacing) / (cols === 0 ? 1 : cols) - xSpacing;\n    var yRatio = (1 + ySpacing) / (rows === 0 ? 1 : rows) - ySpacing;\n    // 得到第 index 个分面区域百分比位置\n    var start = {\n      x: (xRatio + xSpacing) * xIndex,\n      y: (yRatio + ySpacing) * yIndex\n    };\n    var end = {\n      x: start.x + xRatio,\n      y: start.y + yRatio\n    };\n    return {\n      start: start,\n      end: end\n    };\n  };\n  Facet.prototype.getDefaultCfg = function () {\n    return {\n      eachView: undefined,\n      showTitle: true,\n      spacing: [0, 0],\n      padding: 10,\n      fields: []\n    };\n  };\n  /**\n   * 默认的 title 样式，因为有的分面是 title，有的分面配置是 columnTitle、rowTitle\n   */\n  Facet.prototype.getDefaultTitleCfg = function () {\n    // @ts-ignore\n    var fontFamily = this.view.getTheme().fontFamily;\n    return {\n      style: {\n        fontSize: 14,\n        fill: '#666',\n        fontFamily: fontFamily\n      }\n    };\n  };\n  /**\n   * 处理 axis 的默认配置\n   * @param view\n   * @param facet\n   */\n  Facet.prototype.processAxis = function (view, facet) {\n    var options = view.getOptions();\n    var coordinateOption = options.coordinate;\n    var geometries = view.geometries;\n    var coordinateType = get(coordinateOption, 'type', 'rect');\n    if (coordinateType === 'rect' && geometries.length) {\n      if (isNil(options.axes)) {\n        // @ts-ignore\n        options.axes = {};\n      }\n      var axes = options.axes;\n      var _a = __read(geometries[0].getXYFields(), 2),\n        x = _a[0],\n        y = _a[1];\n      var xOption = getAxisOption(axes, x);\n      var yOption = getAxisOption(axes, y);\n      if (xOption !== false) {\n        options.axes[x] = this.getXAxisOption(x, axes, xOption, facet);\n      }\n      if (yOption !== false) {\n        options.axes[y] = this.getYAxisOption(y, axes, yOption, facet);\n      }\n    }\n  };\n  /**\n   * 获取分面数据\n   * @param conditions\n   */\n  Facet.prototype.getFacetDataFilter = function (conditions) {\n    return function (datum) {\n      // 过滤出全部满足条件的数据\n      return every(conditions, function (condition) {\n        var field = condition.field,\n          value = condition.value;\n        if (!isNil(value) && field) {\n          return datum[field] === value;\n        }\n        return true;\n      });\n    };\n  };\n  return Facet;\n}();\nexport { Facet };","map":{"version":3,"mappings":"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","names":["deepMix","each","every","get","isNil","isNumber","LAYER","getAxisOption","view","cfg","getDefaultCfg","Facet","container","createContainer","data","getData","facets","generateFacets","renderViews","clearFacetViews","clear","remove","undefined","destroyed","facet","_a","padding","createView","region","beforeEachView","eachView","afterEachView","foregroundGroup","getLayer","FORE","addGroup","createFacetViews","map","_this","facetToView","removeView","viewBBox","width","height","spacing","s","idx","parseFloat","field","rst","cache","d","value","push","rows","cols","xIndex","yIndex","parseSpacing","xSpacing","ySpacing","xRatio","yRatio","start","x","y","end","showTitle","fields","fontFamily","getTheme","style","fontSize","fill","options","getOptions","coordinateOption","coordinate","geometries","coordinateType","length","axes","getXYFields","xOption","yOption","getXAxisOption","getYAxisOption","conditions","datum","condition"],"sources":["/home/iam/Documents/network/node_modules/@antv/g2/src/facet/facet.ts"],"sourcesContent":["import { deepMix, each, every, get, isNil, isNumber } from '@antv/util';\nimport { LAYER } from '../constant';\nimport { IGroup } from '../dependents';\nimport { AxisCfg, Condition, Datum, FacetCfg, FacetData, FacetDataFilter, Region } from '../interface';\n\nimport View from '../chart/view';\nimport { getAxisOption } from '../util/axis';\n\n/**\n * facet 基类\n *  - 定义生命周期，方便自定义 facet\n *  - 提供基础的生命流程方法\n *\n * 生命周期：\n *\n * 初始化 init\n * 1. 初始化容器\n * 2. 数据分面，生成分面布局信息\n *\n * 渲染阶段 render\n * 1. view 创建\n * 2. title\n * 3. axis\n *\n * 清除阶段 clear\n * 1. 清除 view\n *\n * 销毁阶段 destroy\n * 1. clear\n * 2. 清除事件\n * 3. 清除 group\n */\nexport abstract class Facet<C extends FacetCfg<FacetData> = FacetCfg<FacetData>, F extends FacetData = FacetData> {\n  /** 分面所在的 view */\n  public view: View;\n  /** 分面容器 */\n  public container: IGroup;\n  /** 是否销毁 */\n  public destroyed: boolean = false;\n\n  /** 分面的配置项 */\n  protected cfg: C;\n  /** 分面之后的所有分面数据结构 */\n  protected facets: F[] = [];\n\n  constructor(view: View, cfg: C) {\n    this.view = view;\n    this.cfg = deepMix({}, this.getDefaultCfg(), cfg);\n  }\n\n  /**\n   * 初始化过程\n   */\n  public init() {\n    // 初始化容器\n    if (!this.container) {\n      this.container = this.createContainer();\n    }\n\n    // 生成分面布局信息\n    const data = this.view.getData();\n    this.facets = this.generateFacets(data);\n  }\n\n  /**\n   * 渲染分面，由上层 view 调用。包括：\n   *  - 分面 view\n   *  - 轴\n   *  - title\n   *\n   *  子类可以复写，添加一些其他组件，比如滚动条等\n   */\n  public render() {\n    this.renderViews();\n  }\n\n  /**\n   * 更新 facet\n   */\n  public update() {\n    // 其实不用做任何事情，因为 facet 最终生成的 View 和 Geometry 都在父 view 的更新中处理了\n  }\n\n  /**\n   * 清空，clear 之后如果还需要使用，需要重新调用 init 初始化过程\n   * 一般在数据有变更的时候调用，重新进行数据的分面逻辑\n   */\n  public clear() {\n    this.clearFacetViews();\n  }\n\n  /**\n   * 销毁\n   */\n  public destroy() {\n    this.clear();\n\n    if (this.container) {\n      this.container.remove(true);\n      this.container = undefined;\n    }\n\n    this.destroyed = true;\n    this.view = undefined;\n    this.facets = [];\n  }\n\n  /**\n   * 根据 facet 生成 view，可以给上层自定义使用\n   * @param facet\n   */\n  protected facetToView(facet: F): View {\n    const { region, data, padding = this.cfg.padding } = facet;\n\n    const view = this.view.createView({\n      region,\n      padding,\n    });\n\n    // 设置分面的数据\n    view.data(data || []);\n    facet.view = view;\n\n    // 前置钩子\n    this.beforeEachView(view, facet);\n\n    const { eachView } = this.cfg;\n    if (eachView) {\n      eachView(view, facet);\n    }\n\n    // 后置钩子\n    this.afterEachView(view, facet);\n\n    return view;\n  }\n\n  // 创建容器\n  private createContainer(): IGroup {\n    const foregroundGroup = this.view.getLayer(LAYER.FORE);\n    return foregroundGroup.addGroup();\n  }\n\n  /**\n   * 初始化 view\n   */\n  private renderViews() {\n    this.createFacetViews();\n  }\n\n  /**\n   * 创建 分面 view\n   */\n  private createFacetViews(): View[] {\n    // 使用分面数据 创建分面 view\n    return this.facets.map((facet): View => {\n      return this.facetToView(facet);\n    });\n  }\n\n  /**\n   * 从 view 中清除 facetView\n   */\n  private clearFacetViews() {\n    // 从 view 中移除分面 view\n    each(this.facets, (facet) => {\n      if (facet.view) {\n        this.view.removeView(facet.view);\n        facet.view = undefined;\n      }\n    });\n  }\n\n  /**\n   * 解析 spacing\n   */\n  private parseSpacing() {\n    /**\n     * @example\n     *\n     * // 仅使用百分比或像素值\n     * // 横向间隔为 10%，纵向间隔为 10%\n     * ['10%', '10%']\n     * // 横向间隔为 10px，纵向间隔为 10px\n     * [10, 10]\n     *\n     * // 同时使用百分比和像素值\n     * ['10%', 10]\n     * // 横向间隔为 10%，纵向间隔为 10px\n     */\n    const { width, height } = this.view.viewBBox;\n    const { spacing } = this.cfg;\n    return spacing.map((s: number, idx: number) => {\n      if (isNumber(s)) return s / (idx === 0 ? width : height);\n      else return parseFloat(s) / 100;\n    });\n  }\n\n  // 其他一些提供给子类使用的方法\n\n  /**\n   * 获取这个字段对应的所有值，数组\n   * @protected\n   * @param data 数据\n   * @param field 字段名\n   * @return 字段对应的值\n   */\n  protected getFieldValues(data: Datum[], field: string): string[] {\n    const rst = [];\n    const cache: Record<string, boolean> = {};\n\n    // 去重、去除 Nil 值\n    each(data, (d: Datum) => {\n      const value = d[field];\n      if (!isNil(value) && !cache[value]) {\n        rst.push(value);\n        cache[value] = true;\n      }\n    });\n\n    return rst;\n  }\n\n  /**\n   * 获得每个分面的 region，平分区域\n   * @param rows row 总数\n   * @param cols col 总数\n   * @param xIndex x 方向 index\n   * @param yIndex y 方向 index\n   */\n  protected getRegion(rows: number, cols: number, xIndex: number, yIndex: number): Region {\n    const [xSpacing, ySpacing] = this.parseSpacing();\n    // 每两个分面区域横向间隔xSPacing, 纵向间隔ySpacing\n    // 每个分面区域的横纵占比\n    /**\n     * ratio * num + spacing * (num - 1) = 1\n     * => ratio = (1 - (spacing * (num - 1))) / num\n     *          = (1 + spacing) / num - spacing\n     *\n     * num 对应 cols/rows\n     * spacing 对应 xSpacing/ySpacing\n     */\n    const xRatio = (1 + xSpacing) / (cols === 0 ? 1 : cols) - xSpacing;\n    const yRatio = (1 + ySpacing) / (rows === 0 ? 1 : rows) - ySpacing;\n\n    // 得到第 index 个分面区域百分比位置\n    const start = {\n      x: (xRatio + xSpacing) * xIndex,\n      y: (yRatio + ySpacing) * yIndex,\n    };\n    const end = {\n      x: start.x + xRatio,\n      y: start.y + yRatio,\n    };\n    return { start, end };\n  }\n\n  protected getDefaultCfg() {\n    return {\n      eachView: undefined,\n      showTitle: true,\n      spacing: [0, 0],\n      padding: 10,\n      fields: [],\n    };\n  }\n\n  /**\n   * 默认的 title 样式，因为有的分面是 title，有的分面配置是 columnTitle、rowTitle\n   */\n  protected getDefaultTitleCfg() {\n    // @ts-ignore\n    const fontFamily = this.view.getTheme().fontFamily;\n    return {\n      style: {\n        fontSize: 14,\n        fill: '#666',\n        fontFamily,\n      },\n    };\n  }\n\n  /**\n   * 处理 axis 的默认配置\n   * @param view\n   * @param facet\n   */\n  protected processAxis(view: View, facet: F) {\n    const options = view.getOptions();\n\n    const coordinateOption = options.coordinate;\n    const geometries = view.geometries;\n\n    const coordinateType = get(coordinateOption, 'type', 'rect');\n\n    if (coordinateType === 'rect' && geometries.length) {\n      if (isNil(options.axes)) {\n        // @ts-ignore\n        options.axes = {};\n      }\n      const axes = options.axes;\n\n      const [x, y] = geometries[0].getXYFields();\n\n      const xOption = getAxisOption(axes, x);\n      const yOption = getAxisOption(axes, y);\n\n      if (xOption !== false) {\n        options.axes[x] = this.getXAxisOption(x, axes, xOption, facet);\n      }\n\n      if (yOption !== false) {\n        options.axes[y] = this.getYAxisOption(y, axes, yOption, facet);\n      }\n    }\n  }\n\n  /**\n   * 获取分面数据\n   * @param conditions\n   */\n  protected getFacetDataFilter(conditions: Condition[]): FacetDataFilter {\n    return (datum: Datum) => {\n      // 过滤出全部满足条件的数据\n      return every(conditions, (condition) => {\n        const { field, value } = condition;\n\n        if (!isNil(value) && field) {\n          return datum[field] === value;\n        }\n        return true;\n      });\n    };\n  }\n\n  /**\n   * @override 开始处理 eachView\n   * @param view\n   * @param facet\n   */\n  protected abstract beforeEachView(view: View, facet: F);\n\n  /**\n   * @override 处理 eachView 之后\n   * @param view\n   * @param facet\n   */\n  protected abstract afterEachView(view: View, facet: F);\n\n  /**\n   * @override 生成分面数据，包含布局\n   * @param data\n   */\n  protected abstract generateFacets(data: Datum[]): F[];\n\n  /**\n   * 获取 x 轴的配置\n   * @param x\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  protected abstract getXAxisOption(x: string, axes: any, option: AxisCfg, facet: F): object;\n\n  /**\n   * 获取 y 轴的配置\n   * @param y\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  protected abstract getYAxisOption(y: string, axes: any, option: AxisCfg, facet: F): object;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}