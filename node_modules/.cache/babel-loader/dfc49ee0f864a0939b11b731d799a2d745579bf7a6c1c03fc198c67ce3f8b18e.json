{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { each, omit } from '@antv/util';\nimport { theme } from '../../adaptor/common';\nimport { AXIS_META_CONFIG_KEYS } from '../../constant';\nimport { deepAssign, flow, pick } from '../../utils';\nimport { execPlotAdaptor } from '../mix/utils';\nimport { execViewAdaptor } from './utils';\nfunction facetAdaptor(params) {\n  var chart = params.chart,\n    options = params.options;\n  var facetType = options.type,\n    data = options.data,\n    fields = options.fields,\n    eachView = options.eachView;\n  var restFacetCfg = omit(options, ['type', 'data', 'fields', 'eachView', 'axes', 'meta', 'tooltip', 'coordinate', 'theme', 'legend', 'interactions', 'annotations']);\n  // 1. data\n  chart.data(data);\n  // 2. facet\n  chart.facet(facetType, __assign(__assign({}, restFacetCfg), {\n    fields: fields,\n    eachView: function (viewOfG2, facet) {\n      var viewOptions = eachView(viewOfG2, facet);\n      if (viewOptions.geometries) {\n        execViewAdaptor(viewOfG2, viewOptions);\n      } else {\n        var plot = viewOptions;\n        var plotOptions = plot.options;\n        // @ts-ignore 仪表盘没 tooltip\n        if (plotOptions.tooltip) {\n          // 配置 tooltip 交互\n          viewOfG2.interaction('tooltip');\n        }\n        execPlotAdaptor(plot.type, viewOfG2, plotOptions);\n      }\n    }\n  }));\n  return params;\n}\nfunction component(params) {\n  var chart = params.chart,\n    options = params.options;\n  var axes = options.axes,\n    meta = options.meta,\n    tooltip = options.tooltip,\n    coordinate = options.coordinate,\n    theme = options.theme,\n    legend = options.legend,\n    interactions = options.interactions,\n    annotations = options.annotations;\n  // 3. meta 配置\n  var scales = {};\n  if (axes) {\n    each(axes, function (axis, field) {\n      scales[field] = pick(axis, AXIS_META_CONFIG_KEYS);\n    });\n  }\n  scales = deepAssign({}, meta, scales);\n  chart.scale(scales);\n  // 4. coordinate 配置\n  chart.coordinate(coordinate);\n  // 5. axis 轴配置 (默认不展示)\n  if (!axes) {\n    chart.axis(false);\n  } else {\n    each(axes, function (axis, field) {\n      chart.axis(field, axis);\n    });\n  }\n  // 6. tooltip 配置\n  if (tooltip) {\n    chart.interaction('tooltip');\n    chart.tooltip(tooltip);\n  } else if (tooltip === false) {\n    chart.removeInteraction('tooltip');\n  }\n  // 7. legend 配置（默认展示）\n  chart.legend(legend);\n  // theme 配置\n  if (theme) {\n    chart.theme(theme);\n  }\n  // 8. interactions\n  each(interactions, function (interaction) {\n    if (interaction.enable === false) {\n      chart.removeInteraction(interaction.type);\n    } else {\n      chart.interaction(interaction.type, interaction.cfg);\n    }\n  });\n  // 9. annotations\n  each(annotations, function (annotation) {\n    chart.annotation()[annotation.type](__assign({}, annotation));\n  });\n  return params;\n}\n/**\n * 分面图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(theme, facetAdaptor, component)(params);\n}","map":{"version":3,"mappings":";AAAA,SAASA,IAAI,EAAEC,IAAI,QAAQ,YAAY;AACvC,SAASC,KAAK,QAAQ,sBAAsB;AAC5C,SAASC,qBAAqB,QAAQ,gBAAgB;AAGtD,SAASC,UAAU,EAAEC,IAAI,EAAEC,IAAI,QAAQ,aAAa;AACpD,SAASC,eAAe,QAAQ,cAAc;AAE9C,SAASC,eAAe,QAAQ,SAAS;AAEzC,SAASC,YAAY,CAACC,MAA4B;EACxC,SAAK,GAAcA,MAAM,MAApB;IAAEC,OAAO,GAAKD,MAAM,QAAX;EACd,IAAME,SAAS,GAA6BD,OAAO,KAApC;IAAEE,IAAI,GAAuBF,OAAO,KAA9B;IAAEG,MAAM,GAAeH,OAAO,OAAtB;IAAEI,QAAQ,GAAKJ,OAAO,SAAZ;EAE/C,IAAMK,YAAY,GAAGf,IAAI,CAACU,OAAc,EAAE,CACxC,MAAM,EACN,MAAM,EACN,QAAQ,EACR,UAAU,EACV,MAAM,EACN,MAAM,EACN,SAAS,EACT,YAAY,EACZ,OAAO,EACP,QAAQ,EACR,cAAc,EACd,aAAa,CACd,CAAC;EAEF;EACAM,KAAK,CAACJ,IAAI,CAACA,IAAI,CAAC;EAEhB;EACAI,KAAK,CAACC,KAAK,CAACN,SAAS,wBAChBI,YAAY;IACfF,MAAM;IACNC,QAAQ,EAAE,UAACI,QAAQ,EAAED,KAAK;MACxB,IAAME,WAAW,GAAGL,QAAQ,CAACI,QAAQ,EAAED,KAAK,CAAC;MAC7C,IAAKE,WAAqB,CAACC,UAAU,EAAE;QACrCb,eAAe,CAACW,QAAQ,EAAEC,WAAoB,CAAC;OAChD,MAAM;QACL,IAAME,IAAI,GAAGF,WAAoB;QACjC,IAAMG,WAAW,GAAGD,IAAI,CAACX,OAAO;QAChC;QACA,IAAIY,WAAW,CAACC,OAAO,EAAE;UACvB;UACAL,QAAQ,CAACM,WAAW,CAAC,SAAS,CAAC;;QAEjClB,eAAe,CAACe,IAAI,CAACI,IAAI,EAAEP,QAAQ,EAAEI,WAAW,CAAC;;IAErD;EAAC,GACD;EAEF,OAAOb,MAAM;AACf;AAEA,SAASiB,SAAS,CAACjB,MAA4B;EACrC,SAAK,GAAcA,MAAM,MAApB;IAAEC,OAAO,GAAKD,MAAM,QAAX;EACd,QAAI,GAA0EC,OAAO,KAAjF;IAAEiB,IAAI,GAAoEjB,OAAO,KAA3E;IAAEa,OAAO,GAA2Db,OAAO,QAAlE;IAAEkB,UAAU,GAA+ClB,OAAO,WAAtD;IAAET,KAAK,GAAwCS,OAAO,MAA/C;IAAEmB,MAAM,GAAgCnB,OAAO,OAAvC;IAAEoB,YAAY,GAAkBpB,OAAO,aAAzB;IAAEqB,WAAW,GAAKrB,OAAO,YAAZ;EAEjF;EACA,IAAIsB,MAAM,GAAwB,EAAE;EACpC,IAAIC,IAAI,EAAE;IACRlC,IAAI,CAACkC,IAAI,EAAE,UAACC,IAAU,EAAEC,KAAa;MACnCH,MAAM,CAACG,KAAK,CAAC,GAAG9B,IAAI,CAAC6B,IAAI,EAAEhC,qBAAqB,CAAC;IACnD,CAAC,CAAC;;EAGJ8B,MAAM,GAAG7B,UAAU,CAAC,EAAE,EAAEwB,IAAI,EAAEK,MAAM,CAAC;EACrChB,KAAK,CAACoB,KAAK,CAACJ,MAAM,CAAC;EAEnB;EACAhB,KAAK,CAACY,UAAU,CAACA,UAAU,CAAC;EAE5B;EACA,IAAI,CAACK,IAAI,EAAE;IACTjB,KAAK,CAACkB,IAAI,CAAC,KAAK,CAAC;GAClB,MAAM;IACLnC,IAAI,CAACkC,IAAI,EAAE,UAACC,IAAU,EAAEC,KAAa;MACnCnB,KAAK,CAACkB,IAAI,CAACC,KAAK,EAAED,IAAI,CAAC;IACzB,CAAC,CAAC;;EAGJ;EACA,IAAIX,OAAO,EAAE;IACXP,KAAK,CAACQ,WAAW,CAAC,SAAS,CAAC;IAC5BR,KAAK,CAACO,OAAO,CAACA,OAAO,CAAC;GACvB,MAAM,IAAIA,OAAO,KAAK,KAAK,EAAE;IAC5BP,KAAK,CAACqB,iBAAiB,CAAC,SAAS,CAAC;;EAGpC;EACArB,KAAK,CAACa,MAAM,CAACA,MAAM,CAAC;EAEpB;EACA,IAAI5B,KAAK,EAAE;IACTe,KAAK,CAACf,KAAK,CAACA,KAAK,CAAC;;EAGpB;EACAF,IAAI,CAAC+B,YAAY,EAAE,UAACN,WAAwB;IAC1C,IAAIA,WAAW,CAACc,MAAM,KAAK,KAAK,EAAE;MAChCtB,KAAK,CAACqB,iBAAiB,CAACb,WAAW,CAACC,IAAI,CAAC;KAC1C,MAAM;MACLT,KAAK,CAACQ,WAAW,CAACA,WAAW,CAACC,IAAI,EAAED,WAAW,CAACe,GAAG,CAAC;;EAExD,CAAC,CAAC;EAEF;EACAxC,IAAI,CAACgC,WAAW,EAAE,UAACS,UAAU;IAC3BxB,KAAK,CAACwB,UAAU,EAAE,CAACA,UAAU,CAACf,IAAI,CAAC,cAC9Be,UAAU,EACb;EACJ,CAAC,CAAC;EAEF,OAAO/B,MAAM;AACf;AAEA;;;;;AAKA,OAAM,SAAUgC,OAAO,CAAChC,MAA4B;EAClD;EACA,OAAOL,IAAI,CAACH,KAAK,EAAEO,YAAY,EAAEkB,SAAS,CAAC,CAACjB,MAAM,CAAC;AACrD","names":["each","omit","theme","AXIS_META_CONFIG_KEYS","deepAssign","flow","pick","execPlotAdaptor","execViewAdaptor","facetAdaptor","params","options","facetType","data","fields","eachView","restFacetCfg","chart","facet","viewOfG2","viewOptions","geometries","plot","plotOptions","tooltip","interaction","type","component","meta","coordinate","legend","interactions","annotations","scales","axes","axis","field","scale","removeInteraction","enable","cfg","annotation","adaptor"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/g2plot/src/plots/facet/adaptor.ts"],"sourcesContent":["import { each, omit } from '@antv/util';\nimport { theme } from '../../adaptor/common';\nimport { AXIS_META_CONFIG_KEYS } from '../../constant';\nimport { Params } from '../../core/adaptor';\nimport { Axis, Interaction } from '../../types';\nimport { deepAssign, flow, pick } from '../../utils';\nimport { execPlotAdaptor } from '../mix/utils';\nimport { FacetOptions, IPlot, IView } from './types';\nimport { execViewAdaptor } from './utils';\n\nfunction facetAdaptor(params: Params<FacetOptions>): Params<FacetOptions> {\n  const { chart, options } = params;\n  const { type: facetType, data, fields, eachView } = options;\n\n  const restFacetCfg = omit(options as any, [\n    'type',\n    'data',\n    'fields',\n    'eachView',\n    'axes',\n    'meta',\n    'tooltip',\n    'coordinate',\n    'theme',\n    'legend',\n    'interactions',\n    'annotations',\n  ]);\n\n  // 1. data\n  chart.data(data);\n\n  // 2. facet\n  chart.facet(facetType, {\n    ...restFacetCfg,\n    fields,\n    eachView: (viewOfG2, facet) => {\n      const viewOptions = eachView(viewOfG2, facet);\n      if ((viewOptions as IView).geometries) {\n        execViewAdaptor(viewOfG2, viewOptions as IView);\n      } else {\n        const plot = viewOptions as IPlot;\n        const plotOptions = plot.options;\n        // @ts-ignore 仪表盘没 tooltip\n        if (plotOptions.tooltip) {\n          // 配置 tooltip 交互\n          viewOfG2.interaction('tooltip');\n        }\n        execPlotAdaptor(plot.type, viewOfG2, plotOptions);\n      }\n    },\n  });\n\n  return params;\n}\n\nfunction component(params: Params<FacetOptions>): Params<FacetOptions> {\n  const { chart, options } = params;\n  const { axes, meta, tooltip, coordinate, theme, legend, interactions, annotations } = options;\n\n  // 3. meta 配置\n  let scales: Record<string, any> = {};\n  if (axes) {\n    each(axes, (axis: Axis, field: string) => {\n      scales[field] = pick(axis, AXIS_META_CONFIG_KEYS);\n    });\n  }\n\n  scales = deepAssign({}, meta, scales);\n  chart.scale(scales);\n\n  // 4. coordinate 配置\n  chart.coordinate(coordinate);\n\n  // 5. axis 轴配置 (默认不展示)\n  if (!axes) {\n    chart.axis(false);\n  } else {\n    each(axes, (axis: Axis, field: string) => {\n      chart.axis(field, axis);\n    });\n  }\n\n  // 6. tooltip 配置\n  if (tooltip) {\n    chart.interaction('tooltip');\n    chart.tooltip(tooltip);\n  } else if (tooltip === false) {\n    chart.removeInteraction('tooltip');\n  }\n\n  // 7. legend 配置（默认展示）\n  chart.legend(legend);\n\n  // theme 配置\n  if (theme) {\n    chart.theme(theme);\n  }\n\n  // 8. interactions\n  each(interactions, (interaction: Interaction) => {\n    if (interaction.enable === false) {\n      chart.removeInteraction(interaction.type);\n    } else {\n      chart.interaction(interaction.type, interaction.cfg);\n    }\n  });\n\n  // 9. annotations\n  each(annotations, (annotation) => {\n    chart.annotation()[annotation.type]({\n      ...annotation,\n    });\n  });\n\n  return params;\n}\n\n/**\n * 分面图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<FacetOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(theme, facetAdaptor, component)(params);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}