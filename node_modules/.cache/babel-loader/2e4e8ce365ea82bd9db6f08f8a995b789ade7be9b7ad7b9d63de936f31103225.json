{"ast":null,"code":"import { each, get } from '@antv/util';\nimport { getComponents, isInBox } from './action/util';\n/**\n * 交互的上下文\n */\nvar Context = /** @class */function () {\n  function Context(view) {\n    /** 当前所有的 Action */\n    this.actions = [];\n    /** 当前事件对象 */\n    this.event = null;\n    this.cacheMap = {};\n    this.view = view;\n  }\n  /**\n   * 缓存信息\n   * @param params 缓存的字段\n   *  - 如果一个字段则获取缓存\n   *  - 两个字段则设置缓存\n   */\n  Context.prototype.cache = function () {\n    var params = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      params[_i] = arguments[_i];\n    }\n    if (params.length === 1) {\n      return this.cacheMap[params[0]];\n    } else if (params.length === 2) {\n      this.cacheMap[params[0]] = params[1];\n    }\n  };\n  /**\n   * 获取 Action\n   * @param name Action 的名称\n   */\n  Context.prototype.getAction = function (name) {\n    return this.actions.find(function (action) {\n      return action.name === name;\n    });\n  };\n  /**\n   * 获取 Action\n   * @param action Action 对象\n   */\n  Context.prototype.addAction = function (action) {\n    this.actions.push(action);\n  };\n  /**\n   * 移除 Action\n   * @param action Action 对象\n   */\n  Context.prototype.removeAction = function (action) {\n    var actions = this.actions;\n    var index = this.actions.indexOf(action);\n    if (index >= 0) {\n      actions.splice(index, 1);\n    }\n  };\n  /**\n   * 获取当前的点\n   */\n  Context.prototype.getCurrentPoint = function () {\n    var event = this.event;\n    if (event) {\n      if (event.target instanceof HTMLElement) {\n        var canvas = this.view.getCanvas();\n        var point = canvas.getPointByClient(event.clientX, event.clientY);\n        return point;\n      } else {\n        return {\n          x: event.x,\n          y: event.y\n        };\n      }\n    }\n    return null;\n  };\n  /**\n   * 获取当前 shape\n   * @returns current shape\n   */\n  Context.prototype.getCurrentShape = function () {\n    return get(this.event, ['gEvent', 'shape']);\n  };\n  /**\n   * 当前的触发是否在 View 内\n   */\n  Context.prototype.isInPlot = function () {\n    var point = this.getCurrentPoint();\n    if (point) {\n      return this.view.isPointInPlot(point);\n    }\n    return false;\n  };\n  /**\n   * 是否在指定的图形内\n   * @param name shape 的 name\n   */\n  Context.prototype.isInShape = function (name) {\n    var shape = this.getCurrentShape(); // 不再考虑在 shape 的 parent 内的情况\n    if (shape) {\n      return shape.get('name') === name;\n    }\n    return false;\n  };\n  /**\n   * 当前的触发是组件内部\n   * @param name 组件名，可以为空\n   */\n  Context.prototype.isInComponent = function (name) {\n    var components = getComponents(this.view);\n    var point = this.getCurrentPoint();\n    if (point) {\n      return !!components.find(function (component) {\n        var bbox = component.getBBox();\n        if (name) {\n          return component.get('name') === name && isInBox(bbox, point);\n        } else {\n          return isInBox(bbox, point);\n        }\n      });\n    }\n    return false;\n  };\n  /**\n   * 销毁\n   */\n  Context.prototype.destroy = function () {\n    // 先销毁 action 再清空，一边遍历，一边删除，所以数组需要更新引用\n    each(this.actions.slice(), function (action) {\n      action.destroy();\n    });\n    this.view = null;\n    this.event = null;\n    this.actions = null;\n    this.cacheMap = null;\n  };\n  return Context;\n}();\nexport default Context;","map":{"version":3,"mappings":"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","names":["each","get","getComponents","isInBox","view","Context","_i","params","length","cacheMap","name","actions","find","action","push","index","indexOf","splice","event","target","HTMLElement","canvas","getCanvas","point","getPointByClient","clientX","clientY","x","y","getCurrentPoint","isPointInPlot","shape","getCurrentShape","components","component","bbox","getBBox","slice","destroy"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/g2/src/interaction/context.ts"],"sourcesContent":["import { each, get } from '@antv/util';\nimport { View } from '../chart';\nimport { BBox, IShape, Point } from '../dependents';\nimport { IAction, IInteractionContext, LooseObject } from '../interface';\nimport { getComponents, isInBox } from './action/util';\n\n/**\n * 交互的上下文\n */\nexport default class Context implements IInteractionContext {\n  /** 当前所有的 Action */\n  public actions: IAction[] = [];\n  /** 当前 View 实例 */\n  public view: View;\n  /** 当前事件对象 */\n  public event: LooseObject = null;\n\n  private cacheMap: LooseObject = {};\n\n  constructor(view: View) {\n    this.view = view;\n  }\n\n  /**\n   * 缓存信息\n   * @param params 缓存的字段\n   *  - 如果一个字段则获取缓存\n   *  - 两个字段则设置缓存\n   */\n  public cache(...params) {\n    if (params.length === 1) {\n      return this.cacheMap[params[0]];\n    } else if (params.length === 2) {\n      this.cacheMap[params[0]] = params[1];\n    }\n  }\n\n  /**\n   * 获取 Action\n   * @param name Action 的名称\n   */\n  public getAction(name: string): IAction {\n    return this.actions.find((action) => action.name === name);\n  }\n\n  /**\n   * 获取 Action\n   * @param action Action 对象\n   */\n  public addAction(action: IAction) {\n    this.actions.push(action);\n  }\n\n  /**\n   * 移除 Action\n   * @param action Action 对象\n   */\n  public removeAction(action: IAction) {\n    const actions = this.actions;\n    const index = this.actions.indexOf(action);\n    if (index >= 0) {\n      actions.splice(index, 1);\n    }\n  }\n\n  /**\n   * 获取当前的点\n   */\n  public getCurrentPoint(): Point {\n    const event = this.event;\n    if (event) {\n      if (event.target instanceof HTMLElement) {\n        const canvas = this.view.getCanvas();\n        const point = canvas.getPointByClient(event.clientX, event.clientY);\n        return point;\n      } else {\n        return {\n          x: event.x,\n          y: event.y,\n        };\n      }\n    }\n    return null;\n  }\n\n  /**\n   * 获取当前 shape\n   * @returns current shape\n   */\n  public getCurrentShape(): IShape {\n    return get(this.event, ['gEvent', 'shape']);\n  }\n\n  /**\n   * 当前的触发是否在 View 内\n   */\n  public isInPlot() {\n    const point = this.getCurrentPoint();\n    if (point) {\n      return this.view.isPointInPlot(point);\n    }\n    return false;\n  }\n\n  /**\n   * 是否在指定的图形内\n   * @param name shape 的 name\n   */\n  public isInShape(name) {\n    const shape = this.getCurrentShape(); // 不再考虑在 shape 的 parent 内的情况\n    if (shape) {\n      return shape.get('name') === name;\n    }\n    return false;\n  }\n\n  /**\n   * 当前的触发是组件内部\n   * @param name 组件名，可以为空\n   */\n  public isInComponent(name?: string) {\n    const components = getComponents(this.view);\n    const point = this.getCurrentPoint();\n    if (point) {\n      return !!components.find((component) => {\n        const bbox = component.getBBox() as BBox;\n        if (name) {\n          return component.get('name') === name && isInBox(bbox, point);\n        } else {\n          return isInBox(bbox, point);\n        }\n      });\n    }\n    return false;\n  }\n\n  /**\n   * 销毁\n   */\n  public destroy() {\n    // 先销毁 action 再清空，一边遍历，一边删除，所以数组需要更新引用\n    each(this.actions.slice(), (action) => {\n      action.destroy();\n    });\n    this.view = null;\n    this.event = null;\n    this.actions = null;\n    this.cacheMap = null;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}