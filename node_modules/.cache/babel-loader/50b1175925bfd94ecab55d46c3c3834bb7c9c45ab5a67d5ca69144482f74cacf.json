{"ast":null,"code":"import { __assign, __extends, __read } from \"tslib\";\nimport { deepMix, get, isObject, size, clamp, isNil, noop, throttle, isEmpty, valuesOfKey } from '@antv/util';\nimport { COMPONENT_TYPE, DIRECTION, LAYER, VIEW_LIFE_CIRCLE } from '../../constant';\nimport { Slider as SliderComponent } from '../../dependents';\nimport { BBox } from '../../util/bbox';\nimport { directionToPosition } from '../../util/direction';\nimport { isBetween } from '../../util/helper';\nimport { Controller } from './base';\n/**\n * @ignore\n * slider Controller\n */\nvar Slider = /** @class */function (_super) {\n  __extends(Slider, _super);\n  function Slider(view) {\n    var _this = _super.call(this, view) || this;\n    _this.onChangeFn = noop;\n    /**\n     * 清除测量\n     */\n    _this.resetMeasure = function () {\n      _this.clear();\n    };\n    /**\n     * 滑块滑动的时候出发\n     * @param v\n     */\n    _this.onValueChange = function (v) {\n      var _a = __read(v, 2),\n        min = _a[0],\n        max = _a[1];\n      _this.start = min;\n      _this.end = max;\n      _this.changeViewData(min, max);\n    };\n    _this.container = _this.view.getLayer(LAYER.FORE).addGroup();\n    _this.onChangeFn = throttle(_this.onValueChange, 20, {\n      leading: true\n    });\n    _this.width = 0;\n    _this.view.on(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, _this.resetMeasure);\n    _this.view.on(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_SIZE, _this.resetMeasure);\n    return _this;\n  }\n  Object.defineProperty(Slider.prototype, \"name\", {\n    get: function get() {\n      return 'slider';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Slider.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n    this.view.off(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, this.resetMeasure);\n    this.view.off(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_SIZE, this.resetMeasure);\n  };\n  /**\n   * 初始化\n   */\n  Slider.prototype.init = function () {};\n  /**\n   * 渲染\n   */\n  Slider.prototype.render = function () {\n    this.option = this.view.getOptions().slider;\n    var _a = this.getSliderCfg(),\n      start = _a.start,\n      end = _a.end;\n    if (isNil(this.start)) {\n      this.start = start;\n      this.end = end;\n    }\n    var viewData = this.view.getOptions().data;\n    if (this.option && !isEmpty(viewData)) {\n      if (this.slider) {\n        // exist, update\n        this.slider = this.updateSlider();\n      } else {\n        // not exist, create\n        this.slider = this.createSlider();\n        // 监听事件，绑定交互\n        this.slider.component.on('sliderchange', this.onChangeFn);\n      }\n    } else {\n      if (this.slider) {\n        // exist, destroy\n        this.slider.component.destroy();\n        this.slider = undefined;\n      } else {\n        // do nothing\n      }\n    }\n  };\n  /**\n   * 布局\n   */\n  Slider.prototype.layout = function () {\n    var _this = this;\n    if (this.option && !this.width) {\n      this.measureSlider();\n      setTimeout(function () {\n        // 初始状态下的 view 数据过滤\n        if (!_this.view.destroyed) {\n          _this.changeViewData(_this.start, _this.end);\n        }\n      }, 0);\n    }\n    if (this.slider) {\n      var width = this.view.coordinateBBox.width;\n      // 获取组件的 layout bbox\n      var padding = this.slider.component.get('padding');\n      var _a = __read(padding, 4),\n        paddingTop = _a[0],\n        paddingRight = _a[1],\n        paddingBottom = _a[2],\n        paddingLeft = _a[3];\n      var bboxObject = this.slider.component.getLayoutBBox();\n      var bbox = new BBox(bboxObject.x, bboxObject.y, Math.min(bboxObject.width, width), bboxObject.height).expand(padding);\n      var _b = this.getMinMaxText(this.start, this.end),\n        minText = _b.minText,\n        maxText = _b.maxText;\n      var _c = __read(directionToPosition(this.view.viewBBox, bbox, DIRECTION.BOTTOM), 2),\n        x1 = _c[0],\n        y1 = _c[1];\n      var _d = __read(directionToPosition(this.view.coordinateBBox, bbox, DIRECTION.BOTTOM), 2),\n        x2 = _d[0],\n        y2 = _d[1];\n      // 默认放在 bottom\n      this.slider.component.update(__assign(__assign({}, this.getSliderCfg()), {\n        x: x2 + paddingLeft,\n        y: y1 + paddingTop,\n        width: this.width,\n        start: this.start,\n        end: this.end,\n        minText: minText,\n        maxText: maxText\n      }));\n      this.view.viewBBox = this.view.viewBBox.cut(bbox, DIRECTION.BOTTOM);\n    }\n  };\n  /**\n   * 更新\n   */\n  Slider.prototype.update = function () {\n    // 逻辑和 render 保持一致\n    this.render();\n  };\n  /**\n   * 创建 slider 组件\n   */\n  Slider.prototype.createSlider = function () {\n    var cfg = this.getSliderCfg();\n    // 添加 slider 组件\n    var component = new SliderComponent(__assign({\n      container: this.container\n    }, cfg));\n    component.init();\n    return {\n      component: component,\n      layer: LAYER.FORE,\n      direction: DIRECTION.BOTTOM,\n      type: COMPONENT_TYPE.SLIDER\n    };\n  };\n  /**\n   * 更新配置\n   */\n  Slider.prototype.updateSlider = function () {\n    var cfg = this.getSliderCfg();\n    if (this.width) {\n      var _a = this.getMinMaxText(this.start, this.end),\n        minText = _a.minText,\n        maxText = _a.maxText;\n      cfg = __assign(__assign({}, cfg), {\n        width: this.width,\n        start: this.start,\n        end: this.end,\n        minText: minText,\n        maxText: maxText\n      });\n    }\n    this.slider.component.update(cfg);\n    return this.slider;\n  };\n  /**\n   * 进行测量操作\n   */\n  Slider.prototype.measureSlider = function () {\n    var width = this.getSliderCfg().width;\n    this.width = width;\n  };\n  /**\n   * 生成 slider 配置\n   */\n  Slider.prototype.getSliderCfg = function () {\n    var cfg = {\n      height: 16,\n      start: 0,\n      end: 1,\n      minText: '',\n      maxText: '',\n      x: 0,\n      y: 0,\n      width: this.view.coordinateBBox.width\n    };\n    if (isObject(this.option)) {\n      // 用户配置的数据，优先级更高\n      var trendCfg = __assign({\n        data: this.getData()\n      }, get(this.option, 'trendCfg', {}));\n      // 因为有样式，所以深层覆盖\n      cfg = deepMix({}, cfg, this.getThemeOptions(), this.option);\n      // trendCfg 因为有数据数组，所以使用浅替换\n      cfg = __assign(__assign({}, cfg), {\n        trendCfg: trendCfg\n      });\n    }\n    cfg.start = clamp(Math.min(isNil(cfg.start) ? 0 : cfg.start, isNil(cfg.end) ? 1 : cfg.end), 0, 1);\n    cfg.end = clamp(Math.max(isNil(cfg.start) ? 0 : cfg.start, isNil(cfg.end) ? 1 : cfg.end), 0, 1);\n    return cfg;\n  };\n  /**\n   * 从 view 中获取数据，缩略轴使用全量的数据\n   */\n  Slider.prototype.getData = function () {\n    var data = this.view.getOptions().data;\n    var _a = __read(this.view.getYScales(), 1),\n      yScale = _a[0];\n    var groupScales = this.view.getGroupScales();\n    if (groupScales.length) {\n      var _b = groupScales[0],\n        field_1 = _b.field,\n        ticks_1 = _b.ticks;\n      return data.reduce(function (pre, cur) {\n        if (cur[field_1] === ticks_1[0]) {\n          pre.push(cur[yScale.field]);\n        }\n        return pre;\n      }, []);\n    }\n    return data.map(function (datum) {\n      return datum[yScale.field] || 0;\n    });\n  };\n  /**\n   * 获取 slider 的主题配置\n   */\n  Slider.prototype.getThemeOptions = function () {\n    var theme = this.view.getTheme();\n    return get(theme, ['components', 'slider', 'common'], {});\n  };\n  /**\n   * 根据 start/end 和当前数据计算出当前的 minText/maxText\n   * @param min\n   * @param max\n   */\n  Slider.prototype.getMinMaxText = function (min, max) {\n    var data = this.view.getOptions().data;\n    var xScale = this.view.getXScale();\n    var isHorizontal = true;\n    var values = valuesOfKey(data, xScale.field);\n    // 如果是 xScale 数值类型，则进行排序\n    if (xScale.isLinear) {\n      values = values.sort();\n    }\n    var xValues = isHorizontal ? values : values.reverse();\n    var dataSize = size(data);\n    if (!xScale || !dataSize) {\n      return {}; // fix: 需要兼容，否则调用方直接取值会报错\n    }\n\n    var xTickCount = size(xValues);\n    var minIndex = Math.round(min * (xTickCount - 1));\n    var maxIndex = Math.round(max * (xTickCount - 1));\n    var minText = get(xValues, [minIndex]);\n    var maxText = get(xValues, [maxIndex]);\n    var formatter = this.getSliderCfg().formatter;\n    if (formatter) {\n      minText = formatter(minText, data[minIndex], minIndex);\n      maxText = formatter(maxText, data[maxIndex], maxIndex);\n    }\n    return {\n      minText: minText,\n      maxText: maxText\n    };\n  };\n  /**\n   * 更新 view 过滤数据\n   * @param min\n   * @param max\n   */\n  Slider.prototype.changeViewData = function (min, max) {\n    var data = this.view.getOptions().data;\n    var xScale = this.view.getXScale();\n    var dataSize = size(data);\n    if (!xScale || !dataSize) {\n      return;\n    }\n    var isHorizontal = true;\n    var values = valuesOfKey(data, xScale.field);\n    // 如果是 xScale 数值类型，则进行排序\n    var xScaleValues = this.view.getXScale().isLinear ? values.sort(function (a, b) {\n      return Number(a) - Number(b);\n    }) : values;\n    var xValues = isHorizontal ? xScaleValues : xScaleValues.reverse();\n    var xTickCount = size(xValues);\n    var minIndex = Math.round(min * (xTickCount - 1));\n    var maxIndex = Math.round(max * (xTickCount - 1));\n    // 增加 x 轴的过滤器\n    this.view.filter(xScale.field, function (value, datum) {\n      var idx = xValues.indexOf(value);\n      return idx > -1 ? isBetween(idx, minIndex, maxIndex) : true;\n    });\n    this.view.render(true);\n  };\n  /**\n   * 覆写父类方法\n   */\n  Slider.prototype.getComponents = function () {\n    return this.slider ? [this.slider] : [];\n  };\n  /**\n   * 覆盖父类\n   */\n  Slider.prototype.clear = function () {\n    if (this.slider) {\n      this.slider.component.destroy();\n      this.slider = undefined;\n    }\n    this.width = 0;\n    this.start = undefined;\n    this.end = undefined;\n  };\n  return Slider;\n}(Controller);\nexport default Slider;","map":{"version":3,"mappings":"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","names":["deepMix","get","isObject","size","clamp","isNil","noop","throttle","isEmpty","valuesOfKey","COMPONENT_TYPE","DIRECTION","LAYER","VIEW_LIFE_CIRCLE","Slider","SliderComponent","BBox","directionToPosition","isBetween","Controller","__extends","view","_super","_this","clear","v","min","max","start","end","changeViewData","container","getLayer","FORE","addGroup","onChangeFn","onValueChange","leading","width","on","BEFORE_CHANGE_DATA","resetMeasure","BEFORE_CHANGE_SIZE","Object","destroy","off","option","getOptions","slider","getSliderCfg","viewData","updateSlider","createSlider","component","undefined","measureSlider","setTimeout","destroyed","coordinateBBox","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","bboxObject","getLayoutBBox","bbox","x","y","Math","height","expand","getMinMaxText","minText","maxText","viewBBox","BOTTOM","x1","y1","x2","y2","update","cut","render","cfg","init","layer","direction","type","SLIDER","trendCfg","data","getData","getThemeOptions","getYScales","yScale","groupScales","getGroupScales","length","field_1","ticks_1","reduce","pre","cur","push","field","map","datum","theme","getTheme","xScale","getXScale","isHorizontal","values","isLinear","sort","xValues","reverse","dataSize","xTickCount","minIndex","round","maxIndex","formatter","xScaleValues","a","b","Number","filter","value","idx","indexOf"],"sources":["/home/iam/Documents/network/node_modules/@antv/g2/src/chart/controller/slider.ts"],"sourcesContent":["import { deepMix, get, isObject, size, clamp, isNil, noop, throttle, isEmpty, valuesOfKey } from '@antv/util';\nimport { COMPONENT_TYPE, DIRECTION, LAYER, VIEW_LIFE_CIRCLE } from '../../constant';\nimport { IGroup, Slider as SliderComponent } from '../../dependents';\nimport { ComponentOption, Datum, Padding } from '../../interface';\nimport { BBox } from '../../util/bbox';\nimport { directionToPosition } from '../../util/direction';\nimport { isBetween } from '../../util/helper';\nimport { Writeable } from '../../util/types';\nimport View from '../view';\nimport { Controller } from './base';\nimport { SliderOption, SliderCfg } from '../../interface';\n\n/**\n * @ignore\n * slider Controller\n */\nexport default class Slider extends Controller<SliderOption> {\n  private slider: ComponentOption;\n  private container: IGroup;\n\n  private width: number;\n  private start: number;\n  private end: number;\n\n  private onChangeFn: (evt: {}) => void = noop;\n\n  constructor(view: View) {\n    super(view);\n\n    this.container = this.view.getLayer(LAYER.FORE).addGroup();\n    this.onChangeFn = throttle(this.onValueChange, 20, {\n      leading: true,\n    }) as (evt: {}) => void;\n\n    this.width = 0;\n    this.view.on(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, this.resetMeasure);\n    this.view.on(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_SIZE, this.resetMeasure);\n  }\n\n  get name(): string {\n    return 'slider';\n  }\n\n  public destroy() {\n    super.destroy();\n    this.view.off(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, this.resetMeasure);\n    this.view.off(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_SIZE, this.resetMeasure);\n  }\n\n  /**\n   * 初始化\n   */\n  public init() {}\n\n  /**\n   * 渲染\n   */\n  public render() {\n    this.option = this.view.getOptions().slider;\n    const { start, end } = this.getSliderCfg();\n    if (isNil(this.start)) {\n      this.start = start;\n      this.end = end;\n    }\n\n    const { data: viewData } = this.view.getOptions();\n    if (this.option && !isEmpty(viewData)) {\n      if (this.slider) {\n        // exist, update\n        this.slider = this.updateSlider();\n      } else {\n        // not exist, create\n        this.slider = this.createSlider();\n        // 监听事件，绑定交互\n        this.slider.component.on('sliderchange', this.onChangeFn);\n      }\n    } else {\n      if (this.slider) {\n        // exist, destroy\n        this.slider.component.destroy();\n        this.slider = undefined;\n      } else {\n        // do nothing\n      }\n    }\n  }\n\n  /**\n   * 布局\n   */\n  public layout() {\n    if (this.option && !this.width) {\n      this.measureSlider();\n      setTimeout(() => {\n        // 初始状态下的 view 数据过滤\n        if (!this.view.destroyed) {\n          this.changeViewData(this.start, this.end);\n        }\n      }, 0);\n    }\n    if (this.slider) {\n      const width = this.view.coordinateBBox.width;\n      // 获取组件的 layout bbox\n      const padding: Padding = this.slider.component.get('padding') as Padding;\n      const [paddingTop, paddingRight, paddingBottom, paddingLeft] = padding;\n      const bboxObject = this.slider.component.getLayoutBBox();\n      const bbox = new BBox(bboxObject.x, bboxObject.y, Math.min(bboxObject.width, width), bboxObject.height).expand(\n        padding\n      );\n      const { minText, maxText } = this.getMinMaxText(this.start, this.end);\n\n      const [x1, y1] = directionToPosition(this.view.viewBBox, bbox, DIRECTION.BOTTOM);\n      const [x2, y2] = directionToPosition(this.view.coordinateBBox, bbox, DIRECTION.BOTTOM);\n\n      // 默认放在 bottom\n      this.slider.component.update({\n        ...this.getSliderCfg(),\n        x: x2 + paddingLeft,\n        y: y1 + paddingTop,\n        width: this.width,\n        start: this.start,\n        end: this.end,\n        minText,\n        maxText,\n      });\n\n      this.view.viewBBox = this.view.viewBBox.cut(bbox, DIRECTION.BOTTOM);\n    }\n  }\n\n  /**\n   * 更新\n   */\n  public update() {\n    // 逻辑和 render 保持一致\n    this.render();\n  }\n\n  /**\n   * 创建 slider 组件\n   */\n  private createSlider(): ComponentOption {\n    const cfg: any = this.getSliderCfg();\n    // 添加 slider 组件\n    const component = new SliderComponent({\n      container: this.container,\n      ...cfg,\n    });\n\n    component.init();\n\n    return {\n      component,\n      layer: LAYER.FORE,\n      direction: DIRECTION.BOTTOM,\n      type: COMPONENT_TYPE.SLIDER,\n    };\n  }\n\n  /**\n   * 更新配置\n   */\n  private updateSlider() {\n    let cfg = this.getSliderCfg();\n    if (this.width) {\n      const { minText, maxText } = this.getMinMaxText(this.start, this.end);\n      cfg = { ...cfg, width: this.width, start: this.start, end: this.end, minText, maxText };\n    }\n\n    this.slider.component.update(cfg);\n\n    return this.slider;\n  }\n\n  /**\n   * 进行测量操作\n   */\n  private measureSlider() {\n    const { width } = this.getSliderCfg();\n\n    this.width = width;\n  }\n\n  /**\n   * 清除测量\n   */\n  private resetMeasure = () => {\n    this.clear();\n  };\n\n  /**\n   * 生成 slider 配置\n   */\n  private getSliderCfg() {\n    let cfg: Writeable<SliderCfg> & { x: number; y: number; width: number; minText: string; maxText: string } = {\n      height: 16,\n      start: 0,\n      end: 1,\n      minText: '',\n      maxText: '',\n      x: 0,\n      y: 0,\n      width: this.view.coordinateBBox.width,\n    };\n    if (isObject(this.option)) {\n      // 用户配置的数据，优先级更高\n      const trendCfg = {\n        data: this.getData(),\n        ...get(this.option, 'trendCfg', {}),\n      };\n\n      // 因为有样式，所以深层覆盖\n      cfg = deepMix({}, cfg, this.getThemeOptions(), this.option);\n\n      // trendCfg 因为有数据数组，所以使用浅替换\n      cfg = { ...cfg, trendCfg };\n    }\n\n    cfg.start = clamp(Math.min(isNil(cfg.start) ? 0 : cfg.start, isNil(cfg.end) ? 1 : cfg.end), 0, 1);\n    cfg.end = clamp(Math.max(isNil(cfg.start) ? 0 : cfg.start, isNil(cfg.end) ? 1 : cfg.end), 0, 1);\n\n    return cfg;\n  }\n\n  /**\n   * 从 view 中获取数据，缩略轴使用全量的数据\n   */\n  private getData(): number[] {\n    const data = this.view.getOptions().data;\n    const [yScale] = this.view.getYScales();\n    const groupScales = this.view.getGroupScales();\n    if (groupScales.length) {\n      const { field, ticks } = groupScales[0];\n      return data.reduce((pre, cur) => {\n        if (cur[field] === ticks[0]) {\n          pre.push(cur[yScale.field] as number);\n        }\n        return pre;\n      }, []) as number[];\n    }\n\n    return data.map((datum) => datum[yScale.field] || 0);\n  }\n\n  /**\n   * 获取 slider 的主题配置\n   */\n  private getThemeOptions() {\n    const theme = this.view.getTheme();\n    return get(theme, ['components', 'slider', 'common'], {});\n  }\n\n  /**\n   * 滑块滑动的时候出发\n   * @param v\n   */\n  private onValueChange = (v: any) => {\n    const [min, max] = v;\n\n    this.start = min;\n    this.end = max;\n\n    this.changeViewData(min, max);\n  };\n\n  /**\n   * 根据 start/end 和当前数据计算出当前的 minText/maxText\n   * @param min\n   * @param max\n   */\n  private getMinMaxText(min: number, max: number) {\n    const data = this.view.getOptions().data;\n    const xScale = this.view.getXScale();\n    const isHorizontal = true;\n    let values = valuesOfKey(data, xScale.field);\n\n    // 如果是 xScale 数值类型，则进行排序\n    if (xScale.isLinear) {\n      values = values.sort();\n    }\n\n    const xValues = isHorizontal ? values : values.reverse();\n    const dataSize = size(data);\n\n    if (!xScale || !dataSize) {\n      return {}; // fix: 需要兼容，否则调用方直接取值会报错\n    }\n\n    const xTickCount = size(xValues);\n\n    const minIndex = Math.round(min * (xTickCount - 1));\n    const maxIndex = Math.round(max * (xTickCount - 1));\n\n    let minText = get(xValues, [minIndex]);\n    let maxText = get(xValues, [maxIndex]);\n\n    const formatter = this.getSliderCfg().formatter as SliderCfg['formatter'];\n    if (formatter) {\n      minText = formatter(minText, data[minIndex], minIndex);\n      maxText = formatter(maxText, data[maxIndex], maxIndex);\n    }\n\n    return {\n      minText,\n      maxText,\n    };\n  }\n\n  /**\n   * 更新 view 过滤数据\n   * @param min\n   * @param max\n   */\n  private changeViewData(min: number, max: number) {\n    const data = this.view.getOptions().data;\n    const xScale = this.view.getXScale();\n    const dataSize = size(data);\n    if (!xScale || !dataSize) {\n      return;\n    }\n    const isHorizontal = true;\n    const values = valuesOfKey(data, xScale.field);\n\n    // 如果是 xScale 数值类型，则进行排序\n    const xScaleValues = this.view.getXScale().isLinear ? values.sort((a, b) => Number(a) - Number(b)) : values;\n\n    const xValues = isHorizontal ? xScaleValues : xScaleValues.reverse();\n    const xTickCount = size(xValues);\n\n    const minIndex = Math.round(min * (xTickCount - 1));\n    const maxIndex = Math.round(max * (xTickCount - 1));\n\n    // 增加 x 轴的过滤器\n    this.view.filter(xScale.field, (value: any, datum: Datum) => {\n      const idx: number = xValues.indexOf(value);\n      return idx > -1 ? isBetween(idx, minIndex, maxIndex) : true;\n    });\n    this.view.render(true);\n  }\n\n  /**\n   * 覆写父类方法\n   */\n  public getComponents() {\n    return this.slider ? [this.slider] : [];\n  }\n\n  /**\n   * 覆盖父类\n   */\n  public clear() {\n    if (this.slider) {\n      this.slider.component.destroy();\n      this.slider = undefined;\n    }\n    this.width = 0;\n    this.start = undefined;\n    this.end = undefined;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}