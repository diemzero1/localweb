{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport { clearList } from './list-highlight-util';\nimport ListState from './list-state';\nvar STATUS_UNACTIVE = 'inactive';\nvar STATUS_ACTIVE = 'active';\n/**\n * highlight Action 的效果是 active 和 inactive 两个状态的组合\n * @class\n * @ignore\n */\nvar ListHighlight = /** @class */function (_super) {\n  __extends(ListHighlight, _super);\n  function ListHighlight() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.stateName = STATUS_ACTIVE;\n    _this.ignoreItemStates = ['unchecked']; // 当存在 unchecked 状态时不触发\n    return _this;\n  }\n  // 如果 item.name 匹配，则设置 highlight 以及取消\n  ListHighlight.prototype.setItemsState = function (list, name, enable) {\n    this.setHighlightBy(list, function (item) {\n      return item.name === name;\n    }, enable);\n  };\n  // 单个 item 设置状态\n  ListHighlight.prototype.setItemState = function (list, item, enable) {\n    var items = list.getItems();\n    this.setHighlightBy(list, function (el) {\n      return el === item;\n    }, enable);\n  };\n  // 根据条件设置 highlight\n  ListHighlight.prototype.setHighlightBy = function (list, callback, enable) {\n    var items = list.getItems();\n    if (enable) {\n      // 设置 highlight 时，保留之前已经 Highlight 的项\n      each(items, function (item) {\n        if (callback(item)) {\n          if (list.hasState(item, STATUS_UNACTIVE)) {\n            list.setItemState(item, STATUS_UNACTIVE, false);\n          }\n          list.setItemState(item, STATUS_ACTIVE, true);\n        } else if (!list.hasState(item, STATUS_ACTIVE)) {\n          list.setItemState(item, STATUS_UNACTIVE, true);\n        }\n      });\n    } else {\n      var activeItems = list.getItemsByState(STATUS_ACTIVE);\n      var allCancel_1 = true;\n      // 检测 activeItems 是否要全部取消\n      each(activeItems, function (item) {\n        if (!callback(item)) {\n          allCancel_1 = false;\n          return false;\n        }\n      });\n      if (allCancel_1) {\n        this.clear();\n      } else {\n        // 如果不是都要取消 highlight, 则设置匹配的 element 的状态为 unactive\n        // 其他 element 状态不变\n        each(items, function (item) {\n          if (callback(item)) {\n            if (list.hasState(item, STATUS_ACTIVE)) {\n              list.setItemState(item, STATUS_ACTIVE, false);\n            }\n            list.setItemState(item, STATUS_UNACTIVE, true);\n          }\n        });\n      }\n    }\n  };\n  /**\n   * highlight 图例项（坐标轴文本）\n   */\n  ListHighlight.prototype.highlight = function () {\n    this.setState();\n  };\n  // 需要全部清理 active 和 unactive\n  ListHighlight.prototype.clear = function () {\n    var triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo) {\n      clearList(triggerInfo.list);\n    } else {\n      // 如果不是 component 的事件触发，则所有满足触发条件的组件都清除该状态\n      var components = this.getAllowComponents();\n      each(components, function (component) {\n        component.clearItemsState(STATUS_ACTIVE);\n        component.clearItemsState(STATUS_UNACTIVE);\n      });\n    }\n  };\n  return ListHighlight;\n}(ListState);\nexport default ListHighlight;","map":{"version":3,"mappings":"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","names":["each","clearList","ListState","STATUS_UNACTIVE","STATUS_ACTIVE","__extends","_this","ListHighlight","list","name","enable","setHighlightBy","item","items","getItems","el","callback","hasState","setItemState","activeItems","getItemsByState","allCancel_1","clear","setState","triggerInfo","getTriggerListInfo","components","getAllowComponents","component","clearItemsState"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/g2/src/interaction/action/component/list-highlight.ts"],"sourcesContent":["import { each } from '@antv/util';\nimport { IList, ListItem } from '../../../dependents';\nimport { clearList } from './list-highlight-util';\nimport ListState from './list-state';\nconst STATUS_UNACTIVE = 'inactive';\nconst STATUS_ACTIVE = 'active';\ntype MatchCallback = (item: ListItem) => boolean;\n\n/**\n * highlight Action 的效果是 active 和 inactive 两个状态的组合\n * @class\n * @ignore\n */\nclass ListHighlight extends ListState {\n  protected stateName: string = STATUS_ACTIVE;\n  protected ignoreItemStates = ['unchecked']; // 当存在 unchecked 状态时不触发\n  // 如果 item.name 匹配，则设置 highlight 以及取消\n  protected setItemsState(list: IList, name: string, enable: boolean) {\n    this.setHighlightBy(list, (item) => item.name === name, enable);\n  }\n\n  // 单个 item 设置状态\n  protected setItemState(list: IList, item: ListItem, enable: boolean) {\n    const items = list.getItems();\n    this.setHighlightBy(list, (el) => el === item, enable);\n  }\n\n  // 根据条件设置 highlight\n  private setHighlightBy(list: IList, callback: MatchCallback, enable: boolean) {\n    const items = list.getItems();\n    if (enable) {\n      // 设置 highlight 时，保留之前已经 Highlight 的项\n      each(items, (item) => {\n        if (callback(item)) {\n          if (list.hasState(item, STATUS_UNACTIVE)) {\n            list.setItemState(item, STATUS_UNACTIVE, false);\n          }\n          list.setItemState(item, STATUS_ACTIVE, true);\n        } else if (!list.hasState(item, STATUS_ACTIVE)) {\n          list.setItemState(item, STATUS_UNACTIVE, true);\n        }\n      });\n    } else {\n      const activeItems = list.getItemsByState(STATUS_ACTIVE);\n      let allCancel = true;\n      // 检测 activeItems 是否要全部取消\n      each(activeItems, (item) => {\n        if (!callback(item)) {\n          allCancel = false;\n          return false;\n        }\n      });\n      if (allCancel) {\n        this.clear();\n      } else {\n        // 如果不是都要取消 highlight, 则设置匹配的 element 的状态为 unactive\n        // 其他 element 状态不变\n        each(items, (item) => {\n          if (callback(item)) {\n            if (list.hasState(item, STATUS_ACTIVE)) {\n              list.setItemState(item, STATUS_ACTIVE, false);\n            }\n            list.setItemState(item, STATUS_UNACTIVE, true);\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * highlight 图例项（坐标轴文本）\n   */\n  public highlight() {\n    this.setState();\n  }\n\n  // 需要全部清理 active 和 unactive\n  public clear() {\n    const triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo) {\n      clearList(triggerInfo.list);\n    } else {\n      // 如果不是 component 的事件触发，则所有满足触发条件的组件都清除该状态\n      const components = this.getAllowComponents();\n      each(components, (component) => {\n        component.clearItemsState(STATUS_ACTIVE);\n        component.clearItemsState(STATUS_UNACTIVE);\n      });\n    }\n  }\n}\n\nexport default ListHighlight;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}