{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { get } from '@antv/util';\nimport { ellipsisLabel } from './label';\nimport { applyRotate, applyTranslate } from './matrix';\nimport { formatPadding } from './util';\nexport function renderTag(container, tagCfg) {\n  var x = tagCfg.x,\n    y = tagCfg.y,\n    content = tagCfg.content,\n    style = tagCfg.style,\n    id = tagCfg.id,\n    name = tagCfg.name,\n    rotate = tagCfg.rotate,\n    maxLength = tagCfg.maxLength,\n    autoEllipsis = tagCfg.autoEllipsis,\n    isVertical = tagCfg.isVertical,\n    ellipsisPosition = tagCfg.ellipsisPosition,\n    background = tagCfg.background;\n  var tagGroup = container.addGroup({\n    id: id + \"-group\",\n    name: name + \"-group\",\n    attrs: {\n      x: x,\n      y: y\n    }\n  });\n  // Text shape\n  var text = tagGroup.addShape({\n    type: 'text',\n    id: id,\n    name: name,\n    attrs: __assign({\n      x: 0,\n      y: 0,\n      text: content\n    }, style)\n  });\n  // maxLength 应包含 background 中的 padding 值\n  var padding = formatPadding(get(background, 'padding', 0));\n  if (maxLength && autoEllipsis) {\n    var maxTextLength = maxLength - (padding[1] + padding[3]);\n    // 超出自动省略\n    ellipsisLabel(!isVertical, text, maxTextLength, ellipsisPosition);\n  }\n  if (background) {\n    // 渲染文本背景\n    var backgroundStyle = get(background, 'style', {});\n    var _a = text.getCanvasBBox(),\n      minX = _a.minX,\n      minY = _a.minY,\n      width = _a.width,\n      height = _a.height;\n    var tagBg = tagGroup.addShape('rect', {\n      id: id + \"-bg\",\n      name: id + \"-bg\",\n      attrs: __assign({\n        x: minX - padding[3],\n        y: minY - padding[0],\n        width: width + padding[1] + padding[3],\n        height: height + padding[0] + padding[2]\n      }, backgroundStyle)\n    });\n    tagBg.toBack();\n  }\n  applyTranslate(tagGroup, x, y);\n  applyRotate(tagGroup, rotate, x, y);\n}","map":{"version":3,"mappings":";AACA,SAASA,GAAG,QAAQ,YAAY;AAGhC,SAASC,aAAa,QAAQ,SAAS;AACvC,SAASC,WAAW,EAAEC,cAAc,QAAQ,UAAU;AACtD,SAASC,aAAa,QAAQ,QAAQ;AAiBtC,OAAM,SAAUC,SAAS,CAACC,SAAiB,EAAEC,MAAc;EACjD,KAAC,GAA6GA,MAAM,EAAnH;IAAEC,CAAC,GAA0GD,MAAM,EAAhH;IAAEE,OAAO,GAAiGF,MAAM,QAAvG;IAAEG,KAAK,GAA0FH,MAAM,MAAhG;IAAEI,EAAE,GAAsFJ,MAAM,GAA5F;IAAEK,IAAI,GAAgFL,MAAM,KAAtF;IAAEM,MAAM,GAAwEN,MAAM,OAA9E;IAAEO,SAAS,GAA6DP,MAAM,UAAnE;IAAEQ,YAAY,GAA+CR,MAAM,aAArD;IAAES,UAAU,GAAmCT,MAAM,WAAzC;IAAEU,gBAAgB,GAAiBV,MAAM,iBAAvB;IAAEW,UAAU,GAAKX,MAAM,WAAX;EACjH,IAAMY,QAAQ,GAAGb,SAAS,CAACc,QAAQ,CAAC;IAClCT,EAAE,EAAKA,EAAE,WAAQ;IACjBC,IAAI,EAAKA,IAAI,WAAQ;IACrBS,KAAK,EAAE;MACLC,CAAC;MACDd,CAAC;;GAEJ,CAAC;EAEF;EACA,IAAMe,IAAI,GAAGJ,QAAQ,CAACK,QAAQ,CAAC;IAC7BC,IAAI,EAAE,MAAM;IACZd,EAAE;IACFC,IAAI;IACJS,KAAK;MACHC,CAAC,EAAE,CAAC;MACJd,CAAC,EAAE,CAAC;MACJe,IAAI,EAAEd;IAAO,GACVC,KAAK;GAEX,CAAC;EAEF;EACA,IAAMgB,OAAO,GAAGtB,aAAa,CAACJ,GAAG,CAACkB,UAAU,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;EAC5D,IAAIJ,SAAS,IAAIC,YAAY,EAAE;IAC7B,IAAMY,aAAa,GAAGb,SAAS,IAAIY,OAAO,CAAC,CAAC,CAAC,GAAGA,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3D;IACAzB,aAAa,CAAC,CAACe,UAAU,EAAEO,IAAI,EAAEI,aAAa,EAAEV,gBAAgB,CAAC;;EAGnE,IAAIC,UAAU,EAAE;IACd;IACA,IAAMU,eAAe,GAAG5B,GAAG,CAACkB,UAAU,EAAE,OAAO,EAAE,EAAE,CAAC;IAC9C,SAAgCK,IAAI,CAACM,aAAa,EAAE;MAAlDC,IAAI;MAAEC,IAAI;MAAEC,KAAK;MAAEC,MAAM,YAAyB;IAC1D,IAAMC,KAAK,GAAGf,QAAQ,CAACK,QAAQ,CAAC,MAAM,EAAE;MACtCb,EAAE,EAAKA,EAAE,QAAK;MACdC,IAAI,EAAKD,EAAE,QAAK;MAChBU,KAAK;QACHC,CAAC,EAAEQ,IAAI,GAAGJ,OAAO,CAAC,CAAC,CAAC;QACpBlB,CAAC,EAAEuB,IAAI,GAAGL,OAAO,CAAC,CAAC,CAAC;QACpBM,KAAK,EAAEA,KAAK,GAAGN,OAAO,CAAC,CAAC,CAAC,GAAGA,OAAO,CAAC,CAAC,CAAC;QACtCO,MAAM,EAAEA,MAAM,GAAGP,OAAO,CAAC,CAAC,CAAC,GAAGA,OAAO,CAAC,CAAC;MAAC,GACrCE,eAAe;KAErB,CAAC;IACFM,KAAK,CAACC,MAAM,EAAE;;EAGhBhC,cAAc,CAACgB,QAAQ,EAAEG,CAAC,EAAEd,CAAC,CAAC;EAC9BN,WAAW,CAACiB,QAAQ,EAAEN,MAAM,EAAES,CAAC,EAAEd,CAAC,CAAC;AACrC","names":["get","ellipsisLabel","applyRotate","applyTranslate","formatPadding","renderTag","container","tagCfg","y","content","style","id","name","rotate","maxLength","autoEllipsis","isVertical","ellipsisPosition","background","tagGroup","addGroup","attrs","x","text","addShape","type","padding","maxTextLength","backgroundStyle","getCanvasBBox","minX","minY","width","height","tagBg","toBack"],"sources":["/home/iam/Documents/network/node_modules/@antv/component/src/util/graphic.ts"],"sourcesContent":["import { IGroup } from '@antv/g-base';\nimport { get } from '@antv/util';\n\nimport { EnhancedTextCfg } from '../types';\nimport { ellipsisLabel } from './label';\nimport { applyRotate, applyTranslate } from './matrix';\nimport { formatPadding } from './util';\n\nexport interface TagCfg extends EnhancedTextCfg {\n  /** 组件的 id 标识 */\n  id?: string;\n  /** 组件的名字 */\n  name?: string;\n  /**\n   * 文本标注位置 x\n   */\n  x: number;\n  /**\n   * 文本标注位置 y\n   */\n  y: number;\n}\n\nexport function renderTag(container: IGroup, tagCfg: TagCfg) {\n  const { x, y, content, style, id, name, rotate, maxLength, autoEllipsis, isVertical, ellipsisPosition, background } = tagCfg;\n  const tagGroup = container.addGroup({\n    id: `${id}-group`,\n    name: `${name}-group`,\n    attrs: {\n      x,\n      y,\n    }\n  });\n\n  // Text shape\n  const text = tagGroup.addShape({\n    type: 'text',\n    id,\n    name,\n    attrs: {\n      x: 0,\n      y: 0,\n      text: content,\n      ...style,\n    },\n  });\n\n  // maxLength 应包含 background 中的 padding 值\n  const padding = formatPadding(get(background, 'padding', 0));\n  if (maxLength && autoEllipsis) {\n    const maxTextLength = maxLength - (padding[1] + padding[3]);\n    // 超出自动省略\n    ellipsisLabel(!isVertical, text, maxTextLength, ellipsisPosition);\n  }\n\n  if (background) {\n    // 渲染文本背景\n    const backgroundStyle = get(background, 'style', {});\n    const { minX, minY, width, height } = text.getCanvasBBox();\n    const tagBg = tagGroup.addShape('rect', {\n      id: `${id}-bg`,\n      name: `${id}-bg`,\n      attrs: {\n        x: minX - padding[3],\n        y: minY - padding[0],\n        width: width + padding[1] + padding[3],\n        height: height + padding[0] + padding[2],\n        ...backgroundStyle,\n      },\n    });\n    tagBg.toBack();\n  }\n\n  applyTranslate(tagGroup, x, y);\n  applyRotate(tagGroup, rotate, x, y);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}