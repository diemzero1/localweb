{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { get, isNil } from '@antv/util';\nimport { animation, interaction, pattern, scale, theme } from '../../adaptor/common';\nimport { interval } from '../../adaptor/geometries';\nimport { deepAssign, flow, renderStatistic } from '../../utils';\nimport { getLiquidData } from './utils';\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var percent = options.percent,\n    liquidStyle = options.liquidStyle,\n    radius = options.radius,\n    outline = options.outline,\n    wave = options.wave,\n    shape = options.shape,\n    shapeStyle = options.shapeStyle,\n    animation = options.animation;\n  chart.scale({\n    percent: {\n      min: 0,\n      max: 1\n    }\n  });\n  chart.data(getLiquidData(percent));\n  var color = options.color || chart.getTheme().defaultColor;\n  var p = deepAssign({}, params, {\n    options: {\n      xField: 'type',\n      yField: 'percent',\n      // radius 放到 columnWidthRatio 中。\n      // 保证横向的大小是根据  radius 生成的\n      widthRatio: radius,\n      interval: {\n        color: color,\n        style: liquidStyle,\n        shape: 'liquid-fill-gauge'\n      }\n    }\n  });\n  var ext = interval(p).ext;\n  var geometry = ext.geometry;\n  var background = chart.getTheme().background;\n  var customInfo = {\n    radius: radius,\n    outline: outline,\n    wave: wave,\n    shape: shape,\n    shapeStyle: shapeStyle,\n    background: background,\n    animation: animation\n  };\n  // 将 radius 传入到自定义 shape 中\n  geometry.customInfo(customInfo);\n  // 关闭组件\n  chart.legend(false);\n  chart.axis(false);\n  chart.tooltip(false);\n  return params;\n}\n/**\n * 统计指标文档\n * @param params\n */\nexport function statistic(params, updated) {\n  var chart = params.chart,\n    options = params.options;\n  var statistic = options.statistic,\n    percent = options.percent,\n    meta = options.meta;\n  // 先清空标注，再重新渲染\n  chart.getController('annotation').clear(true);\n  var metaFormatter = get(meta, ['percent', 'formatter']) || function (v) {\n    return (v * 100).toFixed(2) + \"%\";\n  };\n  var contentOpt = statistic.content;\n  if (contentOpt) {\n    contentOpt = deepAssign({}, contentOpt, {\n      content: !isNil(contentOpt.content) ? contentOpt.content : metaFormatter(percent)\n    });\n  }\n  renderStatistic(chart, {\n    statistic: __assign(__assign({}, statistic), {\n      content: contentOpt\n    }),\n    plotType: 'liquid'\n  }, {\n    percent: percent\n  });\n  if (updated) {\n    chart.render(true);\n  }\n  return params;\n}\n/**\n * 水波图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API (主题前置，会影响绘制的取色)\n  return flow(theme, pattern('liquidStyle'), geometry, statistic, scale({}), animation, interaction)(params);\n}","map":{"version":3,"mappings":"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","names":["get","isNil","animation","interaction","pattern","scale","theme","interval","deepAssign","flow","renderStatistic","getLiquidData","geometry","params","options","liquidStyle","radius","outline","wave","shape","shapeStyle","chart","percent","min","max","data","color","getTheme","defaultColor","p","xField","yField","widthRatio","style","ext","customInfo","background","legend","axis","tooltip","statistic","updated","meta","getController","clear","metaFormatter","v","toFixed","contentOpt","content","plotType","render","adaptor"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/g2plot/src/plots/liquid/adaptor.ts"],"sourcesContent":["import { Geometry } from '@antv/g2';\nimport { get, isNil } from '@antv/util';\nimport { animation, interaction, pattern, scale, theme } from '../../adaptor/common';\nimport { interval } from '../../adaptor/geometries';\nimport { Params } from '../../core/adaptor';\nimport { deepAssign, flow, renderStatistic } from '../../utils';\nimport { CustomInfo, LiquidOptions } from './types';\nimport { getLiquidData } from './utils';\n\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params: Params<LiquidOptions>): Params<LiquidOptions> {\n  const { chart, options } = params;\n  const { percent, liquidStyle, radius, outline, wave, shape, shapeStyle, animation } = options;\n\n  chart.scale({\n    percent: {\n      min: 0,\n      max: 1,\n    },\n  });\n\n  chart.data(getLiquidData(percent));\n\n  const color = options.color || chart.getTheme().defaultColor;\n\n  const p = deepAssign({}, params, {\n    options: {\n      xField: 'type',\n      yField: 'percent',\n      // radius 放到 columnWidthRatio 中。\n      // 保证横向的大小是根据  radius 生成的\n      widthRatio: radius,\n      interval: {\n        color,\n        style: liquidStyle,\n        shape: 'liquid-fill-gauge',\n      },\n    },\n  });\n  const { ext } = interval(p);\n  const geometry = ext.geometry as Geometry;\n  const { background } = chart.getTheme();\n  const customInfo: CustomInfo = {\n    radius,\n    outline,\n    wave,\n    shape,\n    shapeStyle,\n    background,\n    animation,\n  };\n\n  // 将 radius 传入到自定义 shape 中\n  geometry.customInfo(customInfo);\n\n  // 关闭组件\n  chart.legend(false);\n  chart.axis(false);\n  chart.tooltip(false);\n\n  return params;\n}\n\n/**\n * 统计指标文档\n * @param params\n */\nexport function statistic(params: Params<LiquidOptions>, updated?: boolean): Params<LiquidOptions> {\n  const { chart, options } = params;\n  const { statistic, percent, meta } = options;\n\n  // 先清空标注，再重新渲染\n  chart.getController('annotation').clear(true);\n\n  const metaFormatter = get(meta, ['percent', 'formatter']) || ((v) => `${(v * 100).toFixed(2)}%`);\n  let contentOpt = statistic.content;\n  if (contentOpt) {\n    contentOpt = deepAssign({}, contentOpt, {\n      content: !isNil(contentOpt.content) ? contentOpt.content : metaFormatter(percent),\n    });\n  }\n\n  renderStatistic(chart, { statistic: { ...statistic, content: contentOpt }, plotType: 'liquid' }, { percent });\n\n  if (updated) {\n    chart.render(true);\n  }\n\n  return params;\n}\n\n/**\n * 水波图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<LiquidOptions>) {\n  // flow 的方式处理所有的配置到 G2 API (主题前置，会影响绘制的取色)\n  return flow(theme, pattern('liquidStyle'), geometry, statistic, scale({}), animation, interaction)(params);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}