{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { deepMix, each, get, isUndefined } from '@antv/util';\nimport { DIRECTION, COMPONENT_TYPE, LAYER } from '../../constant';\nimport { CircleAxis, CircleGrid, LineAxis, LineGrid } from '../../dependents';\nimport { DEFAULT_ANIMATE_CFG } from '../../animate/';\nimport { getAxisDirection, getAxisFactorByRegion, getAxisRegion, getAxisThemeCfg, getAxisTitleOptions, getAxisTitleText, getCircleAxisCenterRadius, isVertical } from '../../util/axis';\nimport { getAxisOption } from '../../util/axis';\nimport { getCircleGridItems, getGridThemeCfg, getLineGridItems, showGrid } from '../../util/grid';\nimport { omit } from '../../util/helper';\nimport { Controller } from './base';\n// update 组件的时候，忽略的数据更新\nvar OMIT_CFG = ['container'];\n// 坐标轴默认动画配置\nvar AXIS_DEFAULT_ANIMATE_CFG = __assign(__assign({}, DEFAULT_ANIMATE_CFG), {\n  appear: null\n});\n/**\n * @ignore\n * G2 Axis controller, will:\n *  - create component\n *    - axis\n *    - grid\n *  - life circle\n */\nvar Axis = /** @class */function (_super) {\n  __extends(Axis, _super);\n  function Axis(view) {\n    var _this = _super.call(this, view) || this;\n    /** 使用 object 存储组件 */\n    _this.cache = new Map();\n    // 先创建 gridContainer，将 grid 放到 axis 底层\n    _this.gridContainer = _this.view.getLayer(LAYER.BG).addGroup();\n    _this.gridForeContainer = _this.view.getLayer(LAYER.FORE).addGroup();\n    _this.axisContainer = _this.view.getLayer(LAYER.BG).addGroup();\n    _this.axisForeContainer = _this.view.getLayer(LAYER.FORE).addGroup();\n    return _this;\n  }\n  Object.defineProperty(Axis.prototype, \"name\", {\n    get: function () {\n      return 'axis';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Axis.prototype.init = function () {};\n  Axis.prototype.render = function () {\n    this.update();\n  };\n  /**\n   * 更新组件布局，位置大小\n   */\n  Axis.prototype.layout = function () {\n    var _this = this;\n    var coordinate = this.view.getCoordinate();\n    each(this.getComponents(), function (co) {\n      var component = co.component,\n        direction = co.direction,\n        type = co.type,\n        extra = co.extra;\n      var dim = extra.dim,\n        scale = extra.scale,\n        alignTick = extra.alignTick;\n      var updated;\n      if (type === COMPONENT_TYPE.AXIS) {\n        if (coordinate.isPolar) {\n          if (dim === 'x') {\n            updated = coordinate.isTransposed ? getAxisRegion(coordinate, direction) : getCircleAxisCenterRadius(coordinate);\n          } else if (dim === 'y') {\n            updated = coordinate.isTransposed ? getCircleAxisCenterRadius(coordinate) : getAxisRegion(coordinate, direction);\n          }\n        } else {\n          updated = getAxisRegion(coordinate, direction);\n        }\n      } else if (type === COMPONENT_TYPE.GRID) {\n        if (coordinate.isPolar) {\n          var items = void 0;\n          if (coordinate.isTransposed) {\n            items = dim === 'x' ? getCircleGridItems(coordinate, _this.view.getYScales()[0], scale, alignTick, dim) : getLineGridItems(coordinate, scale, dim, alignTick);\n          } else {\n            items = dim === 'x' ? getLineGridItems(coordinate, scale, dim, alignTick) : getCircleGridItems(coordinate, _this.view.getXScale(), scale, alignTick, dim);\n          }\n          updated = {\n            items: items,\n            // coordinate 更新之后，center 也变化了\n            center: _this.view.getCoordinate().getCenter()\n          };\n        } else {\n          updated = {\n            items: getLineGridItems(coordinate, scale, dim, alignTick)\n          };\n        }\n      }\n      component.update(updated);\n    });\n  };\n  /**\n   * 更新 axis 组件\n   */\n  Axis.prototype.update = function () {\n    this.option = this.view.getOptions().axes;\n    var updatedCache = new Map();\n    this.updateXAxes(updatedCache);\n    this.updateYAxes(updatedCache);\n    // 处理完成之后，销毁删除的\n    // 不在处理中的\n    var newCache = new Map();\n    this.cache.forEach(function (co, key) {\n      if (updatedCache.has(key)) {\n        newCache.set(key, co);\n      } else {\n        // 不存在，则是所有需要被销毁的组件\n        co.component.destroy();\n      }\n    });\n    // 更新缓存\n    this.cache = newCache;\n  };\n  Axis.prototype.clear = function () {\n    _super.prototype.clear.call(this);\n    this.cache.clear();\n    this.gridContainer.clear();\n    this.gridForeContainer.clear();\n    this.axisContainer.clear();\n    this.axisForeContainer.clear();\n  };\n  Axis.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n    this.gridContainer.remove(true);\n    this.gridForeContainer.remove(true);\n    this.axisContainer.remove(true);\n    this.axisForeContainer.remove(true);\n  };\n  /**\n   * @override\n   */\n  Axis.prototype.getComponents = function () {\n    var co = [];\n    this.cache.forEach(function (value) {\n      co.push(value);\n    });\n    return co;\n  };\n  /**\n   * 更新 x axis\n   * @param updatedCache\n   */\n  Axis.prototype.updateXAxes = function (updatedCache) {\n    // x axis\n    var scale = this.view.getXScale();\n    if (!scale || scale.isIdentity) {\n      return;\n    }\n    var xAxisOption = getAxisOption(this.option, scale.field);\n    if (xAxisOption === false) {\n      return;\n    }\n    var direction = getAxisDirection(xAxisOption, DIRECTION.BOTTOM);\n    var layer = LAYER.BG;\n    var dim = 'x';\n    var coordinate = this.view.getCoordinate();\n    var axisId = this.getId('axis', scale.field);\n    var gridId = this.getId('grid', scale.field);\n    if (coordinate.isRect) {\n      // 1. do axis update\n      var axis = this.cache.get(axisId);\n      // 存在则更新\n      if (axis) {\n        var cfg = this.getLineAxisCfg(scale, xAxisOption, direction);\n        omit(cfg, OMIT_CFG);\n        axis.component.update(cfg);\n        updatedCache.set(axisId, axis);\n      } else {\n        // 不存在，则创建\n        axis = this.createLineAxis(scale, xAxisOption, layer, direction, dim);\n        this.cache.set(axisId, axis);\n        updatedCache.set(axisId, axis);\n      }\n      // 2. do grid update\n      var grid = this.cache.get(gridId);\n      // 存在则更新\n      if (grid) {\n        var cfg = this.getLineGridCfg(scale, xAxisOption, direction, dim);\n        omit(cfg, OMIT_CFG);\n        grid.component.update(cfg);\n        updatedCache.set(gridId, grid);\n      } else {\n        // 不存在则创建\n        grid = this.createLineGrid(scale, xAxisOption, layer, direction, dim);\n        if (grid) {\n          this.cache.set(gridId, grid);\n          updatedCache.set(gridId, grid);\n        }\n      }\n    } else if (coordinate.isPolar) {\n      // 1. do axis update\n      var axis = this.cache.get(axisId);\n      // 存在则更新\n      if (axis) {\n        var cfg = coordinate.isTransposed ? this.getLineAxisCfg(scale, xAxisOption, DIRECTION.RADIUS) : this.getCircleAxisCfg(scale, xAxisOption, direction);\n        omit(cfg, OMIT_CFG);\n        axis.component.update(cfg);\n        updatedCache.set(axisId, axis);\n      } else {\n        // 不存在，则创建\n        if (coordinate.isTransposed) {\n          if (isUndefined(xAxisOption)) {\n            // 默认不渲染转置极坐标下的坐标轴\n            return;\n          } else {\n            // 如果用户打开了隐藏的坐标轴 chart.axis(true)/chart.axis('x', true)\n            // 那么对于转置了的极坐标，半径轴显示的是 x 轴对应的数据\n            axis = this.createLineAxis(scale, xAxisOption, layer, DIRECTION.RADIUS, dim);\n          }\n        } else {\n          axis = this.createCircleAxis(scale, xAxisOption, layer, direction, dim);\n        }\n        this.cache.set(axisId, axis);\n        updatedCache.set(axisId, axis);\n      }\n      // 2. do grid update\n      var grid = this.cache.get(gridId);\n      // 存在则更新\n      if (grid) {\n        var cfg = coordinate.isTransposed ? this.getCircleGridCfg(scale, xAxisOption, DIRECTION.RADIUS, dim) : this.getLineGridCfg(scale, xAxisOption, DIRECTION.CIRCLE, dim);\n        omit(cfg, OMIT_CFG);\n        grid.component.update(cfg);\n        updatedCache.set(gridId, grid);\n      } else {\n        // 不存在则创建\n        if (coordinate.isTransposed) {\n          if (isUndefined(xAxisOption)) {\n            return;\n          } else {\n            grid = this.createCircleGrid(scale, xAxisOption, layer, DIRECTION.RADIUS, dim);\n          }\n        } else {\n          // grid，极坐标下的 x 轴网格线沿着半径方向绘制\n          grid = this.createLineGrid(scale, xAxisOption, layer, DIRECTION.CIRCLE, dim);\n        }\n        if (grid) {\n          this.cache.set(gridId, grid);\n          updatedCache.set(gridId, grid);\n        }\n      }\n    } else {\n      // helix and other, do not draw axis\n    }\n  };\n  Axis.prototype.updateYAxes = function (updatedCache) {\n    var _this = this;\n    // y axes\n    var yScales = this.view.getYScales();\n    each(yScales, function (scale, idx) {\n      // @ts-ignore\n      if (!scale || scale.isIdentity) {\n        return;\n      }\n      var field = scale.field;\n      var yAxisOption = getAxisOption(_this.option, field);\n      if (yAxisOption !== false) {\n        var layer = LAYER.BG;\n        var dim = 'y';\n        var axisId = _this.getId('axis', field);\n        var gridId = _this.getId('grid', field);\n        var coordinate = _this.view.getCoordinate();\n        if (coordinate.isRect) {\n          var direction = getAxisDirection(yAxisOption, idx === 0 ? DIRECTION.LEFT : DIRECTION.RIGHT);\n          // 1. do axis update\n          var axis = _this.cache.get(axisId);\n          // 存在则更新\n          if (axis) {\n            var cfg = _this.getLineAxisCfg(scale, yAxisOption, direction);\n            omit(cfg, OMIT_CFG);\n            axis.component.update(cfg);\n            updatedCache.set(axisId, axis);\n          } else {\n            // 不存在，则创建\n            axis = _this.createLineAxis(scale, yAxisOption, layer, direction, dim);\n            _this.cache.set(axisId, axis);\n            updatedCache.set(axisId, axis);\n          }\n          // 2. do grid update\n          var grid = _this.cache.get(gridId);\n          // 存在则更新\n          if (grid) {\n            var cfg = _this.getLineGridCfg(scale, yAxisOption, direction, dim);\n            omit(cfg, OMIT_CFG);\n            grid.component.update(cfg);\n            updatedCache.set(gridId, grid);\n          } else {\n            // 不存在则创建\n            grid = _this.createLineGrid(scale, yAxisOption, layer, direction, dim);\n            if (grid) {\n              _this.cache.set(gridId, grid);\n              updatedCache.set(gridId, grid);\n            }\n          }\n        } else if (coordinate.isPolar) {\n          // 1. do axis update\n          var axis = _this.cache.get(axisId);\n          // 存在则更新\n          if (axis) {\n            var cfg = coordinate.isTransposed ? _this.getCircleAxisCfg(scale, yAxisOption, DIRECTION.CIRCLE) : _this.getLineAxisCfg(scale, yAxisOption, DIRECTION.RADIUS);\n            // @ts-ignore\n            omit(cfg, OMIT_CFG);\n            axis.component.update(cfg);\n            updatedCache.set(axisId, axis);\n          } else {\n            // 不存在，则创建\n            if (coordinate.isTransposed) {\n              if (isUndefined(yAxisOption)) {\n                return;\n              } else {\n                axis = _this.createCircleAxis(scale, yAxisOption, layer, DIRECTION.CIRCLE, dim);\n              }\n            } else {\n              axis = _this.createLineAxis(scale, yAxisOption, layer, DIRECTION.RADIUS, dim);\n            }\n            _this.cache.set(axisId, axis);\n            updatedCache.set(axisId, axis);\n          }\n          // 2. do grid update\n          var grid = _this.cache.get(gridId);\n          // 存在则更新\n          if (grid) {\n            var cfg = coordinate.isTransposed ? _this.getLineGridCfg(scale, yAxisOption, DIRECTION.CIRCLE, dim) : _this.getCircleGridCfg(scale, yAxisOption, DIRECTION.RADIUS, dim);\n            omit(cfg, OMIT_CFG);\n            grid.component.update(cfg);\n            updatedCache.set(gridId, grid);\n          } else {\n            // 不存在则创建\n            if (coordinate.isTransposed) {\n              if (isUndefined(yAxisOption)) {\n                return;\n              } else {\n                grid = _this.createLineGrid(scale, yAxisOption, layer, DIRECTION.CIRCLE, dim);\n              }\n            } else {\n              grid = _this.createCircleGrid(scale, yAxisOption, layer, DIRECTION.RADIUS, dim);\n            }\n            if (grid) {\n              _this.cache.set(gridId, grid);\n              updatedCache.set(gridId, grid);\n            }\n          }\n        } else {\n          // helix and other, do not draw axis\n        }\n      }\n    });\n  };\n  /**\n   * 创建 line axis\n   * @param scale\n   * @param option\n   * @param layer\n   * @param direction\n   * @param dim\n   */\n  Axis.prototype.createLineAxis = function (scale, option, layer, direction, dim) {\n    // axis\n    var axis = {\n      component: new LineAxis(this.getLineAxisCfg(scale, option, direction)),\n      layer: layer,\n      direction: direction === DIRECTION.RADIUS ? DIRECTION.NONE : direction,\n      type: COMPONENT_TYPE.AXIS,\n      extra: {\n        dim: dim,\n        scale: scale\n      }\n    };\n    axis.component.set('field', scale.field);\n    axis.component.init();\n    return axis;\n  };\n  Axis.prototype.createLineGrid = function (scale, option, layer, direction, dim) {\n    var cfg = this.getLineGridCfg(scale, option, direction, dim);\n    if (cfg) {\n      var grid = {\n        component: new LineGrid(cfg),\n        layer: layer,\n        direction: DIRECTION.NONE,\n        type: COMPONENT_TYPE.GRID,\n        extra: {\n          dim: dim,\n          scale: scale,\n          alignTick: get(cfg, 'alignTick', true)\n        }\n      };\n      grid.component.init();\n      return grid;\n    }\n  };\n  Axis.prototype.createCircleAxis = function (scale, option, layer, direction, dim) {\n    var axis = {\n      component: new CircleAxis(this.getCircleAxisCfg(scale, option, direction)),\n      layer: layer,\n      direction: direction,\n      type: COMPONENT_TYPE.AXIS,\n      extra: {\n        dim: dim,\n        scale: scale\n      }\n    };\n    axis.component.set('field', scale.field);\n    axis.component.init();\n    return axis;\n  };\n  Axis.prototype.createCircleGrid = function (scale, option, layer, direction, dim) {\n    var cfg = this.getCircleGridCfg(scale, option, direction, dim);\n    if (cfg) {\n      var grid = {\n        component: new CircleGrid(cfg),\n        layer: layer,\n        direction: DIRECTION.NONE,\n        type: COMPONENT_TYPE.GRID,\n        extra: {\n          dim: dim,\n          scale: scale,\n          alignTick: get(cfg, 'alignTick', true)\n        }\n      };\n      grid.component.init();\n      return grid;\n    }\n  };\n  /**\n   * generate line axis cfg\n   * @param scale\n   * @param axisOption\n   * @param direction\n   * @return line axis cfg\n   */\n  Axis.prototype.getLineAxisCfg = function (scale, axisOption, direction) {\n    var container = get(axisOption, ['top']) ? this.axisForeContainer : this.axisContainer;\n    var coordinate = this.view.getCoordinate();\n    var region = getAxisRegion(coordinate, direction);\n    var titleText = getAxisTitleText(scale, axisOption);\n    var axisThemeCfg = getAxisThemeCfg(this.view.getTheme(), direction);\n    // the cfg order should be ensure\n    var optionWithTitle = get(axisOption, ['title']) ? deepMix({\n      title: {\n        style: {\n          text: titleText\n        }\n      }\n    }, {\n      title: getAxisTitleOptions(this.view.getTheme(), direction, axisOption.title)\n    }, axisOption) : axisOption;\n    var cfg = deepMix(__assign(__assign({\n      container: container\n    }, region), {\n      ticks: scale.getTicks().map(function (tick) {\n        return {\n          id: \"\".concat(tick.tickValue),\n          name: tick.text,\n          value: tick.value\n        };\n      }),\n      verticalFactor: coordinate.isPolar ? getAxisFactorByRegion(region, coordinate.getCenter()) * -1 : getAxisFactorByRegion(region, coordinate.getCenter()),\n      theme: axisThemeCfg\n    }), axisThemeCfg, optionWithTitle);\n    var _a = this.getAnimateCfg(cfg),\n      animate = _a.animate,\n      animateOption = _a.animateOption;\n    cfg.animateOption = animateOption;\n    cfg.animate = animate;\n    // 计算 verticalLimitLength\n    var isAxisVertical = isVertical(region);\n    // TODO: 1 / 3 等默认值需要有一个全局的配置的地方\n    var verticalLimitLength = get(cfg, 'verticalLimitLength', isAxisVertical ? 1 / 3 : 1 / 2);\n    if (verticalLimitLength <= 1) {\n      // 配置的相对值，相对于画布\n      var canvasWidth = this.view.getCanvas().get('width');\n      var canvasHeight = this.view.getCanvas().get('height');\n      cfg.verticalLimitLength = verticalLimitLength * (isAxisVertical ? canvasWidth : canvasHeight);\n    }\n    return cfg;\n  };\n  /**\n   * generate line grid cfg\n   * @param scale\n   * @param axisOption\n   * @param direction\n   * @param dim\n   * @return line grid cfg\n   */\n  Axis.prototype.getLineGridCfg = function (scale, axisOption, direction, dim) {\n    if (!showGrid(getAxisThemeCfg(this.view.getTheme(), direction), axisOption)) {\n      return undefined;\n    }\n    var gridThemeCfg = getGridThemeCfg(this.view.getTheme(), direction);\n    // the cfg order should be ensure\n    // grid 动画以 axis 为准\n    var gridCfg = deepMix({\n      container: get(axisOption, ['top']) ? this.gridForeContainer : this.gridContainer\n    }, gridThemeCfg, get(axisOption, 'grid'), this.getAnimateCfg(axisOption));\n    gridCfg.items = getLineGridItems(this.view.getCoordinate(), scale, dim, get(gridCfg, 'alignTick', true));\n    return gridCfg;\n  };\n  /**\n   * generate circle axis cfg\n   * @param scale\n   * @param axisOption\n   * @param direction\n   * @return circle axis cfg\n   */\n  Axis.prototype.getCircleAxisCfg = function (scale, axisOption, direction) {\n    var container = get(axisOption, ['top']) ? this.axisForeContainer : this.axisContainer;\n    var coordinate = this.view.getCoordinate();\n    var ticks = scale.getTicks().map(function (tick) {\n      return {\n        id: \"\".concat(tick.tickValue),\n        name: tick.text,\n        value: tick.value\n      };\n    });\n    if (!scale.isCategory && Math.abs(coordinate.endAngle - coordinate.startAngle) === Math.PI * 2) {\n      // x 轴对应的值如果是非 cat 类型，在整圆的情况下坐标轴第一个和最后一个文本会重叠，默认只展示第一个文本\n      ticks.pop();\n    }\n    var titleText = getAxisTitleText(scale, axisOption);\n    var axisThemeCfg = getAxisThemeCfg(this.view.getTheme(), DIRECTION.CIRCLE);\n    // the cfg order should be ensure\n    var optionWithTitle = get(axisOption, ['title']) ? deepMix({\n      title: {\n        style: {\n          text: titleText\n        }\n      }\n    }, {\n      title: getAxisTitleOptions(this.view.getTheme(), direction, axisOption.title)\n    }, axisOption) : axisOption;\n    var cfg = deepMix(__assign(__assign({\n      container: container\n    }, getCircleAxisCenterRadius(this.view.getCoordinate())), {\n      ticks: ticks,\n      verticalFactor: 1,\n      theme: axisThemeCfg\n    }), axisThemeCfg, optionWithTitle);\n    var _a = this.getAnimateCfg(cfg),\n      animate = _a.animate,\n      animateOption = _a.animateOption;\n    cfg.animate = animate;\n    cfg.animateOption = animateOption;\n    return cfg;\n  };\n  /**\n   * generate circle grid cfg\n   * @param scale\n   * @param axisOption\n   * @param direction\n   * @return circle grid cfg\n   */\n  Axis.prototype.getCircleGridCfg = function (scale, axisOption, direction, dim) {\n    if (!showGrid(getAxisThemeCfg(this.view.getTheme(), direction), axisOption)) {\n      return undefined;\n    }\n    // the cfg order should be ensure\n    // grid 动画以 axis 为准\n    var gridThemeCfg = getGridThemeCfg(this.view.getTheme(), DIRECTION.RADIUS);\n    var gridCfg = deepMix({\n      container: get(axisOption, ['top']) ? this.gridForeContainer : this.gridContainer,\n      center: this.view.getCoordinate().getCenter()\n    }, gridThemeCfg, get(axisOption, 'grid'), this.getAnimateCfg(axisOption));\n    var alignTick = get(gridCfg, 'alignTick', true);\n    var verticalScale = dim === 'x' ? this.view.getYScales()[0] : this.view.getXScale();\n    gridCfg.items = getCircleGridItems(this.view.getCoordinate(), verticalScale, scale, alignTick, dim);\n    // the cfg order should be ensure\n    // grid 动画以 axis 为准\n    return gridCfg;\n  };\n  Axis.prototype.getId = function (name, key) {\n    var coordinate = this.view.getCoordinate();\n    // 坐标系类型也作为组件的 key\n    return \"\".concat(name, \"-\").concat(key, \"-\").concat(coordinate.type);\n  };\n  Axis.prototype.getAnimateCfg = function (cfg) {\n    return {\n      animate: this.view.getOptions().animate && get(cfg, 'animate'),\n      animateOption: cfg && cfg.animateOption ? deepMix({}, AXIS_DEFAULT_ANIMATE_CFG, cfg.animateOption) : AXIS_DEFAULT_ANIMATE_CFG\n    };\n  };\n  return Axis;\n}(Controller);\nexport default Axis;","map":{"version":3,"mappings":";AAAA,SAASA,OAAO,EAAEC,IAAI,EAAEC,GAAG,EAAEC,WAAW,QAAQ,YAAY;AAC5D,SAASC,SAAS,EAAEC,cAAc,EAAEC,KAAK,QAAQ,gBAAgB;AACjE,SAASC,UAAU,EAAEC,UAAU,EAAUC,QAAQ,EAAEC,QAAQ,QAAe,kBAAkB;AAG5F,SAASC,mBAAmB,QAAQ,gBAAgB;AAEpD,SACEC,gBAAgB,EAChBC,qBAAqB,EACrBC,aAAa,EACbC,eAAe,EACfC,mBAAmB,EACnBC,gBAAgB,EAChBC,yBAAyB,EACzBC,UAAU,QACL,iBAAiB;AACxB,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,kBAAkB,EAAEC,eAAe,EAAEC,gBAAgB,EAAEC,QAAQ,QAAQ,iBAAiB;AACjG,SAASC,IAAI,QAAQ,mBAAmB;AAExC,SAASC,UAAU,QAAQ,QAAQ;AAMnC;AACA,IAAMC,QAAQ,GAAG,CAAC,WAAW,CAAC;AAE9B;AACA,IAAMC,wBAAwB,yBACzBjB,mBAAmB;EACtBkB,MAAM,EAAE;AAAI,EACb;AAED;;;;;;;;AAQA;EAAkCC;EAUhC,cAAYC,IAAU;IAAtB,YACEC,kBAAMD,IAAI,CAAC;IAJb;IACQE,WAAK,GAAU,IAAIC,GAAG,EAA2B;IAKvD;IACAD,KAAI,CAACE,aAAa,GAAGF,KAAI,CAACF,IAAI,CAACK,QAAQ,CAAC9B,KAAK,CAAC+B,EAAE,CAAC,CAACC,QAAQ,EAAE;IAC5DL,KAAI,CAACM,iBAAiB,GAAGN,KAAI,CAACF,IAAI,CAACK,QAAQ,CAAC9B,KAAK,CAACkC,IAAI,CAAC,CAACF,QAAQ,EAAE;IAClEL,KAAI,CAACQ,aAAa,GAAGR,KAAI,CAACF,IAAI,CAACK,QAAQ,CAAC9B,KAAK,CAAC+B,EAAE,CAAC,CAACC,QAAQ,EAAE;IAC5DL,KAAI,CAACS,iBAAiB,GAAGT,KAAI,CAACF,IAAI,CAACK,QAAQ,CAAC9B,KAAK,CAACkC,IAAI,CAAC,CAACF,QAAQ,EAAE;;EACpE;EAEAK,sBAAWC,sBAAI;SAAf;MACE,OAAO,MAAM;IACf,CAAC;;;;EAEMA,mBAAI,GAAX,aAAe,CAAC;EAETA,qBAAM,GAAb;IACE,IAAI,CAACC,MAAM,EAAE;EACf,CAAC;EAED;;;EAGOD,qBAAM,GAAb;IAAA;IACE,IAAME,UAAU,GAAG,IAAI,CAACf,IAAI,CAACgB,aAAa,EAAE;IAE5C9C,IAAI,CAAC,IAAI,CAAC+C,aAAa,EAAE,EAAE,UAACC,EAAmB;MACrC,aAAS,GAA6BA,EAAE,UAA/B;QAAEC,SAAS,GAAkBD,EAAE,UAApB;QAAEE,IAAI,GAAYF,EAAE,KAAd;QAAEG,KAAK,GAAKH,EAAE,MAAP;MACjC,OAAG,GAAuBG,KAAK,IAA5B;QAAEC,KAAK,GAAgBD,KAAK,MAArB;QAAEE,SAAS,GAAKF,KAAK,UAAV;MAE7B,IAAIG,OAAO;MAEX,IAAIJ,IAAI,KAAK9C,cAAc,CAACmD,IAAI,EAAE;QAChC,IAAIV,UAAU,CAACW,OAAO,EAAE;UACtB,IAAIC,GAAG,KAAK,GAAG,EAAE;YACfH,OAAO,GAAGT,UAAU,CAACa,YAAY,GAC7B7C,aAAa,CAACgC,UAAU,EAAEI,SAAS,CAAC,GACpChC,yBAAyB,CAAC4B,UAAU,CAAC;WAC1C,MAAM,IAAIY,GAAG,KAAK,GAAG,EAAE;YACtBH,OAAO,GAAGT,UAAU,CAACa,YAAY,GAC7BzC,yBAAyB,CAAC4B,UAAU,CAAC,GACrChC,aAAa,CAACgC,UAAU,EAAEI,SAAS,CAAC;;SAE3C,MAAM;UACLK,OAAO,GAAGzC,aAAa,CAACgC,UAAU,EAAEI,SAAS,CAAC;;OAEjD,MAAM,IAAIC,IAAI,KAAK9C,cAAc,CAACuD,IAAI,EAAE;QACvC,IAAId,UAAU,CAACW,OAAO,EAAE;UACtB,IAAII,KAAK;UACT,IAAIf,UAAU,CAACa,YAAY,EAAE;YAC3BE,KAAK,GACHH,GAAG,KAAK,GAAG,GACPrC,kBAAkB,CAACyB,UAAU,EAAEb,KAAI,CAACF,IAAI,CAAC+B,UAAU,EAAE,CAAC,CAAC,CAAC,EAAET,KAAK,EAAEC,SAAS,EAAEI,GAAG,CAAC,GAChFnC,gBAAgB,CAACuB,UAAU,EAAEO,KAAK,EAAEK,GAAG,EAAEJ,SAAS,CAAC;WAC1D,MAAM;YACLO,KAAK,GACHH,GAAG,KAAK,GAAG,GACPnC,gBAAgB,CAACuB,UAAU,EAAEO,KAAK,EAAEK,GAAG,EAAEJ,SAAS,CAAC,GACnDjC,kBAAkB,CAACyB,UAAU,EAAEb,KAAI,CAACF,IAAI,CAACgC,SAAS,EAAE,EAAEV,KAAK,EAAEC,SAAS,EAAEI,GAAG,CAAC;;UAEpFH,OAAO,GAAG;YACRM,KAAK;YACL;YACAG,MAAM,EAAE/B,KAAI,CAACF,IAAI,CAACgB,aAAa,EAAE,CAACkB,SAAS;WAC5C;SACF,MAAM;UACLV,OAAO,GAAG;YAAEM,KAAK,EAAEtC,gBAAgB,CAACuB,UAAU,EAAEO,KAAK,EAAEK,GAAG,EAAEJ,SAAS;UAAC,CAAE;;;MAG5EY,SAAS,CAACrB,MAAM,CAACU,OAAO,CAAC;IAC3B,CAAC,CAAC;EACJ,CAAC;EAED;;;EAGOX,qBAAM,GAAb;IACE,IAAI,CAACuB,MAAM,GAAG,IAAI,CAACpC,IAAI,CAACqC,UAAU,EAAE,CAACC,IAAI;IAEzC,IAAMC,YAAY,GAAG,IAAIpC,GAAG,EAA2B;IAEvD,IAAI,CAACqC,WAAW,CAACD,YAAY,CAAC;IAC9B,IAAI,CAACE,WAAW,CAACF,YAAY,CAAC;IAE9B;IACA;IACA,IAAMG,QAAQ,GAAG,IAAIvC,GAAG,EAA2B;IAEnD,IAAI,CAACwC,KAAK,CAACC,OAAO,CAAC,UAAC1B,EAAmB,EAAE2B,GAAW;MAClD,IAAIN,YAAY,CAACO,GAAG,CAACD,GAAG,CAAC,EAAE;QACzBH,QAAQ,CAACK,GAAG,CAACF,GAAG,EAAE3B,EAAE,CAAC;OACtB,MAAM;QACL;QACAA,EAAE,CAACiB,SAAS,CAACa,OAAO,EAAE;;IAE1B,CAAC,CAAC;IAEF;IACA,IAAI,CAACL,KAAK,GAAGD,QAAQ;EACvB,CAAC;EAEM7B,oBAAK,GAAZ;IACEZ,iBAAMgD,KAAK,WAAE;IAEb,IAAI,CAACN,KAAK,CAACM,KAAK,EAAE;IAClB,IAAI,CAAC7C,aAAa,CAAC6C,KAAK,EAAE;IAC1B,IAAI,CAACzC,iBAAiB,CAACyC,KAAK,EAAE;IAC9B,IAAI,CAACvC,aAAa,CAACuC,KAAK,EAAE;IAC1B,IAAI,CAACtC,iBAAiB,CAACsC,KAAK,EAAE;EAChC,CAAC;EAEMpC,sBAAO,GAAd;IACEZ,iBAAM+C,OAAO,WAAE;IAEf,IAAI,CAAC5C,aAAa,CAAC8C,MAAM,CAAC,IAAI,CAAC;IAC/B,IAAI,CAAC1C,iBAAiB,CAAC0C,MAAM,CAAC,IAAI,CAAC;IACnC,IAAI,CAACxC,aAAa,CAACwC,MAAM,CAAC,IAAI,CAAC;IAC/B,IAAI,CAACvC,iBAAiB,CAACuC,MAAM,CAAC,IAAI,CAAC;EACrC,CAAC;EAED;;;EAGOrC,4BAAa,GAApB;IACE,IAAMK,EAAE,GAAG,EAAE;IAEb,IAAI,CAACyB,KAAK,CAACC,OAAO,CAAC,UAACO,KAAsB;MACxCjC,EAAE,CAACkC,IAAI,CAACD,KAAK,CAAC;IAChB,CAAC,CAAC;IAEF,OAAOjC,EAAE;EACX,CAAC;EAED;;;;EAIQL,0BAAW,GAAnB,UAAoB0B,YAAmB;IACrC;IACA,IAAMjB,KAAK,GAAG,IAAI,CAACtB,IAAI,CAACgC,SAAS,EAAE;IAEnC,IAAI,CAACV,KAAK,IAAIA,KAAK,CAAC+B,UAAU,EAAE;MAC9B;;IAGF,IAAMC,WAAW,GAAGjE,aAAa,CAAC,IAAI,CAAC+C,MAAM,EAAEd,KAAK,CAACiC,KAAK,CAAC;IAC3D,IAAID,WAAW,KAAK,KAAK,EAAE;MACzB;;IAGF,IAAMnC,SAAS,GAAGtC,gBAAgB,CAACyE,WAAW,EAAEjF,SAAS,CAACmF,MAAM,CAAC;IACjE,IAAMC,KAAK,GAAGlF,KAAK,CAAC+B,EAAE;IACtB,IAAMqB,GAAG,GAAG,GAAG;IAEf,IAAMZ,UAAU,GAAG,IAAI,CAACf,IAAI,CAACgB,aAAa,EAAE;IAE5C,IAAM0C,MAAM,GAAG,IAAI,CAACC,KAAK,CAAC,MAAM,EAAErC,KAAK,CAACiC,KAAK,CAAC;IAC9C,IAAMK,MAAM,GAAG,IAAI,CAACD,KAAK,CAAC,MAAM,EAAErC,KAAK,CAACiC,KAAK,CAAC;IAE9C,IAAIxC,UAAU,CAAC8C,MAAM,EAAE;MACrB;MACA,IAAIC,IAAI,GAAG,IAAI,CAACnB,KAAK,CAACxE,GAAG,CAACuF,MAAM,CAAC;MACjC;MACA,IAAII,IAAI,EAAE;QACR,IAAMC,GAAG,GAAG,IAAI,CAACC,cAAc,CAAC1C,KAAK,EAAEgC,WAAW,EAAEnC,SAAS,CAAC;QAC9DzB,IAAI,CAACqE,GAAG,EAAEnE,QAAQ,CAAC;QACnBkE,IAAI,CAAC3B,SAAS,CAACrB,MAAM,CAACiD,GAAG,CAAC;QAC1BxB,YAAY,CAACQ,GAAG,CAACW,MAAM,EAAEI,IAAI,CAAC;OAC/B,MAAM;QACL;QACAA,IAAI,GAAG,IAAI,CAACG,cAAc,CAAC3C,KAAK,EAAEgC,WAAW,EAAEG,KAAK,EAAEtC,SAAS,EAAEQ,GAAG,CAAC;QACrE,IAAI,CAACgB,KAAK,CAACI,GAAG,CAACW,MAAM,EAAEI,IAAI,CAAC;QAC5BvB,YAAY,CAACQ,GAAG,CAACW,MAAM,EAAEI,IAAI,CAAC;;MAGhC;MACA,IAAII,IAAI,GAAG,IAAI,CAACvB,KAAK,CAACxE,GAAG,CAACyF,MAAM,CAAC;MACjC;MACA,IAAIM,IAAI,EAAE;QACR,IAAMH,GAAG,GAAG,IAAI,CAACI,cAAc,CAAC7C,KAAK,EAAEgC,WAAW,EAAEnC,SAAS,EAAEQ,GAAG,CAAC;QACnEjC,IAAI,CAACqE,GAAG,EAAEnE,QAAQ,CAAC;QACnBsE,IAAI,CAAC/B,SAAS,CAACrB,MAAM,CAACiD,GAAG,CAAC;QAC1BxB,YAAY,CAACQ,GAAG,CAACa,MAAM,EAAEM,IAAI,CAAC;OAC/B,MAAM;QACL;QACAA,IAAI,GAAG,IAAI,CAACE,cAAc,CAAC9C,KAAK,EAAEgC,WAAW,EAAEG,KAAK,EAAEtC,SAAS,EAAEQ,GAAG,CAAC;QACrE,IAAIuC,IAAI,EAAE;UACR,IAAI,CAACvB,KAAK,CAACI,GAAG,CAACa,MAAM,EAAEM,IAAI,CAAC;UAC5B3B,YAAY,CAACQ,GAAG,CAACa,MAAM,EAAEM,IAAI,CAAC;;;KAGnC,MAAM,IAAInD,UAAU,CAACW,OAAO,EAAE;MAC7B;MACA,IAAIoC,IAAI,GAAG,IAAI,CAACnB,KAAK,CAACxE,GAAG,CAACuF,MAAM,CAAC;MACjC;MACA,IAAII,IAAI,EAAE;QACR,IAAMC,GAAG,GAAGhD,UAAU,CAACa,YAAY,GAC/B,IAAI,CAACoC,cAAc,CAAC1C,KAAK,EAAEgC,WAAW,EAAEjF,SAAS,CAACgG,MAAM,CAAC,GACzD,IAAI,CAACC,gBAAgB,CAAChD,KAAK,EAAEgC,WAAW,EAAEnC,SAAS,CAAC;QAExDzB,IAAI,CAACqE,GAAG,EAAEnE,QAAQ,CAAC;QACnBkE,IAAI,CAAC3B,SAAS,CAACrB,MAAM,CAACiD,GAAG,CAAC;QAC1BxB,YAAY,CAACQ,GAAG,CAACW,MAAM,EAAEI,IAAI,CAAC;OAC/B,MAAM;QACL;QACA,IAAI/C,UAAU,CAACa,YAAY,EAAE;UAC3B,IAAIxD,WAAW,CAACkF,WAAW,CAAC,EAAE;YAC5B;YACA;WACD,MAAM;YACL;YACA;YACAQ,IAAI,GAAG,IAAI,CAACG,cAAc,CAAC3C,KAAK,EAAEgC,WAAW,EAAEG,KAAK,EAAEpF,SAAS,CAACgG,MAAM,EAAE1C,GAAG,CAAC;;SAE/E,MAAM;UACLmC,IAAI,GAAG,IAAI,CAACS,gBAAgB,CAACjD,KAAK,EAAEgC,WAAW,EAAEG,KAAK,EAAEtC,SAAS,EAAEQ,GAAG,CAAC;;QAEzE,IAAI,CAACgB,KAAK,CAACI,GAAG,CAACW,MAAM,EAAEI,IAAI,CAAC;QAC5BvB,YAAY,CAACQ,GAAG,CAACW,MAAM,EAAEI,IAAI,CAAC;;MAGhC;MACA,IAAII,IAAI,GAAG,IAAI,CAACvB,KAAK,CAACxE,GAAG,CAACyF,MAAM,CAAC;MACjC;MACA,IAAIM,IAAI,EAAE;QACR,IAAMH,GAAG,GAAGhD,UAAU,CAACa,YAAY,GAC/B,IAAI,CAAC4C,gBAAgB,CAAClD,KAAK,EAAEgC,WAAW,EAAEjF,SAAS,CAACgG,MAAM,EAAE1C,GAAG,CAAC,GAChE,IAAI,CAACwC,cAAc,CAAC7C,KAAK,EAAEgC,WAAW,EAAEjF,SAAS,CAACoG,MAAM,EAAE9C,GAAG,CAAC;QAClEjC,IAAI,CAACqE,GAAG,EAAEnE,QAAQ,CAAC;QACnBsE,IAAI,CAAC/B,SAAS,CAACrB,MAAM,CAACiD,GAAG,CAAC;QAC1BxB,YAAY,CAACQ,GAAG,CAACa,MAAM,EAAEM,IAAI,CAAC;OAC/B,MAAM;QACL;QACA,IAAInD,UAAU,CAACa,YAAY,EAAE;UAC3B,IAAIxD,WAAW,CAACkF,WAAW,CAAC,EAAE;YAC5B;WACD,MAAM;YACLY,IAAI,GAAG,IAAI,CAACQ,gBAAgB,CAACpD,KAAK,EAAEgC,WAAW,EAAEG,KAAK,EAAEpF,SAAS,CAACgG,MAAM,EAAE1C,GAAG,CAAC;;SAEjF,MAAM;UACL;UACAuC,IAAI,GAAG,IAAI,CAACE,cAAc,CAAC9C,KAAK,EAAEgC,WAAW,EAAEG,KAAK,EAAEpF,SAAS,CAACoG,MAAM,EAAE9C,GAAG,CAAC;;QAG9E,IAAIuC,IAAI,EAAE;UACR,IAAI,CAACvB,KAAK,CAACI,GAAG,CAACa,MAAM,EAAEM,IAAI,CAAC;UAC5B3B,YAAY,CAACQ,GAAG,CAACa,MAAM,EAAEM,IAAI,CAAC;;;KAGnC,MAAM;MACL;IAAA;EAEJ,CAAC;EAEOrD,0BAAW,GAAnB,UAAoB0B,YAAmB;IAAvC;IACE;IACA,IAAMoC,OAAO,GAAG,IAAI,CAAC3E,IAAI,CAAC+B,UAAU,EAAE;IAEtC7D,IAAI,CAACyG,OAAO,EAAE,UAACrD,KAAY,EAAEsD,GAAW;MACtC;MACA,IAAI,CAACtD,KAAK,IAAIA,KAAK,CAAC+B,UAAU,EAAE;QAC9B;;MAEM,SAAK,GAAK/B,KAAK,MAAV;MACb,IAAMuD,WAAW,GAAGxF,aAAa,CAACa,KAAI,CAACkC,MAAM,EAAEmB,KAAK,CAAC;MAErD,IAAIsB,WAAW,KAAK,KAAK,EAAE;QACzB,IAAMpB,KAAK,GAAGlF,KAAK,CAAC+B,EAAE;QACtB,IAAMqB,GAAG,GAAG,GAAG;QACf,IAAM+B,MAAM,GAAGxD,KAAI,CAACyD,KAAK,CAAC,MAAM,EAAEJ,KAAK,CAAC;QACxC,IAAMK,MAAM,GAAG1D,KAAI,CAACyD,KAAK,CAAC,MAAM,EAAEJ,KAAK,CAAC;QAExC,IAAMxC,UAAU,GAAGb,KAAI,CAACF,IAAI,CAACgB,aAAa,EAAE;QAE5C,IAAID,UAAU,CAAC8C,MAAM,EAAE;UACrB,IAAM1C,SAAS,GAAGtC,gBAAgB,CAACgG,WAAW,EAAED,GAAG,KAAK,CAAC,GAAGvG,SAAS,CAACyG,IAAI,GAAGzG,SAAS,CAAC0G,KAAK,CAAC;UAE7F;UACA,IAAIjB,IAAI,GAAG5D,KAAI,CAACyC,KAAK,CAACxE,GAAG,CAACuF,MAAM,CAAC;UACjC;UACA,IAAII,IAAI,EAAE;YACR,IAAMC,GAAG,GAAG7D,KAAI,CAAC8D,cAAc,CAAC1C,KAAK,EAAEuD,WAAW,EAAE1D,SAAS,CAAC;YAC9DzB,IAAI,CAACqE,GAAG,EAAEnE,QAAQ,CAAC;YACnBkE,IAAI,CAAC3B,SAAS,CAACrB,MAAM,CAACiD,GAAG,CAAC;YAC1BxB,YAAY,CAACQ,GAAG,CAACW,MAAM,EAAEI,IAAI,CAAC;WAC/B,MAAM;YACL;YACAA,IAAI,GAAG5D,KAAI,CAAC+D,cAAc,CAAC3C,KAAK,EAAEuD,WAAW,EAAEpB,KAAK,EAAEtC,SAAS,EAAEQ,GAAG,CAAC;YACrEzB,KAAI,CAACyC,KAAK,CAACI,GAAG,CAACW,MAAM,EAAEI,IAAI,CAAC;YAC5BvB,YAAY,CAACQ,GAAG,CAACW,MAAM,EAAEI,IAAI,CAAC;;UAGhC;UACA,IAAII,IAAI,GAAGhE,KAAI,CAACyC,KAAK,CAACxE,GAAG,CAACyF,MAAM,CAAC;UACjC;UACA,IAAIM,IAAI,EAAE;YACR,IAAMH,GAAG,GAAG7D,KAAI,CAACiE,cAAc,CAAC7C,KAAK,EAAEuD,WAAW,EAAE1D,SAAS,EAAEQ,GAAG,CAAC;YACnEjC,IAAI,CAACqE,GAAG,EAAEnE,QAAQ,CAAC;YACnBsE,IAAI,CAAC/B,SAAS,CAACrB,MAAM,CAACiD,GAAG,CAAC;YAC1BxB,YAAY,CAACQ,GAAG,CAACa,MAAM,EAAEM,IAAI,CAAC;WAC/B,MAAM;YACL;YACAA,IAAI,GAAGhE,KAAI,CAACkE,cAAc,CAAC9C,KAAK,EAAEuD,WAAW,EAAEpB,KAAK,EAAEtC,SAAS,EAAEQ,GAAG,CAAC;YACrE,IAAIuC,IAAI,EAAE;cACRhE,KAAI,CAACyC,KAAK,CAACI,GAAG,CAACa,MAAM,EAAEM,IAAI,CAAC;cAC5B3B,YAAY,CAACQ,GAAG,CAACa,MAAM,EAAEM,IAAI,CAAC;;;SAGnC,MAAM,IAAInD,UAAU,CAACW,OAAO,EAAE;UAC7B;UACA,IAAIoC,IAAI,GAAG5D,KAAI,CAACyC,KAAK,CAACxE,GAAG,CAACuF,MAAM,CAAC;UACjC;UACA,IAAII,IAAI,EAAE;YACR,IAAMC,GAAG,GAAGhD,UAAU,CAACa,YAAY,GAC/B1B,KAAI,CAACoE,gBAAgB,CAAChD,KAAK,EAAEuD,WAAW,EAAExG,SAAS,CAACoG,MAAM,CAAC,GAC3DvE,KAAI,CAAC8D,cAAc,CAAC1C,KAAK,EAAEuD,WAAW,EAAExG,SAAS,CAACgG,MAAM,CAAC;YAE7D;YACA3E,IAAI,CAACqE,GAAG,EAAEnE,QAAQ,CAAC;YACnBkE,IAAI,CAAC3B,SAAS,CAACrB,MAAM,CAACiD,GAAG,CAAC;YAC1BxB,YAAY,CAACQ,GAAG,CAACW,MAAM,EAAEI,IAAI,CAAC;WAC/B,MAAM;YACL;YACA,IAAI/C,UAAU,CAACa,YAAY,EAAE;cAC3B,IAAIxD,WAAW,CAACyG,WAAW,CAAC,EAAE;gBAC5B;eACD,MAAM;gBACLf,IAAI,GAAG5D,KAAI,CAACqE,gBAAgB,CAACjD,KAAK,EAAEuD,WAAW,EAAEpB,KAAK,EAAEpF,SAAS,CAACoG,MAAM,EAAE9C,GAAG,CAAC;;aAEjF,MAAM;cACLmC,IAAI,GAAG5D,KAAI,CAAC+D,cAAc,CAAC3C,KAAK,EAAEuD,WAAW,EAAEpB,KAAK,EAAEpF,SAAS,CAACgG,MAAM,EAAE1C,GAAG,CAAC;;YAG9EzB,KAAI,CAACyC,KAAK,CAACI,GAAG,CAACW,MAAM,EAAEI,IAAI,CAAC;YAC5BvB,YAAY,CAACQ,GAAG,CAACW,MAAM,EAAEI,IAAI,CAAC;;UAGhC;UACA,IAAII,IAAI,GAAGhE,KAAI,CAACyC,KAAK,CAACxE,GAAG,CAACyF,MAAM,CAAC;UACjC;UACA,IAAIM,IAAI,EAAE;YACR,IAAMH,GAAG,GAAGhD,UAAU,CAACa,YAAY,GAC/B1B,KAAI,CAACiE,cAAc,CAAC7C,KAAK,EAAEuD,WAAW,EAAExG,SAAS,CAACoG,MAAM,EAAE9C,GAAG,CAAC,GAC9DzB,KAAI,CAACsE,gBAAgB,CAAClD,KAAK,EAAEuD,WAAW,EAAExG,SAAS,CAACgG,MAAM,EAAE1C,GAAG,CAAC;YACpEjC,IAAI,CAACqE,GAAG,EAAEnE,QAAQ,CAAC;YACnBsE,IAAI,CAAC/B,SAAS,CAACrB,MAAM,CAACiD,GAAG,CAAC;YAC1BxB,YAAY,CAACQ,GAAG,CAACa,MAAM,EAAEM,IAAI,CAAC;WAC/B,MAAM;YACL;YACA,IAAInD,UAAU,CAACa,YAAY,EAAE;cAC3B,IAAIxD,WAAW,CAACyG,WAAW,CAAC,EAAE;gBAC5B;eACD,MAAM;gBACLX,IAAI,GAAGhE,KAAI,CAACkE,cAAc,CAAC9C,KAAK,EAAEuD,WAAW,EAAEpB,KAAK,EAAEpF,SAAS,CAACoG,MAAM,EAAE9C,GAAG,CAAC;;aAE/E,MAAM;cACLuC,IAAI,GAAGhE,KAAI,CAACwE,gBAAgB,CAACpD,KAAK,EAAEuD,WAAW,EAAEpB,KAAK,EAAEpF,SAAS,CAACgG,MAAM,EAAE1C,GAAG,CAAC;;YAGhF,IAAIuC,IAAI,EAAE;cACRhE,KAAI,CAACyC,KAAK,CAACI,GAAG,CAACa,MAAM,EAAEM,IAAI,CAAC;cAC5B3B,YAAY,CAACQ,GAAG,CAACa,MAAM,EAAEM,IAAI,CAAC;;;SAGnC,MAAM;UACL;QAAA;;IAGN,CAAC,CAAC;EACJ,CAAC;EAED;;;;;;;;EAQQrD,6BAAc,GAAtB,UACES,KAAY,EACZc,MAAe,EACfqB,KAAY,EACZtC,SAAoB,EACpBQ,GAAW;IAEX;IACA,IAAMmC,IAAI,GAAG;MACX3B,SAAS,EAAE,IAAIzD,QAAQ,CAAC,IAAI,CAACsF,cAAc,CAAC1C,KAAK,EAAEc,MAAM,EAAEjB,SAAS,CAAC,CAAC;MACtEsC,KAAK;MACLtC,SAAS,EAAEA,SAAS,KAAK9C,SAAS,CAACgG,MAAM,GAAGhG,SAAS,CAAC2G,IAAI,GAAG7D,SAAS;MACtEC,IAAI,EAAE9C,cAAc,CAACmD,IAAI;MACzBJ,KAAK,EAAE;QAAEM,GAAG;QAAEL,KAAK;MAAA;KACpB;IACDwC,IAAI,CAAC3B,SAAS,CAACY,GAAG,CAAC,OAAO,EAAEzB,KAAK,CAACiC,KAAK,CAAC;IACxCO,IAAI,CAAC3B,SAAS,CAAC8C,IAAI,EAAE;IAErB,OAAOnB,IAAI;EACb,CAAC;EAEOjD,6BAAc,GAAtB,UACES,KAAY,EACZc,MAAe,EACfqB,KAAY,EACZtC,SAAoB,EACpBQ,GAAW;IAEX,IAAMoC,GAAG,GAAG,IAAI,CAACI,cAAc,CAAC7C,KAAK,EAAEc,MAAM,EAAEjB,SAAS,EAAEQ,GAAG,CAAC;IAC9D,IAAIoC,GAAG,EAAE;MACP,IAAMG,IAAI,GAAG;QACX/B,SAAS,EAAE,IAAIxD,QAAQ,CAACoF,GAAG,CAAC;QAC5BN,KAAK;QACLtC,SAAS,EAAE9C,SAAS,CAAC2G,IAAI;QACzB5D,IAAI,EAAE9C,cAAc,CAACuD,IAAI;QACzBR,KAAK,EAAE;UACLM,GAAG;UACHL,KAAK;UACLC,SAAS,EAAEpD,GAAG,CAAC4F,GAAG,EAAE,WAAW,EAAE,IAAI;;OAExC;MACDG,IAAI,CAAC/B,SAAS,CAAC8C,IAAI,EAAE;MAErB,OAAOf,IAAI;;EAEf,CAAC;EAEOrD,+BAAgB,GAAxB,UACES,KAAY,EACZc,MAAe,EACfqB,KAAY,EACZtC,SAAoB,EACpBQ,GAAW;IAEX,IAAMmC,IAAI,GAAG;MACX3B,SAAS,EAAE,IAAI3D,UAAU,CAAC,IAAI,CAAC8F,gBAAgB,CAAChD,KAAK,EAAEc,MAAM,EAAEjB,SAAS,CAAC,CAAC;MAC1EsC,KAAK;MACLtC,SAAS;MACTC,IAAI,EAAE9C,cAAc,CAACmD,IAAI;MACzBJ,KAAK,EAAE;QAAEM,GAAG;QAAEL,KAAK;MAAA;KACpB;IACDwC,IAAI,CAAC3B,SAAS,CAACY,GAAG,CAAC,OAAO,EAAEzB,KAAK,CAACiC,KAAK,CAAC;IAExCO,IAAI,CAAC3B,SAAS,CAAC8C,IAAI,EAAE;IAErB,OAAOnB,IAAI;EACb,CAAC;EAEOjD,+BAAgB,GAAxB,UACES,KAAY,EACZc,MAAe,EACfqB,KAAY,EACZtC,SAAoB,EACpBQ,GAAW;IAEX,IAAMoC,GAAG,GAAG,IAAI,CAACS,gBAAgB,CAAClD,KAAK,EAAEc,MAAM,EAAEjB,SAAS,EAAEQ,GAAG,CAAC;IAChE,IAAIoC,GAAG,EAAE;MACP,IAAMG,IAAI,GAAG;QACX/B,SAAS,EAAE,IAAI1D,UAAU,CAACsF,GAAG,CAAC;QAC9BN,KAAK;QACLtC,SAAS,EAAE9C,SAAS,CAAC2G,IAAI;QACzB5D,IAAI,EAAE9C,cAAc,CAACuD,IAAI;QACzBR,KAAK,EAAE;UACLM,GAAG;UACHL,KAAK;UACLC,SAAS,EAAEpD,GAAG,CAAC4F,GAAG,EAAE,WAAW,EAAE,IAAI;;OAExC;MAEDG,IAAI,CAAC/B,SAAS,CAAC8C,IAAI,EAAE;MACrB,OAAOf,IAAI;;EAEf,CAAC;EAED;;;;;;;EAOQrD,6BAAc,GAAtB,UAAuBS,KAAY,EAAE4D,UAAmB,EAAE/D,SAAoB;IAC5E,IAAMgE,SAAS,GAAGhH,GAAG,CAAC+G,UAAU,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAACvE,iBAAiB,GAAG,IAAI,CAACD,aAAa;IACxF,IAAMK,UAAU,GAAG,IAAI,CAACf,IAAI,CAACgB,aAAa,EAAE;IAC5C,IAAMoE,MAAM,GAAGrG,aAAa,CAACgC,UAAU,EAAEI,SAAS,CAAC;IACnD,IAAMkE,SAAS,GAAGnG,gBAAgB,CAACoC,KAAK,EAAE4D,UAAU,CAAC;IACrD,IAAMI,YAAY,GAAGtG,eAAe,CAAC,IAAI,CAACgB,IAAI,CAACuF,QAAQ,EAAE,EAAEpE,SAAS,CAAC;IACrE;IACA,IAAMqE,eAAe,GAAGrH,GAAG,CAAC+G,UAAU,EAAE,CAAC,OAAO,CAAC,CAAC,GAC9CjH,OAAO,CACL;MAAEwH,KAAK,EAAE;QAAEC,KAAK,EAAE;UAAEC,IAAI,EAAEN;QAAS;MAAE;IAAE,CAAE,EACzC;MAAEI,KAAK,EAAExG,mBAAmB,CAAC,IAAI,CAACe,IAAI,CAACuF,QAAQ,EAAE,EAAEpE,SAAS,EAAE+D,UAAU,CAACO,KAAK;IAAC,CAAE,EACjFP,UAAU,CACX,GACDA,UAAU;IAEd,IAAMnB,GAAG,GAAG9F,OAAO;MAEfkH,SAAS;IAAA,GACNC,MAAM;MACTQ,KAAK,EAAEtE,KAAK,CAACuE,QAAQ,EAAE,CAACC,GAAG,CAAC,UAACC,IAAI;QAAK,OAAC;UAAEC,EAAE,EAAE,UAAGD,IAAI,CAACE,SAAS,CAAE;UAAEC,IAAI,EAAEH,IAAI,CAACJ,IAAI;UAAExC,KAAK,EAAE4C,IAAI,CAAC5C;QAAK,CAAE;MAAhE,CAAiE,CAAC;MACxGgD,cAAc,EAAEpF,UAAU,CAACW,OAAO,GAC9B5C,qBAAqB,CAACsG,MAAM,EAAErE,UAAU,CAACmB,SAAS,EAAE,CAAC,GAAG,CAAC,CAAC,GAC1DpD,qBAAqB,CAACsG,MAAM,EAAErE,UAAU,CAACmB,SAAS,EAAE,CAAC;MACzDkE,KAAK,EAAEd;IAAY,IAErBA,YAAY,EACZE,eAAe,CAChB;IACK,SAA6B,IAAI,CAACa,aAAa,CAACtC,GAAG,CAAC;MAAlDuC,OAAO;MAAEC,aAAa,mBAA4B;IAC1DxC,GAAG,CAACwC,aAAa,GAAGA,aAAa;IACjCxC,GAAG,CAACuC,OAAO,GAAGA,OAAO;IAErB;IACA,IAAME,cAAc,GAAGpH,UAAU,CAACgG,MAAM,CAAC;IACzC;IACA,IAAMqB,mBAAmB,GAAGtI,GAAG,CAAC4F,GAAG,EAAE,qBAAqB,EAAEyC,cAAc,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC3F,IAAIC,mBAAmB,IAAI,CAAC,EAAE;MAC5B;MACA,IAAMC,WAAW,GAAG,IAAI,CAAC1G,IAAI,CAAC2G,SAAS,EAAE,CAACxI,GAAG,CAAC,OAAO,CAAC;MACtD,IAAMyI,YAAY,GAAG,IAAI,CAAC5G,IAAI,CAAC2G,SAAS,EAAE,CAACxI,GAAG,CAAC,QAAQ,CAAC;MACxD4F,GAAG,CAAC0C,mBAAmB,GAAGA,mBAAmB,IAAID,cAAc,GAAGE,WAAW,GAAGE,YAAY,CAAC;;IAG/F,OAAO7C,GAAG;EACZ,CAAC;EAED;;;;;;;;EAQQlD,6BAAc,GAAtB,UAAuBS,KAAY,EAAE4D,UAAmB,EAAE/D,SAAoB,EAAEQ,GAAW;IACzF,IAAI,CAAClC,QAAQ,CAACT,eAAe,CAAC,IAAI,CAACgB,IAAI,CAACuF,QAAQ,EAAE,EAAEpE,SAAS,CAAC,EAAE+D,UAAU,CAAC,EAAE;MAC3E,OAAO2B,SAAS;;IAElB,IAAMC,YAAY,GAAGvH,eAAe,CAAC,IAAI,CAACS,IAAI,CAACuF,QAAQ,EAAE,EAAEpE,SAAS,CAAC;IACrE;IACA;IACA,IAAM4F,OAAO,GAAG9I,OAAO,CACrB;MACEkH,SAAS,EAAEhH,GAAG,CAAC+G,UAAU,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC1E,iBAAiB,GAAG,IAAI,CAACJ;KACrE,EACD0G,YAAY,EACZ3I,GAAG,CAAC+G,UAAU,EAAE,MAAM,CAAC,EACvB,IAAI,CAACmB,aAAa,CAACnB,UAAU,CAAC,CAC/B;IACD6B,OAAO,CAACjF,KAAK,GAAGtC,gBAAgB,CAAC,IAAI,CAACQ,IAAI,CAACgB,aAAa,EAAE,EAAEM,KAAK,EAAEK,GAAG,EAAExD,GAAG,CAAC4I,OAAO,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;IAExG,OAAOA,OAAO;EAChB,CAAC;EAED;;;;;;;EAOQlG,+BAAgB,GAAxB,UAAyBS,KAAY,EAAE4D,UAAmB,EAAE/D,SAAoB;IAC9E,IAAMgE,SAAS,GAAGhH,GAAG,CAAC+G,UAAU,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAACvE,iBAAiB,GAAG,IAAI,CAACD,aAAa;IACxF,IAAMK,UAAU,GAAG,IAAI,CAACf,IAAI,CAACgB,aAAa,EAAE;IAE5C,IAAM4E,KAAK,GAAGtE,KAAK,CAACuE,QAAQ,EAAE,CAACC,GAAG,CAAC,UAACC,IAAI;MAAK,OAAC;QAAEC,EAAE,EAAE,UAAGD,IAAI,CAACE,SAAS,CAAE;QAAEC,IAAI,EAAEH,IAAI,CAACJ,IAAI;QAAExC,KAAK,EAAE4C,IAAI,CAAC5C;MAAK,CAAE;IAAhE,CAAiE,CAAC;IAC/G,IAAI,CAAC7B,KAAK,CAAC0F,UAAU,IAAIC,IAAI,CAACC,GAAG,CAACnG,UAAU,CAACoG,QAAQ,GAAGpG,UAAU,CAACqG,UAAU,CAAC,KAAKH,IAAI,CAACI,EAAE,GAAG,CAAC,EAAE;MAC9F;MACAzB,KAAK,CAAC0B,GAAG,EAAE;;IAGb,IAAMjC,SAAS,GAAGnG,gBAAgB,CAACoC,KAAK,EAAE4D,UAAU,CAAC;IACrD,IAAMI,YAAY,GAAGtG,eAAe,CAAC,IAAI,CAACgB,IAAI,CAACuF,QAAQ,EAAE,EAAElH,SAAS,CAACoG,MAAM,CAAC;IAC5E;IACA,IAAMe,eAAe,GAAGrH,GAAG,CAAC+G,UAAU,EAAE,CAAC,OAAO,CAAC,CAAC,GAC9CjH,OAAO,CACL;MAAEwH,KAAK,EAAE;QAAEC,KAAK,EAAE;UAAEC,IAAI,EAAEN;QAAS;MAAE;IAAE,CAAE,EACzC;MAAEI,KAAK,EAAExG,mBAAmB,CAAC,IAAI,CAACe,IAAI,CAACuF,QAAQ,EAAE,EAAEpE,SAAS,EAAE+D,UAAU,CAACO,KAAK;IAAC,CAAE,EACjFP,UAAU,CACX,GACDA,UAAU;IACd,IAAMnB,GAAG,GAAG9F,OAAO;MAEfkH,SAAS;IAAA,GACNhG,yBAAyB,CAAC,IAAI,CAACa,IAAI,CAACgB,aAAa,EAAE,CAAC;MACvD4E,KAAK;MACLO,cAAc,EAAE,CAAC;MACjBC,KAAK,EAAEd;IAAY,IAErBA,YAAY,EACZE,eAAe,CAChB;IACK,SAA6B,IAAI,CAACa,aAAa,CAACtC,GAAG,CAAC;MAAlDuC,OAAO;MAAEC,aAAa,mBAA4B;IAC1DxC,GAAG,CAACuC,OAAO,GAAGA,OAAO;IACrBvC,GAAG,CAACwC,aAAa,GAAGA,aAAa;IAEjC,OAAOxC,GAAG;EACZ,CAAC;EAED;;;;;;;EAOQlD,+BAAgB,GAAxB,UAAyBS,KAAY,EAAE4D,UAAmB,EAAE/D,SAAoB,EAAEQ,GAAW;IAC3F,IAAI,CAAClC,QAAQ,CAACT,eAAe,CAAC,IAAI,CAACgB,IAAI,CAACuF,QAAQ,EAAE,EAAEpE,SAAS,CAAC,EAAE+D,UAAU,CAAC,EAAE;MAC3E,OAAO2B,SAAS;;IAGlB;IACA;IACA,IAAMC,YAAY,GAAGvH,eAAe,CAAC,IAAI,CAACS,IAAI,CAACuF,QAAQ,EAAE,EAAElH,SAAS,CAACgG,MAAM,CAAC;IAC5E,IAAM0C,OAAO,GAAG9I,OAAO,CACrB;MACEkH,SAAS,EAAEhH,GAAG,CAAC+G,UAAU,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC1E,iBAAiB,GAAG,IAAI,CAACJ,aAAa;MACjF6B,MAAM,EAAE,IAAI,CAACjC,IAAI,CAACgB,aAAa,EAAE,CAACkB,SAAS;KAC5C,EACD4E,YAAY,EACZ3I,GAAG,CAAC+G,UAAU,EAAE,MAAM,CAAC,EACvB,IAAI,CAACmB,aAAa,CAACnB,UAAU,CAAC,CAC/B;IACD,IAAM3D,SAAS,GAAGpD,GAAG,CAAC4I,OAAO,EAAE,WAAW,EAAE,IAAI,CAAC;IACjD,IAAMQ,aAAa,GAAG5F,GAAG,KAAK,GAAG,GAAG,IAAI,CAAC3B,IAAI,CAAC+B,UAAU,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC/B,IAAI,CAACgC,SAAS,EAAE;IACrF+E,OAAO,CAACjF,KAAK,GAAGxC,kBAAkB,CAAC,IAAI,CAACU,IAAI,CAACgB,aAAa,EAAE,EAAEuG,aAAa,EAAEjG,KAAK,EAAEC,SAAS,EAAEI,GAAG,CAAC;IACnG;IACA;IACA,OAAOoF,OAAO;EAChB,CAAC;EAEOlG,oBAAK,GAAb,UAAcqF,IAAY,EAAErD,GAAW;IACrC,IAAM9B,UAAU,GAAG,IAAI,CAACf,IAAI,CAACgB,aAAa,EAAE;IAC5C;IACA,OAAO,UAAGkF,IAAI,cAAIrD,GAAG,cAAI9B,UAAU,CAACK,IAAI,CAAE;EAC5C,CAAC;EAEOP,4BAAa,GAArB,UAAsBkD,GAAG;IACvB,OAAO;MACLuC,OAAO,EAAE,IAAI,CAACtG,IAAI,CAACqC,UAAU,EAAE,CAACiE,OAAO,IAAInI,GAAG,CAAC4F,GAAG,EAAE,SAAS,CAAC;MAC9DwC,aAAa,EACXxC,GAAG,IAAIA,GAAG,CAACwC,aAAa,GAAGtI,OAAO,CAAC,EAAE,EAAE4B,wBAAwB,EAAEkE,GAAG,CAACwC,aAAa,CAAC,GAAG1G;KACzF;EACH,CAAC;EACH,WAAC;AAAD,CAAC,CA9oBiCF,UAAU","names":["deepMix","each","get","isUndefined","DIRECTION","COMPONENT_TYPE","LAYER","CircleAxis","CircleGrid","LineAxis","LineGrid","DEFAULT_ANIMATE_CFG","getAxisDirection","getAxisFactorByRegion","getAxisRegion","getAxisThemeCfg","getAxisTitleOptions","getAxisTitleText","getCircleAxisCenterRadius","isVertical","getAxisOption","getCircleGridItems","getGridThemeCfg","getLineGridItems","showGrid","omit","Controller","OMIT_CFG","AXIS_DEFAULT_ANIMATE_CFG","appear","__extends","view","_super","_this","Map","gridContainer","getLayer","BG","addGroup","gridForeContainer","FORE","axisContainer","axisForeContainer","Object","Axis","update","coordinate","getCoordinate","getComponents","co","direction","type","extra","scale","alignTick","updated","AXIS","isPolar","dim","isTransposed","GRID","items","getYScales","getXScale","center","getCenter","component","option","getOptions","axes","updatedCache","updateXAxes","updateYAxes","newCache","cache","forEach","key","has","set","destroy","clear","remove","value","push","isIdentity","xAxisOption","field","BOTTOM","layer","axisId","getId","gridId","isRect","axis","cfg","getLineAxisCfg","createLineAxis","grid","getLineGridCfg","createLineGrid","RADIUS","getCircleAxisCfg","createCircleAxis","getCircleGridCfg","CIRCLE","createCircleGrid","yScales","idx","yAxisOption","LEFT","RIGHT","NONE","init","axisOption","container","region","titleText","axisThemeCfg","getTheme","optionWithTitle","title","style","text","ticks","getTicks","map","tick","id","tickValue","name","verticalFactor","theme","getAnimateCfg","animate","animateOption","isAxisVertical","verticalLimitLength","canvasWidth","getCanvas","canvasHeight","undefined","gridThemeCfg","gridCfg","isCategory","Math","abs","endAngle","startAngle","PI","pop","verticalScale"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/g2/src/chart/controller/axis.ts"],"sourcesContent":["import { deepMix, each, get, isUndefined } from '@antv/util';\nimport { DIRECTION, COMPONENT_TYPE, LAYER } from '../../constant';\nimport { CircleAxis, CircleGrid, IGroup, LineAxis, LineGrid, Scale } from '../../dependents';\nimport { AxisCfg, AxisOption, ComponentOption } from '../../interface';\n\nimport { DEFAULT_ANIMATE_CFG } from '../../animate/';\n\nimport {\n  getAxisDirection,\n  getAxisFactorByRegion,\n  getAxisRegion,\n  getAxisThemeCfg,\n  getAxisTitleOptions,\n  getAxisTitleText,\n  getCircleAxisCenterRadius,\n  isVertical,\n} from '../../util/axis';\nimport { getAxisOption } from '../../util/axis';\nimport { getCircleGridItems, getGridThemeCfg, getLineGridItems, showGrid } from '../../util/grid';\nimport { omit } from '../../util/helper';\nimport View from '../view';\nimport { Controller } from './base';\n\ntype Option = Record<string, AxisOption> | boolean;\n\ntype Cache = Map<string, ComponentOption>;\n\n// update 组件的时候，忽略的数据更新\nconst OMIT_CFG = ['container'];\n\n// 坐标轴默认动画配置\nconst AXIS_DEFAULT_ANIMATE_CFG = {\n  ...DEFAULT_ANIMATE_CFG,\n  appear: null,\n};\n\n/**\n * @ignore\n * G2 Axis controller, will:\n *  - create component\n *    - axis\n *    - grid\n *  - life circle\n */\nexport default class Axis extends Controller<Option> {\n  /** the draw group of axis */\n  private axisContainer: IGroup;\n  private axisForeContainer: IGroup;\n  private gridContainer: IGroup;\n  private gridForeContainer: IGroup;\n\n  /** 使用 object 存储组件 */\n  private cache: Cache = new Map<string, ComponentOption>();\n\n  constructor(view: View) {\n    super(view);\n\n    // 先创建 gridContainer，将 grid 放到 axis 底层\n    this.gridContainer = this.view.getLayer(LAYER.BG).addGroup();\n    this.gridForeContainer = this.view.getLayer(LAYER.FORE).addGroup();\n    this.axisContainer = this.view.getLayer(LAYER.BG).addGroup();\n    this.axisForeContainer = this.view.getLayer(LAYER.FORE).addGroup();\n  }\n\n  public get name(): string {\n    return 'axis';\n  }\n\n  public init() {}\n\n  public render() {\n    this.update();\n  }\n\n  /**\n   * 更新组件布局，位置大小\n   */\n  public layout() {\n    const coordinate = this.view.getCoordinate();\n\n    each(this.getComponents(), (co: ComponentOption) => {\n      const { component, direction, type, extra } = co;\n      const { dim, scale, alignTick } = extra;\n\n      let updated;\n\n      if (type === COMPONENT_TYPE.AXIS) {\n        if (coordinate.isPolar) {\n          if (dim === 'x') {\n            updated = coordinate.isTransposed\n              ? getAxisRegion(coordinate, direction)\n              : getCircleAxisCenterRadius(coordinate);\n          } else if (dim === 'y') {\n            updated = coordinate.isTransposed\n              ? getCircleAxisCenterRadius(coordinate)\n              : getAxisRegion(coordinate, direction);\n          }\n        } else {\n          updated = getAxisRegion(coordinate, direction);\n        }\n      } else if (type === COMPONENT_TYPE.GRID) {\n        if (coordinate.isPolar) {\n          let items;\n          if (coordinate.isTransposed) {\n            items =\n              dim === 'x'\n                ? getCircleGridItems(coordinate, this.view.getYScales()[0], scale, alignTick, dim)\n                : getLineGridItems(coordinate, scale, dim, alignTick);\n          } else {\n            items =\n              dim === 'x'\n                ? getLineGridItems(coordinate, scale, dim, alignTick)\n                : getCircleGridItems(coordinate, this.view.getXScale(), scale, alignTick, dim);\n          }\n          updated = {\n            items,\n            // coordinate 更新之后，center 也变化了\n            center: this.view.getCoordinate().getCenter(),\n          };\n        } else {\n          updated = { items: getLineGridItems(coordinate, scale, dim, alignTick) };\n        }\n      }\n      component.update(updated);\n    });\n  }\n\n  /**\n   * 更新 axis 组件\n   */\n  public update() {\n    this.option = this.view.getOptions().axes;\n\n    const updatedCache = new Map<string, ComponentOption>();\n\n    this.updateXAxes(updatedCache);\n    this.updateYAxes(updatedCache);\n\n    // 处理完成之后，销毁删除的\n    // 不在处理中的\n    const newCache = new Map<string, ComponentOption>();\n\n    this.cache.forEach((co: ComponentOption, key: string) => {\n      if (updatedCache.has(key)) {\n        newCache.set(key, co);\n      } else {\n        // 不存在，则是所有需要被销毁的组件\n        co.component.destroy();\n      }\n    });\n\n    // 更新缓存\n    this.cache = newCache;\n  }\n\n  public clear() {\n    super.clear();\n\n    this.cache.clear();\n    this.gridContainer.clear();\n    this.gridForeContainer.clear();\n    this.axisContainer.clear();\n    this.axisForeContainer.clear();\n  }\n\n  public destroy() {\n    super.destroy();\n\n    this.gridContainer.remove(true);\n    this.gridForeContainer.remove(true);\n    this.axisContainer.remove(true);\n    this.axisForeContainer.remove(true);\n  }\n\n  /**\n   * @override\n   */\n  public getComponents(): ComponentOption[] {\n    const co = [];\n\n    this.cache.forEach((value: ComponentOption) => {\n      co.push(value);\n    });\n\n    return co;\n  }\n\n  /**\n   * 更新 x axis\n   * @param updatedCache\n   */\n  private updateXAxes(updatedCache: Cache) {\n    // x axis\n    const scale = this.view.getXScale();\n\n    if (!scale || scale.isIdentity) {\n      return;\n    }\n\n    const xAxisOption = getAxisOption(this.option, scale.field);\n    if (xAxisOption === false) {\n      return;\n    }\n\n    const direction = getAxisDirection(xAxisOption, DIRECTION.BOTTOM);\n    const layer = LAYER.BG;\n    const dim = 'x';\n\n    const coordinate = this.view.getCoordinate();\n\n    const axisId = this.getId('axis', scale.field);\n    const gridId = this.getId('grid', scale.field);\n\n    if (coordinate.isRect) {\n      // 1. do axis update\n      let axis = this.cache.get(axisId);\n      // 存在则更新\n      if (axis) {\n        const cfg = this.getLineAxisCfg(scale, xAxisOption, direction);\n        omit(cfg, OMIT_CFG);\n        axis.component.update(cfg);\n        updatedCache.set(axisId, axis);\n      } else {\n        // 不存在，则创建\n        axis = this.createLineAxis(scale, xAxisOption, layer, direction, dim);\n        this.cache.set(axisId, axis);\n        updatedCache.set(axisId, axis);\n      }\n\n      // 2. do grid update\n      let grid = this.cache.get(gridId);\n      // 存在则更新\n      if (grid) {\n        const cfg = this.getLineGridCfg(scale, xAxisOption, direction, dim);\n        omit(cfg, OMIT_CFG);\n        grid.component.update(cfg);\n        updatedCache.set(gridId, grid);\n      } else {\n        // 不存在则创建\n        grid = this.createLineGrid(scale, xAxisOption, layer, direction, dim);\n        if (grid) {\n          this.cache.set(gridId, grid);\n          updatedCache.set(gridId, grid);\n        }\n      }\n    } else if (coordinate.isPolar) {\n      // 1. do axis update\n      let axis = this.cache.get(axisId);\n      // 存在则更新\n      if (axis) {\n        const cfg = coordinate.isTransposed\n          ? this.getLineAxisCfg(scale, xAxisOption, DIRECTION.RADIUS)\n          : this.getCircleAxisCfg(scale, xAxisOption, direction);\n\n        omit(cfg, OMIT_CFG);\n        axis.component.update(cfg);\n        updatedCache.set(axisId, axis);\n      } else {\n        // 不存在，则创建\n        if (coordinate.isTransposed) {\n          if (isUndefined(xAxisOption)) {\n            // 默认不渲染转置极坐标下的坐标轴\n            return;\n          } else {\n            // 如果用户打开了隐藏的坐标轴 chart.axis(true)/chart.axis('x', true)\n            // 那么对于转置了的极坐标，半径轴显示的是 x 轴对应的数据\n            axis = this.createLineAxis(scale, xAxisOption, layer, DIRECTION.RADIUS, dim);\n          }\n        } else {\n          axis = this.createCircleAxis(scale, xAxisOption, layer, direction, dim);\n        }\n        this.cache.set(axisId, axis);\n        updatedCache.set(axisId, axis);\n      }\n\n      // 2. do grid update\n      let grid = this.cache.get(gridId);\n      // 存在则更新\n      if (grid) {\n        const cfg = coordinate.isTransposed\n          ? this.getCircleGridCfg(scale, xAxisOption, DIRECTION.RADIUS, dim)\n          : this.getLineGridCfg(scale, xAxisOption, DIRECTION.CIRCLE, dim);\n        omit(cfg, OMIT_CFG);\n        grid.component.update(cfg);\n        updatedCache.set(gridId, grid);\n      } else {\n        // 不存在则创建\n        if (coordinate.isTransposed) {\n          if (isUndefined(xAxisOption)) {\n            return;\n          } else {\n            grid = this.createCircleGrid(scale, xAxisOption, layer, DIRECTION.RADIUS, dim);\n          }\n        } else {\n          // grid，极坐标下的 x 轴网格线沿着半径方向绘制\n          grid = this.createLineGrid(scale, xAxisOption, layer, DIRECTION.CIRCLE, dim);\n        }\n\n        if (grid) {\n          this.cache.set(gridId, grid);\n          updatedCache.set(gridId, grid);\n        }\n      }\n    } else {\n      // helix and other, do not draw axis\n    }\n  }\n\n  private updateYAxes(updatedCache: Cache) {\n    // y axes\n    const yScales = this.view.getYScales();\n\n    each(yScales, (scale: Scale, idx: number) => {\n      // @ts-ignore\n      if (!scale || scale.isIdentity) {\n        return;\n      }\n      const { field } = scale;\n      const yAxisOption = getAxisOption(this.option, field);\n\n      if (yAxisOption !== false) {\n        const layer = LAYER.BG;\n        const dim = 'y';\n        const axisId = this.getId('axis', field);\n        const gridId = this.getId('grid', field);\n\n        const coordinate = this.view.getCoordinate();\n\n        if (coordinate.isRect) {\n          const direction = getAxisDirection(yAxisOption, idx === 0 ? DIRECTION.LEFT : DIRECTION.RIGHT);\n\n          // 1. do axis update\n          let axis = this.cache.get(axisId);\n          // 存在则更新\n          if (axis) {\n            const cfg = this.getLineAxisCfg(scale, yAxisOption, direction);\n            omit(cfg, OMIT_CFG);\n            axis.component.update(cfg);\n            updatedCache.set(axisId, axis);\n          } else {\n            // 不存在，则创建\n            axis = this.createLineAxis(scale, yAxisOption, layer, direction, dim);\n            this.cache.set(axisId, axis);\n            updatedCache.set(axisId, axis);\n          }\n\n          // 2. do grid update\n          let grid = this.cache.get(gridId);\n          // 存在则更新\n          if (grid) {\n            const cfg = this.getLineGridCfg(scale, yAxisOption, direction, dim);\n            omit(cfg, OMIT_CFG);\n            grid.component.update(cfg);\n            updatedCache.set(gridId, grid);\n          } else {\n            // 不存在则创建\n            grid = this.createLineGrid(scale, yAxisOption, layer, direction, dim);\n            if (grid) {\n              this.cache.set(gridId, grid);\n              updatedCache.set(gridId, grid);\n            }\n          }\n        } else if (coordinate.isPolar) {\n          // 1. do axis update\n          let axis = this.cache.get(axisId);\n          // 存在则更新\n          if (axis) {\n            const cfg = coordinate.isTransposed\n              ? this.getCircleAxisCfg(scale, yAxisOption, DIRECTION.CIRCLE)\n              : this.getLineAxisCfg(scale, yAxisOption, DIRECTION.RADIUS);\n\n            // @ts-ignore\n            omit(cfg, OMIT_CFG);\n            axis.component.update(cfg);\n            updatedCache.set(axisId, axis);\n          } else {\n            // 不存在，则创建\n            if (coordinate.isTransposed) {\n              if (isUndefined(yAxisOption)) {\n                return;\n              } else {\n                axis = this.createCircleAxis(scale, yAxisOption, layer, DIRECTION.CIRCLE, dim);\n              }\n            } else {\n              axis = this.createLineAxis(scale, yAxisOption, layer, DIRECTION.RADIUS, dim);\n            }\n\n            this.cache.set(axisId, axis);\n            updatedCache.set(axisId, axis);\n          }\n\n          // 2. do grid update\n          let grid = this.cache.get(gridId);\n          // 存在则更新\n          if (grid) {\n            const cfg = coordinate.isTransposed\n              ? this.getLineGridCfg(scale, yAxisOption, DIRECTION.CIRCLE, dim)\n              : this.getCircleGridCfg(scale, yAxisOption, DIRECTION.RADIUS, dim);\n            omit(cfg, OMIT_CFG);\n            grid.component.update(cfg);\n            updatedCache.set(gridId, grid);\n          } else {\n            // 不存在则创建\n            if (coordinate.isTransposed) {\n              if (isUndefined(yAxisOption)) {\n                return;\n              } else {\n                grid = this.createLineGrid(scale, yAxisOption, layer, DIRECTION.CIRCLE, dim);\n              }\n            } else {\n              grid = this.createCircleGrid(scale, yAxisOption, layer, DIRECTION.RADIUS, dim);\n            }\n\n            if (grid) {\n              this.cache.set(gridId, grid);\n              updatedCache.set(gridId, grid);\n            }\n          }\n        } else {\n          // helix and other, do not draw axis\n        }\n      }\n    });\n  }\n\n  /**\n   * 创建 line axis\n   * @param scale\n   * @param option\n   * @param layer\n   * @param direction\n   * @param dim\n   */\n  private createLineAxis(\n    scale: Scale,\n    option: AxisCfg,\n    layer: LAYER,\n    direction: DIRECTION,\n    dim: string\n  ): ComponentOption {\n    // axis\n    const axis = {\n      component: new LineAxis(this.getLineAxisCfg(scale, option, direction)),\n      layer,\n      direction: direction === DIRECTION.RADIUS ? DIRECTION.NONE : direction,\n      type: COMPONENT_TYPE.AXIS,\n      extra: { dim, scale },\n    };\n    axis.component.set('field', scale.field);\n    axis.component.init();\n\n    return axis;\n  }\n\n  private createLineGrid(\n    scale: Scale,\n    option: AxisCfg,\n    layer: LAYER,\n    direction: DIRECTION,\n    dim: string\n  ): ComponentOption {\n    const cfg = this.getLineGridCfg(scale, option, direction, dim);\n    if (cfg) {\n      const grid = {\n        component: new LineGrid(cfg),\n        layer,\n        direction: DIRECTION.NONE,\n        type: COMPONENT_TYPE.GRID,\n        extra: {\n          dim,\n          scale,\n          alignTick: get(cfg, 'alignTick', true),\n        },\n      };\n      grid.component.init();\n\n      return grid;\n    }\n  }\n\n  private createCircleAxis(\n    scale: Scale,\n    option: AxisCfg,\n    layer: LAYER,\n    direction: DIRECTION,\n    dim: string\n  ): ComponentOption {\n    const axis = {\n      component: new CircleAxis(this.getCircleAxisCfg(scale, option, direction)),\n      layer,\n      direction,\n      type: COMPONENT_TYPE.AXIS,\n      extra: { dim, scale },\n    };\n    axis.component.set('field', scale.field);\n\n    axis.component.init();\n\n    return axis;\n  }\n\n  private createCircleGrid(\n    scale: Scale,\n    option: AxisCfg,\n    layer: LAYER,\n    direction: DIRECTION,\n    dim: string\n  ): ComponentOption {\n    const cfg = this.getCircleGridCfg(scale, option, direction, dim);\n    if (cfg) {\n      const grid = {\n        component: new CircleGrid(cfg),\n        layer,\n        direction: DIRECTION.NONE,\n        type: COMPONENT_TYPE.GRID,\n        extra: {\n          dim,\n          scale,\n          alignTick: get(cfg, 'alignTick', true),\n        },\n      };\n\n      grid.component.init();\n      return grid;\n    }\n  }\n\n  /**\n   * generate line axis cfg\n   * @param scale\n   * @param axisOption\n   * @param direction\n   * @return line axis cfg\n   */\n  private getLineAxisCfg(scale: Scale, axisOption: AxisCfg, direction: DIRECTION) {\n    const container = get(axisOption, ['top']) ? this.axisForeContainer : this.axisContainer;\n    const coordinate = this.view.getCoordinate();\n    const region = getAxisRegion(coordinate, direction);\n    const titleText = getAxisTitleText(scale, axisOption);\n    const axisThemeCfg = getAxisThemeCfg(this.view.getTheme(), direction);\n    // the cfg order should be ensure\n    const optionWithTitle = get(axisOption, ['title'])\n      ? deepMix(\n          { title: { style: { text: titleText } } },\n          { title: getAxisTitleOptions(this.view.getTheme(), direction, axisOption.title) },\n          axisOption\n        )\n      : axisOption;\n\n    const cfg = deepMix(\n      {\n        container,\n        ...region,\n        ticks: scale.getTicks().map((tick) => ({ id: `${tick.tickValue}`, name: tick.text, value: tick.value })),\n        verticalFactor: coordinate.isPolar\n          ? getAxisFactorByRegion(region, coordinate.getCenter()) * -1\n          : getAxisFactorByRegion(region, coordinate.getCenter()),\n        theme: axisThemeCfg,\n      },\n      axisThemeCfg,\n      optionWithTitle\n    );\n    const { animate, animateOption } = this.getAnimateCfg(cfg);\n    cfg.animateOption = animateOption;\n    cfg.animate = animate;\n\n    // 计算 verticalLimitLength\n    const isAxisVertical = isVertical(region);\n    // TODO: 1 / 3 等默认值需要有一个全局的配置的地方\n    const verticalLimitLength = get(cfg, 'verticalLimitLength', isAxisVertical ? 1 / 3 : 1 / 2);\n    if (verticalLimitLength <= 1) {\n      // 配置的相对值，相对于画布\n      const canvasWidth = this.view.getCanvas().get('width');\n      const canvasHeight = this.view.getCanvas().get('height');\n      cfg.verticalLimitLength = verticalLimitLength * (isAxisVertical ? canvasWidth : canvasHeight);\n    }\n\n    return cfg;\n  }\n\n  /**\n   * generate line grid cfg\n   * @param scale\n   * @param axisOption\n   * @param direction\n   * @param dim\n   * @return line grid cfg\n   */\n  private getLineGridCfg(scale: Scale, axisOption: AxisCfg, direction: DIRECTION, dim: string) {\n    if (!showGrid(getAxisThemeCfg(this.view.getTheme(), direction), axisOption)) {\n      return undefined;\n    }\n    const gridThemeCfg = getGridThemeCfg(this.view.getTheme(), direction);\n    // the cfg order should be ensure\n    // grid 动画以 axis 为准\n    const gridCfg = deepMix(\n      {\n        container: get(axisOption, ['top']) ? this.gridForeContainer : this.gridContainer,\n      },\n      gridThemeCfg,\n      get(axisOption, 'grid'),\n      this.getAnimateCfg(axisOption)\n    );\n    gridCfg.items = getLineGridItems(this.view.getCoordinate(), scale, dim, get(gridCfg, 'alignTick', true));\n\n    return gridCfg;\n  }\n\n  /**\n   * generate circle axis cfg\n   * @param scale\n   * @param axisOption\n   * @param direction\n   * @return circle axis cfg\n   */\n  private getCircleAxisCfg(scale: Scale, axisOption: AxisCfg, direction: DIRECTION) {\n    const container = get(axisOption, ['top']) ? this.axisForeContainer : this.axisContainer;\n    const coordinate = this.view.getCoordinate();\n\n    const ticks = scale.getTicks().map((tick) => ({ id: `${tick.tickValue}`, name: tick.text, value: tick.value }));\n    if (!scale.isCategory && Math.abs(coordinate.endAngle - coordinate.startAngle) === Math.PI * 2) {\n      // x 轴对应的值如果是非 cat 类型，在整圆的情况下坐标轴第一个和最后一个文本会重叠，默认只展示第一个文本\n      ticks.pop();\n    }\n\n    const titleText = getAxisTitleText(scale, axisOption);\n    const axisThemeCfg = getAxisThemeCfg(this.view.getTheme(), DIRECTION.CIRCLE);\n    // the cfg order should be ensure\n    const optionWithTitle = get(axisOption, ['title'])\n      ? deepMix(\n          { title: { style: { text: titleText } } },\n          { title: getAxisTitleOptions(this.view.getTheme(), direction, axisOption.title) },\n          axisOption\n        )\n      : axisOption;\n    const cfg = deepMix(\n      {\n        container,\n        ...getCircleAxisCenterRadius(this.view.getCoordinate()),\n        ticks,\n        verticalFactor: 1,\n        theme: axisThemeCfg,\n      },\n      axisThemeCfg,\n      optionWithTitle\n    );\n    const { animate, animateOption } = this.getAnimateCfg(cfg);\n    cfg.animate = animate;\n    cfg.animateOption = animateOption;\n\n    return cfg;\n  }\n\n  /**\n   * generate circle grid cfg\n   * @param scale\n   * @param axisOption\n   * @param direction\n   * @return circle grid cfg\n   */\n  private getCircleGridCfg(scale: Scale, axisOption: AxisCfg, direction: DIRECTION, dim: string) {\n    if (!showGrid(getAxisThemeCfg(this.view.getTheme(), direction), axisOption)) {\n      return undefined;\n    }\n\n    // the cfg order should be ensure\n    // grid 动画以 axis 为准\n    const gridThemeCfg = getGridThemeCfg(this.view.getTheme(), DIRECTION.RADIUS);\n    const gridCfg = deepMix(\n      {\n        container: get(axisOption, ['top']) ? this.gridForeContainer : this.gridContainer,\n        center: this.view.getCoordinate().getCenter(),\n      },\n      gridThemeCfg,\n      get(axisOption, 'grid'),\n      this.getAnimateCfg(axisOption)\n    );\n    const alignTick = get(gridCfg, 'alignTick', true);\n    const verticalScale = dim === 'x' ? this.view.getYScales()[0] : this.view.getXScale();\n    gridCfg.items = getCircleGridItems(this.view.getCoordinate(), verticalScale, scale, alignTick, dim);\n    // the cfg order should be ensure\n    // grid 动画以 axis 为准\n    return gridCfg;\n  }\n\n  private getId(name: string, key: string): string {\n    const coordinate = this.view.getCoordinate();\n    // 坐标系类型也作为组件的 key\n    return `${name}-${key}-${coordinate.type}`;\n  }\n\n  private getAnimateCfg(cfg) {\n    return {\n      animate: this.view.getOptions().animate && get(cfg, 'animate'), // 如果 view 关闭动画，则不执行动画\n      animateOption:\n        cfg && cfg.animateOption ? deepMix({}, AXIS_DEFAULT_ANIMATE_CFG, cfg.animateOption) : AXIS_DEFAULT_ANIMATE_CFG,\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}