{"ast":null,"code":"import { __extends, __read } from \"tslib\";\nimport { each } from '@antv/util';\nimport Action from '../base';\nimport { getDelegationObject, getScaleByField, isList, isSlider } from '../util';\n/**\n * 数据过滤。\n * @ignore\n */\nvar DataFilter = /** @class */function (_super) {\n  __extends(DataFilter, _super);\n  function DataFilter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  DataFilter.prototype.filterView = function (view, field, filter) {\n    var _this = this;\n    // 只有存在这个 scale 时才生效\n    if (view.getScaleByField(field)) {\n      view.filter(field, filter);\n    }\n    if (view.views && view.views.length) {\n      each(view.views, function (subView) {\n        _this.filterView(subView, field, filter);\n      });\n    }\n  };\n  /**\n   * 过滤数据\n   */\n  DataFilter.prototype.filter = function () {\n    var delegateObject = getDelegationObject(this.context);\n    if (delegateObject) {\n      var view = this.context.view;\n      var component = delegateObject.component;\n      var field = component.get('field');\n      // 列表类的组件能够触发\n      if (isList(delegateObject)) {\n        if (field) {\n          var unCheckedItems = component.getItemsByState('unchecked');\n          var scale_1 = getScaleByField(view, field);\n          var names_1 = unCheckedItems.map(function (item) {\n            return item.name;\n          });\n          if (names_1.length) {\n            this.filterView(view, field, function (value) {\n              var text = scale_1.getText(value);\n              return !names_1.includes(text);\n            });\n          } else {\n            this.filterView(view, field, null);\n          }\n          view.render(true);\n        }\n      } else if (isSlider(delegateObject)) {\n        var range = component.getValue();\n        var _a = __read(range, 2),\n          min_1 = _a[0],\n          max_1 = _a[1];\n        this.filterView(view, field, function (value) {\n          return value >= min_1 && value <= max_1;\n        });\n        view.render(true);\n      }\n    }\n  };\n  return DataFilter;\n}(Action);\nexport default DataFilter;","map":{"version":3,"mappings":";AAAA,SAASA,IAAI,QAAQ,YAAY;AAEjC,OAAOC,MAAM,MAAM,SAAS;AAC5B,SAASC,mBAAmB,EAAEC,eAAe,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,SAAS;AAEhF;;;;AAIA;EAAyBC;EAAzB;;EA+CA;EA9CUC,+BAAU,GAAlB,UAAmBC,IAAU,EAAEC,KAAK,EAAEC,MAAM;IAA5C;IACE;IACA,IAAIF,IAAI,CAACL,eAAe,CAACM,KAAK,CAAC,EAAE;MAC/BD,IAAI,CAACE,MAAM,CAACD,KAAK,EAAEC,MAAM,CAAC;;IAE5B,IAAIF,IAAI,CAACG,KAAK,IAAIH,IAAI,CAACG,KAAK,CAACC,MAAM,EAAE;MACnCZ,IAAI,CAACQ,IAAI,CAACG,KAAK,EAAE,UAACE,OAAO;QACvBC,KAAI,CAACC,UAAU,CAACF,OAAO,EAAEJ,KAAK,EAAEC,MAAM,CAAC;MACzC,CAAC,CAAC;;EAEN,CAAC;EACD;;;EAGOH,2BAAM,GAAb;IACE,IAAMS,cAAc,GAAGd,mBAAmB,CAAC,IAAI,CAACe,OAAO,CAAC;IACxD,IAAID,cAAc,EAAE;MAClB,IAAMR,IAAI,GAAG,IAAI,CAACS,OAAO,CAACT,IAAI;MACtB,aAAS,GAAKQ,cAAc,UAAnB;MACjB,IAAMP,KAAK,GAAGS,SAAS,CAACC,GAAG,CAAC,OAAO,CAAC;MACpC;MACA,IAAIf,MAAM,CAACY,cAAc,CAAC,EAAE;QAC1B,IAAIP,KAAK,EAAE;UACT,IAAMW,cAAc,GAAGF,SAAS,CAACG,eAAe,CAAC,WAAW,CAAC;UAC7D,IAAMC,OAAK,GAAGnB,eAAe,CAACK,IAAI,EAAEC,KAAK,CAAC;UAC1C,IAAMc,OAAK,GAAaH,cAAc,CAACI,GAAG,CAAC,UAACC,IAAI;YAAK,WAAI,CAACC,IAAI;UAAT,CAAS,CAAC;UAC/D,IAAIH,OAAK,CAACX,MAAM,EAAE;YAChB,IAAI,CAACG,UAAU,CAACP,IAAI,EAAEC,KAAK,EAAE,UAACkB,KAAK;cACjC,IAAMC,IAAI,GAAGN,OAAK,CAACO,OAAO,CAACF,KAAK,CAAC;cACjC,OAAO,CAACJ,OAAK,CAACO,QAAQ,CAACF,IAAI,CAAC;YAC9B,CAAC,CAAC;WACH,MAAM;YACL,IAAI,CAACb,UAAU,CAACP,IAAI,EAAEC,KAAK,EAAE,IAAI,CAAC;;UAEpCD,IAAI,CAACuB,MAAM,CAAC,IAAI,CAAC;;OAEpB,MAAM,IAAI1B,QAAQ,CAACW,cAAc,CAAC,EAAE;QACnC,IAAMgB,KAAK,GAAGd,SAAS,CAACe,QAAQ,EAAE;QAC5B,gBAAaD,KAAK;UAAjBE,KAAG;UAAEC,KAAG,QAAS;QACxB,IAAI,CAACpB,UAAU,CAACP,IAAI,EAAEC,KAAK,EAAE,UAACkB,KAAK;UACjC,OAAOA,KAAK,IAAIO,KAAG,IAAIP,KAAK,IAAIQ,KAAG;QACrC,CAAC,CAAC;QACF3B,IAAI,CAACuB,MAAM,CAAC,IAAI,CAAC;;;EAGvB,CAAC;EACH,iBAAC;AAAD,CAAC,CA/CwB9B,MAAM;AAiD/B,eAAeM,UAAU","names":["each","Action","getDelegationObject","getScaleByField","isList","isSlider","__extends","DataFilter","view","field","filter","views","length","subView","_this","filterView","delegateObject","context","component","get","unCheckedItems","getItemsByState","scale_1","names_1","map","item","name","value","text","getText","includes","render","range","getValue","min_1","max_1"],"sources":["/home/iam/Documents/network/node_modules/@antv/g2/src/interaction/action/data/filter.ts"],"sourcesContent":["import { each } from '@antv/util';\nimport { View } from 'src/chart';\nimport Action from '../base';\nimport { getDelegationObject, getScaleByField, isList, isSlider } from '../util';\n\n/**\n * 数据过滤。\n * @ignore\n */\nclass DataFilter extends Action {\n  private filterView(view: View, field, filter) {\n    // 只有存在这个 scale 时才生效\n    if (view.getScaleByField(field)) {\n      view.filter(field, filter);\n    }\n    if (view.views && view.views.length) {\n      each(view.views, (subView) => {\n        this.filterView(subView, field, filter);\n      });\n    }\n  }\n  /**\n   * 过滤数据\n   */\n  public filter() {\n    const delegateObject = getDelegationObject(this.context);\n    if (delegateObject) {\n      const view = this.context.view;\n      const { component } = delegateObject;\n      const field = component.get('field');\n      // 列表类的组件能够触发\n      if (isList(delegateObject)) {\n        if (field) {\n          const unCheckedItems = component.getItemsByState('unchecked');\n          const scale = getScaleByField(view, field);\n          const names: string[] = unCheckedItems.map((item) => item.name);\n          if (names.length) {\n            this.filterView(view, field, (value) => {\n              const text = scale.getText(value);\n              return !names.includes(text);\n            });\n          } else {\n            this.filterView(view, field, null);\n          }\n          view.render(true);\n        }\n      } else if (isSlider(delegateObject)) {\n        const range = component.getValue();\n        const [min, max] = range;\n        this.filterView(view, field, (value) => {\n          return value >= min && value <= max;\n        });\n        view.render(true);\n      }\n    }\n  }\n}\n\nexport default DataFilter;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}