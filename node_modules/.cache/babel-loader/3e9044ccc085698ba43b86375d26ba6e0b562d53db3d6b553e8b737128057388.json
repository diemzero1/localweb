{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar barycenter = function (g, movable) {\n  return movable.map(function (v) {\n    var inV = g.inEdges(v);\n    if (!(inV === null || inV === void 0 ? void 0 : inV.length)) {\n      return {\n        v: v\n      };\n    }\n    {\n      var result_1 = {\n        sum: 0,\n        weight: 0\n      };\n      inV === null || inV === void 0 ? void 0 : inV.forEach(function (e) {\n        var edge = g.edge(e);\n        var nodeU = g.node(e.v);\n        result_1.sum += edge.weight * nodeU.order;\n        result_1.weight += edge.weight;\n      });\n      return {\n        v: v,\n        barycenter: result_1.sum / result_1.weight,\n        weight: result_1.weight\n      };\n    }\n  });\n};\nexports.default = barycenter;","map":{"version":3,"mappings":";;;;;AAEA,IAAMA,UAAU,GAAG,UAACC,CAAQ,EAAEC,OAAiB;EAC7C,OAAOA,OAAO,CAACC,GAAG,CAAC,UAACC,CAAC;IACnB,IAAMC,GAAG,GAAGJ,CAAC,CAACK,OAAO,CAACF,CAAC,CAAC;IACxB,IAAI,EAACC,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEE,MAAM,GAAE;MAChB,OAAO;QAAEH,CAAC;MAAA,CAAE;;IACX;MACD,IAAMI,QAAM,GAAG;QAAEC,GAAG,EAAE,CAAC;QAAEC,MAAM,EAAE;MAAC,CAAE;MACpCL,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEM,OAAO,CAAC,UAACC,CAAC;QACb,IAAMC,IAAI,GAAGZ,CAAC,CAACY,IAAI,CAACD,CAAC,CAAE;QACvB,IAAME,KAAK,GAAGb,CAAC,CAACc,IAAI,CAACH,CAAC,CAACR,CAAC,CAAE;QAC1BI,QAAM,CAACC,GAAG,IAAKI,IAAI,CAACH,MAAO,GAAII,KAAK,CAACE,KAAiB;QACtDR,QAAM,CAACE,MAAM,IAAIG,IAAI,CAACH,MAAO;MAC/B,CAAC,CAAC;MACF,OAAO;QACLN,CAAC;QACDJ,UAAU,EAAEQ,QAAM,CAACC,GAAG,GAAGD,QAAM,CAACE,MAAM;QACtCA,MAAM,EAAEF,QAAM,CAACE;OAChB;;EAEL,CAAC,CAAC;AACJ,CAAC;AAEDO,kBAAejB,UAAU","names":["barycenter","g","movable","map","v","inV","inEdges","length","result_1","sum","weight","forEach","e","edge","nodeU","node","order","exports"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/layout/src/layout/dagre/src/order/barycenter.ts"],"sourcesContent":["import { Graph } from \"../../graph\";\n\nconst barycenter = (g: Graph, movable: string[]) => {\n  return movable.map((v) => {\n    const inV = g.inEdges(v);\n    if (!inV?.length) {\n      return { v };\n    }  {\n      const result = { sum: 0, weight: 0 };\n      inV?.forEach((e) => {\n        const edge = g.edge(e)!;\n        const nodeU = g.node(e.v)!;\n        result.sum += (edge.weight! * (nodeU.order as number));\n        result.weight += edge.weight!;\n      });\n      return {\n        v,\n        barycenter: result.sum / result.weight,\n        weight: result.weight\n      };\n    }\n  });\n};\n\nexport default barycenter;\n\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}