{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Action, registerAction, registerInteraction } from '@antv/g2';\nimport { each, get, isArray, map } from '@antv/util';\nimport { getAllElements, getSiblingViews, getViews } from '../../../utils';\nimport { clearHighlight, getElementValue } from './utils';\n/**\n * 存在多个 view 时，view 之间的联动交互\n *\n * 提供四个反馈 action，均接受参数：linkField 关联字段，dim 维度\n * 1. showTooltip\n * 2. active\n * 3. highlight\n * 4. selected\n *\n * 附加，两个结束反馈 action：\n * 1. hidetooltip\n * 2. reset 清除激活和高亮状态\n */\nvar Association = /** @class */function (_super) {\n  __extends(Association, _super);\n  function Association() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * 获取关联的 elements\n   *\n   * - 如果 dim 参数存在，根据 dim 获取相应的 field。与 linkField 不匹配则 return\n   * - 否则 dim 参数不存在，且 linkField 存在，则作为关联字段\n   * - 否则若 linkField 不存在，则获取第一个分类字段\n   * @returns EventItem[]\n   */\n  Association.prototype.getAssociationItems = function (views, params) {\n    var _a;\n    var event = this.context.event;\n    var _b = params || {},\n      linkField = _b.linkField,\n      dim = _b.dim;\n    var items = [];\n    if ((_a = event.data) === null || _a === void 0 ? void 0 : _a.data) {\n      var data_1 = event.data.data;\n      each(views, function (v) {\n        var _a, _b;\n        var field = linkField;\n        if (dim === 'x') {\n          field = v.getXScale().field;\n        } else if (dim === 'y') {\n          field = (_a = v.getYScales().find(function (s) {\n            return s.field === field;\n          })) === null || _a === void 0 ? void 0 : _a.field;\n        } else if (!field) {\n          field = (_b = v.getGroupScales()[0]) === null || _b === void 0 ? void 0 : _b.field;\n        }\n        if (!field) {\n          return;\n        }\n        var elements = map(getAllElements(v), function (ele) {\n          var active = false;\n          var inactive = false;\n          var dataValue = isArray(data_1) ? get(data_1[0], field) : get(data_1, field);\n          if (getElementValue(ele, field) === dataValue) {\n            active = true;\n          } else {\n            inactive = true;\n          }\n          return {\n            element: ele,\n            view: v,\n            active: active,\n            inactive: inactive\n          };\n        });\n        items.push.apply(items, elements);\n      });\n    }\n    return items;\n  };\n  /**\n   * 所有同一层级的 tooltip 显示\n   */\n  Association.prototype.showTooltip = function (params) {\n    var siblings = getSiblingViews(this.context.view);\n    var elements = this.getAssociationItems(siblings, params);\n    each(elements, function (ele) {\n      if (ele.active) {\n        var box = ele.element.shape.getCanvasBBox();\n        ele.view.showTooltip({\n          x: box.minX + box.width / 2,\n          y: box.minY + box.height / 2\n        });\n      }\n    });\n  };\n  /**\n   * 隐藏同一层级的 tooltip\n   */\n  Association.prototype.hideTooltip = function () {\n    var siblings = getSiblingViews(this.context.view);\n    each(siblings, function (sibling) {\n      sibling.hideTooltip();\n    });\n  };\n  /**\n   * 设置 active 状态\n   */\n  Association.prototype.active = function (params) {\n    var views = getViews(this.context.view);\n    var items = this.getAssociationItems(views, params);\n    each(items, function (item) {\n      var active = item.active,\n        element = item.element;\n      if (active) {\n        element.setState('active', true);\n      }\n    });\n  };\n  /**\n   * 设置 selected 状态\n   */\n  Association.prototype.selected = function (params) {\n    var views = getViews(this.context.view);\n    var items = this.getAssociationItems(views, params);\n    each(items, function (item) {\n      var active = item.active,\n        element = item.element;\n      if (active) {\n        element.setState('selected', true);\n      }\n    });\n  };\n  /**\n   * 进行高亮 => 设置 inactive 状态\n   */\n  Association.prototype.highlight = function (params) {\n    var views = getViews(this.context.view);\n    var items = this.getAssociationItems(views, params);\n    each(items, function (item) {\n      var inactive = item.inactive,\n        element = item.element;\n      if (inactive) {\n        element.setState('inactive', true);\n      }\n    });\n  };\n  Association.prototype.reset = function () {\n    var views = getViews(this.context.view);\n    each(views, function (v) {\n      clearHighlight(v);\n    });\n  };\n  return Association;\n}(Action);\nregisterAction('association', Association);\n/**\n * 相邻 view 的 active 联动（相同维值的 tooltip 联动）\n */\nregisterInteraction('association-active', {\n  start: [{\n    trigger: 'element:mouseenter',\n    action: 'association:active'\n  }],\n  end: [{\n    trigger: 'element:mouseleave',\n    action: 'association:reset'\n  }]\n});\n/**\n * 相邻 view 的 active 联动（相同维值的 tooltip 联动）\n */\nregisterInteraction('association-selected', {\n  start: [{\n    trigger: 'element:mouseenter',\n    action: 'association:selected'\n  }],\n  end: [{\n    trigger: 'element:mouseleave',\n    action: 'association:reset'\n  }]\n});\n/**\n * 相邻 view 的 highlight 联动, 突出当前 element\n */\nregisterInteraction('association-highlight', {\n  start: [{\n    trigger: 'element:mouseenter',\n    action: 'association:highlight'\n  }],\n  end: [{\n    trigger: 'element:mouseleave',\n    action: 'association:reset'\n  }]\n});\n/**\n * 相邻 view 的 tooltip 联动，根据 groupField 进行关联（相同维值的 tooltip 联动）\n */\nregisterInteraction('association-tooltip', {\n  start: [{\n    trigger: 'element:mousemove',\n    action: 'association:showTooltip'\n  }],\n  end: [{\n    trigger: 'element:mouseleave',\n    action: 'association:hideTooltip'\n  }]\n});","map":{"version":3,"mappings":"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","names":["Action","registerAction","registerInteraction","each","get","isArray","map","getAllElements","getSiblingViews","getViews","clearHighlight","getElementValue","__extends","Association","views","params","context","linkField","dim","items","event","data","v","field","getXScale","getYScales","find","s","getGroupScales","elements","ele","active","inactive","dataValue","data_1","element","view","push","siblings","getAssociationItems","box","shape","getCanvasBBox","showTooltip","x","minX","width","y","minY","height","sibling","hideTooltip","item","setState","start","trigger","action","end"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/g2plot/src/plots/mix/interactions/association.ts"],"sourcesContent":["import { Action, Element, registerAction, registerInteraction, View } from '@antv/g2';\nimport { each, get, isArray, map } from '@antv/util';\nimport { getAllElements, getSiblingViews, getViews } from '../../../utils';\nimport { clearHighlight, getElementValue } from './utils';\n\ntype EventItem = { element: Element; view: View; active: boolean; inactive: boolean };\ntype ActionParams = { linkField?: string; dim?: 'x' | 'y' };\n/**\n * 存在多个 view 时，view 之间的联动交互\n *\n * 提供四个反馈 action，均接受参数：linkField 关联字段，dim 维度\n * 1. showTooltip\n * 2. active\n * 3. highlight\n * 4. selected\n *\n * 附加，两个结束反馈 action：\n * 1. hidetooltip\n * 2. reset 清除激活和高亮状态\n */\nclass Association extends Action {\n  /**\n   * 获取关联的 elements\n   *\n   * - 如果 dim 参数存在，根据 dim 获取相应的 field。与 linkField 不匹配则 return\n   * - 否则 dim 参数不存在，且 linkField 存在，则作为关联字段\n   * - 否则若 linkField 不存在，则获取第一个分类字段\n   * @returns EventItem[]\n   */\n  private getAssociationItems(views: View[], params?: ActionParams): EventItem[] {\n    const { event } = this.context;\n    const { linkField, dim } = params || {};\n\n    const items = [];\n\n    if (event.data?.data) {\n      const { data } = event.data;\n      each(views, (v: View) => {\n        let field = linkField;\n        if (dim === 'x') {\n          field = v.getXScale().field;\n        } else if (dim === 'y') {\n          field = v.getYScales().find((s) => s.field === field)?.field;\n        } else if (!field) {\n          field = v.getGroupScales()[0]?.field;\n        }\n        if (!field) {\n          return;\n        }\n        const elements = map(getAllElements(v), (ele) => {\n          let active = false;\n          let inactive = false;\n          const dataValue = isArray(data) ? get(data[0], field) : get(data, field);\n          if (getElementValue(ele, field) === dataValue) {\n            active = true;\n          } else {\n            inactive = true;\n          }\n          return { element: ele, view: v, active, inactive };\n        });\n        items.push(...elements);\n      });\n    }\n\n    return items;\n  }\n\n  /**\n   * 所有同一层级的 tooltip 显示\n   */\n  public showTooltip(params?: ActionParams) {\n    const siblings = getSiblingViews(this.context.view);\n    const elements = this.getAssociationItems(siblings, params);\n\n    each(elements, (ele) => {\n      if (ele.active) {\n        const box = ele.element.shape.getCanvasBBox();\n        ele.view.showTooltip({ x: box.minX + box.width / 2, y: box.minY + box.height / 2 });\n      }\n    });\n  }\n\n  /**\n   * 隐藏同一层级的 tooltip\n   */\n  public hideTooltip() {\n    const siblings = getSiblingViews(this.context.view);\n    each(siblings, (sibling) => {\n      sibling.hideTooltip();\n    });\n  }\n\n  /**\n   * 设置 active 状态\n   */\n  public active(params?: ActionParams) {\n    const views = getViews(this.context.view);\n    const items = this.getAssociationItems(views, params);\n\n    each(items, (item: EventItem) => {\n      const { active, element } = item;\n      if (active) {\n        element.setState('active', true);\n      }\n    });\n  }\n\n  /**\n   * 设置 selected 状态\n   */\n  public selected(params?: ActionParams) {\n    const views = getViews(this.context.view);\n    const items = this.getAssociationItems(views, params);\n\n    each(items, (item: EventItem) => {\n      const { active, element } = item;\n      if (active) {\n        element.setState('selected', true);\n      }\n    });\n  }\n\n  /**\n   * 进行高亮 => 设置 inactive 状态\n   */\n  public highlight(params?: ActionParams) {\n    const views = getViews(this.context.view);\n    const items = this.getAssociationItems(views, params);\n\n    each(items, (item: EventItem) => {\n      const { inactive, element } = item;\n      if (inactive) {\n        element.setState('inactive', true);\n      }\n    });\n  }\n\n  public reset() {\n    const views = getViews(this.context.view);\n    each(views, (v) => {\n      clearHighlight(v);\n    });\n  }\n}\n\nregisterAction('association', Association);\n\n/**\n * 相邻 view 的 active 联动（相同维值的 tooltip 联动）\n */\nregisterInteraction('association-active', {\n  start: [{ trigger: 'element:mouseenter', action: 'association:active' }],\n  end: [{ trigger: 'element:mouseleave', action: 'association:reset' }],\n});\n\n/**\n * 相邻 view 的 active 联动（相同维值的 tooltip 联动）\n */\nregisterInteraction('association-selected', {\n  start: [{ trigger: 'element:mouseenter', action: 'association:selected' }],\n  end: [{ trigger: 'element:mouseleave', action: 'association:reset' }],\n});\n\n/**\n * 相邻 view 的 highlight 联动, 突出当前 element\n */\nregisterInteraction('association-highlight', {\n  start: [{ trigger: 'element:mouseenter', action: 'association:highlight' }],\n  end: [{ trigger: 'element:mouseleave', action: 'association:reset' }],\n});\n\n/**\n * 相邻 view 的 tooltip 联动，根据 groupField 进行关联（相同维值的 tooltip 联动）\n */\nregisterInteraction('association-tooltip', {\n  start: [{ trigger: 'element:mousemove', action: 'association:showTooltip' }],\n  end: [{ trigger: 'element:mouseleave', action: 'association:hideTooltip' }],\n});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}