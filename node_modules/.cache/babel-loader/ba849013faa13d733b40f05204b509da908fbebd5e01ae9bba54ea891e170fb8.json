{"ast":null,"code":"import { __assign } from \"tslib\";\nexport function getScaleMax(maxAngle, yField, data) {\n  var yData = data.map(function (item) {\n    return item[yField];\n  }).filter(function (v) {\n    return v !== undefined;\n  });\n  var maxValue = yData.length > 0 ? Math.max.apply(Math, yData) : 0;\n  var formatRadian = Math.abs(maxAngle) % 360;\n  if (!formatRadian) {\n    return maxValue;\n  }\n  return maxValue * 360 / formatRadian;\n}\n/**\n * 获取堆叠之后的数据\n */\nexport function getStackedData(data, xField, yField) {\n  var stackedData = [];\n  data.forEach(function (item) {\n    var valueItem = stackedData.find(function (v) {\n      return v[xField] === item[xField];\n    });\n    if (valueItem) {\n      valueItem[yField] += item[yField] || null;\n    } else {\n      stackedData.push(__assign({}, item));\n    }\n  });\n  return stackedData;\n}","map":{"version":3,"mappings":";AAEA,OAAM,SAAUA,WAAW,CAACC,QAAgB,EAAEC,MAAc,EAAEC,IAAU;EACtE,IAAMC,KAAK,GAAGD,IAAI,CAACE,GAAG,CAAC,UAACC,IAAI;IAAK,WAAI,CAACJ,MAAM,CAAC;EAAZ,CAAY,CAAC,CAACK,MAAM,CAAC,UAACC,CAAC;IAAK,QAAC,KAAKC,SAAS;EAAf,CAAe,CAAC;EAC7E,IAAMC,QAAQ,GAAGN,KAAK,CAACO,MAAM,GAAG,CAAC,GAAGC,IAAI,CAACC,GAAG,OAARD,IAAI,EAAQR,KAAK,IAAI,CAAC;EAC1D,IAAMU,YAAY,GAAGF,IAAI,CAACG,GAAG,CAACd,QAAQ,CAAC,GAAG,GAAG;EAC7C,IAAI,CAACa,YAAY,EAAE;IACjB,OAAOJ,QAAQ;;EAEjB,OAAQA,QAAQ,GAAG,GAAG,GAAII,YAAY;AACxC;AAEA;;;AAGA,OAAM,SAAUE,cAAc,CAACb,IAAU,EAAEc,MAAc,EAAEf,MAAc;EACvE,IAAMgB,WAAW,GAAS,EAAE;EAC5Bf,IAAI,CAACgB,OAAO,CAAC,UAACb,IAAI;IAChB,IAAMc,SAAS,GAAGF,WAAW,CAACG,IAAI,CAAC,UAACb,CAAC;MAAK,QAAC,CAACS,MAAM,CAAC,KAAKX,IAAI,CAACW,MAAM,CAAC;IAA1B,CAA0B,CAAC;IACrE,IAAIG,SAAS,EAAE;MACbA,SAAS,CAAClB,MAAM,CAAC,IAAII,IAAI,CAACJ,MAAM,CAAC,IAAI,IAAI;KAC1C,MAAM;MACLgB,WAAW,CAACI,IAAI,cAAMhB,IAAI,EAAG;;EAEjC,CAAC,CAAC;EACF,OAAOY,WAAW;AACpB","names":["getScaleMax","maxAngle","yField","data","yData","map","item","filter","v","undefined","maxValue","length","Math","max","formatRadian","abs","getStackedData","xField","stackedData","forEach","valueItem","find","push"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/g2plot/src/plots/radial-bar/utils.ts"],"sourcesContent":["import { Data } from '../../types';\n\nexport function getScaleMax(maxAngle: number, yField: string, data: Data): number {\n  const yData = data.map((item) => item[yField]).filter((v) => v !== undefined);\n  const maxValue = yData.length > 0 ? Math.max(...yData) : 0;\n  const formatRadian = Math.abs(maxAngle) % 360;\n  if (!formatRadian) {\n    return maxValue;\n  }\n  return (maxValue * 360) / formatRadian;\n}\n\n/**\n * 获取堆叠之后的数据\n */\nexport function getStackedData(data: Data, xField: string, yField: string) {\n  const stackedData: Data = [];\n  data.forEach((item) => {\n    const valueItem = stackedData.find((v) => v[xField] === item[xField]);\n    if (valueItem) {\n      valueItem[yField] += item[yField] || null;\n    } else {\n      stackedData.push({ ...item });\n    }\n  });\n  return stackedData;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}