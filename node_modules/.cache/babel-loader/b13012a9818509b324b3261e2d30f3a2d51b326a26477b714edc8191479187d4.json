{"ast":null,"code":"import { deepAssign } from '../../utils';\nimport { drawBackground, getPixelRatio, getSymbolsPosition, getUnitPatternSize, initCanvas, transformMatrix } from './util';\n/**\n * squarePattern 的 默认配置\n */\nexport var defaultSquarePatternCfg = {\n  size: 6,\n  padding: 1,\n  isStagger: true,\n  backgroundColor: 'transparent',\n  opacity: 1,\n  rotation: 0,\n  fill: '#fff',\n  fillOpacity: 0.5,\n  stroke: 'transparent',\n  lineWidth: 0\n};\n/**\n * 绘制square\n *\n * @param context canvasContext\n * @param cfg squarePattern 的配置\n * @param x和y square的中心位置\n */\nexport function drawSquare(context, cfg, x, y) {\n  var stroke = cfg.stroke,\n    size = cfg.size,\n    fill = cfg.fill,\n    lineWidth = cfg.lineWidth,\n    fillOpacity = cfg.fillOpacity;\n  context.globalAlpha = fillOpacity;\n  context.strokeStyle = stroke;\n  context.lineWidth = lineWidth;\n  context.fillStyle = fill;\n  // 因为正方形绘制从左上角开始，所以x，y做个偏移\n  context.strokeRect(x - size / 2, y - size / 2, size, size);\n  context.fillRect(x - size / 2, y - size / 2, size, size);\n}\n/**\n * 创建 squarePattern\n */\nexport function createSquarePattern(cfg) {\n  var squareCfg = deepAssign({}, defaultSquarePatternCfg, cfg);\n  var size = squareCfg.size,\n    padding = squareCfg.padding,\n    isStagger = squareCfg.isStagger,\n    rotation = squareCfg.rotation;\n  // 计算 画布大小，squares的位置\n  var unitSize = getUnitPatternSize(size, padding, isStagger);\n  var squares = getSymbolsPosition(unitSize, isStagger); // 计算方法与 dots 一样\n  // 初始化 patternCanvas\n  var canvas = initCanvas(unitSize, unitSize);\n  var ctx = canvas.getContext('2d');\n  // 绘制 background，squares\n  drawBackground(ctx, squareCfg, unitSize);\n  for (var _i = 0, squares_1 = squares; _i < squares_1.length; _i++) {\n    var _a = squares_1[_i],\n      x = _a[0],\n      y = _a[1];\n    drawSquare(ctx, squareCfg, x, y);\n  }\n  var pattern = ctx.createPattern(canvas, 'repeat');\n  if (pattern) {\n    var dpr = getPixelRatio();\n    var matrix = transformMatrix(dpr, rotation);\n    pattern.setTransform(matrix);\n  }\n  return pattern;\n}","map":{"version":3,"mappings":"AACA,SAASA,UAAU,QAAQ,aAAa;AACxC,SACEC,cAAc,EACdC,aAAa,EACbC,kBAAkB,EAClBC,kBAAkB,EAClBC,UAAU,EACVC,eAAe,QACV,QAAQ;AAEf;;;AAGA,OAAO,IAAMC,uBAAuB,GAAG;EACrCC,IAAI,EAAE,CAAC;EACPC,OAAO,EAAE,CAAC;EACVC,SAAS,EAAE,IAAI;EACfC,eAAe,EAAE,aAAa;EAC9BC,OAAO,EAAE,CAAC;EACVC,QAAQ,EAAE,CAAC;EACXC,IAAI,EAAE,MAAM;EACZC,WAAW,EAAE,GAAG;EAChBC,MAAM,EAAE,aAAa;EACrBC,SAAS,EAAE;CACZ;AAED;;;;;;;AAOA,OAAM,SAAUC,UAAU,CAACC,OAAiC,EAAEC,GAAqB,EAAEC,CAAS,EAAEC,CAAS;EAC/F,UAAM,GAAyCF,GAAG,OAA5C;IAAEZ,IAAI,GAAmCY,GAAG,KAAtC;IAAEN,IAAI,GAA6BM,GAAG,KAAhC;IAAEH,SAAS,GAAkBG,GAAG,UAArB;IAAEL,WAAW,GAAKK,GAAG,YAAR;EAElDD,OAAO,CAACI,WAAW,GAAGR,WAAW;EACjCI,OAAO,CAACK,WAAW,GAAGR,MAAM;EAC5BG,OAAO,CAACF,SAAS,GAAGA,SAAS;EAC7BE,OAAO,CAACM,SAAS,GAAGX,IAAI;EACxB;EACAK,OAAO,CAACO,UAAU,CAACL,CAAC,GAAGb,IAAI,GAAG,CAAC,EAAEc,CAAC,GAAGd,IAAI,GAAG,CAAC,EAAEA,IAAI,EAAEA,IAAI,CAAC;EAC1DW,OAAO,CAACQ,QAAQ,CAACN,CAAC,GAAGb,IAAI,GAAG,CAAC,EAAEc,CAAC,GAAGd,IAAI,GAAG,CAAC,EAAEA,IAAI,EAAEA,IAAI,CAAC;AAC1D;AAEA;;;AAGA,OAAM,SAAUoB,mBAAmB,CAACR,GAAsB;EACxD,IAAMS,SAAS,GAAG7B,UAAU,CAAC,EAAE,EAAEO,uBAAuB,EAAEa,GAAG,CAAC;EAEtD,QAAI,GAAmCS,SAAS,KAA5C;IAAEpB,OAAO,GAA0BoB,SAAS,QAAnC;IAAEnB,SAAS,GAAemB,SAAS,UAAxB;IAAEhB,QAAQ,GAAKgB,SAAS,SAAd;EAE1C;EACA,IAAMC,QAAQ,GAAG1B,kBAAkB,CAACI,IAAI,EAAEC,OAAO,EAAEC,SAAS,CAAC;EAC7D,IAAMqB,OAAO,GAAG5B,kBAAkB,CAAC2B,QAAQ,EAAEpB,SAAS,CAAC,CAAC,CAAC;EAEzD;EACA,IAAMsB,MAAM,GAAG3B,UAAU,CAACyB,QAAQ,EAAEA,QAAQ,CAAC;EAC7C,IAAMG,GAAG,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;EAEnC;EACAjC,cAAc,CAACgC,GAAG,EAAEJ,SAAS,EAAEC,QAAQ,CAAC;EACxC,KAAqB,UAAO,EAAPK,mBAAO,EAAPC,qBAAO,EAAPA,IAAO,EAAE;IAAnB,sBAAM;MAALf,CAAC;MAAEC,CAAC;IACdJ,UAAU,CAACe,GAAG,EAAEJ,SAAS,EAAER,CAAC,EAAEC,CAAC,CAAC;;EAGlC,IAAMe,OAAO,GAAGJ,GAAG,CAACK,aAAa,CAACN,MAAM,EAAE,QAAQ,CAAC;EAEnD,IAAIK,OAAO,EAAE;IACX,IAAME,GAAG,GAAGrC,aAAa,EAAE;IAC3B,IAAMsC,MAAM,GAAGlC,eAAe,CAACiC,GAAG,EAAE1B,QAAQ,CAAC;IAC7CwB,OAAO,CAACI,YAAY,CAACD,MAAM,CAAC;;EAG9B,OAAOH,OAAO;AAChB","names":["deepAssign","drawBackground","getPixelRatio","getSymbolsPosition","getUnitPatternSize","initCanvas","transformMatrix","defaultSquarePatternCfg","size","padding","isStagger","backgroundColor","opacity","rotation","fill","fillOpacity","stroke","lineWidth","drawSquare","context","cfg","x","y","globalAlpha","strokeStyle","fillStyle","strokeRect","fillRect","createSquarePattern","squareCfg","unitSize","squares","canvas","ctx","getContext","squares_1","_i","pattern","createPattern","dpr","matrix","setTransform"],"sources":["/home/iam/Documents/network/node_modules/@antv/g2plot/src/utils/pattern/square.ts"],"sourcesContent":["import { SquarePatternCfg } from '../../types/pattern';\nimport { deepAssign } from '../../utils';\nimport {\n  drawBackground,\n  getPixelRatio,\n  getSymbolsPosition,\n  getUnitPatternSize,\n  initCanvas,\n  transformMatrix,\n} from './util';\n\n/**\n * squarePattern 的 默认配置\n */\nexport const defaultSquarePatternCfg = {\n  size: 6,\n  padding: 1,\n  isStagger: true,\n  backgroundColor: 'transparent',\n  opacity: 1,\n  rotation: 0,\n  fill: '#fff',\n  fillOpacity: 0.5,\n  stroke: 'transparent',\n  lineWidth: 0,\n};\n\n/**\n * 绘制square\n *\n * @param context canvasContext\n * @param cfg squarePattern 的配置\n * @param x和y square的中心位置\n */\nexport function drawSquare(context: CanvasRenderingContext2D, cfg: SquarePatternCfg, x: number, y: number) {\n  const { stroke, size, fill, lineWidth, fillOpacity } = cfg;\n\n  context.globalAlpha = fillOpacity;\n  context.strokeStyle = stroke;\n  context.lineWidth = lineWidth;\n  context.fillStyle = fill;\n  // 因为正方形绘制从左上角开始，所以x，y做个偏移\n  context.strokeRect(x - size / 2, y - size / 2, size, size);\n  context.fillRect(x - size / 2, y - size / 2, size, size);\n}\n\n/**\n * 创建 squarePattern\n */\nexport function createSquarePattern(cfg?: SquarePatternCfg): CanvasPattern {\n  const squareCfg = deepAssign({}, defaultSquarePatternCfg, cfg);\n\n  const { size, padding, isStagger, rotation } = squareCfg;\n\n  // 计算 画布大小，squares的位置\n  const unitSize = getUnitPatternSize(size, padding, isStagger);\n  const squares = getSymbolsPosition(unitSize, isStagger); // 计算方法与 dots 一样\n\n  // 初始化 patternCanvas\n  const canvas = initCanvas(unitSize, unitSize);\n  const ctx = canvas.getContext('2d');\n\n  // 绘制 background，squares\n  drawBackground(ctx, squareCfg, unitSize);\n  for (const [x, y] of squares) {\n    drawSquare(ctx, squareCfg, x, y);\n  }\n\n  const pattern = ctx.createPattern(canvas, 'repeat');\n\n  if (pattern) {\n    const dpr = getPixelRatio();\n    const matrix = transformMatrix(dpr, rotation);\n    pattern.setTransform(matrix);\n  }\n\n  return pattern;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}