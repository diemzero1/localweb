{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { uniq } from '@antv/util';\nimport { theme } from '../../adaptor/common';\nimport { edge, polygon } from '../../adaptor/geometries';\nimport { deepAssign, findViewById, flow } from '../../utils';\nimport { addViewAnimation } from '../../utils/view';\nimport { COLOR_FIELD, EDGES_VIEW_ID, NODES_VIEW_ID, X_FIELD, Y_FIELD } from './constant';\nimport { transformToViewsData } from './helper';\n/**\n * 默认配置项 处理\n * @param params\n */\nfunction defaultOptions(params) {\n  var options = params.options;\n  var _a = options.rawFields,\n    rawFields = _a === void 0 ? [] : _a;\n  return deepAssign({}, {\n    options: {\n      tooltip: {\n        fields: uniq(__spreadArrays(['name', 'source', 'target', 'value', 'isNode'], rawFields))\n      },\n      label: {\n        fields: uniq(__spreadArrays(['x', 'name'], rawFields))\n      }\n    }\n  }, params);\n}\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var color = options.color,\n    nodeStyle = options.nodeStyle,\n    edgeStyle = options.edgeStyle,\n    label = options.label,\n    tooltip = options.tooltip,\n    nodeState = options.nodeState,\n    edgeState = options.edgeState;\n  // 1. 组件，优先设置，因为子 view 会继承配置\n  chart.legend(false);\n  chart.tooltip(tooltip);\n  chart.axis(false);\n  // y 镜像一下，防止图形顺序和数据顺序反了\n  chart.coordinate().reflect('y');\n  // 2. node edge views\n  // @ts-ignore\n  var _a = transformToViewsData(options, chart.width, chart.height),\n    nodes = _a.nodes,\n    edges = _a.edges;\n  // edge view\n  var edgeView = chart.createView({\n    id: EDGES_VIEW_ID\n  });\n  edgeView.data(edges);\n  edge({\n    chart: edgeView,\n    // @ts-ignore\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: COLOR_FIELD,\n      edge: {\n        color: color,\n        style: edgeStyle,\n        shape: 'arc'\n      },\n      tooltip: tooltip,\n      state: edgeState\n    }\n  });\n  var nodeView = chart.createView({\n    id: NODES_VIEW_ID\n  });\n  nodeView.data(nodes);\n  polygon({\n    chart: nodeView,\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: COLOR_FIELD,\n      polygon: {\n        color: color,\n        style: nodeStyle\n      },\n      label: label,\n      tooltip: tooltip,\n      state: nodeState\n    }\n  });\n  chart.interaction('element-active');\n  // scale\n  chart.scale({\n    x: {\n      sync: true,\n      nice: true,\n      min: 0,\n      max: 1,\n      minLimit: 0,\n      maxLimit: 1\n    },\n    y: {\n      sync: true,\n      nice: true,\n      min: 0,\n      max: 1,\n      minLimit: 0,\n      maxLimit: 1\n    },\n    name: {\n      sync: 'color',\n      type: 'cat'\n    }\n  });\n  return params;\n}\n/**\n * 动画\n * @param params\n */\nexport function animation(params) {\n  var chart = params.chart,\n    options = params.options;\n  var animation = options.animation;\n  var geometries = __spreadArrays(chart.views[0].geometries, chart.views[1].geometries);\n  addViewAnimation(chart, animation, geometries);\n  return params;\n}\n/**\n * 节点拖动\n * @param params\n */\nexport function nodeDraggable(params) {\n  var chart = params.chart,\n    options = params.options;\n  var nodeDraggable = options.nodeDraggable;\n  var DRAG_INTERACTION = 'sankey-node-draggable';\n  if (nodeDraggable) {\n    chart.interaction(DRAG_INTERACTION);\n  } else {\n    chart.removeInteraction(DRAG_INTERACTION);\n  }\n  return params;\n}\n/**\n * Interaction 配置\n * @param params\n */\nfunction interaction(params) {\n  var chart = params.chart,\n    options = params.options;\n  var _a = options.interactions,\n    interactions = _a === void 0 ? [] : _a;\n  var nodeInteractions = [].concat(interactions, options.nodeInteractions || []);\n  var edgeInteractions = [].concat(interactions, options.edgeInteractions || []);\n  var nodeView = findViewById(chart, NODES_VIEW_ID);\n  var edgeView = findViewById(chart, EDGES_VIEW_ID);\n  nodeInteractions.forEach(function (i) {\n    if ((i === null || i === void 0 ? void 0 : i.enable) === false) {\n      nodeView.removeInteraction(i.type);\n    } else {\n      nodeView.interaction(i.type, i.cfg || {});\n    }\n  });\n  edgeInteractions.forEach(function (i) {\n    if ((i === null || i === void 0 ? void 0 : i.enable) === false) {\n      edgeView.removeInteraction(i.type);\n    } else {\n      edgeView.interaction(i.type, i.cfg || {});\n    }\n  });\n  return params;\n}\n/**\n * 图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(defaultOptions, geometry, interaction, nodeDraggable, animation, theme\n  // ... 其他的 adaptor flow\n  )(params);\n}","map":{"version":3,"mappings":"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","names":["uniq","theme","edge","polygon","deepAssign","findViewById","flow","addViewAnimation","COLOR_FIELD","EDGES_VIEW_ID","NODES_VIEW_ID","X_FIELD","Y_FIELD","transformToViewsData","defaultOptions","params","options","rawFields","tooltip","fields","label","geometry","nodeStyle","edgeStyle","nodeState","edgeState","chart","legend","axis","coordinate","reflect","width","height","nodes","edges","edgeView","createView","id","data","xField","yField","seriesField","color","style","shape","state","nodeView","interaction","scale","x","sync","nice","min","max","minLimit","maxLimit","y","name","type","animation","geometries","views","nodeDraggable","DRAG_INTERACTION","removeInteraction","interactions","nodeInteractions","concat","edgeInteractions","forEach","i","enable","cfg","adaptor"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/g2plot/src/plots/sankey/adaptor.ts"],"sourcesContent":["import { uniq } from '@antv/util';\nimport { theme } from '../../adaptor/common';\nimport { edge, polygon } from '../../adaptor/geometries';\nimport { Params } from '../../core/adaptor';\nimport { deepAssign, findViewById, flow } from '../../utils';\nimport { addViewAnimation } from '../../utils/view';\nimport { COLOR_FIELD, EDGES_VIEW_ID, NODES_VIEW_ID, X_FIELD, Y_FIELD } from './constant';\nimport { transformToViewsData } from './helper';\nimport { SankeyOptions } from './types';\n\n/**\n * 默认配置项 处理\n * @param params\n */\nfunction defaultOptions(params: Params<SankeyOptions>): Params<SankeyOptions> {\n  const { options } = params;\n  const { rawFields = [] } = options;\n\n  return deepAssign(\n    {},\n    {\n      options: {\n        tooltip: {\n          fields: uniq(['name', 'source', 'target', 'value', 'isNode', ...rawFields]),\n        },\n        label: {\n          fields: uniq(['x', 'name', ...rawFields]),\n        },\n      },\n    },\n    params\n  );\n}\n\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params: Params<SankeyOptions>): Params<SankeyOptions> {\n  const { chart, options } = params;\n  const { color, nodeStyle, edgeStyle, label, tooltip, nodeState, edgeState } = options;\n\n  // 1. 组件，优先设置，因为子 view 会继承配置\n  chart.legend(false);\n  chart.tooltip(tooltip);\n  chart.axis(false);\n  // y 镜像一下，防止图形顺序和数据顺序反了\n  chart.coordinate().reflect('y');\n\n  // 2. node edge views\n  // @ts-ignore\n  const { nodes, edges } = transformToViewsData(options, chart.width, chart.height);\n\n  // edge view\n  const edgeView = chart.createView({ id: EDGES_VIEW_ID });\n  edgeView.data(edges);\n\n  edge({\n    chart: edgeView,\n    // @ts-ignore\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: COLOR_FIELD,\n      edge: {\n        color,\n        style: edgeStyle,\n        shape: 'arc',\n      },\n      tooltip,\n      state: edgeState,\n    },\n  });\n\n  const nodeView = chart.createView({ id: NODES_VIEW_ID });\n  nodeView.data(nodes);\n\n  polygon({\n    chart: nodeView,\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: COLOR_FIELD,\n      polygon: {\n        color,\n        style: nodeStyle,\n      },\n      label,\n      tooltip,\n      state: nodeState,\n    },\n  });\n\n  chart.interaction('element-active');\n\n  // scale\n  chart.scale({\n    x: { sync: true, nice: true, min: 0, max: 1, minLimit: 0, maxLimit: 1 },\n    y: { sync: true, nice: true, min: 0, max: 1, minLimit: 0, maxLimit: 1 },\n    name: { sync: 'color', type: 'cat' },\n  });\n\n  return params;\n}\n\n/**\n * 动画\n * @param params\n */\nexport function animation(params: Params<SankeyOptions>): Params<SankeyOptions> {\n  const { chart, options } = params;\n  const { animation } = options;\n\n  const geometries = [...chart.views[0].geometries, ...chart.views[1].geometries];\n\n  addViewAnimation(chart, animation, geometries);\n\n  return params;\n}\n\n/**\n * 节点拖动\n * @param params\n */\nexport function nodeDraggable(params: Params<SankeyOptions>): Params<SankeyOptions> {\n  const { chart, options } = params;\n  const { nodeDraggable } = options;\n\n  const DRAG_INTERACTION = 'sankey-node-draggable';\n\n  if (nodeDraggable) {\n    chart.interaction(DRAG_INTERACTION);\n  } else {\n    chart.removeInteraction(DRAG_INTERACTION);\n  }\n\n  return params;\n}\n\n/**\n * Interaction 配置\n * @param params\n */\nfunction interaction(params: Params<SankeyOptions>): Params<SankeyOptions> {\n  const { chart, options } = params;\n  const { interactions = [] } = options;\n\n  const nodeInteractions = [].concat(interactions, options.nodeInteractions || []);\n  const edgeInteractions = [].concat(interactions, options.edgeInteractions || []);\n\n  const nodeView = findViewById(chart, NODES_VIEW_ID);\n  const edgeView = findViewById(chart, EDGES_VIEW_ID);\n\n  nodeInteractions.forEach((i) => {\n    if (i?.enable === false) {\n      nodeView.removeInteraction(i.type);\n    } else {\n      nodeView.interaction(i.type, i.cfg || {});\n    }\n  });\n\n  edgeInteractions.forEach((i) => {\n    if (i?.enable === false) {\n      edgeView.removeInteraction(i.type);\n    } else {\n      edgeView.interaction(i.type, i.cfg || {});\n    }\n  });\n\n  return params;\n}\n\n/**\n * 图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<SankeyOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(\n    defaultOptions,\n    geometry,\n    interaction,\n    nodeDraggable,\n    animation,\n    theme\n    // ... 其他的 adaptor flow\n  )(params);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}