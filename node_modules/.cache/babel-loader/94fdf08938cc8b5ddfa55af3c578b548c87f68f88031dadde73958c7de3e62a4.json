{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { get, isNil } from '@antv/util';\nimport { animation, annotation, scale, theme } from '../../adaptor/common';\nimport { deepAssign, flow, renderStatistic } from '../../utils';\nimport { geometry } from '../progress/adaptor';\n/**\n * coordinate 配置\n * @param params\n */\nfunction coordinate(params) {\n  var chart = params.chart,\n    options = params.options;\n  var innerRadius = options.innerRadius,\n    radius = options.radius;\n  // coordinate\n  chart.coordinate('theta', {\n    innerRadius: innerRadius,\n    radius: radius\n  });\n  return params;\n}\n/**\n * statistic 配置\n * @param params\n */\nexport function statistic(params, updated) {\n  var chart = params.chart,\n    options = params.options;\n  var innerRadius = options.innerRadius,\n    statistic = options.statistic,\n    percent = options.percent,\n    meta = options.meta;\n  // 先清空标注，再重新渲染\n  chart.getController('annotation').clear(true);\n  /** 中心文本 指标卡 */\n  if (innerRadius && statistic) {\n    var metaFormatter = get(meta, ['percent', 'formatter']) || function (v) {\n      return (v * 100).toFixed(2) + \"%\";\n    };\n    var contentOpt = statistic.content;\n    if (contentOpt) {\n      contentOpt = deepAssign({}, contentOpt, {\n        content: !isNil(contentOpt.content) ? contentOpt.content : metaFormatter(percent)\n      });\n    }\n    renderStatistic(chart, {\n      statistic: __assign(__assign({}, statistic), {\n        content: contentOpt\n      }),\n      plotType: 'ring-progress'\n    }, {\n      percent: percent\n    });\n  }\n  if (updated) {\n    chart.render(true);\n  }\n  return params;\n}\n/**\n * 环形进度图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  return flow(geometry, scale({}), coordinate, statistic, animation, theme, annotation())(params);\n}","map":{"version":3,"mappings":";AAAA,SAASA,GAAG,EAAEC,KAAK,QAAQ,YAAY;AACvC,SAASC,SAAS,EAAEC,UAAU,EAAEC,KAAK,EAAEC,KAAK,QAAQ,sBAAsB;AAE1E,SAASC,UAAU,EAAEC,IAAI,EAAEC,eAAe,QAAQ,aAAa;AAC/D,SAASC,QAAQ,QAAQ,qBAAqB;AAG9C;;;;AAIA,SAASC,UAAU,CAACC,MAAmC;EAC7C,SAAK,GAAcA,MAAM,MAApB;IAAEC,OAAO,GAAKD,MAAM,QAAX;EACd,eAAW,GAAaC,OAAO,YAApB;IAAEC,MAAM,GAAKD,OAAO,OAAZ;EAE3B;EACAE,KAAK,CAACJ,UAAU,CAAC,OAAO,EAAE;IACxBK,WAAW;IACXF,MAAM;GACP,CAAC;EAEF,OAAOF,MAAM;AACf;AAEA;;;;AAIA,OAAM,SAAUK,SAAS,CAACL,MAAmC,EAAEM,OAAiB;EACtE,SAAK,GAAcN,MAAM,MAApB;IAAEC,OAAO,GAAKD,MAAM,QAAX;EACd,eAAW,GAA+BC,OAAO,YAAtC;IAAEI,SAAS,GAAoBJ,OAAO,UAA3B;IAAEM,OAAO,GAAWN,OAAO,QAAlB;IAAEO,IAAI,GAAKP,OAAO,KAAZ;EAE7C;EACAE,KAAK,CAACM,aAAa,CAAC,YAAY,CAAC,CAACC,KAAK,CAAC,IAAI,CAAC;EAE7C;EACA,IAAIN,WAAW,IAAIC,SAAS,EAAE;IAC5B,IAAMM,aAAa,GAAGtB,GAAG,CAACmB,IAAI,EAAE,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,IAAK,UAACI,CAAC;MAAK,OAAG,CAACA,CAAC,GAAG,GAAG,EAAEC,OAAO,CAAC,CAAC,CAAC,MAAG;IAA1B,CAA2B;IAChG,IAAIC,UAAU,GAAGT,SAAS,CAACU,OAAO;IAClC,IAAID,UAAU,EAAE;MACdA,UAAU,GAAGnB,UAAU,CAAC,EAAE,EAAEmB,UAAU,EAAE;QACtCC,OAAO,EAAE,CAACzB,KAAK,CAACwB,UAAU,CAACC,OAAO,CAAC,GAAGD,UAAU,CAACC,OAAO,GAAGJ,aAAa,CAACJ,OAAO;OACjF,CAAC;;IAEJV,eAAe,CACbM,KAAK,EACL;MAAEE,SAAS,wBAAOA,SAAS;QAAEU,OAAO,EAAED;MAAU,EAAE;MAAEE,QAAQ,EAAE;IAAe,CAAE,EAC/E;MAAET,OAAO;IAAA,CAAE,CACZ;;EAGH,IAAID,OAAO,EAAE;IACXH,KAAK,CAACc,MAAM,CAAC,IAAI,CAAC;;EAGpB,OAAOjB,MAAM;AACf;AAEA;;;;;AAKA,OAAM,SAAUkB,OAAO,CAAClB,MAAmC;EACzD,OAAOJ,IAAI,CAACE,QAAQ,EAAEL,KAAK,CAAC,EAAE,CAAC,EAAEM,UAAU,EAAEM,SAAS,EAAEd,SAAS,EAAEG,KAAK,EAAEF,UAAU,EAAE,CAAC,CAACQ,MAAM,CAAC;AACjG","names":["get","isNil","animation","annotation","scale","theme","deepAssign","flow","renderStatistic","geometry","coordinate","params","options","radius","chart","innerRadius","statistic","updated","percent","meta","getController","clear","metaFormatter","v","toFixed","contentOpt","content","plotType","render","adaptor"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/g2plot/src/plots/ring-progress/adaptor.ts"],"sourcesContent":["import { get, isNil } from '@antv/util';\nimport { animation, annotation, scale, theme } from '../../adaptor/common';\nimport { Params } from '../../core/adaptor';\nimport { deepAssign, flow, renderStatistic } from '../../utils';\nimport { geometry } from '../progress/adaptor';\nimport { RingProgressOptions } from './types';\n\n/**\n * coordinate 配置\n * @param params\n */\nfunction coordinate(params: Params<RingProgressOptions>): Params<RingProgressOptions> {\n  const { chart, options } = params;\n  const { innerRadius, radius } = options;\n\n  // coordinate\n  chart.coordinate('theta', {\n    innerRadius,\n    radius,\n  });\n\n  return params;\n}\n\n/**\n * statistic 配置\n * @param params\n */\nexport function statistic(params: Params<RingProgressOptions>, updated?: boolean): Params<RingProgressOptions> {\n  const { chart, options } = params;\n  const { innerRadius, statistic, percent, meta } = options;\n\n  // 先清空标注，再重新渲染\n  chart.getController('annotation').clear(true);\n\n  /** 中心文本 指标卡 */\n  if (innerRadius && statistic) {\n    const metaFormatter = get(meta, ['percent', 'formatter']) || ((v) => `${(v * 100).toFixed(2)}%`);\n    let contentOpt = statistic.content;\n    if (contentOpt) {\n      contentOpt = deepAssign({}, contentOpt, {\n        content: !isNil(contentOpt.content) ? contentOpt.content : metaFormatter(percent),\n      });\n    }\n    renderStatistic(\n      chart,\n      { statistic: { ...statistic, content: contentOpt }, plotType: 'ring-progress' },\n      { percent }\n    );\n  }\n\n  if (updated) {\n    chart.render(true);\n  }\n\n  return params;\n}\n\n/**\n * 环形进度图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<RingProgressOptions>) {\n  return flow(geometry, scale({}), coordinate, statistic, animation, theme, annotation())(params);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}