{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { each, get, isFunction, isNumber, isString } from '@antv/util';\nimport { kebabCase } from './kebab-case';\nimport { pick } from './pick';\n/**\n * @desc 生成 html-statistic 的 style 字符串 (兼容 canvas 的 shapeStyle 到 css样式上)\n *\n * @param width\n * @param style\n */\nexport function adapteStyle(style) {\n  var styleObject = {\n    overflow: 'hidden',\n    'white-space': 'nowrap',\n    'text-overflow': 'ellipsis',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  };\n  var shapeStyleKeys = ['stroke', 'lineWidth', 'shadowColor', 'strokeOpacity', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY', 'fill'];\n  // 兼容 shapeStyle 设置 · start\n  if (get(style, 'fill')) {\n    styleObject['color'] = style['fill'];\n  }\n  var _a = pick(style, shapeStyleKeys),\n    shadowColor = _a.shadowColor,\n    _b = _a.shadowBlur,\n    shadowBlur = _b === void 0 ? 0 : _b,\n    _c = _a.shadowOffsetX,\n    shadowOffsetX = _c === void 0 ? 0 : _c,\n    _d = _a.shadowOffsetY,\n    shadowOffsetY = _d === void 0 ? 0 : _d;\n  styleObject['text-shadow'] = \"\" + [shadowColor, shadowOffsetX + \"px\", shadowOffsetY + \"px\", shadowBlur + \"px\"].join(' ');\n  var _e = pick(style, shapeStyleKeys),\n    stroke = _e.stroke,\n    _f = _e.lineWidth,\n    lineWidth = _f === void 0 ? 0 : _f;\n  styleObject['-webkit-text-stroke'] = \"\" + [lineWidth + \"px\", stroke].join(' ');\n  // 兼容 shapeStyle 设置 · end\n  each(style, function (v, k) {\n    //  兼容 shapeStyle 的 fontSize 没有单位\n    if (['fontSize'].includes(k) && isNumber(v)) {\n      styleObject[kebabCase(k)] = v + \"px\";\n    } else if (k && !shapeStyleKeys.includes(k)) {\n      styleObject[kebabCase(k)] = \"\" + v;\n    }\n  });\n  return styleObject;\n}\n/**\n * @desc 设置 html-statistic 容器的默认样式\n *\n * - 默认事件穿透\n */\nexport function setStatisticContainerStyle(container, style) {\n  container.style['pointer-events'] = 'none';\n  each(style, function (v, k) {\n    if (k && v) {\n      container.style[k] = v;\n    }\n  });\n}\n/**\n * 渲染环图 html-annotation（默认 position 居中 [50%, 50%]）\n * @param chart\n * @param options\n * @param meta 字段元信息\n * @param {optional} datum 当前的元数据\n */\nexport var renderStatistic = function renderStatistic(chart, options, datum) {\n  var statistic = options.statistic,\n    plotType = options.plotType;\n  var titleOpt = statistic.title,\n    contentOpt = statistic.content;\n  [titleOpt, contentOpt].forEach(function (option, idx) {\n    if (!option) {\n      return;\n    }\n    var transform = '';\n    if (idx === 0) {\n      transform = contentOpt ? 'translate(-50%, -100%)' : 'translate(-50%, -50%)';\n    } else {\n      transform = titleOpt ? 'translate(-50%, 0)' : 'translate(-50%, -50%)';\n    }\n    var style = isFunction(option.style) ? option.style(datum) : option.style;\n    chart.annotation().html(__assign({\n      position: ['50%', '50%'],\n      html: function html(container, view) {\n        var coordinate = view.getCoordinate();\n        var containerW = 0;\n        if (plotType === 'pie' || plotType === 'ring-progress') {\n          containerW = coordinate.getRadius() * coordinate.innerRadius * 2;\n        } else if (plotType === 'liquid') {\n          var liquidShape = get(view.geometries, [0, 'elements', 0, 'shape']);\n          if (liquidShape) {\n            // 获取到水波图边框大小\n            var path = liquidShape.find(function (t) {\n              return t.get('name') === 'wrap';\n            });\n            var width = path.getCanvasBBox().width;\n            containerW = width;\n          }\n        } else if (!containerW) {\n          // 保底方案\n          containerW = coordinate.getWidth();\n        }\n        setStatisticContainerStyle(container, __assign({\n          width: containerW + \"px\",\n          transform: transform\n        }, adapteStyle(style)));\n        var filteredData = view.getData();\n        if (option.customHtml) {\n          return option.customHtml(container, view, datum, filteredData);\n        }\n        var text = option.content;\n        if (option.formatter) {\n          text = option.formatter(datum, filteredData);\n        }\n        // todo G2 层修复可以返回空字符串 & G2 层修复允许返回非字符串的内容，比如数值 number\n        return text ? isString(text) ? text : \"\" + text : '<div></div>';\n      },\n      // @ts-ignore\n      key: (idx === 0 ? 'top' : 'bottom') + \"-statistic\"\n    }, pick(option, ['offsetX', 'offsetY', 'rotate', 'style', 'formatter']) /** 透传配置 */));\n  });\n};\n/**\n * 渲染 html-annotation for gauge (等不规则 plot), 默认 position 居中居底 [50%, 100%]）\n * @param chart\n * @param options\n * @param meta 字段元信息\n * @param {optional} datum 当前的元数据\n */\nexport var renderGaugeStatistic = function renderGaugeStatistic(chart, options, datum) {\n  var statistic = options.statistic;\n  var titleOpt = statistic.title,\n    contentOpt = statistic.content;\n  [titleOpt, contentOpt].forEach(function (option) {\n    if (!option) {\n      return;\n    }\n    var style = isFunction(option.style) ? option.style(datum) : option.style;\n    chart.annotation().html(__assign({\n      position: ['50%', '100%'],\n      html: function html(container, view) {\n        var coordinate = view.getCoordinate();\n        // 弧形的坐标\n        var polarCoord = view.views[0].getCoordinate();\n        var polarCenter = polarCoord.getCenter();\n        var polarRadius = polarCoord.getRadius();\n        var polarMaxY = Math.max(Math.sin(polarCoord.startAngle), Math.sin(polarCoord.endAngle)) * polarRadius;\n        var offsetY = polarCenter.y + polarMaxY - coordinate.y.start - parseFloat(get(style, 'fontSize', 0));\n        var containerWidth = coordinate.getRadius() * coordinate.innerRadius * 2;\n        setStatisticContainerStyle(container, __assign({\n          width: containerWidth + \"px\",\n          transform: \"translate(-50%, \" + offsetY + \"px)\"\n        }, adapteStyle(style)));\n        var filteredData = view.getData();\n        if (option.customHtml) {\n          return option.customHtml(container, view, datum, filteredData);\n        }\n        var text = option.content;\n        if (option.formatter) {\n          text = option.formatter(datum, filteredData);\n        }\n        // todo G2 层修复可以返回空字符串 & G2 层修复允许返回非字符串的内容，比如数值 number\n        return text ? isString(text) ? text : \"\" + text : '<div></div>';\n      }\n    }, pick(option, ['offsetX', 'offsetY', 'rotate', 'style', 'formatter']) /** 透传配置 */));\n  });\n};","map":{"version":3,"mappings":"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","names":["each","get","isFunction","isNumber","isString","kebabCase","pick","adapteStyle","style","styleObject","overflow","display","justifyContent","alignItems","shapeStyleKeys","shadowColor","_b","shadowBlur","_c","shadowOffsetX","_d","shadowOffsetY","join","stroke","_f","lineWidth","v","k","includes","setStatisticContainerStyle","container","renderStatistic","chart","options","datum","plotType","titleOpt","statistic","contentOpt","forEach","option","idx","transform","annotation","html","position","view","coordinate","getCoordinate","containerW","getRadius","innerRadius","liquidShape","geometries","path","find","t","getCanvasBBox","width","getWidth","filteredData","getData","customHtml","text","content","formatter","key","renderGaugeStatistic","polarCoord","views","polarCenter","getCenter","polarRadius","polarMaxY","Math","max","sin","startAngle","endAngle","offsetY","y","start","parseFloat","containerWidth"],"sources":["/home/iam/Documents/network/node_modules/@antv/g2plot/src/utils/statistic.ts"],"sourcesContent":["import { IGroup, View } from '@antv/g2';\nimport { each, get, isFunction, isNumber, isString } from '@antv/util';\nimport { Datum, ShapeStyle, Statistic, StatisticText } from '../types';\nimport { kebabCase } from './kebab-case';\nimport { pick } from './pick';\n\n/**\n * @desc 生成 html-statistic 的 style 字符串 (兼容 canvas 的 shapeStyle 到 css样式上)\n *\n * @param width\n * @param style\n */\nexport function adapteStyle(style?: StatisticText['style']): object {\n  const styleObject = {\n    overflow: 'hidden',\n    'white-space': 'nowrap',\n    'text-overflow': 'ellipsis',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  };\n\n  const shapeStyleKeys = [\n    'stroke',\n    'lineWidth',\n    'shadowColor',\n    'strokeOpacity',\n    'shadowBlur',\n    'shadowOffsetX',\n    'shadowOffsetY',\n    'fill',\n  ];\n\n  // 兼容 shapeStyle 设置 · start\n  if (get(style, 'fill')) {\n    styleObject['color'] = style['fill'];\n  }\n  const {\n    shadowColor,\n    shadowBlur = 0,\n    shadowOffsetX = 0,\n    shadowOffsetY = 0,\n  } = pick(style, shapeStyleKeys) as ShapeStyle;\n  styleObject['text-shadow'] = `${[shadowColor, `${shadowOffsetX}px`, `${shadowOffsetY}px`, `${shadowBlur}px`].join(\n    ' '\n  )}`;\n\n  const { stroke, lineWidth = 0 } = pick(style, shapeStyleKeys) as ShapeStyle;\n  styleObject['-webkit-text-stroke'] = `${[`${lineWidth}px`, stroke].join(' ')}`;\n  // 兼容 shapeStyle 设置 · end\n\n  each(style, (v, k) => {\n    //  兼容 shapeStyle 的 fontSize 没有单位\n    if (['fontSize'].includes(k) && isNumber(v)) {\n      styleObject[kebabCase(k)] = `${v}px`;\n    } else if (k && !shapeStyleKeys.includes(k)) {\n      styleObject[kebabCase(k)] = `${v}`;\n    }\n  });\n\n  return styleObject;\n}\n\n/**\n * @desc 设置 html-statistic 容器的默认样式\n *\n * - 默认事件穿透\n */\nexport function setStatisticContainerStyle(container: HTMLElement, style: Partial<CSSStyleDeclaration>) {\n  container.style['pointer-events'] = 'none';\n  each(style, (v, k) => {\n    if (k && v) {\n      container.style[k] = v;\n    }\n  });\n}\n\n/**\n * 渲染环图 html-annotation（默认 position 居中 [50%, 50%]）\n * @param chart\n * @param options\n * @param meta 字段元信息\n * @param {optional} datum 当前的元数据\n */\nexport const renderStatistic = (chart: View, options: { statistic: Statistic; plotType: string }, datum?: Datum) => {\n  const { statistic, plotType } = options;\n  const { title: titleOpt, content: contentOpt } = statistic;\n\n  [titleOpt, contentOpt].forEach((option, idx) => {\n    if (!option) {\n      return;\n    }\n    let transform = '';\n    if (idx === 0) {\n      transform = contentOpt ? 'translate(-50%, -100%)' : 'translate(-50%, -50%)';\n    } else {\n      transform = titleOpt ? 'translate(-50%, 0)' : 'translate(-50%, -50%)';\n    }\n    const style = isFunction(option.style) ? option.style(datum) : option.style;\n\n    chart.annotation().html({\n      position: ['50%', '50%'],\n      html: (container, view) => {\n        const coordinate = view.getCoordinate();\n        let containerW = 0;\n        if (plotType === 'pie' || plotType === 'ring-progress') {\n          containerW = coordinate.getRadius() * coordinate.innerRadius * 2;\n        } else if (plotType === 'liquid') {\n          const liquidShape = get(view.geometries, [0, 'elements', 0, 'shape']);\n          if (liquidShape) {\n            // 获取到水波图边框大小\n            const path = (liquidShape as IGroup).find((t) => t.get('name') === 'wrap');\n            const { width } = path.getCanvasBBox();\n            containerW = width;\n          }\n        } else if (!containerW) {\n          // 保底方案\n          containerW = coordinate.getWidth();\n        }\n        setStatisticContainerStyle(container, {\n          width: `${containerW}px`,\n          transform,\n          // user's style setting has high priority\n          ...adapteStyle(style),\n        });\n\n        const filteredData = view.getData();\n        if (option.customHtml) {\n          return option.customHtml(container, view, datum, filteredData);\n        }\n\n        let text = option.content;\n        if (option.formatter) {\n          text = option.formatter(datum, filteredData);\n        }\n        // todo G2 层修复可以返回空字符串 & G2 层修复允许返回非字符串的内容，比如数值 number\n        return text ? (isString(text) ? text : `${text}`) : '<div></div>';\n      },\n      // @ts-ignore\n      key: `${idx === 0 ? 'top' : 'bottom'}-statistic`,\n      ...pick(option, ['offsetX', 'offsetY', 'rotate', 'style', 'formatter']) /** 透传配置 */,\n    });\n  });\n};\n\n/**\n * 渲染 html-annotation for gauge (等不规则 plot), 默认 position 居中居底 [50%, 100%]）\n * @param chart\n * @param options\n * @param meta 字段元信息\n * @param {optional} datum 当前的元数据\n */\nexport const renderGaugeStatistic = (chart: View, options: { statistic: Statistic }, datum?: Datum) => {\n  const { statistic } = options;\n  const { title: titleOpt, content: contentOpt } = statistic;\n\n  [titleOpt, contentOpt].forEach((option) => {\n    if (!option) {\n      return;\n    }\n    const style = isFunction(option.style) ? option.style(datum) : option.style;\n    chart.annotation().html({\n      position: ['50%', '100%'],\n      html: (container, view) => {\n        const coordinate = view.getCoordinate();\n        // 弧形的坐标\n        const polarCoord = view.views[0].getCoordinate();\n        const polarCenter = polarCoord.getCenter();\n        const polarRadius = polarCoord.getRadius();\n        const polarMaxY = Math.max(Math.sin(polarCoord.startAngle), Math.sin(polarCoord.endAngle)) * polarRadius;\n        const offsetY = polarCenter.y + polarMaxY - coordinate.y.start - parseFloat(get(style, 'fontSize', 0));\n\n        const containerWidth = coordinate.getRadius() * coordinate.innerRadius * 2;\n        setStatisticContainerStyle(container, {\n          width: `${containerWidth}px`,\n          transform: `translate(-50%, ${offsetY}px)`,\n          // user's style setting has high priority\n          ...adapteStyle(style),\n        });\n\n        const filteredData = view.getData();\n        if (option.customHtml) {\n          return option.customHtml(container, view, datum, filteredData);\n        }\n\n        let text = option.content;\n        if (option.formatter) {\n          text = option.formatter(datum, filteredData);\n        }\n\n        // todo G2 层修复可以返回空字符串 & G2 层修复允许返回非字符串的内容，比如数值 number\n        return text ? (isString(text) ? text : `${text}`) : '<div></div>';\n      },\n      ...pick(option, ['offsetX', 'offsetY', 'rotate', 'style', 'formatter']) /** 透传配置 */,\n    });\n  });\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}