{"ast":null,"code":"import { isArray } from '@antv/util';\nimport { registerShape, registerShapeFactory } from '../base';\nimport { getShapeAttrs } from './util';\nvar AreaShapeFactory = registerShapeFactory('area', {\n  defaultShapeType: 'area',\n  getDefaultPoints: function (pointInfo) {\n    // area 基本标记的绘制需要获取上下两边的顶点\n    var x = pointInfo.x,\n      y0 = pointInfo.y0;\n    var y = isArray(pointInfo.y) ? pointInfo.y : [y0, pointInfo.y];\n    return y.map(function (yItem) {\n      return {\n        x: x,\n        y: yItem\n      };\n    });\n  }\n});\n// Area 几何标记默认的 shape：填充的区域图\nregisterShape('area', 'area', {\n  draw: function (cfg, container) {\n    var attrs = getShapeAttrs(cfg, false, false, this);\n    var shape = container.addShape({\n      type: 'path',\n      attrs: attrs,\n      name: 'area'\n    });\n    return shape;\n  },\n  getMarker: function (markerCfg) {\n    var color = markerCfg.color;\n    return {\n      symbol: function (x, y, r) {\n        if (r === void 0) {\n          r = 5.5;\n        }\n        return [['M', x - r, y - 4], ['L', x + r, y - 4], ['L', x + r, y + 4], ['L', x - r, y + 4], ['Z']];\n      },\n      style: {\n        r: 5,\n        fill: color,\n        fillOpacity: 1\n      }\n    };\n  }\n});\nexport default AreaShapeFactory;","map":{"version":3,"mappings":"AAAA,SAASA,OAAO,QAAQ,YAAY;AAGpC,SAASC,aAAa,EAAEC,oBAAoB,QAAQ,SAAS;AAC7D,SAASC,aAAa,QAAQ,QAAQ;AAEtC,IAAMC,gBAAgB,GAAGF,oBAAoB,CAAC,MAAM,EAAE;EACpDG,gBAAgB,EAAE,MAAM;EACxBC,gBAAgB,YAACC,SAAqB;IACpC;IACQ,KAAC,GAASA,SAAS,EAAlB;MAAEC,EAAE,GAAKD,SAAS,GAAd;IACb,IAAME,CAAC,GAAGT,OAAO,CAACO,SAAS,CAACE,CAAC,CAAC,GAAGF,SAAS,CAACE,CAAC,GAAG,CAACD,EAAE,EAAED,SAAS,CAACE,CAAC,CAAC;IAEhE,OAAOA,CAAC,CAACC,GAAG,CAAC,UAACC,KAAa;MACzB,OAAO;QACLC,CAAC,EAAEA,CAAW;QACdH,CAAC,EAAEE;OACJ;IACH,CAAC,CAAC;EACJ;CACD,CAAC;AAEF;AACAV,aAAa,CAAC,MAAM,EAAE,MAAM,EAAE;EAC5BY,IAAI,YAACC,GAAc,EAAEC,SAAiB;IACpC,IAAMC,KAAK,GAAGb,aAAa,CAACW,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC;IACpD,IAAMG,KAAK,GAAGF,SAAS,CAACG,QAAQ,CAAC;MAC/BC,IAAI,EAAE,MAAM;MACZH,KAAK;MACLI,IAAI,EAAE;KACP,CAAC;IAEF,OAAOH,KAAK;EACd,CAAC;EACDI,SAAS,YAACC,SAAyB;IACzB,SAAK,GAAKA,SAAS,MAAd;IACb,OAAO;MACLC,MAAM,EAAE,UAACX,CAAS,EAAEH,CAAS,EAAEe,CAAe;QAAf;UAAAA,OAAe;QAAA;QAC5C,OAAO,CAAC,CAAC,GAAG,EAAEZ,CAAC,GAAGY,CAAC,EAAEf,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,EAAEG,CAAC,GAAGY,CAAC,EAAEf,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,EAAEG,CAAC,GAAGY,CAAC,EAAEf,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,EAAEG,CAAC,GAAGY,CAAC,EAAEf,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;MACpG,CAAC;MACDgB,KAAK,EAAE;QACLD,CAAC,EAAE,CAAC;QACJE,IAAI,EAAEC,KAAK;QACXC,WAAW,EAAE;;KAEhB;EACH;CACD,CAAC;AAEF,eAAexB,gBAAgB","names":["isArray","registerShape","registerShapeFactory","getShapeAttrs","AreaShapeFactory","defaultShapeType","getDefaultPoints","pointInfo","y0","y","map","yItem","x","draw","cfg","container","attrs","shape","addShape","type","name","getMarker","markerCfg","symbol","r","style","fill","color","fillOpacity"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/g2/src/geometry/shape/area/index.ts"],"sourcesContent":["import { isArray } from '@antv/util';\nimport { IGroup } from '../../../dependents';\nimport { Point, ShapeInfo, ShapeMarkerCfg, ShapePoint } from '../../../interface';\nimport { registerShape, registerShapeFactory } from '../base';\nimport { getShapeAttrs } from './util';\n\nconst AreaShapeFactory = registerShapeFactory('area', {\n  defaultShapeType: 'area',\n  getDefaultPoints(pointInfo: ShapePoint): Point[] {\n    // area 基本标记的绘制需要获取上下两边的顶点\n    const { x, y0 } = pointInfo;\n    const y = isArray(pointInfo.y) ? pointInfo.y : [y0, pointInfo.y];\n\n    return y.map((yItem: number) => {\n      return {\n        x: x as number,\n        y: yItem,\n      };\n    });\n  },\n});\n\n// Area 几何标记默认的 shape：填充的区域图\nregisterShape('area', 'area', {\n  draw(cfg: ShapeInfo, container: IGroup) {\n    const attrs = getShapeAttrs(cfg, false, false, this);\n    const shape = container.addShape({\n      type: 'path',\n      attrs,\n      name: 'area',\n    });\n\n    return shape;\n  },\n  getMarker(markerCfg: ShapeMarkerCfg) {\n    const { color } = markerCfg;\n    return {\n      symbol: (x: number, y: number, r: number = 5.5) => {\n        return [['M', x - r, y - 4], ['L', x + r, y - 4], ['L', x + r, y + 4], ['L', x - r, y + 4], ['Z']];\n      },\n      style: {\n        r: 5,\n        fill: color,\n        fillOpacity: 1,\n      },\n    };\n  },\n});\n\nexport default AreaShapeFactory;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}