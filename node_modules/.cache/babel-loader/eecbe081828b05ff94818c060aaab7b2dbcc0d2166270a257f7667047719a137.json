{"ast":null,"code":"import { animation, annotation, theme, tooltip } from '../../adaptor/common';\nimport { line, point } from '../../adaptor/geometries';\nimport { deepAssign, flow } from '../../utils';\nimport { meta } from '../tiny-area/adaptor';\nimport { X_FIELD, Y_FIELD } from './constants';\nimport { getTinyData } from './utils';\nexport { meta };\n/**\n * 字段\n * @param params\n */\nfunction geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var data = options.data,\n    color = options.color,\n    lineStyle = options.lineStyle,\n    pointMapping = options.point;\n  var pointState = pointMapping === null || pointMapping === void 0 ? void 0 : pointMapping.state;\n  var seriesData = getTinyData(data);\n  chart.data(seriesData);\n  // line geometry 处理\n  var primary = deepAssign({}, params, {\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      line: {\n        color: color,\n        style: lineStyle\n      },\n      point: pointMapping\n    }\n  });\n  var pointParams = deepAssign({}, primary, {\n    options: {\n      tooltip: false,\n      state: pointState\n    }\n  });\n  line(primary);\n  point(pointParams);\n  chart.axis(false);\n  chart.legend(false);\n  return params;\n}\n/**\n * 迷你折线图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  return flow(geometry, meta, theme, tooltip, animation, annotation())(params);\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAS,EAAEC,UAAU,EAAEC,KAAK,EAAEC,OAAO,QAAQ,sBAAsB;AAC5E,SAASC,IAAI,EAAEC,KAAK,QAAQ,0BAA0B;AAEtD,SAASC,UAAU,EAAEC,IAAI,QAAQ,aAAa;AAC9C,SAASC,IAAI,QAAQ,sBAAsB;AAC3C,SAASC,OAAO,EAAEC,OAAO,QAAQ,aAAa;AAE9C,SAASC,WAAW,QAAQ,SAAS;AAErC,SAASH,IAAI;AAEb;;;;AAIA,SAASI,QAAQ,CAACC,MAA+B;EACvC,SAAK,GAAcA,MAAM,MAApB;IAAEC,OAAO,GAAKD,MAAM,QAAX;EACd,QAAI,GAA4CC,OAAO,KAAnD;IAAEC,KAAK,GAAqCD,OAAO,MAA5C;IAAEE,SAAS,GAA0BF,OAAO,UAAjC;IAASG,YAAY,GAAKH,OAAO,MAAZ;EAEnD,IAAMI,UAAU,GAAGD,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEE,KAAK;EAEtC,IAAMC,UAAU,GAAGT,WAAW,CAACU,IAAI,CAAC;EAEpCC,KAAK,CAACD,IAAI,CAACD,UAAU,CAAC;EAEtB;EACA,IAAMG,OAAO,GAAGjB,UAAU,CAAC,EAAE,EAAEO,MAAM,EAAE;IACrCC,OAAO,EAAE;MACPU,MAAM,EAAEf,OAAO;MACfgB,MAAM,EAAEf,OAAO;MACfN,IAAI,EAAE;QACJW,KAAK;QACLW,KAAK,EAAEV;OACR;MACDX,KAAK,EAAEY;;GAEV,CAAC;EACF,IAAMU,WAAW,GAAGrB,UAAU,CAAC,EAAE,EAAEiB,OAAO,EAAE;IAAET,OAAO,EAAE;MAAEX,OAAO,EAAE,KAAK;MAAEgB,KAAK,EAAED;IAAU;EAAE,CAAE,CAAC;EAE/Fd,IAAI,CAACmB,OAAO,CAAC;EACblB,KAAK,CAACsB,WAAW,CAAC;EAElBL,KAAK,CAACM,IAAI,CAAC,KAAK,CAAC;EACjBN,KAAK,CAACO,MAAM,CAAC,KAAK,CAAC;EAEnB,OAAOhB,MAAM;AACf;AAEA;;;;;AAKA,OAAM,SAAUiB,OAAO,CAACjB,MAA+B;EACrD,OAAON,IAAI,CAACK,QAAQ,EAAEJ,IAAI,EAAEN,KAAK,EAAEC,OAAO,EAAEH,SAAS,EAAEC,UAAU,EAAE,CAAC,CAACY,MAAM,CAAC;AAC9E","names":["animation","annotation","theme","tooltip","line","point","deepAssign","flow","meta","X_FIELD","Y_FIELD","getTinyData","geometry","params","options","color","lineStyle","pointMapping","pointState","state","seriesData","data","chart","primary","xField","yField","style","pointParams","axis","legend","adaptor"],"sources":["/home/iam/Documents/network/node_modules/@antv/g2plot/src/plots/tiny-line/adaptor.ts"],"sourcesContent":["import { animation, annotation, theme, tooltip } from '../../adaptor/common';\nimport { line, point } from '../../adaptor/geometries';\nimport { Params } from '../../core/adaptor';\nimport { deepAssign, flow } from '../../utils';\nimport { meta } from '../tiny-area/adaptor';\nimport { X_FIELD, Y_FIELD } from './constants';\nimport { TinyLineOptions } from './types';\nimport { getTinyData } from './utils';\n\nexport { meta };\n\n/**\n * 字段\n * @param params\n */\nfunction geometry(params: Params<TinyLineOptions>): Params<TinyLineOptions> {\n  const { chart, options } = params;\n  const { data, color, lineStyle, point: pointMapping } = options;\n\n  const pointState = pointMapping?.state;\n\n  const seriesData = getTinyData(data);\n\n  chart.data(seriesData);\n\n  // line geometry 处理\n  const primary = deepAssign({}, params, {\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      line: {\n        color,\n        style: lineStyle,\n      },\n      point: pointMapping,\n    },\n  });\n  const pointParams = deepAssign({}, primary, { options: { tooltip: false, state: pointState } });\n\n  line(primary);\n  point(pointParams);\n\n  chart.axis(false);\n  chart.legend(false);\n\n  return params;\n}\n\n/**\n * 迷你折线图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<TinyLineOptions>) {\n  return flow(geometry, meta, theme, tooltip, animation, annotation())(params);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}