{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { deepMix, clone, debounce } from '@antv/util';\nimport Global from '../global';\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      updateEdge: true,\n      delegateStyle: {},\n      // 是否开启delegate\n      enableDelegate: false,\n      // 拖动节点过程中是否只改变 Combo 的大小，而不改变其结构\n      onlyChangeComboSize: false,\n      // 拖动过程中目标 combo 状态样式\n      comboActiveState: '',\n      selectedState: 'selected',\n      enableOptimize: false,\n      enableDebounce: false,\n      enableStack: true\n    };\n  },\n  getEvents: function getEvents() {\n    return {\n      'node:mousedown': 'onMouseDown',\n      'drag': 'onDragMove',\n      'dragend': 'onDragEnd',\n      'combo:dragenter': 'onDragEnter',\n      'combo:dragleave': 'onDragLeave',\n      'combo:drop': 'onDropCombo',\n      'node:drop': 'onDropNode',\n      'canvas:drop': 'onDropCanvas',\n      'touchstart': 'onTouchStart',\n      'touchmove': 'onTouchMove',\n      'touchend': 'onDragEnd'\n    };\n  },\n  validationCombo: function validationCombo(item) {\n    if (!this.origin || !item || item.destroyed) {\n      return false;\n    }\n    var type = item.getType();\n    if (type !== 'combo') {\n      return false;\n    }\n    return true;\n  },\n  onTouchStart: function onTouchStart(evt) {\n    if (!evt.item) return;\n    var self = this;\n    try {\n      var touches = evt.originalEvent.touches;\n      var event1 = touches[0];\n      var event2 = touches[1];\n      if (event1 && event2) {\n        return;\n      }\n      evt.preventDefault();\n    } catch (e) {\n      console.warn('Touch original event not exist!');\n    }\n    this.mousedown = {\n      item: evt.item,\n      target: evt.target\n    };\n    this.dragstart = true;\n    self.onDragStart(evt);\n  },\n  onTouchMove: function onTouchMove(e) {\n    var self = this;\n    try {\n      var touches = e.originalEvent.touches;\n      var event1 = touches[0];\n      var event2 = touches[1];\n      if (event1 && event2) {\n        self.onDragEnd(e);\n        return;\n      }\n      e.preventDefault();\n    } catch (e) {\n      console.warn('Touch original event not exist!');\n    }\n    self.onDrag(e);\n  },\n  /**\n   * cache the manipulated item and target, since drag and dragend are global events but not node:*\n   * @param evt event param\n   */\n  onMouseDown: function onMouseDown(evt) {\n    this.mousedown = {\n      item: evt.item,\n      target: evt.target\n    };\n  },\n  /**\n   * trigger dragstart/drag by mousedown and drag events\n   * @param evt event param\n   */\n  onDragMove: function onDragMove(evt) {\n    var _a, _b;\n    if (((_b = (_a = evt.item) === null || _a === void 0 ? void 0 : _a.getType) === null || _b === void 0 ? void 0 : _b.call(_a)) !== 'node') {\n      this.onDragEnd();\n      return;\n    }\n    if (!this.mousedown) return;\n    if (!this.dragstart) {\n      // dragstart\n      this.dragstart = true;\n      this.onDragStart(evt);\n    } else {\n      // drag\n      this.onDrag(__assign(__assign({}, evt), this.mousedown));\n    }\n  },\n  /**\n   * 开始拖动节点\n   * @param evt\n   */\n  onDragStart: function onDragStart(evt) {\n    var _this = this;\n    this.currentShouldEnd = true;\n    if (!this.shouldBegin(__assign(__assign({}, evt), this.mousedown), this)) {\n      return;\n    }\n    var _a = this.mousedown,\n      item = _a.item,\n      target = _a.target;\n    if (!item || item.destroyed || item.hasLocked()) {\n      return;\n    }\n    // 拖动时，设置拖动元素的 capture 为false，则不拾取拖动的元素\n    var group = item.getContainer();\n    group.set('capture', false);\n    if (!this.cachedCaptureItems) this.cachedCaptureItems = [];\n    this.cachedCaptureItems.push(item);\n    // 如果拖动的target 是linkPoints / anchorPoints 则不允许拖动\n    if (target) {\n      var isAnchorPoint = target.get('isAnchorPoint');\n      if (isAnchorPoint) {\n        return;\n      }\n    }\n    var graph = this.graph;\n    this.targets = [];\n    // 将节点拖入到指定的 Combo\n    this.targetCombo = null;\n    // 获取所有选中的元素\n    var nodes = graph.findAllByState('node', this.selectedState);\n    var currentNodeId = item.get('id');\n    // 当前拖动的节点是否是选中的节点\n    var dragNodes = nodes.filter(function (node) {\n      var nodeId = node.get('id');\n      return currentNodeId === nodeId;\n    });\n    // 只拖动当前节点\n    if (dragNodes.length === 0) {\n      this.targets.push(item);\n    } else if (nodes.length > 1) {\n      // 拖动多个节点\n      nodes.forEach(function (node) {\n        var locked = node.hasLocked();\n        if (!locked) {\n          _this.targets.push(node);\n        }\n      });\n    } else {\n      this.targets.push(item);\n    }\n    if (this.graph.get('enabledStack') && this.enableStack) {\n      var beforeDragNodes_1 = [];\n      this.targets.forEach(function (t) {\n        var _a = t.getModel(),\n          x = _a.x,\n          y = _a.y,\n          id = _a.id;\n        beforeDragNodes_1.push({\n          x: x,\n          y: y,\n          id: id\n        });\n      });\n      this.set('beforeDragNodes', beforeDragNodes_1);\n    }\n    this.hidenEdge = {};\n    if (this.get('updateEdge') && this.enableOptimize && !this.enableDelegate) {\n      this.targets.forEach(function (node) {\n        var edges = node.getEdges();\n        edges.forEach(function (edge) {\n          if (!edge.isVisible()) return;\n          _this.hidenEdge[edge.getID()] = true;\n          edge.hide();\n        });\n      });\n    }\n    this.origin = {\n      x: evt.x,\n      y: evt.y\n    };\n    this.point = {};\n    this.originPoint = {};\n    // 绑定浏览器右键监听，触发拖拽结束，结束拖拽时移除\n    if (typeof window !== 'undefined') {\n      var self_1 = this;\n      this.handleDOMContextMenu = function () {\n        return self_1.onDragEnd();\n      };\n      document.body.addEventListener('contextmenu', this.handleDOMContextMenu);\n    }\n  },\n  /**\n   * 持续拖动节点\n   * @param evt\n   */\n  onDrag: function onDrag(evt) {\n    var _this = this;\n    if (!this.mousedown || !this.origin) return;\n    if (!this.shouldUpdate(evt, this)) return;\n    if (this.get('enableDelegate')) {\n      this.updateDelegate(evt);\n    } else {\n      if (this.enableDebounce) this.debounceUpdate({\n        targets: this.targets,\n        graph: this.graph,\n        point: this.point,\n        origin: this.origin,\n        evt: evt,\n        updateEdge: this.get('updateEdge')\n      });else this.targets.map(function (target) {\n        _this.update(target, evt);\n      });\n    }\n  },\n  /**\n   * 拖动结束，设置拖动元素capture为true，更新元素位置，如果是拖动涉及到 combo，则更新 combo 结构\n   * @param evt\n   */\n  onDragEnd: function onDragEnd(evt) {\n    var _this = this;\n    var _a;\n    this.mousedown = false;\n    this.dragstart = false;\n    if (!this.origin) {\n      return;\n    }\n    // 拖动结束后，设置拖动元素 group 的 capture 为 true，允许拾取拖动元素\n    (_a = this.cachedCaptureItems) === null || _a === void 0 ? void 0 : _a.forEach(function (item) {\n      var group = item.getContainer();\n      group.set('capture', true);\n    });\n    this.cachedCaptureItems = [];\n    if (this.delegateRect) {\n      this.delegateRect.remove();\n      this.delegateRect = null;\n    }\n    if (this.get('updateEdge') && this.enableOptimize && !this.enableDelegate) {\n      this.targets.forEach(function (node) {\n        var edges = node.getEdges();\n        edges.forEach(function (edge) {\n          if (_this.hidenEdge[edge.getID()]) edge.show();\n          edge.refresh();\n        });\n      });\n    }\n    this.hidenEdge = {};\n    var graph = this.graph;\n    // 拖动结束后，入栈\n    if (graph.get('enabledStack') && this.enableStack) {\n      var stackData_1 = {\n        before: {\n          nodes: [],\n          edges: [],\n          combos: []\n        },\n        after: {\n          nodes: [],\n          edges: [],\n          combos: []\n        }\n      };\n      this.get('beforeDragNodes').forEach(function (model) {\n        stackData_1.before.nodes.push(model);\n      });\n      this.targets.forEach(function (target) {\n        var _a = target.getModel(),\n          x = _a.x,\n          y = _a.y,\n          id = _a.id;\n        stackData_1.after.nodes.push({\n          x: x,\n          y: y,\n          id: id\n        });\n      });\n      graph.pushStack('update', clone(stackData_1));\n    }\n    // 拖动结束后emit事件，将当前操作的节点抛出去，目标节点为null\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: null\n    });\n    this.point = {};\n    this.origin = null;\n    this.originPoint = {};\n    this.targets.length = 0;\n    this.targetCombo = null;\n    // 结束拖拽时移除浏览器右键监听\n    if (typeof window !== 'undefined') {\n      document.body.removeEventListener('contextmenu', this.handleDOMContextMenu);\n    }\n  },\n  /**\n   * 拖动过程中将节点放置到 combo 上\n   * @param evt\n   */\n  onDropCombo: function onDropCombo(evt) {\n    var item = evt.item;\n    this.currentShouldEnd = this.shouldEnd(evt, item, this);\n    // 若不允许结束，则将节点位置设置回初识位置。后面的逻辑仍需要执行\n    this.updatePositions(evt, !this.currentShouldEnd);\n    if (!this.currentShouldEnd || !this.validationCombo(item)) return;\n    var graph = this.graph;\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, false);\n    }\n    this.targetCombo = item;\n    // 拖动结束后是动态改变 Combo 大小还是将节点从 Combo 中删除\n    if (this.onlyChangeComboSize) {\n      // 拖动节点结束后，动态改变 Combo 的大小\n      graph.updateCombos();\n    } else {\n      var targetComboModel_1 = item.getModel();\n      this.targets.map(function (node) {\n        var nodeModel = node.getModel();\n        if (nodeModel.comboId !== targetComboModel_1.id) {\n          graph.updateComboTree(node, targetComboModel_1.id);\n        }\n      });\n      graph.updateCombo(item);\n    }\n    // 将节点拖动到 combo 上面，emit事件抛出当前操作的节点及目标 combo\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: this.targetCombo\n    });\n  },\n  onDropCanvas: function onDropCanvas(evt) {\n    var graph = this.graph;\n    this.currentShouldEnd = this.shouldEnd(evt, undefined, this);\n    // 若不允许结束，则将节点位置设置回初识位置。后面的逻辑仍需要执行\n    this.updatePositions(evt, !this.currentShouldEnd);\n    if (!this.targets || this.targets.length === 0 || !this.currentShouldEnd) return;\n    if (this.onlyChangeComboSize) {\n      // 拖动节点结束后，动态改变 Combo 的大小\n      graph.updateCombos();\n    } else {\n      this.targets.map(function (node) {\n        // 拖动的节点有 comboId，即是从其他 combo 中拖出时才处理\n        var model = node.getModel();\n        if (model.comboId) {\n          graph.updateComboTree(node);\n        }\n      });\n    }\n  },\n  /**\n   * 拖动放置到某个 combo 中的子 node 上\n   * @param evt\n   */\n  onDropNode: function onDropNode(evt) {\n    if (!this.targets || this.targets.length === 0) return;\n    var self = this;\n    var item = evt.item;\n    var graph = self.graph;\n    var comboId = item.getModel().comboId;\n    var newParentCombo = comboId ? graph.findById(comboId) : undefined;\n    this.currentShouldEnd = this.shouldEnd(evt, newParentCombo, this);\n    // 若不允许结束，则将节点位置设置回初识位置。后面的逻辑仍需要执行\n    this.updatePositions(evt, !this.currentShouldEnd);\n    if (!this.currentShouldEnd) return;\n    if (this.onlyChangeComboSize) {\n      graph.updateCombos();\n    } else if (comboId) {\n      var combo = graph.findById(comboId);\n      if (self.comboActiveState) {\n        graph.setItemState(combo, self.comboActiveState, false);\n      }\n      this.targets.map(function (node) {\n        var nodeModel = node.getModel();\n        if (comboId !== nodeModel.comboId) {\n          graph.updateComboTree(node, comboId);\n        }\n      });\n      graph.updateCombo(combo);\n    } else {\n      this.targets.map(function (node) {\n        var model = node.getModel();\n        if (model.comboId) {\n          graph.updateComboTree(node);\n        }\n      });\n    }\n    // 将节点拖动到另外个节点上面，emit 事件抛出当前操作的节点及目标节点\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: item\n    });\n  },\n  /**\n   * 将节点拖入到 Combo 中\n   * @param evt\n   */\n  onDragEnter: function onDragEnter(evt) {\n    var item = evt.item;\n    if (!this.validationCombo(item)) return;\n    var graph = this.graph;\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, true);\n    }\n  },\n  /**\n   * 将节点从 Combo 中拖出\n   * @param evt\n   */\n  onDragLeave: function onDragLeave(evt) {\n    var item = evt.item;\n    if (!this.validationCombo(item)) return;\n    var graph = this.graph;\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, false);\n    }\n  },\n  updatePositions: function updatePositions(evt, restore) {\n    var _this = this;\n    if (!this.targets || this.targets.length === 0) return;\n    // 当开启 delegate 时，拖动结束后需要更新所有已选中节点的位置\n    if (this.get('enableDelegate')) {\n      if (this.enableDebounce) this.debounceUpdate({\n        targets: this.targets,\n        graph: this.graph,\n        point: this.point,\n        origin: this.origin,\n        evt: evt,\n        updateEdge: this.get('updateEdge'),\n        updateFunc: this.update\n      });else if (!restore) this.targets.map(function (node) {\n        return _this.update(node, evt);\n      });\n    } else this.targets.map(function (node) {\n      return _this.update(node, evt, restore);\n    });\n  },\n  /**\n   * 更新节点\n   * @param item 拖动的节点实例\n   * @param evt\n   */\n  update: function update(item, evt, restore) {\n    var origin = this.origin;\n    var model = item.get('model');\n    var nodeId = item.get('id');\n    if (!this.point[nodeId]) {\n      this.point[nodeId] = {\n        x: model.x || 0,\n        y: model.y || 0\n      };\n    }\n    var x = evt.x - origin.x + this.point[nodeId].x;\n    var y = evt.y - origin.y + this.point[nodeId].y;\n    if (restore) {\n      x += origin.x - evt.x;\n      y += origin.y - evt.y;\n    }\n    var pos = {\n      x: x,\n      y: y\n    };\n    if (this.get('updateEdge')) {\n      this.graph.updateItem(item, pos, false);\n    } else {\n      item.updatePosition(pos);\n    }\n  },\n  /**\n   * 限流更新节点\n   * @param item 拖动的节点实例\n   * @param evt\n   */\n  debounceUpdate: debounce(function (event) {\n    var targets = event.targets,\n      graph = event.graph,\n      point = event.point,\n      origin = event.origin,\n      evt = event.evt,\n      updateEdge = event.updateEdge,\n      updateFunc = event.updateFunc;\n    targets.map(function (item) {\n      var model = item.get('model');\n      var nodeId = item.get('id');\n      if (!point[nodeId]) {\n        point[nodeId] = {\n          x: model.x || 0,\n          y: model.y || 0\n        };\n      }\n      var x = evt.x - origin.x + point[nodeId].x;\n      var y = evt.y - origin.y + point[nodeId].y;\n      var pos = {\n        x: x,\n        y: y\n      };\n      if (updateEdge) {\n        graph.updateItem(item, pos, false);\n      } else {\n        item.updatePosition(pos);\n      }\n    });\n  }, 50, true),\n  /**\n   * 更新拖动元素时的delegate\n   * @param {Event} evt 事件句柄\n   * @param {number} x 拖动单个元素时候的x坐标\n   * @param {number} y 拖动单个元素时候的y坐标\n   */\n  updateDelegate: function updateDelegate(evt) {\n    var graph = this.graph;\n    if (!this.delegateRect) {\n      // 拖动多个\n      var parent_1 = graph.get('group');\n      var attrs = deepMix({}, Global.delegateStyle, this.delegateStyle);\n      var _a = this.calculationGroupPosition(evt),\n        cx = _a.x,\n        cy = _a.y,\n        width = _a.width,\n        height = _a.height,\n        minX = _a.minX,\n        minY = _a.minY;\n      this.originPoint = {\n        x: cx,\n        y: cy,\n        width: width,\n        height: height,\n        minX: minX,\n        minY: minY\n      };\n      // model上的x, y是相对于图形中心的，delegateShape是g实例，x,y是绝对坐标\n      this.delegateRect = parent_1.addShape('rect', {\n        attrs: __assign({\n          width: width,\n          height: height,\n          x: cx,\n          y: cy\n        }, attrs),\n        name: 'rect-delegate-shape'\n      });\n      this.delegate = this.delegateRect;\n      this.delegateRect.set('capture', false);\n    } else {\n      var clientX = evt.x - this.origin.x + this.originPoint.minX;\n      var clientY = evt.y - this.origin.y + this.originPoint.minY;\n      this.delegateRect.attr({\n        x: clientX,\n        y: clientY\n      });\n    }\n  },\n  /**\n   * 计算delegate位置，包括左上角左边及宽度和高度\n   * @memberof ItemGroup\n   * @return {object} 计算出来的delegate坐标信息及宽高\n   */\n  calculationGroupPosition: function calculationGroupPosition(evt) {\n    var nodes = this.targets;\n    if (nodes.length === 0) {\n      nodes.push(evt.item);\n    }\n    var minx = Infinity;\n    var maxx = -Infinity;\n    var miny = Infinity;\n    var maxy = -Infinity;\n    // 获取已节点的所有最大最小x y值\n    for (var i = 0; i < nodes.length; i++) {\n      var element = nodes[i];\n      var bbox = element.getBBox();\n      var minX = bbox.minX,\n        minY = bbox.minY,\n        maxX = bbox.maxX,\n        maxY = bbox.maxY;\n      if (minX < minx) {\n        minx = minX;\n      }\n      if (minY < miny) {\n        miny = minY;\n      }\n      if (maxX > maxx) {\n        maxx = maxX;\n      }\n      if (maxY > maxy) {\n        maxy = maxY;\n      }\n    }\n    var x = Math.floor(minx);\n    var y = Math.floor(miny);\n    var width = Math.ceil(maxx) - Math.floor(minx);\n    var height = Math.ceil(maxy) - Math.floor(miny);\n    return {\n      x: x,\n      y: y,\n      width: width,\n      height: height,\n      minX: minx,\n      minY: miny\n    };\n  }\n};","map":{"version":3,"names":["__assign","deepMix","clone","debounce","Global","getDefaultCfg","updateEdge","delegateStyle","enableDelegate","onlyChangeComboSize","comboActiveState","selectedState","enableOptimize","enableDebounce","enableStack","getEvents","validationCombo","item","origin","destroyed","type","getType","onTouchStart","evt","self","touches","originalEvent","event1","event2","preventDefault","e","console","warn","mousedown","target","dragstart","onDragStart","onTouchMove","onDragEnd","onDrag","onMouseDown","onDragMove","_a","_b","call","_this","currentShouldEnd","shouldBegin","hasLocked","group","getContainer","set","cachedCaptureItems","push","isAnchorPoint","get","graph","targets","targetCombo","nodes","findAllByState","currentNodeId","dragNodes","filter","node","nodeId","length","forEach","locked","beforeDragNodes_1","t","getModel","x","y","id","hidenEdge","edges","getEdges","edge","isVisible","getID","hide","point","originPoint","window","self_1","handleDOMContextMenu","document","body","addEventListener","shouldUpdate","updateDelegate","debounceUpdate","map","update","delegateRect","remove","show","refresh","stackData_1","before","combos","after","model","pushStack","emit","items","targetItem","removeEventListener","onDropCombo","shouldEnd","updatePositions","setItemState","updateCombos","targetComboModel_1","nodeModel","comboId","updateComboTree","updateCombo","onDropCanvas","undefined","onDropNode","newParentCombo","findById","combo","onDragEnter","onDragLeave","restore","updateFunc","pos","updateItem","updatePosition","event","parent_1","attrs","calculationGroupPosition","cx","cy","width","height","minX","minY","addShape","name","delegate","clientX","clientY","attr","minx","Infinity","maxx","miny","maxy","i","element","bbox","getBBox","maxX","maxY","Math","floor","ceil"],"sources":["/home/iam/Documents/network/node_modules/@antv/g6-pc/es/behavior/drag-node.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { deepMix, clone, debounce } from '@antv/util';\nimport Global from '../global';\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      updateEdge: true,\n      delegateStyle: {},\n      // 是否开启delegate\n      enableDelegate: false,\n      // 拖动节点过程中是否只改变 Combo 的大小，而不改变其结构\n      onlyChangeComboSize: false,\n      // 拖动过程中目标 combo 状态样式\n      comboActiveState: '',\n      selectedState: 'selected',\n      enableOptimize: false,\n      enableDebounce: false,\n      enableStack: true\n    };\n  },\n  getEvents: function getEvents() {\n    return {\n      'node:mousedown': 'onMouseDown',\n      'drag': 'onDragMove',\n      'dragend': 'onDragEnd',\n      'combo:dragenter': 'onDragEnter',\n      'combo:dragleave': 'onDragLeave',\n      'combo:drop': 'onDropCombo',\n      'node:drop': 'onDropNode',\n      'canvas:drop': 'onDropCanvas',\n      'touchstart': 'onTouchStart',\n      'touchmove': 'onTouchMove',\n      'touchend': 'onDragEnd'\n    };\n  },\n  validationCombo: function validationCombo(item) {\n    if (!this.origin || !item || item.destroyed) {\n      return false;\n    }\n    var type = item.getType();\n    if (type !== 'combo') {\n      return false;\n    }\n    return true;\n  },\n  onTouchStart: function onTouchStart(evt) {\n    if (!evt.item) return;\n    var self = this;\n    try {\n      var touches = evt.originalEvent.touches;\n      var event1 = touches[0];\n      var event2 = touches[1];\n      if (event1 && event2) {\n        return;\n      }\n      evt.preventDefault();\n    } catch (e) {\n      console.warn('Touch original event not exist!');\n    }\n    this.mousedown = {\n      item: evt.item,\n      target: evt.target\n    };\n    this.dragstart = true;\n    self.onDragStart(evt);\n  },\n  onTouchMove: function onTouchMove(e) {\n    var self = this;\n    try {\n      var touches = e.originalEvent.touches;\n      var event1 = touches[0];\n      var event2 = touches[1];\n      if (event1 && event2) {\n        self.onDragEnd(e);\n        return;\n      }\n      e.preventDefault();\n    } catch (e) {\n      console.warn('Touch original event not exist!');\n    }\n    self.onDrag(e);\n  },\n  /**\n   * cache the manipulated item and target, since drag and dragend are global events but not node:*\n   * @param evt event param\n   */\n  onMouseDown: function onMouseDown(evt) {\n    this.mousedown = {\n      item: evt.item,\n      target: evt.target\n    };\n  },\n  /**\n   * trigger dragstart/drag by mousedown and drag events\n   * @param evt event param\n   */\n  onDragMove: function onDragMove(evt) {\n    var _a, _b;\n    if (((_b = (_a = evt.item) === null || _a === void 0 ? void 0 : _a.getType) === null || _b === void 0 ? void 0 : _b.call(_a)) !== 'node') {\n      this.onDragEnd();\n      return;\n    }\n    if (!this.mousedown) return;\n    if (!this.dragstart) {\n      // dragstart\n      this.dragstart = true;\n      this.onDragStart(evt);\n    } else {\n      // drag\n      this.onDrag(__assign(__assign({}, evt), this.mousedown));\n    }\n  },\n  /**\n   * 开始拖动节点\n   * @param evt\n   */\n  onDragStart: function onDragStart(evt) {\n    var _this = this;\n    this.currentShouldEnd = true;\n    if (!this.shouldBegin(__assign(__assign({}, evt), this.mousedown), this)) {\n      return;\n    }\n    var _a = this.mousedown,\n      item = _a.item,\n      target = _a.target;\n    if (!item || item.destroyed || item.hasLocked()) {\n      return;\n    }\n    // 拖动时，设置拖动元素的 capture 为false，则不拾取拖动的元素\n    var group = item.getContainer();\n    group.set('capture', false);\n    if (!this.cachedCaptureItems) this.cachedCaptureItems = [];\n    this.cachedCaptureItems.push(item);\n    // 如果拖动的target 是linkPoints / anchorPoints 则不允许拖动\n    if (target) {\n      var isAnchorPoint = target.get('isAnchorPoint');\n      if (isAnchorPoint) {\n        return;\n      }\n    }\n    var graph = this.graph;\n    this.targets = [];\n    // 将节点拖入到指定的 Combo\n    this.targetCombo = null;\n    // 获取所有选中的元素\n    var nodes = graph.findAllByState('node', this.selectedState);\n    var currentNodeId = item.get('id');\n    // 当前拖动的节点是否是选中的节点\n    var dragNodes = nodes.filter(function (node) {\n      var nodeId = node.get('id');\n      return currentNodeId === nodeId;\n    });\n    // 只拖动当前节点\n    if (dragNodes.length === 0) {\n      this.targets.push(item);\n    } else if (nodes.length > 1) {\n      // 拖动多个节点\n      nodes.forEach(function (node) {\n        var locked = node.hasLocked();\n        if (!locked) {\n          _this.targets.push(node);\n        }\n      });\n    } else {\n      this.targets.push(item);\n    }\n    if (this.graph.get('enabledStack') && this.enableStack) {\n      var beforeDragNodes_1 = [];\n      this.targets.forEach(function (t) {\n        var _a = t.getModel(),\n          x = _a.x,\n          y = _a.y,\n          id = _a.id;\n        beforeDragNodes_1.push({\n          x: x,\n          y: y,\n          id: id\n        });\n      });\n      this.set('beforeDragNodes', beforeDragNodes_1);\n    }\n    this.hidenEdge = {};\n    if (this.get('updateEdge') && this.enableOptimize && !this.enableDelegate) {\n      this.targets.forEach(function (node) {\n        var edges = node.getEdges();\n        edges.forEach(function (edge) {\n          if (!edge.isVisible()) return;\n          _this.hidenEdge[edge.getID()] = true;\n          edge.hide();\n        });\n      });\n    }\n    this.origin = {\n      x: evt.x,\n      y: evt.y\n    };\n    this.point = {};\n    this.originPoint = {};\n    // 绑定浏览器右键监听，触发拖拽结束，结束拖拽时移除\n    if (typeof window !== 'undefined') {\n      var self_1 = this;\n      this.handleDOMContextMenu = function () {\n        return self_1.onDragEnd();\n      };\n      document.body.addEventListener('contextmenu', this.handleDOMContextMenu);\n    }\n  },\n  /**\n   * 持续拖动节点\n   * @param evt\n   */\n  onDrag: function onDrag(evt) {\n    var _this = this;\n    if (!this.mousedown || !this.origin) return;\n    if (!this.shouldUpdate(evt, this)) return;\n    if (this.get('enableDelegate')) {\n      this.updateDelegate(evt);\n    } else {\n      if (this.enableDebounce) this.debounceUpdate({\n        targets: this.targets,\n        graph: this.graph,\n        point: this.point,\n        origin: this.origin,\n        evt: evt,\n        updateEdge: this.get('updateEdge')\n      });else this.targets.map(function (target) {\n        _this.update(target, evt);\n      });\n    }\n  },\n  /**\n   * 拖动结束，设置拖动元素capture为true，更新元素位置，如果是拖动涉及到 combo，则更新 combo 结构\n   * @param evt\n   */\n  onDragEnd: function onDragEnd(evt) {\n    var _this = this;\n    var _a;\n    this.mousedown = false;\n    this.dragstart = false;\n    if (!this.origin) {\n      return;\n    }\n    // 拖动结束后，设置拖动元素 group 的 capture 为 true，允许拾取拖动元素\n    (_a = this.cachedCaptureItems) === null || _a === void 0 ? void 0 : _a.forEach(function (item) {\n      var group = item.getContainer();\n      group.set('capture', true);\n    });\n    this.cachedCaptureItems = [];\n    if (this.delegateRect) {\n      this.delegateRect.remove();\n      this.delegateRect = null;\n    }\n    if (this.get('updateEdge') && this.enableOptimize && !this.enableDelegate) {\n      this.targets.forEach(function (node) {\n        var edges = node.getEdges();\n        edges.forEach(function (edge) {\n          if (_this.hidenEdge[edge.getID()]) edge.show();\n          edge.refresh();\n        });\n      });\n    }\n    this.hidenEdge = {};\n    var graph = this.graph;\n    // 拖动结束后，入栈\n    if (graph.get('enabledStack') && this.enableStack) {\n      var stackData_1 = {\n        before: {\n          nodes: [],\n          edges: [],\n          combos: []\n        },\n        after: {\n          nodes: [],\n          edges: [],\n          combos: []\n        }\n      };\n      this.get('beforeDragNodes').forEach(function (model) {\n        stackData_1.before.nodes.push(model);\n      });\n      this.targets.forEach(function (target) {\n        var _a = target.getModel(),\n          x = _a.x,\n          y = _a.y,\n          id = _a.id;\n        stackData_1.after.nodes.push({\n          x: x,\n          y: y,\n          id: id\n        });\n      });\n      graph.pushStack('update', clone(stackData_1));\n    }\n    // 拖动结束后emit事件，将当前操作的节点抛出去，目标节点为null\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: null\n    });\n    this.point = {};\n    this.origin = null;\n    this.originPoint = {};\n    this.targets.length = 0;\n    this.targetCombo = null;\n    // 结束拖拽时移除浏览器右键监听\n    if (typeof window !== 'undefined') {\n      document.body.removeEventListener('contextmenu', this.handleDOMContextMenu);\n    }\n  },\n  /**\n   * 拖动过程中将节点放置到 combo 上\n   * @param evt\n   */\n  onDropCombo: function onDropCombo(evt) {\n    var item = evt.item;\n    this.currentShouldEnd = this.shouldEnd(evt, item, this);\n    // 若不允许结束，则将节点位置设置回初识位置。后面的逻辑仍需要执行\n    this.updatePositions(evt, !this.currentShouldEnd);\n    if (!this.currentShouldEnd || !this.validationCombo(item)) return;\n    var graph = this.graph;\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, false);\n    }\n    this.targetCombo = item;\n    // 拖动结束后是动态改变 Combo 大小还是将节点从 Combo 中删除\n    if (this.onlyChangeComboSize) {\n      // 拖动节点结束后，动态改变 Combo 的大小\n      graph.updateCombos();\n    } else {\n      var targetComboModel_1 = item.getModel();\n      this.targets.map(function (node) {\n        var nodeModel = node.getModel();\n        if (nodeModel.comboId !== targetComboModel_1.id) {\n          graph.updateComboTree(node, targetComboModel_1.id);\n        }\n      });\n      graph.updateCombo(item);\n    }\n    // 将节点拖动到 combo 上面，emit事件抛出当前操作的节点及目标 combo\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: this.targetCombo\n    });\n  },\n  onDropCanvas: function onDropCanvas(evt) {\n    var graph = this.graph;\n    this.currentShouldEnd = this.shouldEnd(evt, undefined, this);\n    // 若不允许结束，则将节点位置设置回初识位置。后面的逻辑仍需要执行\n    this.updatePositions(evt, !this.currentShouldEnd);\n    if (!this.targets || this.targets.length === 0 || !this.currentShouldEnd) return;\n    if (this.onlyChangeComboSize) {\n      // 拖动节点结束后，动态改变 Combo 的大小\n      graph.updateCombos();\n    } else {\n      this.targets.map(function (node) {\n        // 拖动的节点有 comboId，即是从其他 combo 中拖出时才处理\n        var model = node.getModel();\n        if (model.comboId) {\n          graph.updateComboTree(node);\n        }\n      });\n    }\n  },\n  /**\n   * 拖动放置到某个 combo 中的子 node 上\n   * @param evt\n   */\n  onDropNode: function onDropNode(evt) {\n    if (!this.targets || this.targets.length === 0) return;\n    var self = this;\n    var item = evt.item;\n    var graph = self.graph;\n    var comboId = item.getModel().comboId;\n    var newParentCombo = comboId ? graph.findById(comboId) : undefined;\n    this.currentShouldEnd = this.shouldEnd(evt, newParentCombo, this);\n    // 若不允许结束，则将节点位置设置回初识位置。后面的逻辑仍需要执行\n    this.updatePositions(evt, !this.currentShouldEnd);\n    if (!this.currentShouldEnd) return;\n    if (this.onlyChangeComboSize) {\n      graph.updateCombos();\n    } else if (comboId) {\n      var combo = graph.findById(comboId);\n      if (self.comboActiveState) {\n        graph.setItemState(combo, self.comboActiveState, false);\n      }\n      this.targets.map(function (node) {\n        var nodeModel = node.getModel();\n        if (comboId !== nodeModel.comboId) {\n          graph.updateComboTree(node, comboId);\n        }\n      });\n      graph.updateCombo(combo);\n    } else {\n      this.targets.map(function (node) {\n        var model = node.getModel();\n        if (model.comboId) {\n          graph.updateComboTree(node);\n        }\n      });\n    }\n    // 将节点拖动到另外个节点上面，emit 事件抛出当前操作的节点及目标节点\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: item\n    });\n  },\n  /**\n   * 将节点拖入到 Combo 中\n   * @param evt\n   */\n  onDragEnter: function onDragEnter(evt) {\n    var item = evt.item;\n    if (!this.validationCombo(item)) return;\n    var graph = this.graph;\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, true);\n    }\n  },\n  /**\n   * 将节点从 Combo 中拖出\n   * @param evt\n   */\n  onDragLeave: function onDragLeave(evt) {\n    var item = evt.item;\n    if (!this.validationCombo(item)) return;\n    var graph = this.graph;\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, false);\n    }\n  },\n  updatePositions: function updatePositions(evt, restore) {\n    var _this = this;\n    if (!this.targets || this.targets.length === 0) return;\n    // 当开启 delegate 时，拖动结束后需要更新所有已选中节点的位置\n    if (this.get('enableDelegate')) {\n      if (this.enableDebounce) this.debounceUpdate({\n        targets: this.targets,\n        graph: this.graph,\n        point: this.point,\n        origin: this.origin,\n        evt: evt,\n        updateEdge: this.get('updateEdge'),\n        updateFunc: this.update\n      });else if (!restore) this.targets.map(function (node) {\n        return _this.update(node, evt);\n      });\n    } else this.targets.map(function (node) {\n      return _this.update(node, evt, restore);\n    });\n  },\n  /**\n   * 更新节点\n   * @param item 拖动的节点实例\n   * @param evt\n   */\n  update: function update(item, evt, restore) {\n    var origin = this.origin;\n    var model = item.get('model');\n    var nodeId = item.get('id');\n    if (!this.point[nodeId]) {\n      this.point[nodeId] = {\n        x: model.x || 0,\n        y: model.y || 0\n      };\n    }\n    var x = evt.x - origin.x + this.point[nodeId].x;\n    var y = evt.y - origin.y + this.point[nodeId].y;\n    if (restore) {\n      x += origin.x - evt.x;\n      y += origin.y - evt.y;\n    }\n    var pos = {\n      x: x,\n      y: y\n    };\n    if (this.get('updateEdge')) {\n      this.graph.updateItem(item, pos, false);\n    } else {\n      item.updatePosition(pos);\n    }\n  },\n  /**\n   * 限流更新节点\n   * @param item 拖动的节点实例\n   * @param evt\n   */\n  debounceUpdate: debounce(function (event) {\n    var targets = event.targets,\n      graph = event.graph,\n      point = event.point,\n      origin = event.origin,\n      evt = event.evt,\n      updateEdge = event.updateEdge,\n      updateFunc = event.updateFunc;\n    targets.map(function (item) {\n      var model = item.get('model');\n      var nodeId = item.get('id');\n      if (!point[nodeId]) {\n        point[nodeId] = {\n          x: model.x || 0,\n          y: model.y || 0\n        };\n      }\n      var x = evt.x - origin.x + point[nodeId].x;\n      var y = evt.y - origin.y + point[nodeId].y;\n      var pos = {\n        x: x,\n        y: y\n      };\n      if (updateEdge) {\n        graph.updateItem(item, pos, false);\n      } else {\n        item.updatePosition(pos);\n      }\n    });\n  }, 50, true),\n  /**\n   * 更新拖动元素时的delegate\n   * @param {Event} evt 事件句柄\n   * @param {number} x 拖动单个元素时候的x坐标\n   * @param {number} y 拖动单个元素时候的y坐标\n   */\n  updateDelegate: function updateDelegate(evt) {\n    var graph = this.graph;\n    if (!this.delegateRect) {\n      // 拖动多个\n      var parent_1 = graph.get('group');\n      var attrs = deepMix({}, Global.delegateStyle, this.delegateStyle);\n      var _a = this.calculationGroupPosition(evt),\n        cx = _a.x,\n        cy = _a.y,\n        width = _a.width,\n        height = _a.height,\n        minX = _a.minX,\n        minY = _a.minY;\n      this.originPoint = {\n        x: cx,\n        y: cy,\n        width: width,\n        height: height,\n        minX: minX,\n        minY: minY\n      };\n      // model上的x, y是相对于图形中心的，delegateShape是g实例，x,y是绝对坐标\n      this.delegateRect = parent_1.addShape('rect', {\n        attrs: __assign({\n          width: width,\n          height: height,\n          x: cx,\n          y: cy\n        }, attrs),\n        name: 'rect-delegate-shape'\n      });\n      this.delegate = this.delegateRect;\n      this.delegateRect.set('capture', false);\n    } else {\n      var clientX = evt.x - this.origin.x + this.originPoint.minX;\n      var clientY = evt.y - this.origin.y + this.originPoint.minY;\n      this.delegateRect.attr({\n        x: clientX,\n        y: clientY\n      });\n    }\n  },\n  /**\n   * 计算delegate位置，包括左上角左边及宽度和高度\n   * @memberof ItemGroup\n   * @return {object} 计算出来的delegate坐标信息及宽高\n   */\n  calculationGroupPosition: function calculationGroupPosition(evt) {\n    var nodes = this.targets;\n    if (nodes.length === 0) {\n      nodes.push(evt.item);\n    }\n    var minx = Infinity;\n    var maxx = -Infinity;\n    var miny = Infinity;\n    var maxy = -Infinity;\n    // 获取已节点的所有最大最小x y值\n    for (var i = 0; i < nodes.length; i++) {\n      var element = nodes[i];\n      var bbox = element.getBBox();\n      var minX = bbox.minX,\n        minY = bbox.minY,\n        maxX = bbox.maxX,\n        maxY = bbox.maxY;\n      if (minX < minx) {\n        minx = minX;\n      }\n      if (minY < miny) {\n        miny = minY;\n      }\n      if (maxX > maxx) {\n        maxx = maxX;\n      }\n      if (maxY > maxy) {\n        maxy = maxY;\n      }\n    }\n    var x = Math.floor(minx);\n    var y = Math.floor(miny);\n    var width = Math.ceil(maxx) - Math.floor(minx);\n    var height = Math.ceil(maxy) - Math.floor(miny);\n    return {\n      x: x,\n      y: y,\n      width: width,\n      height: height,\n      minX: minx,\n      minY: miny\n    };\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}