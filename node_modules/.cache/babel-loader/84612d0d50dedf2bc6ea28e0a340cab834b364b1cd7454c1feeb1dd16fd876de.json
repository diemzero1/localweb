{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { get, isArray, map } from '@antv/util';\nimport { geometry as baseGeometry } from '../../../adaptor/geometries/base';\nimport { findGeometry, flow } from '../../../utils';\nimport { getTooltipMapping } from '../../../utils/tooltip';\nimport { FUNNEL_CONVERSATION, FUNNEL_MAPPING_VALUE, FUNNEL_PERCENT } from '../constant';\nimport { conversionTagComponent, transformData } from './common';\n/**\n * 处理字段数据\n * @param params\n */\nfunction field(params) {\n  var chart = params.chart,\n    options = params.options;\n  var _a = options.data,\n    data = _a === void 0 ? [] : _a,\n    yField = options.yField,\n    maxSize = options.maxSize,\n    minSize = options.minSize;\n  var formatData = transformData(data, data, {\n    yField: yField,\n    maxSize: maxSize,\n    minSize: minSize\n  });\n  // 绘制漏斗图\n  chart.data(formatData);\n  return params;\n}\n/**\n * geometry处理\n * @param params\n */\nfunction geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var xField = options.xField,\n    yField = options.yField,\n    color = options.color,\n    tooltip = options.tooltip,\n    label = options.label,\n    _a = options.shape,\n    shape = _a === void 0 ? 'funnel' : _a,\n    funnelStyle = options.funnelStyle,\n    state = options.state;\n  var _b = getTooltipMapping(tooltip, [xField, yField]),\n    fields = _b.fields,\n    formatter = _b.formatter;\n  baseGeometry({\n    chart: chart,\n    options: {\n      type: 'interval',\n      xField: xField,\n      yField: FUNNEL_MAPPING_VALUE,\n      colorField: xField,\n      tooltipFields: isArray(fields) && fields.concat([FUNNEL_PERCENT, FUNNEL_CONVERSATION]),\n      mapping: {\n        shape: shape,\n        tooltip: formatter,\n        color: color,\n        style: funnelStyle\n      },\n      label: label,\n      state: state\n    }\n  });\n  var geo = findGeometry(params.chart, 'interval');\n  geo.adjust('symmetric');\n  return params;\n}\n/**\n * 转置处理\n * @param params\n */\nfunction transpose(params) {\n  var chart = params.chart,\n    options = params.options;\n  var isTransposed = options.isTransposed;\n  chart.coordinate({\n    type: 'rect',\n    actions: !isTransposed ? [['transpose'], ['scale', 1, -1]] : []\n  });\n  return params;\n}\n/**\n * 转化率组件\n * @param params\n */\nexport function conversionTag(params) {\n  var options = params.options,\n    chart = params.chart;\n  var maxSize = options.maxSize;\n  // 获取形状位置，再转化为需要的转化率位置\n  var dataArray = get(chart, ['geometries', '0', 'dataArray'], []);\n  var size = get(chart, ['options', 'data', 'length']);\n  var x = map(dataArray, function (item) {\n    return get(item, ['0', 'nextPoints', '0', 'x']) * size - 0.5;\n  });\n  var getLineCoordinate = function (datum, datumIndex, data, initLineOption) {\n    var percent = maxSize - (maxSize - datum[FUNNEL_MAPPING_VALUE]) / 2;\n    return __assign(__assign({}, initLineOption), {\n      start: [x[datumIndex - 1] || datumIndex - 0.5, percent],\n      end: [x[datumIndex - 1] || datumIndex - 0.5, percent + 0.05]\n    });\n  };\n  conversionTagComponent(getLineCoordinate)(params);\n  return params;\n}\n/**\n * 基础漏斗\n * @param chart\n * @param options\n */\nexport function basicFunnel(params) {\n  return flow(field, geometry, transpose, conversionTag)(params);\n}","map":{"version":3,"mappings":"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","names":["get","isArray","map","geometry","baseGeometry","findGeometry","flow","getTooltipMapping","FUNNEL_CONVERSATION","FUNNEL_MAPPING_VALUE","FUNNEL_PERCENT","conversionTagComponent","transformData","field","params","options","data","yField","maxSize","minSize","formatData","chart","color","tooltip","label","_a","shape","funnelStyle","state","xField","fields","formatter","type","colorField","tooltipFields","concat","mapping","style","geo","adjust","transpose","coordinate","actions","isTransposed","conversionTag","dataArray","size","x","item","getLineCoordinate","datum","datumIndex","initLineOption","percent","start","end","basicFunnel"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/g2plot/src/plots/funnel/geometries/basic.ts"],"sourcesContent":["import { Types } from '@antv/g2';\nimport { get, isArray, map } from '@antv/util';\nimport { geometry as baseGeometry } from '../../../adaptor/geometries/base';\nimport { Params } from '../../../core/adaptor';\nimport { Data, Datum } from '../../../types/common';\nimport { findGeometry, flow } from '../../../utils';\nimport { getTooltipMapping } from '../../../utils/tooltip';\nimport { FUNNEL_CONVERSATION, FUNNEL_MAPPING_VALUE, FUNNEL_PERCENT } from '../constant';\nimport { FunnelOptions } from '../types';\nimport { conversionTagComponent, transformData } from './common';\n\n/**\n * 处理字段数据\n * @param params\n */\nfunction field(params: Params<FunnelOptions>): Params<FunnelOptions> {\n  const { chart, options } = params;\n  const { data = [], yField, maxSize, minSize } = options;\n  const formatData = transformData(data, data, {\n    yField,\n    maxSize,\n    minSize,\n  });\n\n  // 绘制漏斗图\n  chart.data(formatData);\n  return params;\n}\n\n/**\n * geometry处理\n * @param params\n */\nfunction geometry(params: Params<FunnelOptions>): Params<FunnelOptions> {\n  const { chart, options } = params;\n  const { xField, yField, color, tooltip, label, shape = 'funnel', funnelStyle, state } = options;\n\n  const { fields, formatter } = getTooltipMapping(tooltip, [xField, yField]);\n\n  baseGeometry({\n    chart,\n    options: {\n      type: 'interval',\n      xField: xField,\n      yField: FUNNEL_MAPPING_VALUE,\n      colorField: xField,\n      tooltipFields: isArray(fields) && fields.concat([FUNNEL_PERCENT, FUNNEL_CONVERSATION]),\n      mapping: {\n        shape,\n        tooltip: formatter,\n        color,\n        style: funnelStyle,\n      },\n      label,\n      state,\n    },\n  });\n\n  const geo = findGeometry(params.chart, 'interval');\n  geo.adjust('symmetric');\n\n  return params;\n}\n\n/**\n * 转置处理\n * @param params\n */\nfunction transpose(params: Params<FunnelOptions>): Params<FunnelOptions> {\n  const { chart, options } = params;\n  const { isTransposed } = options;\n  chart.coordinate({\n    type: 'rect',\n    actions: !isTransposed ? [['transpose'], ['scale', 1, -1]] : [],\n  });\n  return params;\n}\n\n/**\n * 转化率组件\n * @param params\n */\nexport function conversionTag(params: Params<FunnelOptions>): Params<FunnelOptions> {\n  const { options, chart } = params;\n  const { maxSize } = options;\n\n  // 获取形状位置，再转化为需要的转化率位置\n  const dataArray = get(chart, ['geometries', '0', 'dataArray'], []);\n  const size = get(chart, ['options', 'data', 'length']);\n  const x = map(dataArray, (item) => get(item, ['0', 'nextPoints', '0', 'x']) * size - 0.5);\n\n  const getLineCoordinate = (\n    datum: Datum,\n    datumIndex: number,\n    data: Data,\n    initLineOption: Record<string, any>\n  ): Types.LineOption => {\n    const percent = maxSize - (maxSize - datum[FUNNEL_MAPPING_VALUE]) / 2;\n    return {\n      ...initLineOption,\n      start: [x[datumIndex - 1] || datumIndex - 0.5, percent],\n      end: [x[datumIndex - 1] || datumIndex - 0.5, percent + 0.05],\n    };\n  };\n\n  conversionTagComponent(getLineCoordinate)(params);\n\n  return params;\n}\n\n/**\n * 基础漏斗\n * @param chart\n * @param options\n */\nexport function basicFunnel(params: Params<FunnelOptions>) {\n  return flow(field, geometry, transpose, conversionTag)(params);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}