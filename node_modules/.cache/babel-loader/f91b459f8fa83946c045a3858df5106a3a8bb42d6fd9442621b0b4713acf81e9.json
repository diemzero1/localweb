{"ast":null,"code":"import { __extends } from \"tslib\";\nimport Hierarchy from '@antv/hierarchy';\nimport { each, isObject, isString } from '@antv/util';\nimport Util from '../util';\nimport Graph from './graph';\nvar radialLayout = Util.radialLayout,\n  traverseTree = Util.traverseTree;\nvar TreeGraph = /** @class */function (_super) {\n  __extends(TreeGraph, _super);\n  function TreeGraph(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    _this.layoutAnimating = false;\n    // 用于缓存动画结束后需要删除的节点\n    _this.set('removeList', []);\n    _this.set('layoutMethod', _this.getLayout());\n    return _this;\n  }\n  /**\n   * 通过 Layout 配置获取布局配置\n   */\n  TreeGraph.prototype.getLayout = function () {\n    var layout = this.get('layout');\n    if (!layout) {\n      return null;\n    }\n    if (typeof layout === 'function') {\n      return layout;\n    }\n    if (!layout.type) {\n      layout.type = 'dendrogram';\n    }\n    if (!layout.direction) {\n      layout.direction = 'TB';\n    }\n    if (layout.radial) {\n      return function (data) {\n        var layoutData = Hierarchy[layout.type](data, layout);\n        radialLayout(layoutData);\n        return layoutData;\n      };\n    }\n    return function (data) {\n      return Hierarchy[layout.type](data, layout);\n    };\n  };\n  /**\n   * 返回指定节点在树图数据中的索引\n   * @param children 树图数据\n   * @param child 树图中某一个 Item 的数据\n   */\n  TreeGraph.indexOfChild = function (children, id) {\n    var index = -1;\n    // eslint-disable-next-line consistent-return\n    each(children, function (former, i) {\n      if (id === former.id) {\n        index = i;\n        return false;\n      }\n    });\n    return index;\n  };\n  TreeGraph.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    // 树图默认打开动画\n    cfg.animate = true;\n    return cfg;\n  };\n  /**\n   * 向🌲树中添加数据\n   * @param treeData 树图数据\n   * @param parent 父节点实例\n   * @param animate 是否开启动画\n   */\n  TreeGraph.prototype.innerAddChild = function (treeData, parent, animate) {\n    var self = this;\n    var model = treeData.data;\n    if (model) {\n      // model 中应存储真实的数据，特别是真实的 children\n      model.x = treeData.x;\n      model.y = treeData.y;\n      model.depth = treeData.depth;\n    }\n    var node = self.addItem('node', model, false);\n    if (parent) {\n      node.set('parent', parent);\n      if (animate) {\n        var origin_1 = parent.get('originAttrs');\n        if (origin_1) {\n          node.set('originAttrs', origin_1);\n        } else {\n          var parentModel = parent.getModel();\n          node.set('originAttrs', {\n            x: parentModel.x,\n            y: parentModel.y\n          });\n        }\n      }\n      var childrenList = parent.get('children');\n      if (!childrenList) {\n        parent.set('children', [node]);\n      } else {\n        childrenList.push(node);\n      }\n      self.addItem('edge', {\n        source: parent.get('id'),\n        target: node.get('id'),\n        id: \"\".concat(parent.get('id'), \":\").concat(node.get('id'))\n      }, false);\n    }\n    // 渲染到视图上应参考布局的children, 避免多绘制了收起的节点\n    each(treeData.children || [], function (child) {\n      self.innerAddChild(child, node, animate);\n    });\n    self.emit('afteraddchild', {\n      item: node,\n      parent: parent\n    });\n    return node;\n  };\n  /**\n   * 将数据上的变更转换到视图上\n   * @param data\n   * @param parent\n   * @param animate\n   */\n  TreeGraph.prototype.innerUpdateChild = function (data, parent, animate) {\n    var self = this;\n    var current = self.findById(data.id);\n    // 若子树不存在，整体添加即可\n    if (!current) {\n      self.innerAddChild(data, parent, animate);\n      return;\n    }\n    // 更新新节点下所有子节点\n    each(data.children || [], function (child) {\n      self.innerUpdateChild(child, current, animate);\n    });\n    // 用现在节点的children实例来删除移除的子节点\n    var children = current.get('children');\n    if (children) {\n      var len = children.length;\n      if (len > 0) {\n        for (var i = children.length - 1; i >= 0; i--) {\n          var child = children[i].getModel();\n          if (TreeGraph.indexOfChild(data.children || [], child.id) === -1) {\n            self.innerRemoveChild(child.id, {\n              x: data.x,\n              y: data.y\n            }, animate);\n            // 更新父节点下缓存的子节点 item 实例列表\n            children.splice(i, 1);\n          }\n        }\n      }\n    }\n    var oriX;\n    var oriY;\n    if (current.get('originAttrs')) {\n      oriX = current.get('originAttrs').x;\n      oriY = current.get('originAttrs').y;\n    }\n    var model = current.getModel();\n    if (animate) {\n      // 如果有动画，先缓存节点运动再更新节点\n      current.set('originAttrs', {\n        x: model.x,\n        y: model.y\n      });\n    }\n    current.set('model', Object.assign(model, data.data));\n    if (oriX !== data.x || oriY !== data.y) {\n      current.updatePosition({\n        x: data.x,\n        y: data.y\n      });\n    }\n  };\n  /**\n   * 删除子节点Item对象\n   * @param id\n   * @param to\n   * @param animate\n   */\n  TreeGraph.prototype.innerRemoveChild = function (id, to, animate) {\n    var self = this;\n    var node = self.findById(id);\n    if (!node) {\n      return;\n    }\n    each(node.get('children'), function (child) {\n      self.innerRemoveChild(child.getModel().id, to, animate);\n    });\n    if (animate) {\n      var model = node.getModel();\n      node.set('to', to);\n      node.set('originAttrs', {\n        x: model.x,\n        y: model.y\n      });\n      self.get('removeList').push(node);\n    } else {\n      self.removeItem(node, false);\n    }\n  };\n  /**\n   * 更新数据模型，差量更新并重新渲染\n   * @param {object} data 数据模型\n   */\n  TreeGraph.prototype.changeData = function (data) {\n    var self = this;\n    // 更改数据源后，取消所有状态\n    this.getNodes().map(function (node) {\n      return self.clearItemStates(node);\n    });\n    this.getEdges().map(function (edge) {\n      return self.clearItemStates(edge);\n    });\n    if (data) {\n      self.data(data);\n      self.render();\n    } else {\n      self.layout(this.get('fitView'));\n    }\n  };\n  /**\n   * 已更名为 updateLayout，为保持兼容暂且保留。\n   * 更改并应用树布局算法\n   * @param {object} layout 布局算法\n   */\n  TreeGraph.prototype.changeLayout = function (layout) {\n    // eslint-disable-next-line no-console\n    console.warn('Please call updateLayout instead of changeLayout. changeLayout will be discarded soon');\n    var self = this;\n    self.updateLayout(layout);\n  };\n  /**\n   * 更改并应用树布局算法\n   * @param {object} layout 布局算法\n   */\n  TreeGraph.prototype.updateLayout = function (layout) {\n    var self = this;\n    if (!layout) {\n      // eslint-disable-next-line no-console\n      console.warn('layout cannot be null');\n      return;\n    }\n    self.set('layout', layout);\n    self.set('layoutMethod', self.getLayout());\n    self.layout();\n  };\n  /**\n   * 已更名为 layout，为保持兼容暂且保留。\n   * 根据目前的 data 刷新布局，更新到画布上。用于变更数据之后刷新视图。\n   * @param {boolean} fitView 更新布局时是否需要适应窗口\n   */\n  TreeGraph.prototype.refreshLayout = function (fitView) {\n    // eslint-disable-next-line no-console\n    console.warn('Please call layout instead of refreshLayout. refreshLayout will be discarded soon');\n    var self = this;\n    self.layout(fitView);\n  };\n  /**\n   * 根据目前的 data 刷新布局，更新到画布上。用于变更数据之后刷新视图。\n   * @param {boolean} fitView 更新布局时是否需要适应窗口\n   */\n  TreeGraph.prototype.layout = function (fitView) {\n    var self = this;\n    var data = self.get('data');\n    var layoutMethod = self.get('layoutMethod');\n    var layoutData = layoutMethod ? layoutMethod(data, self.get('layout')) : data;\n    var animate = self.get('animate');\n    self.emit('beforerefreshlayout', {\n      data: data,\n      layoutData: layoutData\n    });\n    self.emit('beforelayout');\n    self.innerUpdateChild(layoutData, undefined, animate);\n    if (fitView) {\n      var viewController = self.get('viewController');\n      viewController.fitView();\n    }\n    if (!animate) {\n      // 如果没有动画，目前仅更新了节点的位置，刷新一下边的样式\n      self.refresh();\n      self.paint();\n    } else {\n      self.layoutAnimate(layoutData);\n    }\n    self.emit('afterrefreshlayout', {\n      data: data,\n      layoutData: layoutData\n    });\n    self.emit('afterlayout');\n  };\n  /**\n   * 添加子树到对应 id 的节点\n   * @param {TreeGraphData} data 子树数据模型\n   * @param {string} parent 子树的父节点id\n   */\n  TreeGraph.prototype.addChild = function (data, parent) {\n    var self = this;\n    self.emit('beforeaddchild', {\n      model: data,\n      parent: parent\n    });\n    // 将数据添加到源数据中，走changeData方法\n    if (!isString(parent)) {\n      parent = parent.get('id');\n    }\n    var parentData = self.findDataById(parent);\n    if (parentData) {\n      if (!parentData.children) {\n        parentData.children = [];\n      }\n      parentData.children.push(data);\n      var parentItem = self.findById(parent);\n      parentItem.refresh();\n      self.changeData();\n    }\n  };\n  /**\n   * 更新某个节点下的所有子节点\n   * @param {TreeGraphData[]} data 子树数据模型集合\n   * @param {string} parent 子树的父节点id\n   */\n  TreeGraph.prototype.updateChildren = function (data, parentId) {\n    var self = this;\n    // 如果没有父节点或找不到该节点，是全量的更新，直接重置data\n    var parentItem = self.findById(parentId);\n    if (!parentId || !parentItem) {\n      console.warn(\"Update children failed! There is no node with id '\".concat(parentId, \"'\"));\n      return;\n    }\n    var parentModel = self.findDataById(parentId);\n    parentModel.children = data;\n    parentItem.refresh();\n    self.changeData();\n  };\n  /**\n   * 更新源数据，差量更新子树\n   * @param {TreeGraphData} data 子树数据模型\n   * @param {string} parentId 子树的父节点id\n   */\n  TreeGraph.prototype.updateChild = function (data, parentId) {\n    var self = this;\n    // 如果没有父节点或找不到该节点，是全量的更新，直接重置data\n    if (!parentId || !self.findById(parentId)) {\n      self.changeData(data);\n      return;\n    }\n    var parentModel = self.findDataById(parentId);\n    var current = self.findById(data.id);\n    if (!parentModel.children) {\n      // 当 current 不存在时，children 为空数组\n      parentModel.children = [];\n    }\n    // 如果不存在该节点，则添加\n    if (!current) {\n      parentModel.children.push(data);\n    } else {\n      var index = TreeGraph.indexOfChild(parentModel.children, data.id);\n      if (index > -1) parentModel.children[index] = data;\n    }\n    var parentItem = self.findById(parentId);\n    parentItem === null || parentItem === void 0 ? void 0 : parentItem.refresh();\n    self.changeData();\n  };\n  /**\n   * 删除子树\n   * @param {string} id 子树根节点id\n   */\n  TreeGraph.prototype.removeChild = function (id) {\n    var self = this;\n    var node = self.findById(id);\n    var parent;\n    if (!node) {\n      parent = self.getNodes().find(function (node) {\n        var children = node.getModel().children || [];\n        return !!children.find(function (child) {\n          return child.id === id;\n        });\n      });\n    } else {\n      parent = node === null || node === void 0 ? void 0 : node.get('parent');\n    }\n    if (parent && !parent.destroyed) {\n      var parentId = parent.get('id');\n      var parentNode = self.findDataById(parentId);\n      var siblings = parentNode && parentNode.children || [];\n      var index = TreeGraph.indexOfChild(siblings, id);\n      siblings.splice(index, 1);\n      parent.refresh();\n    }\n    self.changeData();\n  };\n  /**\n   * 根据id获取对应的源数据\n   * @param {string} id 元素id\n   * @param {TreeGraphData | undefined} parent 从哪个节点开始寻找，为空时从根节点开始查找\n   * @return {TreeGraphData} 对应源数据\n   */\n  TreeGraph.prototype.findDataById = function (id, parent) {\n    var self = this;\n    if (!parent) {\n      parent = self.get('data');\n    }\n    if (id === parent.id) {\n      return parent;\n    }\n    var result = null;\n    // eslint-disable-next-line consistent-return\n    each(parent.children || [], function (child) {\n      if (child.id === id) {\n        result = child;\n        return false;\n      }\n      result = self.findDataById(id, child);\n      if (result) {\n        return false;\n      }\n    });\n    return result;\n  };\n  /**\n   * 布局动画接口，用于数据更新时做节点位置更新的动画\n   * @param {TreeGraphData} data 更新的数据\n   * @param {function} onFrame 定义节点位置更新时如何移动\n   */\n  TreeGraph.prototype.layoutAnimate = function (data, onFrame) {\n    var self = this;\n    var animateCfg = this.get('animateCfg');\n    self.emit('beforeanimate', {\n      data: data\n    });\n    // 如果边中没有指定锚点，但是本身有锚点控制，在动画过程中保持锚点不变\n    self.getEdges().forEach(function (edge) {\n      var model = edge.get('model');\n      if (!model.sourceAnchor) {\n        model.sourceAnchor = edge.get('sourceAnchorIndex');\n      }\n    });\n    this.get('canvas').animate(function (ratio) {\n      traverseTree(data, function (child) {\n        var node = self.findById(child.id);\n        // 只有当存在node的时候才执行\n        if (node) {\n          var origin_2 = node.get('originAttrs');\n          var model = node.get('model');\n          if (!origin_2) {\n            origin_2 = {\n              x: model.x,\n              y: model.y\n            };\n            node.set('originAttrs', origin_2);\n          }\n          if (onFrame) {\n            var attrs = onFrame(node, ratio, origin_2, data);\n            node.set('model', Object.assign(model, attrs));\n          } else {\n            model.x = origin_2.x + (child.x - origin_2.x) * ratio;\n            model.y = origin_2.y + (child.y - origin_2.y) * ratio;\n          }\n        }\n        return true;\n      });\n      each(self.get('removeList'), function (node) {\n        var model = node.getModel();\n        var from = node.get('originAttrs');\n        var to = node.get('to');\n        model.x = from.x + (to.x - from.x) * ratio;\n        model.y = from.y + (to.y - from.y) * ratio;\n      });\n      self.refreshPositions();\n    }, {\n      duration: animateCfg.duration,\n      easing: animateCfg.ease,\n      callback: function callback() {\n        each(self.getNodes(), function (node) {\n          node.set('originAttrs', null);\n        });\n        each(self.get('removeList'), function (node) {\n          self.removeItem(node);\n        });\n        self.set('removeList', []);\n        if (animateCfg.callback) {\n          animateCfg.callback();\n        }\n        self.emit('afteranimate', {\n          data: data\n        });\n      },\n      delay: animateCfg.delay\n    });\n  };\n  /**\n   * 立即停止布局动画\n   */\n  TreeGraph.prototype.stopLayoutAnimate = function () {\n    this.get('canvas').stopAnimate();\n    this.emit('layoutanimateend', {\n      data: this.get('data')\n    });\n    this.layoutAnimating = false;\n  };\n  /**\n   * 是否在布局动画\n   * @return {boolean} 是否有布局动画\n   */\n  TreeGraph.prototype.isLayoutAnimating = function () {\n    return this.layoutAnimating;\n  };\n  /**\n   * 根据data接口的数据渲染视图\n   */\n  TreeGraph.prototype.render = function () {\n    var self = this;\n    var data = self.get('data');\n    if (!data || !isObject(data) || !Object.keys(data).length) {\n      throw new Error('data must be defined first');\n    }\n    self.clear();\n    self.emit('beforerender');\n    self.layout(this.get('fitView'));\n    self.emit('afterrender');\n  };\n  /**\n   * 导出图数据\n   * @return {object} data\n   */\n  TreeGraph.prototype.save = function () {\n    return this.get('data');\n  };\n  return TreeGraph;\n}(Graph);\nexport default TreeGraph;","map":{"version":3,"names":["__extends","Hierarchy","each","isObject","isString","Util","Graph","radialLayout","traverseTree","TreeGraph","_super","cfg","_this","call","layoutAnimating","set","getLayout","prototype","layout","get","type","direction","radial","data","layoutData","indexOfChild","children","id","index","former","i","getDefaultCfg","animate","innerAddChild","treeData","parent","self","model","x","y","depth","node","addItem","origin_1","parentModel","getModel","childrenList","push","source","target","concat","child","emit","item","innerUpdateChild","current","findById","len","length","innerRemoveChild","splice","oriX","oriY","Object","assign","updatePosition","to","removeItem","changeData","getNodes","map","clearItemStates","getEdges","edge","render","changeLayout","console","warn","updateLayout","refreshLayout","fitView","layoutMethod","undefined","viewController","refresh","paint","layoutAnimate","addChild","parentData","findDataById","parentItem","updateChildren","parentId","updateChild","removeChild","find","destroyed","parentNode","siblings","result","onFrame","animateCfg","forEach","sourceAnchor","ratio","origin_2","attrs","from","refreshPositions","duration","easing","ease","callback","delay","stopLayoutAnimate","stopAnimate","isLayoutAnimating","keys","Error","clear","save"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/g6-pc/es/graph/tree-graph.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport Hierarchy from '@antv/hierarchy';\nimport { each, isObject, isString } from '@antv/util';\nimport Util from '../util';\nimport Graph from './graph';\nvar radialLayout = Util.radialLayout,\n  traverseTree = Util.traverseTree;\nvar TreeGraph = /** @class */function (_super) {\n  __extends(TreeGraph, _super);\n  function TreeGraph(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    _this.layoutAnimating = false;\n    // 用于缓存动画结束后需要删除的节点\n    _this.set('removeList', []);\n    _this.set('layoutMethod', _this.getLayout());\n    return _this;\n  }\n  /**\n   * 通过 Layout 配置获取布局配置\n   */\n  TreeGraph.prototype.getLayout = function () {\n    var layout = this.get('layout');\n    if (!layout) {\n      return null;\n    }\n    if (typeof layout === 'function') {\n      return layout;\n    }\n    if (!layout.type) {\n      layout.type = 'dendrogram';\n    }\n    if (!layout.direction) {\n      layout.direction = 'TB';\n    }\n    if (layout.radial) {\n      return function (data) {\n        var layoutData = Hierarchy[layout.type](data, layout);\n        radialLayout(layoutData);\n        return layoutData;\n      };\n    }\n    return function (data) {\n      return Hierarchy[layout.type](data, layout);\n    };\n  };\n  /**\n   * 返回指定节点在树图数据中的索引\n   * @param children 树图数据\n   * @param child 树图中某一个 Item 的数据\n   */\n  TreeGraph.indexOfChild = function (children, id) {\n    var index = -1;\n    // eslint-disable-next-line consistent-return\n    each(children, function (former, i) {\n      if (id === former.id) {\n        index = i;\n        return false;\n      }\n    });\n    return index;\n  };\n  TreeGraph.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    // 树图默认打开动画\n    cfg.animate = true;\n    return cfg;\n  };\n  /**\n   * 向🌲树中添加数据\n   * @param treeData 树图数据\n   * @param parent 父节点实例\n   * @param animate 是否开启动画\n   */\n  TreeGraph.prototype.innerAddChild = function (treeData, parent, animate) {\n    var self = this;\n    var model = treeData.data;\n    if (model) {\n      // model 中应存储真实的数据，特别是真实的 children\n      model.x = treeData.x;\n      model.y = treeData.y;\n      model.depth = treeData.depth;\n    }\n    var node = self.addItem('node', model, false);\n    if (parent) {\n      node.set('parent', parent);\n      if (animate) {\n        var origin_1 = parent.get('originAttrs');\n        if (origin_1) {\n          node.set('originAttrs', origin_1);\n        } else {\n          var parentModel = parent.getModel();\n          node.set('originAttrs', {\n            x: parentModel.x,\n            y: parentModel.y\n          });\n        }\n      }\n      var childrenList = parent.get('children');\n      if (!childrenList) {\n        parent.set('children', [node]);\n      } else {\n        childrenList.push(node);\n      }\n      self.addItem('edge', {\n        source: parent.get('id'),\n        target: node.get('id'),\n        id: \"\".concat(parent.get('id'), \":\").concat(node.get('id'))\n      }, false);\n    }\n    // 渲染到视图上应参考布局的children, 避免多绘制了收起的节点\n    each(treeData.children || [], function (child) {\n      self.innerAddChild(child, node, animate);\n    });\n    self.emit('afteraddchild', {\n      item: node,\n      parent: parent\n    });\n    return node;\n  };\n  /**\n   * 将数据上的变更转换到视图上\n   * @param data\n   * @param parent\n   * @param animate\n   */\n  TreeGraph.prototype.innerUpdateChild = function (data, parent, animate) {\n    var self = this;\n    var current = self.findById(data.id);\n    // 若子树不存在，整体添加即可\n    if (!current) {\n      self.innerAddChild(data, parent, animate);\n      return;\n    }\n    // 更新新节点下所有子节点\n    each(data.children || [], function (child) {\n      self.innerUpdateChild(child, current, animate);\n    });\n    // 用现在节点的children实例来删除移除的子节点\n    var children = current.get('children');\n    if (children) {\n      var len = children.length;\n      if (len > 0) {\n        for (var i = children.length - 1; i >= 0; i--) {\n          var child = children[i].getModel();\n          if (TreeGraph.indexOfChild(data.children || [], child.id) === -1) {\n            self.innerRemoveChild(child.id, {\n              x: data.x,\n              y: data.y\n            }, animate);\n            // 更新父节点下缓存的子节点 item 实例列表\n            children.splice(i, 1);\n          }\n        }\n      }\n    }\n    var oriX;\n    var oriY;\n    if (current.get('originAttrs')) {\n      oriX = current.get('originAttrs').x;\n      oriY = current.get('originAttrs').y;\n    }\n    var model = current.getModel();\n    if (animate) {\n      // 如果有动画，先缓存节点运动再更新节点\n      current.set('originAttrs', {\n        x: model.x,\n        y: model.y\n      });\n    }\n    current.set('model', Object.assign(model, data.data));\n    if (oriX !== data.x || oriY !== data.y) {\n      current.updatePosition({\n        x: data.x,\n        y: data.y\n      });\n    }\n  };\n  /**\n   * 删除子节点Item对象\n   * @param id\n   * @param to\n   * @param animate\n   */\n  TreeGraph.prototype.innerRemoveChild = function (id, to, animate) {\n    var self = this;\n    var node = self.findById(id);\n    if (!node) {\n      return;\n    }\n    each(node.get('children'), function (child) {\n      self.innerRemoveChild(child.getModel().id, to, animate);\n    });\n    if (animate) {\n      var model = node.getModel();\n      node.set('to', to);\n      node.set('originAttrs', {\n        x: model.x,\n        y: model.y\n      });\n      self.get('removeList').push(node);\n    } else {\n      self.removeItem(node, false);\n    }\n  };\n  /**\n   * 更新数据模型，差量更新并重新渲染\n   * @param {object} data 数据模型\n   */\n  TreeGraph.prototype.changeData = function (data) {\n    var self = this;\n    // 更改数据源后，取消所有状态\n    this.getNodes().map(function (node) {\n      return self.clearItemStates(node);\n    });\n    this.getEdges().map(function (edge) {\n      return self.clearItemStates(edge);\n    });\n    if (data) {\n      self.data(data);\n      self.render();\n    } else {\n      self.layout(this.get('fitView'));\n    }\n  };\n  /**\n   * 已更名为 updateLayout，为保持兼容暂且保留。\n   * 更改并应用树布局算法\n   * @param {object} layout 布局算法\n   */\n  TreeGraph.prototype.changeLayout = function (layout) {\n    // eslint-disable-next-line no-console\n    console.warn('Please call updateLayout instead of changeLayout. changeLayout will be discarded soon');\n    var self = this;\n    self.updateLayout(layout);\n  };\n  /**\n   * 更改并应用树布局算法\n   * @param {object} layout 布局算法\n   */\n  TreeGraph.prototype.updateLayout = function (layout) {\n    var self = this;\n    if (!layout) {\n      // eslint-disable-next-line no-console\n      console.warn('layout cannot be null');\n      return;\n    }\n    self.set('layout', layout);\n    self.set('layoutMethod', self.getLayout());\n    self.layout();\n  };\n  /**\n   * 已更名为 layout，为保持兼容暂且保留。\n   * 根据目前的 data 刷新布局，更新到画布上。用于变更数据之后刷新视图。\n   * @param {boolean} fitView 更新布局时是否需要适应窗口\n   */\n  TreeGraph.prototype.refreshLayout = function (fitView) {\n    // eslint-disable-next-line no-console\n    console.warn('Please call layout instead of refreshLayout. refreshLayout will be discarded soon');\n    var self = this;\n    self.layout(fitView);\n  };\n  /**\n   * 根据目前的 data 刷新布局，更新到画布上。用于变更数据之后刷新视图。\n   * @param {boolean} fitView 更新布局时是否需要适应窗口\n   */\n  TreeGraph.prototype.layout = function (fitView) {\n    var self = this;\n    var data = self.get('data');\n    var layoutMethod = self.get('layoutMethod');\n    var layoutData = layoutMethod ? layoutMethod(data, self.get('layout')) : data;\n    var animate = self.get('animate');\n    self.emit('beforerefreshlayout', {\n      data: data,\n      layoutData: layoutData\n    });\n    self.emit('beforelayout');\n    self.innerUpdateChild(layoutData, undefined, animate);\n    if (fitView) {\n      var viewController = self.get('viewController');\n      viewController.fitView();\n    }\n    if (!animate) {\n      // 如果没有动画，目前仅更新了节点的位置，刷新一下边的样式\n      self.refresh();\n      self.paint();\n    } else {\n      self.layoutAnimate(layoutData);\n    }\n    self.emit('afterrefreshlayout', {\n      data: data,\n      layoutData: layoutData\n    });\n    self.emit('afterlayout');\n  };\n  /**\n   * 添加子树到对应 id 的节点\n   * @param {TreeGraphData} data 子树数据模型\n   * @param {string} parent 子树的父节点id\n   */\n  TreeGraph.prototype.addChild = function (data, parent) {\n    var self = this;\n    self.emit('beforeaddchild', {\n      model: data,\n      parent: parent\n    });\n    // 将数据添加到源数据中，走changeData方法\n    if (!isString(parent)) {\n      parent = parent.get('id');\n    }\n    var parentData = self.findDataById(parent);\n    if (parentData) {\n      if (!parentData.children) {\n        parentData.children = [];\n      }\n      parentData.children.push(data);\n      var parentItem = self.findById(parent);\n      parentItem.refresh();\n      self.changeData();\n    }\n  };\n  /**\n   * 更新某个节点下的所有子节点\n   * @param {TreeGraphData[]} data 子树数据模型集合\n   * @param {string} parent 子树的父节点id\n   */\n  TreeGraph.prototype.updateChildren = function (data, parentId) {\n    var self = this;\n    // 如果没有父节点或找不到该节点，是全量的更新，直接重置data\n    var parentItem = self.findById(parentId);\n    if (!parentId || !parentItem) {\n      console.warn(\"Update children failed! There is no node with id '\".concat(parentId, \"'\"));\n      return;\n    }\n    var parentModel = self.findDataById(parentId);\n    parentModel.children = data;\n    parentItem.refresh();\n    self.changeData();\n  };\n  /**\n   * 更新源数据，差量更新子树\n   * @param {TreeGraphData} data 子树数据模型\n   * @param {string} parentId 子树的父节点id\n   */\n  TreeGraph.prototype.updateChild = function (data, parentId) {\n    var self = this;\n    // 如果没有父节点或找不到该节点，是全量的更新，直接重置data\n    if (!parentId || !self.findById(parentId)) {\n      self.changeData(data);\n      return;\n    }\n    var parentModel = self.findDataById(parentId);\n    var current = self.findById(data.id);\n    if (!parentModel.children) {\n      // 当 current 不存在时，children 为空数组\n      parentModel.children = [];\n    }\n    // 如果不存在该节点，则添加\n    if (!current) {\n      parentModel.children.push(data);\n    } else {\n      var index = TreeGraph.indexOfChild(parentModel.children, data.id);\n      if (index > -1) parentModel.children[index] = data;\n    }\n    var parentItem = self.findById(parentId);\n    parentItem === null || parentItem === void 0 ? void 0 : parentItem.refresh();\n    self.changeData();\n  };\n  /**\n   * 删除子树\n   * @param {string} id 子树根节点id\n   */\n  TreeGraph.prototype.removeChild = function (id) {\n    var self = this;\n    var node = self.findById(id);\n    var parent;\n    if (!node) {\n      parent = self.getNodes().find(function (node) {\n        var children = node.getModel().children || [];\n        return !!children.find(function (child) {\n          return child.id === id;\n        });\n      });\n    } else {\n      parent = node === null || node === void 0 ? void 0 : node.get('parent');\n    }\n    if (parent && !parent.destroyed) {\n      var parentId = parent.get('id');\n      var parentNode = self.findDataById(parentId);\n      var siblings = parentNode && parentNode.children || [];\n      var index = TreeGraph.indexOfChild(siblings, id);\n      siblings.splice(index, 1);\n      parent.refresh();\n    }\n    self.changeData();\n  };\n  /**\n   * 根据id获取对应的源数据\n   * @param {string} id 元素id\n   * @param {TreeGraphData | undefined} parent 从哪个节点开始寻找，为空时从根节点开始查找\n   * @return {TreeGraphData} 对应源数据\n   */\n  TreeGraph.prototype.findDataById = function (id, parent) {\n    var self = this;\n    if (!parent) {\n      parent = self.get('data');\n    }\n    if (id === parent.id) {\n      return parent;\n    }\n    var result = null;\n    // eslint-disable-next-line consistent-return\n    each(parent.children || [], function (child) {\n      if (child.id === id) {\n        result = child;\n        return false;\n      }\n      result = self.findDataById(id, child);\n      if (result) {\n        return false;\n      }\n    });\n    return result;\n  };\n  /**\n   * 布局动画接口，用于数据更新时做节点位置更新的动画\n   * @param {TreeGraphData} data 更新的数据\n   * @param {function} onFrame 定义节点位置更新时如何移动\n   */\n  TreeGraph.prototype.layoutAnimate = function (data, onFrame) {\n    var self = this;\n    var animateCfg = this.get('animateCfg');\n    self.emit('beforeanimate', {\n      data: data\n    });\n    // 如果边中没有指定锚点，但是本身有锚点控制，在动画过程中保持锚点不变\n    self.getEdges().forEach(function (edge) {\n      var model = edge.get('model');\n      if (!model.sourceAnchor) {\n        model.sourceAnchor = edge.get('sourceAnchorIndex');\n      }\n    });\n    this.get('canvas').animate(function (ratio) {\n      traverseTree(data, function (child) {\n        var node = self.findById(child.id);\n        // 只有当存在node的时候才执行\n        if (node) {\n          var origin_2 = node.get('originAttrs');\n          var model = node.get('model');\n          if (!origin_2) {\n            origin_2 = {\n              x: model.x,\n              y: model.y\n            };\n            node.set('originAttrs', origin_2);\n          }\n          if (onFrame) {\n            var attrs = onFrame(node, ratio, origin_2, data);\n            node.set('model', Object.assign(model, attrs));\n          } else {\n            model.x = origin_2.x + (child.x - origin_2.x) * ratio;\n            model.y = origin_2.y + (child.y - origin_2.y) * ratio;\n          }\n        }\n        return true;\n      });\n      each(self.get('removeList'), function (node) {\n        var model = node.getModel();\n        var from = node.get('originAttrs');\n        var to = node.get('to');\n        model.x = from.x + (to.x - from.x) * ratio;\n        model.y = from.y + (to.y - from.y) * ratio;\n      });\n      self.refreshPositions();\n    }, {\n      duration: animateCfg.duration,\n      easing: animateCfg.ease,\n      callback: function callback() {\n        each(self.getNodes(), function (node) {\n          node.set('originAttrs', null);\n        });\n        each(self.get('removeList'), function (node) {\n          self.removeItem(node);\n        });\n        self.set('removeList', []);\n        if (animateCfg.callback) {\n          animateCfg.callback();\n        }\n        self.emit('afteranimate', {\n          data: data\n        });\n      },\n      delay: animateCfg.delay\n    });\n  };\n  /**\n   * 立即停止布局动画\n   */\n  TreeGraph.prototype.stopLayoutAnimate = function () {\n    this.get('canvas').stopAnimate();\n    this.emit('layoutanimateend', {\n      data: this.get('data')\n    });\n    this.layoutAnimating = false;\n  };\n  /**\n   * 是否在布局动画\n   * @return {boolean} 是否有布局动画\n   */\n  TreeGraph.prototype.isLayoutAnimating = function () {\n    return this.layoutAnimating;\n  };\n  /**\n   * 根据data接口的数据渲染视图\n   */\n  TreeGraph.prototype.render = function () {\n    var self = this;\n    var data = self.get('data');\n    if (!data || !isObject(data) || !Object.keys(data).length) {\n      throw new Error('data must be defined first');\n    }\n    self.clear();\n    self.emit('beforerender');\n    self.layout(this.get('fitView'));\n    self.emit('afterrender');\n  };\n  /**\n   * 导出图数据\n   * @return {object} data\n   */\n  TreeGraph.prototype.save = function () {\n    return this.get('data');\n  };\n  return TreeGraph;\n}(Graph);\nexport default TreeGraph;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}