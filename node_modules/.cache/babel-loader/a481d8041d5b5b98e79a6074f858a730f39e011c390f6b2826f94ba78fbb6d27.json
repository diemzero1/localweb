{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { deepMix, get, isArray } from '@antv/util';\nimport { getAngleByPoint } from '../../util/coordinate';\nimport { polarToCartesian } from '../../util/graphics';\nimport PolarLabel from './polar';\n/**\n * 饼图 label\n */\nvar PieLabel = /** @class */function (_super) {\n  __extends(PieLabel, _super);\n  function PieLabel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.defaultLayout = 'distribute';\n    return _this;\n  }\n  PieLabel.prototype.getDefaultLabelCfg = function (offset, position) {\n    var cfg = _super.prototype.getDefaultLabelCfg.call(this, offset, position);\n    return deepMix({}, cfg, get(this.geometry.theme, 'pieLabels', {}));\n  };\n  /** @override */\n  PieLabel.prototype.getLabelOffset = function (offset) {\n    return _super.prototype.getLabelOffset.call(this, offset) || 0;\n  };\n  PieLabel.prototype.getLabelRotate = function (angle, offset, isLabelLimit) {\n    var rotate;\n    if (offset < 0) {\n      rotate = angle;\n      if (rotate > Math.PI / 2) {\n        rotate = rotate - Math.PI;\n      }\n      if (rotate < -Math.PI / 2) {\n        rotate = rotate + Math.PI;\n      }\n    }\n    return rotate;\n  };\n  PieLabel.prototype.getLabelAlign = function (point) {\n    var coordinate = this.getCoordinate();\n    var center = coordinate.getCenter();\n    var align;\n    if (point.angle <= Math.PI / 2 && point.x >= center.x) {\n      align = 'left';\n    } else {\n      align = 'right';\n    }\n    if (point.offset <= 0) {\n      if (align === 'right') {\n        align = 'left';\n      } else {\n        align = 'right';\n      }\n    }\n    return align;\n  };\n  PieLabel.prototype.getArcPoint = function (point) {\n    return point;\n  };\n  PieLabel.prototype.getPointAngle = function (point) {\n    var coordinate = this.getCoordinate();\n    var startPoint = {\n      x: isArray(point.x) ? point.x[0] : point.x,\n      y: point.y[0]\n    };\n    var endPoint = {\n      x: isArray(point.x) ? point.x[1] : point.x,\n      y: point.y[1]\n    };\n    var angle;\n    var startAngle = getAngleByPoint(coordinate, startPoint);\n    if (point.points && point.points[0].y === point.points[1].y) {\n      angle = startAngle;\n    } else {\n      var endAngle = getAngleByPoint(coordinate, endPoint);\n      if (startAngle >= endAngle) {\n        // 100% pie slice\n        endAngle = endAngle + Math.PI * 2;\n      }\n      angle = startAngle + (endAngle - startAngle) / 2;\n    }\n    return angle;\n  };\n  /** @override */\n  PieLabel.prototype.getCirclePoint = function (angle, offset) {\n    var coordinate = this.getCoordinate();\n    var center = coordinate.getCenter();\n    var r = coordinate.getRadius() + offset;\n    return __assign(__assign({}, polarToCartesian(center.x, center.y, r, angle)), {\n      angle: angle,\n      r: r\n    });\n  };\n  return PieLabel;\n}(PolarLabel);\nexport default PieLabel;","map":{"version":3,"mappings":"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","names":["deepMix","get","isArray","getAngleByPoint","polarToCartesian","PolarLabel","__extends","_this","PieLabel","offset","position","cfg","_super","getDefaultLabelCfg","geometry","theme","getLabelOffset","angle","isLabelLimit","rotate","Math","PI","point","coordinate","getCoordinate","center","getCenter","align","x","startPoint","y","endPoint","startAngle","points","endAngle","r","getRadius"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/g2/src/geometry/label/pie.ts"],"sourcesContent":["import { deepMix, get, isArray } from '@antv/util';\nimport { getAngleByPoint } from '../../util/coordinate';\nimport { polarToCartesian } from '../../util/graphics';\nimport { LabelItem } from './interface';\nimport PolarLabel from './polar';\n\n/**\n * 饼图 label\n */\nexport default class PieLabel extends PolarLabel {\n  public defaultLayout = 'distribute';\n\n  protected getDefaultLabelCfg(offset?: number, position?: string) {\n    const cfg = super.getDefaultLabelCfg(offset, position);\n    return deepMix({}, cfg, get(this.geometry.theme, 'pieLabels', {}));\n  }\n\n  /** @override */\n  protected getLabelOffset(offset: string | number): number {\n    return super.getLabelOffset(offset) || 0;\n  }\n\n  protected getLabelRotate(angle: number, offset: number, isLabelLimit: boolean) {\n    let rotate;\n    if (offset < 0) {\n      rotate = angle;\n      if (rotate > Math.PI / 2) {\n        rotate = rotate - Math.PI;\n      }\n      if (rotate < -Math.PI / 2) {\n        rotate = rotate + Math.PI;\n      }\n    }\n    return rotate;\n  }\n\n  protected getLabelAlign(point: LabelItem) {\n    const coordinate = this.getCoordinate();\n    const center = coordinate.getCenter();\n\n    let align;\n    if (point.angle <= Math.PI / 2 && point.x >= center.x) {\n      align = 'left';\n    } else {\n      align = 'right';\n    }\n    if (point.offset <= 0) {\n      if (align === 'right') {\n        align = 'left';\n      } else {\n        align = 'right';\n      }\n    }\n    return align;\n  }\n\n  protected getArcPoint(point) {\n    return point;\n  }\n\n  protected getPointAngle(point) {\n    const coordinate = this.getCoordinate();\n    const startPoint = {\n      x: isArray(point.x) ? point.x[0] : point.x,\n      y: point.y[0],\n    };\n    const endPoint = {\n      x: isArray(point.x) ? point.x[1] : point.x,\n      y: point.y[1],\n    };\n    let angle;\n    const startAngle = getAngleByPoint(coordinate, startPoint);\n    if (point.points && point.points[0].y === point.points[1].y) {\n      angle = startAngle;\n    } else {\n      let endAngle = getAngleByPoint(coordinate, endPoint);\n      if (startAngle >= endAngle) {\n        // 100% pie slice\n        endAngle = endAngle + Math.PI * 2;\n      }\n      angle = startAngle + (endAngle - startAngle) / 2;\n    }\n    return angle;\n  }\n\n  /** @override */\n  protected getCirclePoint(angle: number, offset: number) {\n    const coordinate = this.getCoordinate();\n    const center = coordinate.getCenter();\n    const r = coordinate.getRadius() + offset;\n    return {\n      ...polarToCartesian(center.x, center.y, r, angle),\n      angle,\n      r,\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}