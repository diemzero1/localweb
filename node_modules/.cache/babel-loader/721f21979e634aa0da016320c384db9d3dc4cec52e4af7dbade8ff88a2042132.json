{"ast":null,"code":"/**\n * Use cross product to judge the direction of the turn.\n * Returns a positive value, if OAB makes a clockwise turn,\n * negative for counter-clockwise turn, and zero if the points are collinear.\n */\nexport var cross = function cross(a, b, o) {\n  return (a.y - o.y) * (b.x - o.x) - (a.x - o.x) * (b.y - o.y);\n};\n/**\n * Generate a convex hull of given points. Andrew's monotone chain algorithm.\n * @param points An array of [x, y] representing the coordinates of points.\n * @return a list of vertices of the convex hull in counter-clockwise order,\n */\nexport var genConvexHull = function genConvexHull(items) {\n  var points = items.map(function (item) {\n    return {\n      x: item.getModel().x,\n      y: item.getModel().y\n    };\n  });\n  points.sort(function (a, b) {\n    return a.x === b.x ? a.y - b.y : a.x - b.x;\n  });\n  if (points.length === 1) {\n    return points;\n  }\n  // build the lower hull\n  var lower = [];\n  for (var i = 0; i < points.length; i++) {\n    while (lower.length >= 2 && cross(lower[lower.length - 2], lower[lower.length - 1], points[i]) <= 0) {\n      lower.pop();\n    }\n    lower.push(points[i]);\n  }\n  // build the upper hull\n  var upper = [];\n  for (var i = points.length - 1; i >= 0; i--) {\n    while (upper.length >= 2 && cross(upper[upper.length - 2], upper[upper.length - 1], points[i]) <= 0) {\n      upper.pop();\n    }\n    upper.push(points[i]);\n  }\n  upper.pop();\n  lower.pop();\n  var strictHull = lower.concat(upper);\n  return strictHull;\n};","map":{"version":3,"names":["cross","a","b","o","y","x","genConvexHull","items","points","map","item","getModel","sort","length","lower","i","pop","push","upper","strictHull","concat"],"sources":["/home/iam/Documents/network/node_modules/@antv/g6-core/es/element/hull/convexHull.js"],"sourcesContent":["/**\n * Use cross product to judge the direction of the turn.\n * Returns a positive value, if OAB makes a clockwise turn,\n * negative for counter-clockwise turn, and zero if the points are collinear.\n */\nexport var cross = function cross(a, b, o) {\n  return (a.y - o.y) * (b.x - o.x) - (a.x - o.x) * (b.y - o.y);\n};\n/**\n * Generate a convex hull of given points. Andrew's monotone chain algorithm.\n * @param points An array of [x, y] representing the coordinates of points.\n * @return a list of vertices of the convex hull in counter-clockwise order,\n */\nexport var genConvexHull = function genConvexHull(items) {\n  var points = items.map(function (item) {\n    return {\n      x: item.getModel().x,\n      y: item.getModel().y\n    };\n  });\n  points.sort(function (a, b) {\n    return a.x === b.x ? a.y - b.y : a.x - b.x;\n  });\n  if (points.length === 1) {\n    return points;\n  }\n  // build the lower hull\n  var lower = [];\n  for (var i = 0; i < points.length; i++) {\n    while (lower.length >= 2 && cross(lower[lower.length - 2], lower[lower.length - 1], points[i]) <= 0) {\n      lower.pop();\n    }\n    lower.push(points[i]);\n  }\n  // build the upper hull\n  var upper = [];\n  for (var i = points.length - 1; i >= 0; i--) {\n    while (upper.length >= 2 && cross(upper[upper.length - 2], upper[upper.length - 1], points[i]) <= 0) {\n      upper.pop();\n    }\n    upper.push(points[i]);\n  }\n  upper.pop();\n  lower.pop();\n  var strictHull = lower.concat(upper);\n  return strictHull;\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIA,KAAK,GAAG,SAASA,KAAK,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;EACzC,OAAO,CAACF,CAAC,CAACG,CAAC,GAAGD,CAAC,CAACC,CAAC,KAAKF,CAAC,CAACG,CAAC,GAAGF,CAAC,CAACE,CAAC,CAAC,GAAG,CAACJ,CAAC,CAACI,CAAC,GAAGF,CAAC,CAACE,CAAC,KAAKH,CAAC,CAACE,CAAC,GAAGD,CAAC,CAACC,CAAC,CAAC;AAC9D,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIE,aAAa,GAAG,SAASA,aAAa,CAACC,KAAK,EAAE;EACvD,IAAIC,MAAM,GAAGD,KAAK,CAACE,GAAG,CAAC,UAAUC,IAAI,EAAE;IACrC,OAAO;MACLL,CAAC,EAAEK,IAAI,CAACC,QAAQ,EAAE,CAACN,CAAC;MACpBD,CAAC,EAAEM,IAAI,CAACC,QAAQ,EAAE,CAACP;IACrB,CAAC;EACH,CAAC,CAAC;EACFI,MAAM,CAACI,IAAI,CAAC,UAAUX,CAAC,EAAEC,CAAC,EAAE;IAC1B,OAAOD,CAAC,CAACI,CAAC,KAAKH,CAAC,CAACG,CAAC,GAAGJ,CAAC,CAACG,CAAC,GAAGF,CAAC,CAACE,CAAC,GAAGH,CAAC,CAACI,CAAC,GAAGH,CAAC,CAACG,CAAC;EAC5C,CAAC,CAAC;EACF,IAAIG,MAAM,CAACK,MAAM,KAAK,CAAC,EAAE;IACvB,OAAOL,MAAM;EACf;EACA;EACA,IAAIM,KAAK,GAAG,EAAE;EACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,MAAM,CAACK,MAAM,EAAEE,CAAC,EAAE,EAAE;IACtC,OAAOD,KAAK,CAACD,MAAM,IAAI,CAAC,IAAIb,KAAK,CAACc,KAAK,CAACA,KAAK,CAACD,MAAM,GAAG,CAAC,CAAC,EAAEC,KAAK,CAACA,KAAK,CAACD,MAAM,GAAG,CAAC,CAAC,EAAEL,MAAM,CAACO,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;MACnGD,KAAK,CAACE,GAAG,EAAE;IACb;IACAF,KAAK,CAACG,IAAI,CAACT,MAAM,CAACO,CAAC,CAAC,CAAC;EACvB;EACA;EACA,IAAIG,KAAK,GAAG,EAAE;EACd,KAAK,IAAIH,CAAC,GAAGP,MAAM,CAACK,MAAM,GAAG,CAAC,EAAEE,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC3C,OAAOG,KAAK,CAACL,MAAM,IAAI,CAAC,IAAIb,KAAK,CAACkB,KAAK,CAACA,KAAK,CAACL,MAAM,GAAG,CAAC,CAAC,EAAEK,KAAK,CAACA,KAAK,CAACL,MAAM,GAAG,CAAC,CAAC,EAAEL,MAAM,CAACO,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;MACnGG,KAAK,CAACF,GAAG,EAAE;IACb;IACAE,KAAK,CAACD,IAAI,CAACT,MAAM,CAACO,CAAC,CAAC,CAAC;EACvB;EACAG,KAAK,CAACF,GAAG,EAAE;EACXF,KAAK,CAACE,GAAG,EAAE;EACX,IAAIG,UAAU,GAAGL,KAAK,CAACM,MAAM,CAACF,KAAK,CAAC;EACpC,OAAOC,UAAU;AACnB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}