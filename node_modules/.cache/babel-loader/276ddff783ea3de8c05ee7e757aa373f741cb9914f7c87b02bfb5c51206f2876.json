{"ast":null,"code":"import { __assign, __extends, __read } from \"tslib\";\nimport { deepMix, each, filter, get } from '@antv/util';\nimport { DIRECTION } from '../constant';\nimport { getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n/**\n * @ignore\n * 镜像分面\n */\nvar List = /** @class */function (_super) {\n  __extends(List, _super);\n  function List() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  List.prototype.getDefaultCfg = function () {\n    return deepMix({}, _super.prototype.getDefaultCfg.call(this), {\n      type: 'list',\n      cols: null,\n      showTitle: true,\n      title: _super.prototype.getDefaultTitleCfg.call(this)\n    });\n  };\n  List.prototype.render = function () {\n    _super.prototype.render.call(this);\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  };\n  List.prototype.afterEachView = function (view, facet) {\n    this.processAxis(view, facet);\n  };\n  List.prototype.beforeEachView = function (view, facet) {};\n  List.prototype.generateFacets = function (data) {\n    var _this = this;\n    var fields = this.cfg.fields;\n    var cols = this.cfg.cols;\n    var _a = __read(fields, 1),\n      columnField = _a[0];\n    if (!columnField) {\n      throw new Error('No `fields` specified!');\n    }\n    var colValues = this.getFieldValues(data, columnField);\n    var count = colValues.length;\n    cols = cols || count; // 每行有几列数据\n    // 总共有几行\n    var rows = this.getPageCount(count, cols);\n    var rst = [];\n    colValues.forEach(function (val, index) {\n      // 当前 index 在那个行列\n      var _a = _this.getRowCol(index, cols),\n        row = _a.row,\n        col = _a.col;\n      var conditions = [{\n        field: columnField,\n        value: val,\n        values: colValues\n      }];\n      var facetData = filter(data, _this.getFacetDataFilter(conditions));\n      var facet = {\n        type: _this.cfg.type,\n        data: facetData,\n        region: _this.getRegion(rows, cols, col, row),\n        columnValue: val,\n        rowValue: val,\n        columnField: columnField,\n        rowField: null,\n        columnIndex: col,\n        rowIndex: row,\n        columnValuesLength: cols,\n        rowValuesLength: rows,\n        total: count\n      };\n      rst.push(facet);\n    });\n    return rst;\n  };\n  /**\n   * 设置 x 坐标轴的文本、title 是否显示\n   * @param x\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  List.prototype.getXAxisOption = function (x, axes, option, facet) {\n    // 当是最后一行或者下面没有 view 时文本不显示\n    if (facet.rowIndex !== facet.rowValuesLength - 1 && facet.columnValuesLength * facet.rowIndex + facet.columnIndex + 1 + facet.columnValuesLength <= facet.total) {\n      return __assign(__assign({}, option), {\n        label: null,\n        title: null\n      });\n    }\n    return option;\n  };\n  /**\n   * 设置 y 坐标轴的文本、title 是否显示\n   * @param y\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  List.prototype.getYAxisOption = function (y, axes, option, facet) {\n    if (facet.columnIndex !== 0) {\n      return __assign(__assign({}, option), {\n        title: null,\n        label: null\n      });\n    }\n    return option;\n  };\n  /**\n   * facet title\n   */\n  List.prototype.renderTitle = function () {\n    var _this = this;\n    each(this.facets, function (facet) {\n      var columnValue = facet.columnValue,\n        view = facet.view;\n      var formatter = get(_this.cfg.title, 'formatter');\n      var config = deepMix({\n        position: ['50%', '0%'],\n        content: formatter ? formatter(columnValue) : columnValue\n      }, getFactTitleConfig(DIRECTION.TOP), _this.cfg.title);\n      view.annotation().text(config);\n    });\n  };\n  /**\n   * 计算分页数\n   * @param total\n   * @param pageSize\n   */\n  List.prototype.getPageCount = function (total, pageSize) {\n    return Math.floor((total + pageSize - 1) / pageSize);\n  };\n  /**\n   * 索引值在哪一页\n   * @param index\n   * @param pageSize\n   */\n  List.prototype.getRowCol = function (index, pageSize) {\n    var row = Math.floor(index / pageSize);\n    var col = index % pageSize;\n    return {\n      row: row,\n      col: col\n    };\n  };\n  return List;\n}(Facet);\nexport default List;","map":{"version":3,"mappings":"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","names":["deepMix","each","filter","get","DIRECTION","getFactTitleConfig","Facet","__extends","List","_super","getDefaultCfg","type","cols","showTitle","title","getDefaultTitleCfg","render","cfg","renderTitle","view","facet","processAxis","data","fields","columnField","Error","colValues","getFieldValues","count","length","rows","getPageCount","rst","forEach","val","index","_this","getRowCol","row","col","conditions","field","value","values","facetData","getFacetDataFilter","region","getRegion","columnValue","rowValue","rowField","columnIndex","rowIndex","columnValuesLength","rowValuesLength","total","push","x","axes","option","label","y","facets","formatter","config","position","content","TOP","annotation","text","pageSize","Math","floor"],"sources":["/home/iam/Documents/network/node_modules/@antv/g2/src/facet/list.ts"],"sourcesContent":["import { deepMix, each, filter, get } from '@antv/util';\nimport { DIRECTION } from '../constant';\nimport { AxisCfg, Datum, ListCfg, ListData } from '../interface';\n\nimport View from '../chart/view';\nimport { getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n\n/**\n * @ignore\n * 镜像分面\n */\nexport default class List extends Facet<ListCfg, ListData> {\n  protected getDefaultCfg() {\n    return deepMix({}, super.getDefaultCfg(), {\n      type: 'list',\n      cols: null, // 默认显示一列\n      showTitle: true,\n      title: super.getDefaultTitleCfg(),\n    });\n  }\n\n  public render() {\n    super.render();\n\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  }\n\n  protected afterEachView(view: View, facet: ListData) {\n    this.processAxis(view, facet);\n  }\n\n  protected beforeEachView(view: View, facet: ListData) {}\n\n  protected generateFacets(data: Datum[]): ListData[] {\n    const { fields } = this.cfg;\n    let { cols } = this.cfg;\n\n    const [columnField] = fields;\n    if (!columnField) {\n      throw new Error('No `fields` specified!');\n    }\n\n    const colValues = this.getFieldValues(data, columnField);\n\n    const count = colValues.length;\n    cols = cols || count; // 每行有几列数据\n\n    // 总共有几行\n    const rows = this.getPageCount(count, cols);\n    const rst = [];\n\n    colValues.forEach((val, index) => {\n      // 当前 index 在那个行列\n      const { row, col } = this.getRowCol(index, cols);\n\n      const conditions = [{ field: columnField, value: val, values: colValues }];\n\n      const facetData = filter(data, this.getFacetDataFilter(conditions));\n\n      const facet: ListData = {\n        type: this.cfg.type,\n        data: facetData,\n        region: this.getRegion(rows, cols, col, row),\n\n        columnValue: val,\n        rowValue: val,\n        columnField,\n        rowField: null,\n        columnIndex: col,\n        rowIndex: row,\n        columnValuesLength: cols,\n        rowValuesLength: rows,\n\n        total: count,\n      };\n\n      rst.push(facet);\n    });\n\n    return rst;\n  }\n\n  /**\n   * 设置 x 坐标轴的文本、title 是否显示\n   * @param x\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  protected getXAxisOption(x: string, axes: any, option: AxisCfg, facet: ListData): object {\n    // 当是最后一行或者下面没有 view 时文本不显示\n    if (\n      facet.rowIndex !== facet.rowValuesLength - 1 &&\n      facet.columnValuesLength * facet.rowIndex + facet.columnIndex + 1 + facet.columnValuesLength <= facet.total\n    ) {\n      return {\n        ...option,\n        label: null,\n        title: null,\n      };\n    }\n    return option;\n  }\n\n  /**\n   * 设置 y 坐标轴的文本、title 是否显示\n   * @param y\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  protected getYAxisOption(y: string, axes: any, option: AxisCfg, facet: ListData): object {\n    if (facet.columnIndex !== 0) {\n      return {\n        ...option,\n        title: null,\n        label: null,\n      };\n    }\n    return option;\n  }\n\n  /**\n   * facet title\n   */\n  private renderTitle() {\n    each(this.facets, (facet: ListData) => {\n      const { columnValue, view } = facet;\n      const formatter = get(this.cfg.title, 'formatter');\n\n      const config = deepMix(\n        {\n          position: ['50%', '0%'] as [string, string],\n          content: formatter ? formatter(columnValue) : columnValue,\n        },\n        getFactTitleConfig(DIRECTION.TOP),\n        this.cfg.title\n      );\n\n      view.annotation().text(config);\n    });\n  }\n\n  /**\n   * 计算分页数\n   * @param total\n   * @param pageSize\n   */\n  private getPageCount(total: number, pageSize: number): number {\n    return Math.floor((total + pageSize - 1) / pageSize);\n  }\n\n  /**\n   * 索引值在哪一页\n   * @param index\n   * @param pageSize\n   */\n  private getRowCol(index: number, pageSize: number) {\n    const row = Math.floor(index / pageSize);\n    const col = index % pageSize;\n\n    return { row, col };\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}