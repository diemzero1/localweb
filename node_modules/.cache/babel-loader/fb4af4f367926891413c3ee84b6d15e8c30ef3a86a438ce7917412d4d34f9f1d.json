{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { each } from '@antv/util';\nimport { line, point } from '../../../adaptor/geometries';\nimport { deepAssign, pick } from '../../../utils';\nimport { adaptor as columnAdaptor } from '../../column/adaptor';\nimport { isColumn, isLine } from './option';\n/**\n * 绘制单个图形\n * @param params\n */\nexport function drawSingleGeometry(params) {\n  var options = params.options,\n    chart = params.chart;\n  var geometryOption = options.geometryOption;\n  var isStack = geometryOption.isStack,\n    color = geometryOption.color,\n    seriesField = geometryOption.seriesField,\n    groupField = geometryOption.groupField,\n    isGroup = geometryOption.isGroup;\n  var FIELD_KEY = ['xField', 'yField'];\n  if (isLine(geometryOption)) {\n    // 绘制线\n    line(deepAssign({}, params, {\n      options: __assign(__assign(__assign({}, pick(options, FIELD_KEY)), geometryOption), {\n        line: {\n          color: geometryOption.color,\n          style: geometryOption.lineStyle\n        }\n      })\n    }));\n    // 绘制点\n    point(deepAssign({}, params, {\n      options: __assign(__assign(__assign({}, pick(options, FIELD_KEY)), geometryOption), {\n        point: geometryOption.point && __assign({\n          color: color,\n          shape: 'circle'\n        }, geometryOption.point)\n      })\n    }));\n    // adjust\n    var adjust_1 = [];\n    if (isGroup) {\n      adjust_1.push({\n        type: 'dodge',\n        dodgeBy: groupField || seriesField,\n        customOffset: 0\n      });\n    }\n    if (isStack) {\n      adjust_1.push({\n        type: 'stack'\n      });\n    }\n    if (adjust_1.length) {\n      each(chart.geometries, function (g) {\n        g.adjust(adjust_1);\n      });\n    }\n  }\n  if (isColumn(geometryOption)) {\n    columnAdaptor(deepAssign({}, params, {\n      options: __assign(__assign(__assign({}, pick(options, FIELD_KEY)), geometryOption), {\n        widthRatio: geometryOption.columnWidthRatio,\n        interval: __assign(__assign({}, pick(geometryOption, ['color'])), {\n          style: geometryOption.columnStyle\n        })\n      })\n    }));\n  }\n  return params;\n}","map":{"version":3,"mappings":";AACA,SAASA,IAAI,QAAQ,YAAY;AACjC,SAASC,IAAI,EAAEC,KAAK,QAAQ,6BAA6B;AAEzD,SAASC,UAAU,EAAEC,IAAI,QAAQ,gBAAgB;AACjD,SAASC,OAAO,IAAIC,aAAa,QAAQ,sBAAsB;AAE/D,SAASC,QAAQ,EAAEC,MAAM,QAAQ,UAAU;AAE3C;;;;AAIA,OAAM,SAAUC,kBAAkB,CAChCC,MAAiB;EAET,WAAO,GAAYA,MAAM,QAAlB;IAAEC,KAAK,GAAKD,MAAM,MAAX;EACd,kBAAc,GAAKE,OAAO,eAAZ;EACd,WAAO,GAA8CC,cAAc,QAA5D;IAAEC,KAAK,GAAuCD,cAAc,MAArD;IAAEE,WAAW,GAA0BF,cAAc,YAAxC;IAAEG,UAAU,GAAcH,cAAc,WAA5B;IAAEI,OAAO,GAAKJ,cAAc,QAAnB;EAExD,IAAMK,SAAS,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC;EACtC,IAAIV,MAAM,CAACK,cAAc,CAAC,EAAE;IAC1B;IACAZ,IAAI,CACFE,UAAU,CAAC,EAAE,EAAEO,MAAM,EAAE;MACrBE,OAAO,iCACFR,IAAI,CAACQ,OAAO,EAAEM,SAAS,CAAC,GACxBL,cAAc;QACjBZ,IAAI,EAAE;UACJa,KAAK,EAAED,cAAc,CAACC,KAAK;UAC3BK,KAAK,EAAEN,cAAc,CAACO;;MACvB;KAEJ,CAAC,CACH;IACD;IACAlB,KAAK,CACHC,UAAU,CAAC,EAAE,EAAEO,MAAM,EAAE;MACrBE,OAAO,iCACFR,IAAI,CAACQ,OAAO,EAAEM,SAAS,CAAC,GACxBL,cAAc;QACjBX,KAAK,EAAEW,cAAc,CAACX,KAAK;UACzBY,KAAK;UACLO,KAAK,EAAE;QAAQ,GACZR,cAAc,CAACX,KAAK;MACxB;KAEJ,CAAC,CACH;IACD;IACA,IAAMoB,QAAM,GAAG,EAAE;IACjB,IAAIL,OAAO,EAAE;MACXK,QAAM,CAACC,IAAI,CAAC;QACVC,IAAI,EAAE,OAAO;QACbC,OAAO,EAAET,UAAU,IAAID,WAAW;QAClCW,YAAY,EAAE;OACf,CAAC;;IAEJ,IAAIC,OAAO,EAAE;MACXL,QAAM,CAACC,IAAI,CAAC;QACVC,IAAI,EAAE;OACP,CAAC;;IAEJ,IAAIF,QAAM,CAACM,MAAM,EAAE;MACjB5B,IAAI,CAACW,KAAK,CAACkB,UAAU,EAAE,UAACC,CAAW;QACjCA,CAAC,CAACC,MAAM,CAACT,QAAM,CAAC;MAClB,CAAC,CAAC;;;EAIN,IAAIf,QAAQ,CAACM,cAAc,CAAC,EAAE;IAC5BP,aAAa,CACXH,UAAU,CAAC,EAAE,EAAEO,MAAM,EAAE;MACrBE,OAAO,iCACFR,IAAI,CAACQ,OAAO,EAAEM,SAAS,CAAC,GACxBL,cAAc;QACjBmB,UAAU,EAAEnB,cAAc,CAACoB,gBAAgB;QAC3CC,QAAQ,wBACH9B,IAAI,CAACS,cAAc,EAAE,CAAC,OAAO,CAAC,CAAC;UAClCM,KAAK,EAAEN,cAAc,CAACsB;QAAW;MAAA;KAGtC,CAAC,CACH;;EAGH,OAAOzB,MAAM;AACf","names":["each","line","point","deepAssign","pick","adaptor","columnAdaptor","isColumn","isLine","drawSingleGeometry","params","chart","options","geometryOption","color","seriesField","groupField","isGroup","FIELD_KEY","style","lineStyle","shape","adjust_1","push","type","dodgeBy","customOffset","isStack","length","geometries","g","adjust","widthRatio","columnWidthRatio","interval","columnStyle"],"sources":["/home/iam/Documents/network/node_modules/@antv/g2plot/src/plots/dual-axes/util/geometry.ts"],"sourcesContent":["import { Geometry } from '@antv/g2';\nimport { each } from '@antv/util';\nimport { line, point } from '../../../adaptor/geometries';\nimport { Params } from '../../../core/adaptor';\nimport { deepAssign, pick } from '../../../utils';\nimport { adaptor as columnAdaptor } from '../../column/adaptor';\nimport { GeometryOption } from '../types';\nimport { isColumn, isLine } from './option';\n\n/**\n * 绘制单个图形\n * @param params\n */\nexport function drawSingleGeometry<O extends { xField: string; yField: string; geometryOption: GeometryOption }>(\n  params: Params<O>\n): Params<O> {\n  const { options, chart } = params;\n  const { geometryOption } = options;\n  const { isStack, color, seriesField, groupField, isGroup } = geometryOption;\n\n  const FIELD_KEY = ['xField', 'yField'];\n  if (isLine(geometryOption)) {\n    // 绘制线\n    line(\n      deepAssign({}, params, {\n        options: {\n          ...pick(options, FIELD_KEY),\n          ...geometryOption,\n          line: {\n            color: geometryOption.color,\n            style: geometryOption.lineStyle,\n          },\n        },\n      })\n    );\n    // 绘制点\n    point(\n      deepAssign({}, params, {\n        options: {\n          ...pick(options, FIELD_KEY),\n          ...geometryOption,\n          point: geometryOption.point && {\n            color,\n            shape: 'circle',\n            ...geometryOption.point,\n          },\n        },\n      })\n    );\n    // adjust\n    const adjust = [];\n    if (isGroup) {\n      adjust.push({\n        type: 'dodge',\n        dodgeBy: groupField || seriesField,\n        customOffset: 0,\n      });\n    }\n    if (isStack) {\n      adjust.push({\n        type: 'stack',\n      });\n    }\n    if (adjust.length) {\n      each(chart.geometries, (g: Geometry) => {\n        g.adjust(adjust);\n      });\n    }\n  }\n\n  if (isColumn(geometryOption)) {\n    columnAdaptor(\n      deepAssign({}, params, {\n        options: {\n          ...pick(options, FIELD_KEY),\n          ...geometryOption,\n          widthRatio: geometryOption.columnWidthRatio,\n          interval: {\n            ...pick(geometryOption, ['color']),\n            style: geometryOption.columnStyle,\n          },\n        },\n      })\n    );\n  }\n\n  return params;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}