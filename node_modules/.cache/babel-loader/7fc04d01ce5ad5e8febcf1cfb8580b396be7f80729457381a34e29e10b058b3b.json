{"ast":null,"code":"var _jsxFileName = \"/home/iam/Documents/network/src/components/antd/network/lan/edit.tsx\",\n  _s = $RefreshSig$();\nimport { Form, Input, Button, message, Select, Card, Switch, Space } from 'antd';\nimport React from 'react';\nimport ubusApi from 'service/api/ubus-api';\nimport { useTranslation } from \"react-i18next\";\nimport \"../../../../translations/i18n\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const LanEdit = props => {\n  _s();\n  const {\n    t\n  } = useTranslation();\n  let pattern = /^[a-zA-Z0-9_.]+$/;\n  let patternIpv4 = /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n  let check1;\n  let check2;\n  const abc = t('error_fill');\n  const {\n    item,\n    onDone,\n    optionsParentInterface\n  } = props;\n  const [form] = Form.useForm();\n  const [loading, setLoading] = React.useState(true);\n  setTimeout(() => {\n    setLoading(false);\n  }, 1000);\n  const refreshData = async () => {\n    const uciLan = await ubusApi.show_network_lan_config();\n    const uciDhcp = await ubusApi.show_network_dhcp_config();\n    //const relay = await ubusApi.show_network_relay()\n\n    const {\n      ifname,\n      ipaddr,\n      proto,\n      netmask,\n      ip6addr\n    } = (uciLan === null || uciLan === void 0 ? void 0 : uciLan.values) || \"\";\n    const {\n      leasetime\n    } = (uciDhcp === null || uciDhcp === void 0 ? void 0 : uciDhcp.values) || \"\";\n    const {\n      start,\n      limit,\n      dhcpv4,\n      dhcpv6\n    } = (uciDhcp === null || uciDhcp === void 0 ? void 0 : uciDhcp.values) || \"\";\n    //const { modev4, modev6 } = relay\n    const stop = Number.parseInt(start) + Number.parseInt(limit);\n    if (ip6addr) {\n      form.setFieldsValue({\n        ifname: ifname,\n        protov4: proto,\n        ipaddrv4: ipaddr,\n        netmaskv4: netmask,\n        protov6: proto,\n        ipaddrv6: ip6addr\n      });\n    } else {\n      form.setFieldsValue({\n        ifname: ifname,\n        protov4: proto,\n        ipaddrv4: ipaddr,\n        netmaskv4: netmask,\n        protov6: \"none\"\n      });\n    }\n    form.setFieldsValue({\n      start: start,\n      stop: stop,\n      leasetime: leasetime,\n      dhcpv4_status: dhcpv4 === \"server\" ? true : false,\n      dhcpv6_status: dhcpv6 === \"server\" ? true : false\n    });\n  };\n  React.useEffect(() => {\n    refreshData();\n  }, []);\n  const [state, setState] = React.useState();\n  const onChangeIP = async props => {\n    const form_ip = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n    if (props.target.defaultValue.match(form_ip)) {\n      return true;\n    }\n  };\n  const onFinish = async values => {\n    const {\n      dhcpv4_status,\n      dhcpv6_status,\n      dhcpv4_relay,\n      dhcpv6_relay\n    } = values;\n    if (dhcpv4_relay === dhcpv4_status && dhcpv4_status === true || dhcpv6_relay === dhcpv6_status && dhcpv6_status === true) {\n      message.error(t('error_dhcp'));\n    } else {\n      const key = 'updatable';\n      message.loading({\n        content: t('loading'),\n        key\n      });\n      const config_ip = await ubusApi.config_network_lan(values.ifname, values.protov4, values.ipaddrv4, values.netmaskv4, values.protov6, values.ipaddrv6);\n      if (dhcpv4_status === true || dhcpv6_status === true) {\n        const config_dhcp = await ubusApi.config_network_dhcp(dhcpv4_status === true ? \"enable\" : \"disable\", dhcpv6_status === true ? \"enable\" : \"disable\", values.start, values.end, values.leasetime);\n      } else {\n        const config_dhcp = await ubusApi.config_network_dhcp(\"disable\", \"disable\", values.start, values.end, values.leasetime);\n      }\n\n      // if (dhcpv4_relay === true || dhcpv6_relay === true) {\n      //     const config_relay = await ubusApi.config_network_relay((dhcpv4_relay === true) ? \"enable\" : \"disable\", (dhcpv6_relay === true) ? \"enable\" : \"disable\")\n      // } else {\n      //     const config_relay = await ubusApi.config_network_relay(\"disable\", \"disable\")\n      // }\n      message.success({\n        content: t('success'),\n        key,\n        duration: 2\n      });\n      setTimeout(() => {\n        window.location.reload();\n      }, 1500);\n    }\n  };\n  const [value, setValue] = React.useState('');\n  const handleChange = value => setValue(value);\n  const [value1, setValue1] = React.useState('');\n  const handleChange1 = value1 => setValue1(value1);\n  const [value2, setValue2] = React.useState('');\n  const handleChange2 = value2 => setValue2(value2);\n  return (\n    /*#__PURE__*/\n    // <Card title={t('config_lan_setting')} type='inner' hoverable headStyle={{background:\"linear-gradient(109.6deg, rgb(44, 83, 131), rgb(44, 83, 131) 18.9%, rgb(68, 124, 143), rgb(44, 83, 131) 91.1%, rgb(44, 83, 131))\",color: 'white'}}>\n    _jsxDEV(Form, {\n      form: form,\n      labelCol: {\n        span: 6\n      },\n      wrapperCol: {\n        span: 16\n      },\n      onFinish: onFinish,\n      children: /*#__PURE__*/_jsxDEV(Space, {\n        direction: \"vertical\",\n        size: \"middle\",\n        style: {\n          display: 'flex'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Card, {\n          title: t('ipv4_configure'),\n          loading: loading,\n          headStyle: {\n            background: \"#eeeeee\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n            label: t('interface_name'),\n            name: \"ifname\",\n            children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            label: t('protocol'),\n            name: \"protov4\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              defaultValue: t('select_proto'),\n              onChange: handleChange1,\n              options: [{\n                value: \"none\",\n                label: t('none')\n              }, {\n                value: \"dhcp\",\n                label: \"DHCP\"\n              }, {\n                value: \"static\",\n                label: \"Static\"\n              }]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            label: t('macaddr'),\n            name: \"macaddr\",\n            hidden: true,\n            children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            noStyle: true,\n            shouldUpdate: (prevValues, currentValues) => prevValues.gender !== currentValues.gender,\n            children: _ref => {\n              let {\n                getFieldValue\n              } = _ref;\n              return getFieldValue('protov4') == \"static\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n                  label: t('ip'),\n                  name: \"ipaddrv4\",\n                  rules: [{\n                    required: true,\n                    message: abc\n                  }, {\n                    validator: (_, value) => {\n                      check1 = value.split(\".\");\n                      check2 = check1[check1.length - 1];\n                      return Number(check2) < 256 && patternIpv4.test(value) ? Promise.resolve() : Promise.reject(t('Error_Ip_address'));\n                    }\n                  }],\n                  children: /*#__PURE__*/_jsxDEV(Input, {\n                    allowClear: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 154,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 142,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n                  label: \"Sub Netmask\",\n                  name: \"netmaskv4\",\n                  rules: [{\n                    required: true,\n                    message: abc\n                  }, {\n                    validator: (_, value) => {\n                      check1 = value.split(\".\");\n                      check2 = check1[check1.length - 1];\n                      return Number(check2) < 256 && patternIpv4.test(value) ? Promise.resolve() : Promise.reject(t('Error_Ip_address'));\n                    }\n                  }],\n                  children: /*#__PURE__*/_jsxDEV(Input, {\n                    allowClear: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 168,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 156,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n                  label: \"MTU\",\n                  name: \"mtu\",\n                  hidden: true,\n                  children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 172,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 170,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n                  label: t('speed'),\n                  name: \"speed\",\n                  hidden: true,\n                  children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 176,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 174,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true) : null;\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            label: t('enable_dhcpv4_server'),\n            name: \"dhcpv4_status\",\n            valuePropName: \"checked\",\n            style: {\n              height: \"auto\",\n              maxWidth: \"200%\",\n              width: \"768px\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Switch, {\n              onChange: () => setState(!state),\n              checked: state\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            noStyle: true,\n            shouldUpdate: (prevValues, currentValues) => prevValues.gender !== currentValues.gender,\n            children: _ref2 => {\n              let {\n                getFieldValue\n              } = _ref2;\n              return getFieldValue('dhcpv4_status') == true ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n                  style: {\n                    height: 30\n                  },\n                  label: t('dhcp_range'),\n                  children: /*#__PURE__*/_jsxDEV(Input.Group, {\n                    compact: true,\n                    children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n                      name: \"start\",\n                      children: /*#__PURE__*/_jsxDEV(Input, {\n                        type: \"number\",\n                        style: {\n                          width: 100,\n                          textAlign: 'center'\n                        },\n                        placeholder: \"start\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 202,\n                        columnNumber: 57\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 201,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(Input, {\n                      className: \"site-input-split\",\n                      style: {\n                        width: 30,\n                        borderLeft: 0,\n                        borderRight: 0,\n                        pointerEvents: 'none'\n                      },\n                      placeholder: \"~\",\n                      disabled: true\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 211,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n                      name: \"stop\",\n                      children: /*#__PURE__*/_jsxDEV(Input, {\n                        className: \"site-input-right\",\n                        style: {\n                          width: 100,\n                          textAlign: 'center'\n                        },\n                        placeholder: \"Stop\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 223,\n                        columnNumber: 57\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 222,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 200,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 199,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n                  label: t('leasetime'),\n                  name: \"leasetime\",\n                  children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 236,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 234,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true) : null;\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          wrapperCol: {\n            offset: 12,\n            span: 16\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            htmlType: \"submit\",\n            children: t('submit')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)\n\n    // </Card>\n  );\n};\n_s(LanEdit, \"dJk0eV8+2UTadpGBe8DoObBQVYc=\", false, function () {\n  return [useTranslation, Form.useForm];\n});\n_c = LanEdit;\nvar _c;\n$RefreshReg$(_c, \"LanEdit\");","map":{"version":3,"names":["Form","Input","Button","message","Select","Card","Switch","Space","React","ubusApi","useTranslation","LanEdit","props","t","pattern","patternIpv4","check1","check2","abc","item","onDone","optionsParentInterface","form","useForm","loading","setLoading","useState","setTimeout","refreshData","uciLan","show_network_lan_config","uciDhcp","show_network_dhcp_config","ifname","ipaddr","proto","netmask","ip6addr","values","leasetime","start","limit","dhcpv4","dhcpv6","stop","Number","parseInt","setFieldsValue","protov4","ipaddrv4","netmaskv4","protov6","ipaddrv6","dhcpv4_status","dhcpv6_status","useEffect","state","setState","onChangeIP","form_ip","target","defaultValue","match","onFinish","dhcpv4_relay","dhcpv6_relay","error","key","content","config_ip","config_network_lan","config_dhcp","config_network_dhcp","end","success","duration","window","location","reload","value","setValue","handleChange","value1","setValue1","handleChange1","value2","setValue2","handleChange2","span","display","background","label","prevValues","currentValues","gender","getFieldValue","required","validator","_","split","length","test","Promise","resolve","reject","height","maxWidth","width","textAlign","borderLeft","borderRight","pointerEvents","offset"],"sources":["/home/iam/Documents/network/src/components/antd/network/lan/edit.tsx"],"sourcesContent":["import { message as antdMessage, Form, Input, Button, message, Select, Card, Switch, Space, Col } from 'antd'\nimport { constants } from 'buffer'\nimport { access } from 'fs'\nimport React from 'react'\nimport { Await } from 'react-router-dom'\nimport ubusApi from 'service/api/ubus-api'\nimport { useTranslation } from \"react-i18next\"\nimport \"../../../../translations/i18n\"\n\nexport const LanEdit = (props: any) => {\n    const { t } = useTranslation()\n    let pattern = /^[a-zA-Z0-9_.]+$/\n    let patternIpv4 = /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/\n    let check1: any\n    let check2: any\n    const abc = t('error_fill')\n    const { item, onDone, optionsParentInterface } = props\n    const [form] = Form.useForm()\n    const [loading, setLoading] = React.useState(true)\n    setTimeout(() => {\n        setLoading(false)\n    }, 1000);\n    const refreshData = async () => {\n        const uciLan = await ubusApi.show_network_lan_config()\n        const uciDhcp = await ubusApi.show_network_dhcp_config()\n        //const relay = await ubusApi.show_network_relay()\n\n        const { ifname, ipaddr, proto, netmask, ip6addr } = uciLan?.values || \"\"\n        const { leasetime } = uciDhcp?.values || \"\"\n        const { start, limit, dhcpv4, dhcpv6 } = uciDhcp?.values || \"\"\n        //const { modev4, modev6 } = relay\n        const stop: number = Number.parseInt(start) + Number.parseInt(limit)\n        if (ip6addr) {\n            form.setFieldsValue({\n                ifname: ifname, protov4: proto, ipaddrv4: ipaddr, netmaskv4: netmask, protov6: proto, ipaddrv6: ip6addr\n            })\n        } else {\n            form.setFieldsValue({\n                ifname: ifname, protov4: proto, ipaddrv4: ipaddr, netmaskv4: netmask, protov6: \"none\"\n            })\n        }\n        form.setFieldsValue({ start: start, stop: stop, leasetime: leasetime, dhcpv4_status: (dhcpv4 === \"server\") ? true : false, dhcpv6_status: (dhcpv6 === \"server\") ? true : false })\n    }\n\n    React.useEffect(() => {\n        refreshData()\n    }, [])                                \n    const [state, setState] = React.useState<boolean>()\n    const onChangeIP = async (props: any) => {\n        const form_ip = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/\n        if (props.target.defaultValue.match(form_ip)) {\n            return true;\n        }\n    }\n    const onFinish = async (values: any) => {\n        const { dhcpv4_status, dhcpv6_status, dhcpv4_relay, dhcpv6_relay } = values\n        if (dhcpv4_relay === dhcpv4_status && dhcpv4_status === true || dhcpv6_relay === dhcpv6_status && dhcpv6_status === true) {\n            message.error(t('error_dhcp'))\n        } else {\n            const key = 'updatable';\n            message.loading({ content: t('loading'), key });\n            const config_ip = await ubusApi.config_network_lan(values.ifname, values.protov4, values.ipaddrv4, values.netmaskv4, values.protov6, values.ipaddrv6)\n            if (dhcpv4_status === true || dhcpv6_status === true) {\n                const config_dhcp = await ubusApi.config_network_dhcp((dhcpv4_status === true) ? \"enable\" : \"disable\", (dhcpv6_status === true) ? \"enable\" : \"disable\", values.start, values.end, values.leasetime)\n            } else {\n                const config_dhcp = await ubusApi.config_network_dhcp(\"disable\", \"disable\", values.start, values.end, values.leasetime)\n            }\n            \n            // if (dhcpv4_relay === true || dhcpv6_relay === true) {\n            //     const config_relay = await ubusApi.config_network_relay((dhcpv4_relay === true) ? \"enable\" : \"disable\", (dhcpv6_relay === true) ? \"enable\" : \"disable\")\n            // } else {\n            //     const config_relay = await ubusApi.config_network_relay(\"disable\", \"disable\")\n            // }\n            message.success({ content: t('success'), key, duration: 2 });\n            setTimeout(() => {\n                window.location.reload()\n            }, 1500);\n        }\n    }\n    const [value, setValue] = React.useState('')\n    const handleChange = (value: any) => setValue(value)\n    const [value1, setValue1] = React.useState('')\n    const handleChange1 = (value1: any) => setValue1(value1)\n    const [value2, setValue2] = React.useState('')\n    const handleChange2 = (value2: any) => setValue2(value2)\n\n    return (\n        // <Card title={t('config_lan_setting')} type='inner' hoverable headStyle={{background:\"linear-gradient(109.6deg, rgb(44, 83, 131), rgb(44, 83, 131) 18.9%, rgb(68, 124, 143), rgb(44, 83, 131) 91.1%, rgb(44, 83, 131))\",color: 'white'}}>\n            <Form\n                form={form}\n                labelCol={{ span: 6 }}\n                wrapperCol={{ span: 16 }}\n                onFinish={onFinish}\n            >\n                <Space\n                    direction=\"vertical\"\n                    size=\"middle\"\n                    style={{\n                        display: 'flex',\n                    }}\n                >\n                    {/* <Col> */}\n                    <Card title={t('ipv4_configure')} loading={loading} headStyle={{ background: \"#eeeeee\", }}>\n                        <Form.Item label={t('interface_name')} name=\"ifname\"\n                        >\n                            <Input></Input>\n                        </Form.Item>\n                        <Form.Item label={t('protocol')} name=\"protov4\"\n                        >\n                            <Select\n                                defaultValue={t('select_proto')}\n                                onChange={handleChange1}\n                                options={[\n                                    {\n                                        value: \"none\",\n                                        label: t('none')\n                                    },\n                                    {\n                                        value: \"dhcp\",\n                                        label: \"DHCP\"\n                                    },\n                                    {\n                                        value: \"static\",\n                                        label: \"Static\"\n                                    },\n                                ]}\n                            ></Select>\n                        </Form.Item>\n                        <Form.Item label={t('macaddr')} name=\"macaddr\" hidden\n                        >\n                            <Input ></Input>\n                        </Form.Item>\n                        <Form.Item\n                            noStyle\n                            shouldUpdate={(prevValues, currentValues) => prevValues.gender !== currentValues.gender}\n                        >\n                            {\n                                ({ getFieldValue }) =>\n                                    getFieldValue('protov4') ==\n                                        \"static\" ? (\n                                        <>\n                                            <Form.Item label={t('ip')} name=\"ipaddrv4\"\n                                                rules={[\n                                                    { required: true, message: abc },\n                                                    {\n                                                    validator: (_, value) => {\n                                                        check1 = value.split(\".\")\n                                                        check2 = check1[check1.length - 1]\n                                                        return (Number(check2) < 256 && patternIpv4.test(value)) ? Promise.resolve() : Promise.reject(t('Error_Ip_address'))\n                                                    }\n                                                    }\n                                                ]}\n                                            >\n                                                <Input allowClear></Input>\n                                            </Form.Item>\n                                            <Form.Item label=\"Sub Netmask\" name=\"netmaskv4\"\n                                                     rules={[\n                                                        { required: true, message: abc },\n                                                        {\n                                                        validator: (_, value) => {\n                                                            check1 = value.split(\".\")\n                                                            check2 = check1[check1.length - 1]\n                                                            return (Number(check2) < 256 && patternIpv4.test(value)) ? Promise.resolve() : Promise.reject(t('Error_Ip_address'))\n                                                        }\n                                                        }\n                                                    ]}                               \n                                            >\n                                                <Input allowClear></Input>\n                                            </Form.Item>\n                                            <Form.Item label=\"MTU\" name=\"mtu\" hidden\n                                            >\n                                                <Input></Input>\n                                            </Form.Item>\n                                            <Form.Item label={t('speed')} name=\"speed\" hidden\n                                            >\n                                                <Input></Input>\n                                            </Form.Item>\n                                        </>\n                                    ) : null}\n                        </Form.Item>\n                        <Form.Item label={t('enable_dhcpv4_server')} name=\"dhcpv4_status\" valuePropName=\"checked\"\n                        style={{ height: \"auto\", maxWidth: \"200%\", width: \"768px\" }}\n                        >\n                            {/* <Switch onChange={handleChange}></Switch> */}\n                            <Switch\n                                onChange={() =>setState(!state)}\n                                checked={state}\n                            />\n                        </Form.Item>\n                        <Form.Item\n                            noStyle\n                            shouldUpdate={(prevValues, currentValues) => prevValues.gender !== currentValues.gender}\n                        >\n                            {\n                                ({ getFieldValue }) =>\n                                    getFieldValue('dhcpv4_status') ==\n                                        true ? (\n                                        <>\n                                            <Form.Item style={{ height: 30 }} label={t('dhcp_range')}>\n                                                <Input.Group compact>\n                                                    <Form.Item name=\"start\">\n                                                        <Input\n                                                            type='number'\n                                                            style={{\n                                                                width: 100,\n                                                                textAlign: 'center',\n                                                            }}\n                                                            placeholder=\"start\"\n                                                        />\n                                                    </Form.Item>\n                                                    <Input\n                                                        className=\"site-input-split\"\n                                                        style={{\n                                                            width: 30,\n                                                            borderLeft: 0,\n                                                            borderRight: 0,\n                                                            pointerEvents: 'none',\n                                                        }}\n                                                        placeholder=\"~\"\n                                                        disabled\n                                                    />\n                                                    <Form.Item name=\"stop\">\n                                                        <Input\n                                                            className=\"site-input-right\"\n                                                            style={{\n                                                                width: 100,\n                                                                textAlign: 'center',\n                                                            }}\n                                                            placeholder=\"Stop\"\n                                                        />\n                                                    </Form.Item>\n                                                </Input.Group>\n                                            </Form.Item>\n                                            <Form.Item label={t('leasetime')} name=\"leasetime\"\n                                            >\n                                                <Input></Input>\n                                            </Form.Item>\n                                        </>\n                                    ) : null}\n                        </Form.Item>\n                    </Card>\n                    {/* <Card title={t('ipv6_configure')} loading={loading} headStyle={{ background: \"#eeeeee\", }} >\n                        <Form.Item label={t('protocol')} name=\"protov6\"\n                        >\n                            <Select\n                                onChange={handleChange2}\n                                options={[\n                                    {\n                                        value: \"none\",\n                                        label: t('none')\n                                    },\n                                    {\n                                        value: \"static\",\n                                        label: \"Static\"\n                                    },\n                                    {\n                                        value: \"dhcp\",\n                                        label: \"DHCP\"\n                                    },\n\n                                ]}\n                            ></Select>\n                        </Form.Item> */}\n                        {/* <Form.Item\n                            noStyle\n                            shouldUpdate={(prevValues, currentValues) => prevValues.gender !== currentValues.gender}\n                        >\n                            {\n                                ({ getFieldValue }) =>\n                                    getFieldValue('protov6') ==\n                                        \"static\" ? (\n                                        <Form.Item label={t('ipv6addr')} name=\"ipaddrv6\"\n                                        >\n                                            <Input></Input>\n                                        </Form.Item>\n                                    ) : null}\n                        </Form.Item>\n                        <Form.Item label={t('enable_dhcpv6_server')} name=\"dhcpv6_status\" valuePropName=\"checked\"\n                        style={{ height: \"auto\", maxWidth: \"200%\", width: \"768px\" }}\n                        >\n                            <Switch></Switch>\n                        </Form.Item> */}\n\n                    {/* </Card> */}\n                    <Form.Item\n                        wrapperCol={{ offset: 12, span: 16 }}\n                    >\n                        <Button\n                            type='primary'\n                            htmlType=\"submit\"\n                        >\n                            {t('submit')}\n                        </Button>\n                    </Form.Item>\n                </Space>\n            </Form>\n\n        // </Card>\n\n    )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}