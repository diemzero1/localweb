{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { animation, interaction, scale, state, theme, tooltip } from '../../adaptor/common';\nimport { interval } from '../../adaptor/geometries';\nimport { pattern } from '../../adaptor/pattern';\nimport { deepAssign, findGeometry, flow, transformLabel } from '../../utils';\nimport { binHistogram } from '../../utils/transform/histogram';\nimport { HISTOGRAM_X_FIELD, HISTOGRAM_Y_FIELD } from './constant';\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var data = options.data,\n    binField = options.binField,\n    binNumber = options.binNumber,\n    binWidth = options.binWidth,\n    color = options.color,\n    stackField = options.stackField,\n    legend = options.legend,\n    columnStyle = options.columnStyle;\n  // 处理数据\n  var plotData = binHistogram(data, binField, binWidth, binNumber, stackField);\n  chart.data(plotData);\n  var p = deepAssign({}, params, {\n    options: {\n      xField: HISTOGRAM_X_FIELD,\n      yField: HISTOGRAM_Y_FIELD,\n      seriesField: stackField,\n      isStack: true,\n      interval: {\n        color: color,\n        style: columnStyle\n      }\n    }\n  });\n  interval(p);\n  // 图例\n  if (legend && stackField) {\n    chart.legend(stackField, legend);\n  } else {\n    chart.legend(false);\n  }\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\nfunction meta(params) {\n  var _a;\n  var options = params.options;\n  var xAxis = options.xAxis,\n    yAxis = options.yAxis;\n  return flow(scale((_a = {}, _a[HISTOGRAM_X_FIELD] = xAxis, _a[HISTOGRAM_Y_FIELD] = yAxis, _a)))(params);\n}\n/**\n * axis 配置\n * @param params\n */\nfunction axis(params) {\n  var chart = params.chart,\n    options = params.options;\n  var xAxis = options.xAxis,\n    yAxis = options.yAxis;\n  // 为 false 则是不显示轴\n  if (xAxis === false) {\n    chart.axis(HISTOGRAM_X_FIELD, false);\n  } else {\n    chart.axis(HISTOGRAM_X_FIELD, xAxis);\n  }\n  if (yAxis === false) {\n    chart.axis(HISTOGRAM_Y_FIELD, false);\n  } else {\n    chart.axis(HISTOGRAM_Y_FIELD, yAxis);\n  }\n  return params;\n}\n/**\n * label 配置\n * @param params\n */\nfunction label(params) {\n  var chart = params.chart,\n    options = params.options;\n  var label = options.label;\n  var geometry = findGeometry(chart, 'interval');\n  if (!label) {\n    geometry.label(false);\n  } else {\n    var callback = label.callback,\n      cfg = __rest(label, [\"callback\"]);\n    geometry.label({\n      fields: [HISTOGRAM_Y_FIELD],\n      callback: callback,\n      cfg: transformLabel(cfg)\n    });\n  }\n  return params;\n}\n/**\n * 直方图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(theme, pattern('columnStyle'), geometry, meta, axis, state, label, tooltip, interaction, animation)(params);\n}","map":{"version":3,"mappings":"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","names":["animation","interaction","scale","state","theme","tooltip","interval","pattern","deepAssign","findGeometry","flow","transformLabel","binHistogram","HISTOGRAM_X_FIELD","HISTOGRAM_Y_FIELD","geometry","params","options","binField","binNumber","binWidth","color","stackField","legend","columnStyle","plotData","data","chart","p","xField","yField","seriesField","isStack","style","meta","yAxis","_a","xAxis","axis","label","cfg","fields","callback","adaptor"],"sources":["/home/iam/Documents/network/node_modules/@antv/g2plot/src/plots/histogram/adaptor.ts"],"sourcesContent":["import { animation, interaction, scale, state, theme, tooltip } from '../../adaptor/common';\nimport { interval } from '../../adaptor/geometries';\nimport { pattern } from '../../adaptor/pattern';\nimport { Params } from '../../core/adaptor';\nimport { deepAssign, findGeometry, flow, transformLabel } from '../../utils';\nimport { binHistogram } from '../../utils/transform/histogram';\nimport { HISTOGRAM_X_FIELD, HISTOGRAM_Y_FIELD } from './constant';\nimport { HistogramOptions } from './types';\n\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params: Params<HistogramOptions>): Params<HistogramOptions> {\n  const { chart, options } = params;\n  const { data, binField, binNumber, binWidth, color, stackField, legend, columnStyle } = options;\n\n  // 处理数据\n  const plotData = binHistogram(data, binField, binWidth, binNumber, stackField);\n\n  chart.data(plotData);\n\n  const p = deepAssign({}, params, {\n    options: {\n      xField: HISTOGRAM_X_FIELD,\n      yField: HISTOGRAM_Y_FIELD,\n      seriesField: stackField,\n      isStack: true,\n      interval: {\n        color,\n        style: columnStyle,\n      },\n    },\n  });\n\n  interval(p);\n\n  // 图例\n  if (legend && stackField) {\n    chart.legend(stackField, legend);\n  } else {\n    chart.legend(false);\n  }\n\n  return params;\n}\n\n/**\n * meta 配置\n * @param params\n */\nfunction meta(params: Params<HistogramOptions>): Params<HistogramOptions> {\n  const { options } = params;\n  const { xAxis, yAxis } = options;\n\n  return flow(\n    scale({\n      [HISTOGRAM_X_FIELD]: xAxis,\n      [HISTOGRAM_Y_FIELD]: yAxis,\n    })\n  )(params);\n}\n\n/**\n * axis 配置\n * @param params\n */\nfunction axis(params: Params<HistogramOptions>): Params<HistogramOptions> {\n  const { chart, options } = params;\n  const { xAxis, yAxis } = options;\n\n  // 为 false 则是不显示轴\n  if (xAxis === false) {\n    chart.axis(HISTOGRAM_X_FIELD, false);\n  } else {\n    chart.axis(HISTOGRAM_X_FIELD, xAxis);\n  }\n\n  if (yAxis === false) {\n    chart.axis(HISTOGRAM_Y_FIELD, false);\n  } else {\n    chart.axis(HISTOGRAM_Y_FIELD, yAxis);\n  }\n\n  return params;\n}\n\n/**\n * label 配置\n * @param params\n */\nfunction label(params: Params<HistogramOptions>): Params<HistogramOptions> {\n  const { chart, options } = params;\n  const { label } = options;\n\n  const geometry = findGeometry(chart, 'interval');\n\n  if (!label) {\n    geometry.label(false);\n  } else {\n    const { callback, ...cfg } = label;\n    geometry.label({\n      fields: [HISTOGRAM_Y_FIELD],\n      callback,\n      cfg: transformLabel(cfg),\n    });\n  }\n\n  return params;\n}\n\n/**\n * 直方图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<HistogramOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(\n    theme,\n    pattern('columnStyle'),\n    geometry,\n    meta,\n    axis,\n    state,\n    label,\n    tooltip,\n    interaction,\n    animation\n  )(params);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}