{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar greedy_fas_1 = __importDefault(require(\"./greedy-fas\"));\nvar run = function run(g) {\n  var weightFn = function weightFn(g) {\n    return function (e) {\n      var _a;\n      return ((_a = g.edge(e)) === null || _a === void 0 ? void 0 : _a.weight) || 1;\n    };\n  };\n  var fas = g.graph().acyclicer === \"greedy\" ? (0, greedy_fas_1.default)(g, weightFn(g)) : dfsFAS(g);\n  fas === null || fas === void 0 ? void 0 : fas.forEach(function (e) {\n    var label = g.edge(e);\n    g.removeEdgeObj(e);\n    label.forwardName = e.name;\n    label.reversed = true;\n    g.setEdge(e.w, e.v, label, \"rev-\".concat(Math.random()));\n  });\n};\nvar dfsFAS = function dfsFAS(g) {\n  var fas = [];\n  var stack = {};\n  var visited = {};\n  var dfs = function dfs(v) {\n    var _a;\n    if (visited[v]) {\n      return;\n    }\n    visited[v] = true;\n    stack[v] = true;\n    (_a = g.outEdges(v)) === null || _a === void 0 ? void 0 : _a.forEach(function (e) {\n      if (stack[e.w]) {\n        fas.push(e);\n      } else {\n        dfs(e.w);\n      }\n    });\n    delete stack[v];\n  };\n  g.nodes().forEach(dfs);\n  return fas;\n};\nvar undo = function undo(g) {\n  g.edges().forEach(function (e) {\n    var label = g.edge(e);\n    if (label.reversed) {\n      g.removeEdgeObj(e);\n      var forwardName = label.forwardName;\n      delete label.reversed;\n      delete label.forwardName;\n      g.setEdge(e.w, e.v, label, forwardName);\n    }\n  });\n};\nexports.default = {\n  run: run,\n  undo: undo\n};","map":{"version":3,"mappings":";;;;;;;;;;AACA;AAEA,IAAMA,GAAG,GAAG,SAANA,GAAG,CAAIC,CAAQ;EACnB,IAAMC,QAAQ,GAAG,SAAXA,QAAQ,CAAID,CAAQ;IACxB,OAAO,UAACE,CAAO;MAAA;MAAK,eAAC,CAACC,IAAI,CAACD,CAAC,CAAC,0CAAEE,MAAM,KAAI,CAAC;IAAA;EAC5C,CAAC;EACD,IAAMC,GAAG,GACPL,CAAC,CAACM,KAAK,EAAE,CAACC,SAAS,KAAK,QAAQ,GAAG,wBAAS,EAACP,CAAC,EAAEC,QAAQ,CAACD,CAAC,CAAC,CAAC,GAAGQ,MAAM,CAACR,CAAC,CAAC;EAC1EK,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEI,OAAO,CAAC,UAACP,CAAO;IACnB,IAAMQ,KAAK,GAAGV,CAAC,CAACG,IAAI,CAACD,CAAC,CAAE;IACxBF,CAAC,CAACW,aAAa,CAACT,CAAC,CAAC;IAClBQ,KAAK,CAACE,WAAW,GAAGV,CAAC,CAACW,IAAI;IAC1BH,KAAK,CAACI,QAAQ,GAAG,IAAI;IACrBd,CAAC,CAACe,OAAO,CAACb,CAAC,CAACc,CAAC,EAAEd,CAAC,CAACe,CAAC,EAAEP,KAAK,EAAE,cAAOQ,IAAI,CAACC,MAAM,EAAE,CAAE,CAAC;EACpD,CAAC,CAAC;AACJ,CAAC;AAED,IAAMX,MAAM,GAAG,SAATA,MAAM,CAAIR,CAAQ;EACtB,IAAMK,GAAG,GAAW,EAAE;EACtB,IAAMe,KAAK,GAA4B,EAAE;EACzC,IAAMC,OAAO,GAA4B,EAAE;EAE3C,IAAMC,GAAG,GAAG,SAANA,GAAG,CAAIL,CAAS;;IACpB,IAAII,OAAO,CAACJ,CAAC,CAAC,EAAE;MACd;;IAEFI,OAAO,CAACJ,CAAC,CAAC,GAAG,IAAI;IACjBG,KAAK,CAACH,CAAC,CAAC,GAAG,IAAI;IACf,OAAC,CAACM,QAAQ,CAACN,CAAC,CAAC,0CAAER,OAAO,CAAC,UAACP,CAAC;MACvB,IAAIkB,KAAK,CAAClB,CAAC,CAACc,CAAC,CAAC,EAAE;QACdX,GAAG,CAACmB,IAAI,CAACtB,CAAC,CAAC;OACZ,MAAM;QACLoB,GAAG,CAACpB,CAAC,CAACc,CAAC,CAAC;;IAEZ,CAAC,CAAC;IACF,OAAOI,KAAK,CAACH,CAAC,CAAC;EACjB,CAAC;EAEDjB,CAAC,CAACyB,KAAK,EAAE,CAAChB,OAAO,CAACa,GAAG,CAAC;EACtB,OAAOjB,GAAG;AACZ,CAAC;AAED,IAAMqB,IAAI,GAAG,SAAPA,IAAI,CAAI1B,CAAQ;EACpBA,CAAC,CAAC2B,KAAK,EAAE,CAAClB,OAAO,CAAC,UAACP,CAAC;IAClB,IAAMQ,KAAK,GAAGV,CAAC,CAACG,IAAI,CAACD,CAAC,CAAE;IACxB,IAAIQ,KAAK,CAACI,QAAQ,EAAE;MAClBd,CAAC,CAACW,aAAa,CAACT,CAAC,CAAC;MAElB,IAAMU,WAAW,GAAGF,KAAK,CAACE,WAAW;MACrC,OAAOF,KAAK,CAACI,QAAQ;MACrB,OAAOJ,KAAK,CAACE,WAAW;MACxBZ,CAAC,CAACe,OAAO,CAACb,CAAC,CAACc,CAAC,EAAEd,CAAC,CAACe,CAAC,EAAEP,KAAK,EAAEE,WAAW,CAAC;;EAE3C,CAAC,CAAC;AACJ,CAAC;AAEDgB,kBAAe;EAAE7B,GAAG;EAAE2B,IAAI;AAAA,CAAE","names":["run","g","weightFn","e","edge","weight","fas","graph","acyclicer","dfsFAS","forEach","label","removeEdgeObj","forwardName","name","reversed","setEdge","w","v","Math","random","stack","visited","dfs","outEdges","push","nodes","undo","edges","exports"],"sources":["/home/iam/Documents/network/node_modules/@antv/layout/src/layout/dagre/src/acyclic.ts"],"sourcesContent":["import { Edge, Graph } from \"../graph\";\nimport greedyFAS from \"./greedy-fas\";\n\nconst run = (g: Graph) => {\n  const weightFn = (g: Graph) => {\n    return (e: Edge) => g.edge(e)?.weight || 1;\n  };\n  const fas =\n    g.graph().acyclicer === \"greedy\" ? greedyFAS(g, weightFn(g)) : dfsFAS(g);\n  fas?.forEach((e: Edge) => {\n    const label = g.edge(e)!;\n    g.removeEdgeObj(e);\n    label.forwardName = e.name;\n    label.reversed = true;\n    g.setEdge(e.w, e.v, label, `rev-${Math.random()}`);\n  });\n};\n\nconst dfsFAS = (g: Graph) => {\n  const fas: Edge[] = [];\n  const stack: Record<string, boolean> = {};\n  const visited: Record<string, boolean> = {};\n\n  const dfs = (v: string) => {\n    if (visited[v]) {\n      return;\n    }\n    visited[v] = true;\n    stack[v] = true;\n    g.outEdges(v)?.forEach((e) => {\n      if (stack[e.w]) {\n        fas.push(e);\n      } else {\n        dfs(e.w);\n      }\n    });\n    delete stack[v];\n  };\n\n  g.nodes().forEach(dfs);\n  return fas;\n};\n\nconst undo = (g: Graph) => {\n  g.edges().forEach((e) => {\n    const label = g.edge(e)!;\n    if (label.reversed) {\n      g.removeEdgeObj(e);\n\n      const forwardName = label.forwardName;\n      delete label.reversed;\n      delete label.forwardName;\n      g.setEdge(e.w, e.v, label, forwardName);\n    }\n  });\n};\n\nexport default { run, undo };\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}