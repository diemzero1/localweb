{"ast":null,"code":"import _classCallCheck from \"/home/iam/Documents/LocalWeb-master/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/iam/Documents/LocalWeb-master/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\nimport { hypotenuse } from './util';\nvar QrDecomposition = /*#__PURE__*/function () {\n  function QrDecomposition(value) {\n    _classCallCheck(this, QrDecomposition);\n    value = WrapperMatrix2D.checkMatrix(value);\n    var qr = value.clone();\n    var m = value.rows;\n    var n = value.columns;\n    var rdiag = new Float64Array(n);\n    var i, j, k, s;\n    for (k = 0; k < n; k++) {\n      var nrm = 0;\n      for (i = k; i < m; i++) {\n        nrm = hypotenuse(nrm, qr.get(i, k));\n      }\n      if (nrm !== 0) {\n        if (qr.get(k, k) < 0) {\n          nrm = -nrm;\n        }\n        for (i = k; i < m; i++) {\n          qr.set(i, k, qr.get(i, k) / nrm);\n        }\n        qr.set(k, k, qr.get(k, k) + 1);\n        for (j = k + 1; j < n; j++) {\n          s = 0;\n          for (i = k; i < m; i++) {\n            s += qr.get(i, k) * qr.get(i, j);\n          }\n          s = -s / qr.get(k, k);\n          for (i = k; i < m; i++) {\n            qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n      rdiag[k] = -nrm;\n    }\n    this.QR = qr;\n    this.Rdiag = rdiag;\n  }\n  _createClass(QrDecomposition, [{\n    key: \"solve\",\n    value: function solve(value) {\n      value = Matrix.checkMatrix(value);\n      var qr = this.QR;\n      var m = qr.rows;\n      if (value.rows !== m) {\n        throw new Error('Matrix row dimensions must agree');\n      }\n      if (!this.isFullRank()) {\n        throw new Error('Matrix is rank deficient');\n      }\n      var count = value.columns;\n      var X = value.clone();\n      var n = qr.columns;\n      var i, j, k, s;\n      for (k = 0; k < n; k++) {\n        for (j = 0; j < count; j++) {\n          s = 0;\n          for (i = k; i < m; i++) {\n            s += qr.get(i, k) * X.get(i, j);\n          }\n          s = -s / qr.get(k, k);\n          for (i = k; i < m; i++) {\n            X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n      for (k = n - 1; k >= 0; k--) {\n        for (j = 0; j < count; j++) {\n          X.set(k, j, X.get(k, j) / this.Rdiag[k]);\n        }\n        for (i = 0; i < k; i++) {\n          for (j = 0; j < count; j++) {\n            X.set(i, j, X.get(i, j) - X.get(k, j) * qr.get(i, k));\n          }\n        }\n      }\n      return X.subMatrix(0, n - 1, 0, count - 1);\n    }\n  }, {\n    key: \"isFullRank\",\n    value: function isFullRank() {\n      var columns = this.QR.columns;\n      for (var i = 0; i < columns; i++) {\n        if (this.Rdiag[i] === 0) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }, {\n    key: \"upperTriangularMatrix\",\n    get: function get() {\n      var qr = this.QR;\n      var n = qr.columns;\n      var X = new Matrix(n, n);\n      var i, j;\n      for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          if (i < j) {\n            X.set(i, j, qr.get(i, j));\n          } else if (i === j) {\n            X.set(i, j, this.Rdiag[i]);\n          } else {\n            X.set(i, j, 0);\n          }\n        }\n      }\n      return X;\n    }\n  }, {\n    key: \"orthogonalMatrix\",\n    get: function get() {\n      var qr = this.QR;\n      var rows = qr.rows;\n      var columns = qr.columns;\n      var X = new Matrix(rows, columns);\n      var i, j, k, s;\n      for (k = columns - 1; k >= 0; k--) {\n        for (i = 0; i < rows; i++) {\n          X.set(i, k, 0);\n        }\n        X.set(k, k, 1);\n        for (j = k; j < columns; j++) {\n          if (qr.get(k, k) !== 0) {\n            s = 0;\n            for (i = k; i < rows; i++) {\n              s += qr.get(i, k) * X.get(i, j);\n            }\n            s = -s / qr.get(k, k);\n            for (i = k; i < rows; i++) {\n              X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n            }\n          }\n        }\n      }\n      return X;\n    }\n  }]);\n  return QrDecomposition;\n}();\nexport { QrDecomposition as default };","map":{"version":3,"names":["Matrix","WrapperMatrix2D","hypotenuse","QrDecomposition","value","checkMatrix","qr","clone","m","rows","n","columns","rdiag","Float64Array","i","j","k","s","nrm","get","set","QR","Rdiag","Error","isFullRank","count","X","subMatrix"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/ml-matrix/src/dc/qr.js"],"sourcesContent":["import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nimport { hypotenuse } from './util';\n\nexport default class QrDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let qr = value.clone();\n    let m = value.rows;\n    let n = value.columns;\n    let rdiag = new Float64Array(n);\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      let nrm = 0;\n      for (i = k; i < m; i++) {\n        nrm = hypotenuse(nrm, qr.get(i, k));\n      }\n      if (nrm !== 0) {\n        if (qr.get(k, k) < 0) {\n          nrm = -nrm;\n        }\n        for (i = k; i < m; i++) {\n          qr.set(i, k, qr.get(i, k) / nrm);\n        }\n        qr.set(k, k, qr.get(k, k) + 1);\n        for (j = k + 1; j < n; j++) {\n          s = 0;\n          for (i = k; i < m; i++) {\n            s += qr.get(i, k) * qr.get(i, j);\n          }\n          s = -s / qr.get(k, k);\n          for (i = k; i < m; i++) {\n            qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n      rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let qr = this.QR;\n    let m = qr.rows;\n\n    if (value.rows !== m) {\n      throw new Error('Matrix row dimensions must agree');\n    }\n    if (!this.isFullRank()) {\n      throw new Error('Matrix is rank deficient');\n    }\n\n    let count = value.columns;\n    let X = value.clone();\n    let n = qr.columns;\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      for (j = 0; j < count; j++) {\n        s = 0;\n        for (i = k; i < m; i++) {\n          s += qr.get(i, k) * X.get(i, j);\n        }\n        s = -s / qr.get(k, k);\n        for (i = k; i < m; i++) {\n          X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n        }\n      }\n    }\n    for (k = n - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / this.Rdiag[k]);\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * qr.get(i, k));\n        }\n      }\n    }\n\n    return X.subMatrix(0, n - 1, 0, count - 1);\n  }\n\n  isFullRank() {\n    let columns = this.QR.columns;\n    for (let i = 0; i < columns; i++) {\n      if (this.Rdiag[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  get upperTriangularMatrix() {\n    let qr = this.QR;\n    let n = qr.columns;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        if (i < j) {\n          X.set(i, j, qr.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, this.Rdiag[i]);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get orthogonalMatrix() {\n    let qr = this.QR;\n    let rows = qr.rows;\n    let columns = qr.columns;\n    let X = new Matrix(rows, columns);\n    let i, j, k, s;\n\n    for (k = columns - 1; k >= 0; k--) {\n      for (i = 0; i < rows; i++) {\n        X.set(i, k, 0);\n      }\n      X.set(k, k, 1);\n      for (j = k; j < columns; j++) {\n        if (qr.get(k, k) !== 0) {\n          s = 0;\n          for (i = k; i < rows; i++) {\n            s += qr.get(i, k) * X.get(i, j);\n          }\n\n          s = -s / qr.get(k, k);\n\n          for (i = k; i < rows; i++) {\n            X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n    }\n    return X;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}