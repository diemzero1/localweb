{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { get, isFunction } from '@antv/util';\nimport { animation, interaction, scale, state, theme, tooltip } from '../../adaptor/common';\nimport { point } from '../../adaptor/geometries';\nimport { deepAssign, flow } from '../../utils';\nimport { WORD_CLOUD_COLOR_FIELD } from './constant';\nimport { transform } from './utils';\n/**\n * geometry 配置处理\n * @param params\n */\nfunction geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var colorField = options.colorField,\n    color = options.color;\n  var data = transform(params);\n  chart.data(data);\n  var p = deepAssign({}, params, {\n    options: {\n      xField: 'x',\n      yField: 'y',\n      seriesField: colorField && WORD_CLOUD_COLOR_FIELD,\n      rawFields: isFunction(color) && __spreadArrays(get(options, 'rawFields', []), ['datum']),\n      point: {\n        color: color,\n        shape: 'word-cloud'\n      }\n    }\n  });\n  var ext = point(p).ext;\n  ext.geometry.label(false);\n  chart.coordinate().reflect('y');\n  chart.axis(false);\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\nfunction meta(params) {\n  return flow(scale({\n    x: {\n      nice: false\n    },\n    y: {\n      nice: false\n    }\n  }))(params);\n}\n/**\n * 词云图 legend 配置\n * @param params\n */\nexport function legend(params) {\n  var chart = params.chart,\n    options = params.options;\n  var legend = options.legend,\n    colorField = options.colorField;\n  if (legend === false) {\n    chart.legend(false);\n  } else if (colorField) {\n    chart.legend(WORD_CLOUD_COLOR_FIELD, legend);\n  }\n  return params;\n}\n/**\n * 词云图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  flow(geometry, meta, tooltip, legend, interaction, animation, theme, state)(params);\n}","map":{"version":3,"mappings":";AAAA,SAASA,GAAG,EAAEC,UAAU,QAAQ,YAAY;AAC5C,SAASC,SAAS,EAAEC,WAAW,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,OAAO,QAAQ,sBAAsB;AAC3F,SAASC,KAAK,QAAQ,0BAA0B;AAEhD,SAASC,UAAU,EAAEC,IAAI,QAAQ,aAAa;AAC9C,SAASC,sBAAsB,QAAQ,YAAY;AAEnD,SAASC,SAAS,QAAQ,SAAS;AAEnC;;;;AAIA,SAASC,QAAQ,CAACC,MAAgC;EACxC,SAAK,GAAcA,MAAM,MAApB;IAAEC,OAAO,GAAKD,MAAM,QAAX;EACd,cAAU,GAAYC,OAAO,WAAnB;IAAEC,KAAK,GAAKD,OAAO,MAAZ;EACzB,IAAME,IAAI,GAAGL,SAAS,CAACE,MAAM,CAAC;EAE9BI,KAAK,CAACD,IAAI,CAACA,IAAI,CAAC;EAEhB,IAAME,CAAC,GAAGV,UAAU,CAAC,EAAE,EAAEK,MAAM,EAAE;IAC/BC,OAAO,EAAE;MACPK,MAAM,EAAE,GAAG;MACXC,MAAM,EAAE,GAAG;MACXC,WAAW,EAAEC,UAAU,IAAIZ,sBAAsB;MACjDa,SAAS,EAAEvB,UAAU,CAACe,KAAK,CAAC,mBAAQhB,GAAG,CAACe,OAAO,EAAE,WAAW,EAAE,EAAE,CAAC,GAAE,OAAO,EAAC;MAC3EP,KAAK,EAAE;QACLQ,KAAK;QACLS,KAAK,EAAE;;;GAGZ,CAAC;EAEM,OAAG,GAAKjB,KAAK,CAACW,CAAC,CAAC,IAAb;EACXO,GAAG,CAACb,QAAQ,CAACc,KAAK,CAAC,KAAK,CAAC;EAEzBT,KAAK,CAACU,UAAU,EAAE,CAACC,OAAO,CAAC,GAAG,CAAC;EAC/BX,KAAK,CAACY,IAAI,CAAC,KAAK,CAAC;EAEjB,OAAOhB,MAAM;AACf;AAEA;;;;AAIA,SAASiB,IAAI,CAACjB,MAAgC;EAC5C,OAAOJ,IAAI,CACTN,KAAK,CAAC;IACJ4B,CAAC,EAAE;MAAEC,IAAI,EAAE;IAAK,CAAE;IAClBC,CAAC,EAAE;MAAED,IAAI,EAAE;IAAK;GACjB,CAAC,CACH,CAACnB,MAAM,CAAC;AACX;AAEA;;;;AAIA,OAAM,SAAUqB,MAAM,CAACrB,MAAgC;EAC7C,SAAK,GAAcA,MAAM,MAApB;IAAEC,OAAO,GAAKD,MAAM,QAAX;EACd,UAAM,GAAiBC,OAAO,OAAxB;IAAEQ,UAAU,GAAKR,OAAO,WAAZ;EAE1B,IAAIoB,MAAM,KAAK,KAAK,EAAE;IACpBjB,KAAK,CAACiB,MAAM,CAAC,KAAK,CAAC;GACpB,MAAM,IAAIZ,UAAU,EAAE;IACrBL,KAAK,CAACiB,MAAM,CAACxB,sBAAsB,EAAEwB,MAAM,CAAC;;EAG9C,OAAOrB,MAAM;AACf;AAEA;;;;;AAKA,OAAM,SAAUsB,OAAO,CAACtB,MAAgC;EACtD;EACAJ,IAAI,CAACG,QAAQ,EAAEkB,IAAI,EAAExB,OAAO,EAAE4B,MAAM,EAAEhC,WAAW,EAAED,SAAS,EAAEI,KAAK,EAAED,KAAK,CAAC,CAACS,MAAM,CAAC;AACrF","names":["get","isFunction","animation","interaction","scale","state","theme","tooltip","point","deepAssign","flow","WORD_CLOUD_COLOR_FIELD","transform","geometry","params","options","color","data","chart","p","xField","yField","seriesField","colorField","rawFields","shape","ext","label","coordinate","reflect","axis","meta","x","nice","y","legend","adaptor"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/g2plot/src/plots/word-cloud/adaptor.ts"],"sourcesContent":["import { get, isFunction } from '@antv/util';\nimport { animation, interaction, scale, state, theme, tooltip } from '../../adaptor/common';\nimport { point } from '../../adaptor/geometries';\nimport { Params } from '../../core/adaptor';\nimport { deepAssign, flow } from '../../utils';\nimport { WORD_CLOUD_COLOR_FIELD } from './constant';\nimport { WordCloudOptions } from './types';\nimport { transform } from './utils';\n\n/**\n * geometry 配置处理\n * @param params\n */\nfunction geometry(params: Params<WordCloudOptions>): Params<WordCloudOptions> {\n  const { chart, options } = params;\n  const { colorField, color } = options;\n  const data = transform(params);\n\n  chart.data(data);\n\n  const p = deepAssign({}, params, {\n    options: {\n      xField: 'x',\n      yField: 'y',\n      seriesField: colorField && WORD_CLOUD_COLOR_FIELD,\n      rawFields: isFunction(color) && [...get(options, 'rawFields', []), 'datum'],\n      point: {\n        color,\n        shape: 'word-cloud',\n      },\n    },\n  });\n\n  const { ext } = point(p);\n  ext.geometry.label(false);\n\n  chart.coordinate().reflect('y');\n  chart.axis(false);\n\n  return params;\n}\n\n/**\n * meta 配置\n * @param params\n */\nfunction meta(params: Params<WordCloudOptions>): Params<WordCloudOptions> {\n  return flow(\n    scale({\n      x: { nice: false },\n      y: { nice: false },\n    })\n  )(params);\n}\n\n/**\n * 词云图 legend 配置\n * @param params\n */\nexport function legend(params: Params<WordCloudOptions>): Params<WordCloudOptions> {\n  const { chart, options } = params;\n  const { legend, colorField } = options;\n\n  if (legend === false) {\n    chart.legend(false);\n  } else if (colorField) {\n    chart.legend(WORD_CLOUD_COLOR_FIELD, legend);\n  }\n\n  return params;\n}\n\n/**\n * 词云图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<WordCloudOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  flow(geometry, meta, tooltip, legend, interaction, animation, theme, state)(params);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}