{"ast":null,"code":"import _possibleConstructorReturn from \"/home/iam/Documents/network/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\";\nimport _inherits from \"/home/iam/Documents/network/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/iam/Documents/network/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/home/iam/Documents/network/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/iam/Documents/network/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { isAnyArray } from 'is-any-array';\nimport rescale from 'ml-array-rescale';\nimport { inspectMatrix, inspectMatrixWithOptions } from './inspect';\nimport { installMathOperations } from './mathOperations';\nimport { sumByRow, sumByColumn, sumAll, productByRow, productByColumn, productAll, varianceByRow, varianceByColumn, varianceAll, centerByRow, centerByColumn, centerAll, scaleByRow, scaleByColumn, scaleAll, getScaleByRow, getScaleByColumn, getScaleAll } from './stat';\nimport { checkRowVector, checkRowIndex, checkColumnIndex, checkColumnVector, checkRange, checkNonEmpty, checkRowIndices, checkColumnIndices } from './util';\nexport var AbstractMatrix = /*#__PURE__*/function () {\n  function AbstractMatrix() {\n    _classCallCheck(this, AbstractMatrix);\n  }\n  _createClass(AbstractMatrix, [{\n    key: \"size\",\n    get: function get() {\n      return this.rows * this.columns;\n    }\n  }, {\n    key: \"apply\",\n    value: function apply(callback) {\n      if (typeof callback !== 'function') {\n        throw new TypeError('callback must be a function');\n      }\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          callback.call(this, i, j);\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"to1DArray\",\n    value: function to1DArray() {\n      var array = [];\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          array.push(this.get(i, j));\n        }\n      }\n      return array;\n    }\n  }, {\n    key: \"to2DArray\",\n    value: function to2DArray() {\n      var copy = [];\n      for (var i = 0; i < this.rows; i++) {\n        copy.push([]);\n        for (var j = 0; j < this.columns; j++) {\n          copy[i].push(this.get(i, j));\n        }\n      }\n      return copy;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.to2DArray();\n    }\n  }, {\n    key: \"isRowVector\",\n    value: function isRowVector() {\n      return this.rows === 1;\n    }\n  }, {\n    key: \"isColumnVector\",\n    value: function isColumnVector() {\n      return this.columns === 1;\n    }\n  }, {\n    key: \"isVector\",\n    value: function isVector() {\n      return this.rows === 1 || this.columns === 1;\n    }\n  }, {\n    key: \"isSquare\",\n    value: function isSquare() {\n      return this.rows === this.columns;\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.rows === 0 || this.columns === 0;\n    }\n  }, {\n    key: \"isSymmetric\",\n    value: function isSymmetric() {\n      if (this.isSquare()) {\n        for (var i = 0; i < this.rows; i++) {\n          for (var j = 0; j <= i; j++) {\n            if (this.get(i, j) !== this.get(j, i)) {\n              return false;\n            }\n          }\n        }\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"isEchelonForm\",\n    value: function isEchelonForm() {\n      var i = 0;\n      var j = 0;\n      var previousColumn = -1;\n      var isEchelonForm = true;\n      var checked = false;\n      while (i < this.rows && isEchelonForm) {\n        j = 0;\n        checked = false;\n        while (j < this.columns && checked === false) {\n          if (this.get(i, j) === 0) {\n            j++;\n          } else if (this.get(i, j) === 1 && j > previousColumn) {\n            checked = true;\n            previousColumn = j;\n          } else {\n            isEchelonForm = false;\n            checked = true;\n          }\n        }\n        i++;\n      }\n      return isEchelonForm;\n    }\n  }, {\n    key: \"isReducedEchelonForm\",\n    value: function isReducedEchelonForm() {\n      var i = 0;\n      var j = 0;\n      var previousColumn = -1;\n      var isReducedEchelonForm = true;\n      var checked = false;\n      while (i < this.rows && isReducedEchelonForm) {\n        j = 0;\n        checked = false;\n        while (j < this.columns && checked === false) {\n          if (this.get(i, j) === 0) {\n            j++;\n          } else if (this.get(i, j) === 1 && j > previousColumn) {\n            checked = true;\n            previousColumn = j;\n          } else {\n            isReducedEchelonForm = false;\n            checked = true;\n          }\n        }\n        for (var k = j + 1; k < this.rows; k++) {\n          if (this.get(i, k) !== 0) {\n            isReducedEchelonForm = false;\n          }\n        }\n        i++;\n      }\n      return isReducedEchelonForm;\n    }\n  }, {\n    key: \"echelonForm\",\n    value: function echelonForm() {\n      var result = this.clone();\n      var h = 0;\n      var k = 0;\n      while (h < result.rows && k < result.columns) {\n        var iMax = h;\n        for (var i = h; i < result.rows; i++) {\n          if (result.get(i, k) > result.get(iMax, k)) {\n            iMax = i;\n          }\n        }\n        if (result.get(iMax, k) === 0) {\n          k++;\n        } else {\n          result.swapRows(h, iMax);\n          var tmp = result.get(h, k);\n          for (var j = k; j < result.columns; j++) {\n            result.set(h, j, result.get(h, j) / tmp);\n          }\n          for (var _i = h + 1; _i < result.rows; _i++) {\n            var factor = result.get(_i, k) / result.get(h, k);\n            result.set(_i, k, 0);\n            for (var _j = k + 1; _j < result.columns; _j++) {\n              result.set(_i, _j, result.get(_i, _j) - result.get(h, _j) * factor);\n            }\n          }\n          h++;\n          k++;\n        }\n      }\n      return result;\n    }\n  }, {\n    key: \"reducedEchelonForm\",\n    value: function reducedEchelonForm() {\n      var result = this.echelonForm();\n      var m = result.columns;\n      var n = result.rows;\n      var h = n - 1;\n      while (h >= 0) {\n        if (result.maxRow(h) === 0) {\n          h--;\n        } else {\n          var p = 0;\n          var pivot = false;\n          while (p < n && pivot === false) {\n            if (result.get(h, p) === 1) {\n              pivot = true;\n            } else {\n              p++;\n            }\n          }\n          for (var i = 0; i < h; i++) {\n            var factor = result.get(i, p);\n            for (var j = p; j < m; j++) {\n              var tmp = result.get(i, j) - factor * result.get(h, j);\n              result.set(i, j, tmp);\n            }\n          }\n          h--;\n        }\n      }\n      return result;\n    }\n  }, {\n    key: \"set\",\n    value: function set() {\n      throw new Error('set method is unimplemented');\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      throw new Error('get method is unimplemented');\n    }\n  }, {\n    key: \"repeat\",\n    value: function repeat() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (typeof options !== 'object') {\n        throw new TypeError('options must be an object');\n      }\n      var _options$rows = options.rows,\n        rows = _options$rows === void 0 ? 1 : _options$rows,\n        _options$columns = options.columns,\n        columns = _options$columns === void 0 ? 1 : _options$columns;\n      if (!Number.isInteger(rows) || rows <= 0) {\n        throw new TypeError('rows must be a positive integer');\n      }\n      if (!Number.isInteger(columns) || columns <= 0) {\n        throw new TypeError('columns must be a positive integer');\n      }\n      var matrix = new Matrix(this.rows * rows, this.columns * columns);\n      for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < columns; j++) {\n          matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n        }\n      }\n      return matrix;\n    }\n  }, {\n    key: \"fill\",\n    value: function fill(value) {\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, value);\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"neg\",\n    value: function neg() {\n      return this.mulS(-1);\n    }\n  }, {\n    key: \"getRow\",\n    value: function getRow(index) {\n      checkRowIndex(this, index);\n      var row = [];\n      for (var i = 0; i < this.columns; i++) {\n        row.push(this.get(index, i));\n      }\n      return row;\n    }\n  }, {\n    key: \"getRowVector\",\n    value: function getRowVector(index) {\n      return Matrix.rowVector(this.getRow(index));\n    }\n  }, {\n    key: \"setRow\",\n    value: function setRow(index, array) {\n      checkRowIndex(this, index);\n      array = checkRowVector(this, array);\n      for (var i = 0; i < this.columns; i++) {\n        this.set(index, i, array[i]);\n      }\n      return this;\n    }\n  }, {\n    key: \"swapRows\",\n    value: function swapRows(row1, row2) {\n      checkRowIndex(this, row1);\n      checkRowIndex(this, row2);\n      for (var i = 0; i < this.columns; i++) {\n        var temp = this.get(row1, i);\n        this.set(row1, i, this.get(row2, i));\n        this.set(row2, i, temp);\n      }\n      return this;\n    }\n  }, {\n    key: \"getColumn\",\n    value: function getColumn(index) {\n      checkColumnIndex(this, index);\n      var column = [];\n      for (var i = 0; i < this.rows; i++) {\n        column.push(this.get(i, index));\n      }\n      return column;\n    }\n  }, {\n    key: \"getColumnVector\",\n    value: function getColumnVector(index) {\n      return Matrix.columnVector(this.getColumn(index));\n    }\n  }, {\n    key: \"setColumn\",\n    value: function setColumn(index, array) {\n      checkColumnIndex(this, index);\n      array = checkColumnVector(this, array);\n      for (var i = 0; i < this.rows; i++) {\n        this.set(i, index, array[i]);\n      }\n      return this;\n    }\n  }, {\n    key: \"swapColumns\",\n    value: function swapColumns(column1, column2) {\n      checkColumnIndex(this, column1);\n      checkColumnIndex(this, column2);\n      for (var i = 0; i < this.rows; i++) {\n        var temp = this.get(i, column1);\n        this.set(i, column1, this.get(i, column2));\n        this.set(i, column2, temp);\n      }\n      return this;\n    }\n  }, {\n    key: \"addRowVector\",\n    value: function addRowVector(vector) {\n      vector = checkRowVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) + vector[j]);\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"subRowVector\",\n    value: function subRowVector(vector) {\n      vector = checkRowVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) - vector[j]);\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"mulRowVector\",\n    value: function mulRowVector(vector) {\n      vector = checkRowVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) * vector[j]);\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"divRowVector\",\n    value: function divRowVector(vector) {\n      vector = checkRowVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) / vector[j]);\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"addColumnVector\",\n    value: function addColumnVector(vector) {\n      vector = checkColumnVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) + vector[i]);\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"subColumnVector\",\n    value: function subColumnVector(vector) {\n      vector = checkColumnVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) - vector[i]);\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"mulColumnVector\",\n    value: function mulColumnVector(vector) {\n      vector = checkColumnVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) * vector[i]);\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"divColumnVector\",\n    value: function divColumnVector(vector) {\n      vector = checkColumnVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) / vector[i]);\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"mulRow\",\n    value: function mulRow(index, value) {\n      checkRowIndex(this, index);\n      for (var i = 0; i < this.columns; i++) {\n        this.set(index, i, this.get(index, i) * value);\n      }\n      return this;\n    }\n  }, {\n    key: \"mulColumn\",\n    value: function mulColumn(index, value) {\n      checkColumnIndex(this, index);\n      for (var i = 0; i < this.rows; i++) {\n        this.set(i, index, this.get(i, index) * value);\n      }\n      return this;\n    }\n  }, {\n    key: \"max\",\n    value: function max(by) {\n      if (this.isEmpty()) {\n        return NaN;\n      }\n      switch (by) {\n        case 'row':\n          {\n            var max = new Array(this.rows).fill(Number.NEGATIVE_INFINITY);\n            for (var row = 0; row < this.rows; row++) {\n              for (var column = 0; column < this.columns; column++) {\n                if (this.get(row, column) > max[row]) {\n                  max[row] = this.get(row, column);\n                }\n              }\n            }\n            return max;\n          }\n        case 'column':\n          {\n            var _max = new Array(this.columns).fill(Number.NEGATIVE_INFINITY);\n            for (var _row = 0; _row < this.rows; _row++) {\n              for (var _column = 0; _column < this.columns; _column++) {\n                if (this.get(_row, _column) > _max[_column]) {\n                  _max[_column] = this.get(_row, _column);\n                }\n              }\n            }\n            return _max;\n          }\n        case undefined:\n          {\n            var _max2 = this.get(0, 0);\n            for (var _row2 = 0; _row2 < this.rows; _row2++) {\n              for (var _column2 = 0; _column2 < this.columns; _column2++) {\n                if (this.get(_row2, _column2) > _max2) {\n                  _max2 = this.get(_row2, _column2);\n                }\n              }\n            }\n            return _max2;\n          }\n        default:\n          throw new Error(\"invalid option: \".concat(by));\n      }\n    }\n  }, {\n    key: \"maxIndex\",\n    value: function maxIndex() {\n      checkNonEmpty(this);\n      var v = this.get(0, 0);\n      var idx = [0, 0];\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          if (this.get(i, j) > v) {\n            v = this.get(i, j);\n            idx[0] = i;\n            idx[1] = j;\n          }\n        }\n      }\n      return idx;\n    }\n  }, {\n    key: \"min\",\n    value: function min(by) {\n      if (this.isEmpty()) {\n        return NaN;\n      }\n      switch (by) {\n        case 'row':\n          {\n            var min = new Array(this.rows).fill(Number.POSITIVE_INFINITY);\n            for (var row = 0; row < this.rows; row++) {\n              for (var column = 0; column < this.columns; column++) {\n                if (this.get(row, column) < min[row]) {\n                  min[row] = this.get(row, column);\n                }\n              }\n            }\n            return min;\n          }\n        case 'column':\n          {\n            var _min = new Array(this.columns).fill(Number.POSITIVE_INFINITY);\n            for (var _row3 = 0; _row3 < this.rows; _row3++) {\n              for (var _column3 = 0; _column3 < this.columns; _column3++) {\n                if (this.get(_row3, _column3) < _min[_column3]) {\n                  _min[_column3] = this.get(_row3, _column3);\n                }\n              }\n            }\n            return _min;\n          }\n        case undefined:\n          {\n            var _min2 = this.get(0, 0);\n            for (var _row4 = 0; _row4 < this.rows; _row4++) {\n              for (var _column4 = 0; _column4 < this.columns; _column4++) {\n                if (this.get(_row4, _column4) < _min2) {\n                  _min2 = this.get(_row4, _column4);\n                }\n              }\n            }\n            return _min2;\n          }\n        default:\n          throw new Error(\"invalid option: \".concat(by));\n      }\n    }\n  }, {\n    key: \"minIndex\",\n    value: function minIndex() {\n      checkNonEmpty(this);\n      var v = this.get(0, 0);\n      var idx = [0, 0];\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          if (this.get(i, j) < v) {\n            v = this.get(i, j);\n            idx[0] = i;\n            idx[1] = j;\n          }\n        }\n      }\n      return idx;\n    }\n  }, {\n    key: \"maxRow\",\n    value: function maxRow(row) {\n      checkRowIndex(this, row);\n      if (this.isEmpty()) {\n        return NaN;\n      }\n      var v = this.get(row, 0);\n      for (var i = 1; i < this.columns; i++) {\n        if (this.get(row, i) > v) {\n          v = this.get(row, i);\n        }\n      }\n      return v;\n    }\n  }, {\n    key: \"maxRowIndex\",\n    value: function maxRowIndex(row) {\n      checkRowIndex(this, row);\n      checkNonEmpty(this);\n      var v = this.get(row, 0);\n      var idx = [row, 0];\n      for (var i = 1; i < this.columns; i++) {\n        if (this.get(row, i) > v) {\n          v = this.get(row, i);\n          idx[1] = i;\n        }\n      }\n      return idx;\n    }\n  }, {\n    key: \"minRow\",\n    value: function minRow(row) {\n      checkRowIndex(this, row);\n      if (this.isEmpty()) {\n        return NaN;\n      }\n      var v = this.get(row, 0);\n      for (var i = 1; i < this.columns; i++) {\n        if (this.get(row, i) < v) {\n          v = this.get(row, i);\n        }\n      }\n      return v;\n    }\n  }, {\n    key: \"minRowIndex\",\n    value: function minRowIndex(row) {\n      checkRowIndex(this, row);\n      checkNonEmpty(this);\n      var v = this.get(row, 0);\n      var idx = [row, 0];\n      for (var i = 1; i < this.columns; i++) {\n        if (this.get(row, i) < v) {\n          v = this.get(row, i);\n          idx[1] = i;\n        }\n      }\n      return idx;\n    }\n  }, {\n    key: \"maxColumn\",\n    value: function maxColumn(column) {\n      checkColumnIndex(this, column);\n      if (this.isEmpty()) {\n        return NaN;\n      }\n      var v = this.get(0, column);\n      for (var i = 1; i < this.rows; i++) {\n        if (this.get(i, column) > v) {\n          v = this.get(i, column);\n        }\n      }\n      return v;\n    }\n  }, {\n    key: \"maxColumnIndex\",\n    value: function maxColumnIndex(column) {\n      checkColumnIndex(this, column);\n      checkNonEmpty(this);\n      var v = this.get(0, column);\n      var idx = [0, column];\n      for (var i = 1; i < this.rows; i++) {\n        if (this.get(i, column) > v) {\n          v = this.get(i, column);\n          idx[0] = i;\n        }\n      }\n      return idx;\n    }\n  }, {\n    key: \"minColumn\",\n    value: function minColumn(column) {\n      checkColumnIndex(this, column);\n      if (this.isEmpty()) {\n        return NaN;\n      }\n      var v = this.get(0, column);\n      for (var i = 1; i < this.rows; i++) {\n        if (this.get(i, column) < v) {\n          v = this.get(i, column);\n        }\n      }\n      return v;\n    }\n  }, {\n    key: \"minColumnIndex\",\n    value: function minColumnIndex(column) {\n      checkColumnIndex(this, column);\n      checkNonEmpty(this);\n      var v = this.get(0, column);\n      var idx = [0, column];\n      for (var i = 1; i < this.rows; i++) {\n        if (this.get(i, column) < v) {\n          v = this.get(i, column);\n          idx[0] = i;\n        }\n      }\n      return idx;\n    }\n  }, {\n    key: \"diag\",\n    value: function diag() {\n      var min = Math.min(this.rows, this.columns);\n      var diag = [];\n      for (var i = 0; i < min; i++) {\n        diag.push(this.get(i, i));\n      }\n      return diag;\n    }\n  }, {\n    key: \"norm\",\n    value: function norm() {\n      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'frobenius';\n      var result = 0;\n      if (type === 'max') {\n        return this.max();\n      } else if (type === 'frobenius') {\n        for (var i = 0; i < this.rows; i++) {\n          for (var j = 0; j < this.columns; j++) {\n            result = result + this.get(i, j) * this.get(i, j);\n          }\n        }\n        return Math.sqrt(result);\n      } else {\n        throw new RangeError(\"unknown norm type: \".concat(type));\n      }\n    }\n  }, {\n    key: \"cumulativeSum\",\n    value: function cumulativeSum() {\n      var sum = 0;\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          sum += this.get(i, j);\n          this.set(i, j, sum);\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"dot\",\n    value: function dot(vector2) {\n      if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n      var vector1 = this.to1DArray();\n      if (vector1.length !== vector2.length) {\n        throw new RangeError('vectors do not have the same size');\n      }\n      var dot = 0;\n      for (var i = 0; i < vector1.length; i++) {\n        dot += vector1[i] * vector2[i];\n      }\n      return dot;\n    }\n  }, {\n    key: \"mmul\",\n    value: function mmul(other) {\n      other = Matrix.checkMatrix(other);\n      var m = this.rows;\n      var n = this.columns;\n      var p = other.columns;\n      var result = new Matrix(m, p);\n      var Bcolj = new Float64Array(n);\n      for (var j = 0; j < p; j++) {\n        for (var k = 0; k < n; k++) {\n          Bcolj[k] = other.get(k, j);\n        }\n        for (var i = 0; i < m; i++) {\n          var s = 0;\n          for (var _k = 0; _k < n; _k++) {\n            s += this.get(i, _k) * Bcolj[_k];\n          }\n          result.set(i, j, s);\n        }\n      }\n      return result;\n    }\n  }, {\n    key: \"strassen2x2\",\n    value: function strassen2x2(other) {\n      other = Matrix.checkMatrix(other);\n      var result = new Matrix(2, 2);\n      var a11 = this.get(0, 0);\n      var b11 = other.get(0, 0);\n      var a12 = this.get(0, 1);\n      var b12 = other.get(0, 1);\n      var a21 = this.get(1, 0);\n      var b21 = other.get(1, 0);\n      var a22 = this.get(1, 1);\n      var b22 = other.get(1, 1);\n\n      // Compute intermediate values.\n      var m1 = (a11 + a22) * (b11 + b22);\n      var m2 = (a21 + a22) * b11;\n      var m3 = a11 * (b12 - b22);\n      var m4 = a22 * (b21 - b11);\n      var m5 = (a11 + a12) * b22;\n      var m6 = (a21 - a11) * (b11 + b12);\n      var m7 = (a12 - a22) * (b21 + b22);\n\n      // Combine intermediate values into the output.\n      var c00 = m1 + m4 - m5 + m7;\n      var c01 = m3 + m5;\n      var c10 = m2 + m4;\n      var c11 = m1 - m2 + m3 + m6;\n      result.set(0, 0, c00);\n      result.set(0, 1, c01);\n      result.set(1, 0, c10);\n      result.set(1, 1, c11);\n      return result;\n    }\n  }, {\n    key: \"strassen3x3\",\n    value: function strassen3x3(other) {\n      other = Matrix.checkMatrix(other);\n      var result = new Matrix(3, 3);\n      var a00 = this.get(0, 0);\n      var a01 = this.get(0, 1);\n      var a02 = this.get(0, 2);\n      var a10 = this.get(1, 0);\n      var a11 = this.get(1, 1);\n      var a12 = this.get(1, 2);\n      var a20 = this.get(2, 0);\n      var a21 = this.get(2, 1);\n      var a22 = this.get(2, 2);\n      var b00 = other.get(0, 0);\n      var b01 = other.get(0, 1);\n      var b02 = other.get(0, 2);\n      var b10 = other.get(1, 0);\n      var b11 = other.get(1, 1);\n      var b12 = other.get(1, 2);\n      var b20 = other.get(2, 0);\n      var b21 = other.get(2, 1);\n      var b22 = other.get(2, 2);\n      var m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n      var m2 = (a00 - a10) * (-b01 + b11);\n      var m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n      var m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n      var m5 = (a10 + a11) * (-b00 + b01);\n      var m6 = a00 * b00;\n      var m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n      var m8 = (-a00 + a20) * (b02 - b12);\n      var m9 = (a20 + a21) * (-b00 + b02);\n      var m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n      var m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n      var m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n      var m13 = (a02 - a22) * (b11 - b21);\n      var m14 = a02 * b20;\n      var m15 = (a21 + a22) * (-b20 + b21);\n      var m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n      var m17 = (a02 - a12) * (b12 - b22);\n      var m18 = (a11 + a12) * (-b20 + b22);\n      var m19 = a01 * b10;\n      var m20 = a12 * b21;\n      var m21 = a10 * b02;\n      var m22 = a20 * b01;\n      var m23 = a22 * b22;\n      var c00 = m6 + m14 + m19;\n      var c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n      var c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n      var c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n      var c11 = m2 + m4 + m5 + m6 + m20;\n      var c12 = m14 + m16 + m17 + m18 + m21;\n      var c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n      var c21 = m12 + m13 + m14 + m15 + m22;\n      var c22 = m6 + m7 + m8 + m9 + m23;\n      result.set(0, 0, c00);\n      result.set(0, 1, c01);\n      result.set(0, 2, c02);\n      result.set(1, 0, c10);\n      result.set(1, 1, c11);\n      result.set(1, 2, c12);\n      result.set(2, 0, c20);\n      result.set(2, 1, c21);\n      result.set(2, 2, c22);\n      return result;\n    }\n  }, {\n    key: \"mmulStrassen\",\n    value: function mmulStrassen(y) {\n      y = Matrix.checkMatrix(y);\n      var x = this.clone();\n      var r1 = x.rows;\n      var c1 = x.columns;\n      var r2 = y.rows;\n      var c2 = y.columns;\n      if (c1 !== r2) {\n        // eslint-disable-next-line no-console\n        console.warn(\"Multiplying \".concat(r1, \" x \").concat(c1, \" and \").concat(r2, \" x \").concat(c2, \" matrix: dimensions do not match.\"));\n      }\n\n      // Put a matrix into the top left of a matrix of zeros.\n      // `rows` and `cols` are the dimensions of the output matrix.\n      function embed(mat, rows, cols) {\n        var r = mat.rows;\n        var c = mat.columns;\n        if (r === rows && c === cols) {\n          return mat;\n        } else {\n          var resultat = AbstractMatrix.zeros(rows, cols);\n          resultat = resultat.setSubMatrix(mat, 0, 0);\n          return resultat;\n        }\n      }\n\n      // Make sure both matrices are the same size.\n      // This is exclusively for simplicity:\n      // this algorithm can be implemented with matrices of different sizes.\n\n      var r = Math.max(r1, r2);\n      var c = Math.max(c1, c2);\n      x = embed(x, r, c);\n      y = embed(y, r, c);\n\n      // Our recursive multiplication function.\n      function blockMult(a, b, rows, cols) {\n        // For small matrices, resort to naive multiplication.\n        if (rows <= 512 || cols <= 512) {\n          return a.mmul(b); // a is equivalent to this\n        }\n\n        // Apply dynamic padding.\n        if (rows % 2 === 1 && cols % 2 === 1) {\n          a = embed(a, rows + 1, cols + 1);\n          b = embed(b, rows + 1, cols + 1);\n        } else if (rows % 2 === 1) {\n          a = embed(a, rows + 1, cols);\n          b = embed(b, rows + 1, cols);\n        } else if (cols % 2 === 1) {\n          a = embed(a, rows, cols + 1);\n          b = embed(b, rows, cols + 1);\n        }\n        var halfRows = parseInt(a.rows / 2, 10);\n        var halfCols = parseInt(a.columns / 2, 10);\n        // Subdivide input matrices.\n        var a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n        var b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n        var a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n        var b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n        var a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n        var b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n        var a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n        var b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n        // Compute intermediate values.\n        var m1 = blockMult(AbstractMatrix.add(a11, a22), AbstractMatrix.add(b11, b22), halfRows, halfCols);\n        var m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n        var m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n        var m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n        var m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n        var m6 = blockMult(AbstractMatrix.sub(a21, a11), AbstractMatrix.add(b11, b12), halfRows, halfCols);\n        var m7 = blockMult(AbstractMatrix.sub(a12, a22), AbstractMatrix.add(b21, b22), halfRows, halfCols);\n\n        // Combine intermediate values into the output.\n        var c11 = AbstractMatrix.add(m1, m4);\n        c11.sub(m5);\n        c11.add(m7);\n        var c12 = AbstractMatrix.add(m3, m5);\n        var c21 = AbstractMatrix.add(m2, m4);\n        var c22 = AbstractMatrix.sub(m1, m2);\n        c22.add(m3);\n        c22.add(m6);\n\n        // Crop output to the desired size (undo dynamic padding).\n        var resultat = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n        resultat = resultat.setSubMatrix(c11, 0, 0);\n        resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n        resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n        resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n        return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n      }\n      return blockMult(x, y, r, c);\n    }\n  }, {\n    key: \"scaleRows\",\n    value: function scaleRows() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (typeof options !== 'object') {\n        throw new TypeError('options must be an object');\n      }\n      var _options$min = options.min,\n        min = _options$min === void 0 ? 0 : _options$min,\n        _options$max = options.max,\n        max = _options$max === void 0 ? 1 : _options$max;\n      if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n      if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n      if (min >= max) throw new RangeError('min must be smaller than max');\n      var newMatrix = new Matrix(this.rows, this.columns);\n      for (var i = 0; i < this.rows; i++) {\n        var row = this.getRow(i);\n        if (row.length > 0) {\n          rescale(row, {\n            min: min,\n            max: max,\n            output: row\n          });\n        }\n        newMatrix.setRow(i, row);\n      }\n      return newMatrix;\n    }\n  }, {\n    key: \"scaleColumns\",\n    value: function scaleColumns() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (typeof options !== 'object') {\n        throw new TypeError('options must be an object');\n      }\n      var _options$min2 = options.min,\n        min = _options$min2 === void 0 ? 0 : _options$min2,\n        _options$max2 = options.max,\n        max = _options$max2 === void 0 ? 1 : _options$max2;\n      if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n      if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n      if (min >= max) throw new RangeError('min must be smaller than max');\n      var newMatrix = new Matrix(this.rows, this.columns);\n      for (var i = 0; i < this.columns; i++) {\n        var column = this.getColumn(i);\n        if (column.length) {\n          rescale(column, {\n            min: min,\n            max: max,\n            output: column\n          });\n        }\n        newMatrix.setColumn(i, column);\n      }\n      return newMatrix;\n    }\n  }, {\n    key: \"flipRows\",\n    value: function flipRows() {\n      var middle = Math.ceil(this.columns / 2);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < middle; j++) {\n          var first = this.get(i, j);\n          var last = this.get(i, this.columns - 1 - j);\n          this.set(i, j, last);\n          this.set(i, this.columns - 1 - j, first);\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"flipColumns\",\n    value: function flipColumns() {\n      var middle = Math.ceil(this.rows / 2);\n      for (var j = 0; j < this.columns; j++) {\n        for (var i = 0; i < middle; i++) {\n          var first = this.get(i, j);\n          var last = this.get(this.rows - 1 - i, j);\n          this.set(i, j, last);\n          this.set(this.rows - 1 - i, j, first);\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"kroneckerProduct\",\n    value: function kroneckerProduct(other) {\n      other = Matrix.checkMatrix(other);\n      var m = this.rows;\n      var n = this.columns;\n      var p = other.rows;\n      var q = other.columns;\n      var result = new Matrix(m * p, n * q);\n      for (var i = 0; i < m; i++) {\n        for (var j = 0; j < n; j++) {\n          for (var k = 0; k < p; k++) {\n            for (var l = 0; l < q; l++) {\n              result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n            }\n          }\n        }\n      }\n      return result;\n    }\n  }, {\n    key: \"kroneckerSum\",\n    value: function kroneckerSum(other) {\n      other = Matrix.checkMatrix(other);\n      if (!this.isSquare() || !other.isSquare()) {\n        throw new Error('Kronecker Sum needs two Square Matrices');\n      }\n      var m = this.rows;\n      var n = other.rows;\n      var AxI = this.kroneckerProduct(Matrix.eye(n, n));\n      var IxB = Matrix.eye(m, m).kroneckerProduct(other);\n      return AxI.add(IxB);\n    }\n  }, {\n    key: \"transpose\",\n    value: function transpose() {\n      var result = new Matrix(this.columns, this.rows);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          result.set(j, i, this.get(i, j));\n        }\n      }\n      return result;\n    }\n  }, {\n    key: \"sortRows\",\n    value: function sortRows() {\n      var compareFunction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : compareNumbers;\n      for (var i = 0; i < this.rows; i++) {\n        this.setRow(i, this.getRow(i).sort(compareFunction));\n      }\n      return this;\n    }\n  }, {\n    key: \"sortColumns\",\n    value: function sortColumns() {\n      var compareFunction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : compareNumbers;\n      for (var i = 0; i < this.columns; i++) {\n        this.setColumn(i, this.getColumn(i).sort(compareFunction));\n      }\n      return this;\n    }\n  }, {\n    key: \"subMatrix\",\n    value: function subMatrix(startRow, endRow, startColumn, endColumn) {\n      checkRange(this, startRow, endRow, startColumn, endColumn);\n      var newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n      for (var i = startRow; i <= endRow; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n          newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n        }\n      }\n      return newMatrix;\n    }\n  }, {\n    key: \"subMatrixRow\",\n    value: function subMatrixRow(indices, startColumn, endColumn) {\n      if (startColumn === undefined) startColumn = 0;\n      if (endColumn === undefined) endColumn = this.columns - 1;\n      if (startColumn > endColumn || startColumn < 0 || startColumn >= this.columns || endColumn < 0 || endColumn >= this.columns) {\n        throw new RangeError('Argument out of range');\n      }\n      var newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n      for (var i = 0; i < indices.length; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n          if (indices[i] < 0 || indices[i] >= this.rows) {\n            throw new RangeError(\"Row index out of range: \".concat(indices[i]));\n          }\n          newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n        }\n      }\n      return newMatrix;\n    }\n  }, {\n    key: \"subMatrixColumn\",\n    value: function subMatrixColumn(indices, startRow, endRow) {\n      if (startRow === undefined) startRow = 0;\n      if (endRow === undefined) endRow = this.rows - 1;\n      if (startRow > endRow || startRow < 0 || startRow >= this.rows || endRow < 0 || endRow >= this.rows) {\n        throw new RangeError('Argument out of range');\n      }\n      var newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n      for (var i = 0; i < indices.length; i++) {\n        for (var j = startRow; j <= endRow; j++) {\n          if (indices[i] < 0 || indices[i] >= this.columns) {\n            throw new RangeError(\"Column index out of range: \".concat(indices[i]));\n          }\n          newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n        }\n      }\n      return newMatrix;\n    }\n  }, {\n    key: \"setSubMatrix\",\n    value: function setSubMatrix(matrix, startRow, startColumn) {\n      matrix = Matrix.checkMatrix(matrix);\n      if (matrix.isEmpty()) {\n        return this;\n      }\n      var endRow = startRow + matrix.rows - 1;\n      var endColumn = startColumn + matrix.columns - 1;\n      checkRange(this, startRow, endRow, startColumn, endColumn);\n      for (var i = 0; i < matrix.rows; i++) {\n        for (var j = 0; j < matrix.columns; j++) {\n          this.set(startRow + i, startColumn + j, matrix.get(i, j));\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"selection\",\n    value: function selection(rowIndices, columnIndices) {\n      checkRowIndices(this, rowIndices);\n      checkColumnIndices(this, columnIndices);\n      var newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n      for (var i = 0; i < rowIndices.length; i++) {\n        var rowIndex = rowIndices[i];\n        for (var j = 0; j < columnIndices.length; j++) {\n          var columnIndex = columnIndices[j];\n          newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n        }\n      }\n      return newMatrix;\n    }\n  }, {\n    key: \"trace\",\n    value: function trace() {\n      var min = Math.min(this.rows, this.columns);\n      var trace = 0;\n      for (var i = 0; i < min; i++) {\n        trace += this.get(i, i);\n      }\n      return trace;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var newMatrix = new Matrix(this.rows, this.columns);\n      for (var row = 0; row < this.rows; row++) {\n        for (var column = 0; column < this.columns; column++) {\n          newMatrix.set(row, column, this.get(row, column));\n        }\n      }\n      return newMatrix;\n    }\n  }, {\n    key: \"sum\",\n    value: function sum(by) {\n      switch (by) {\n        case 'row':\n          return sumByRow(this);\n        case 'column':\n          return sumByColumn(this);\n        case undefined:\n          return sumAll(this);\n        default:\n          throw new Error(\"invalid option: \".concat(by));\n      }\n    }\n  }, {\n    key: \"product\",\n    value: function product(by) {\n      switch (by) {\n        case 'row':\n          return productByRow(this);\n        case 'column':\n          return productByColumn(this);\n        case undefined:\n          return productAll(this);\n        default:\n          throw new Error(\"invalid option: \".concat(by));\n      }\n    }\n  }, {\n    key: \"mean\",\n    value: function mean(by) {\n      var sum = this.sum(by);\n      switch (by) {\n        case 'row':\n          {\n            for (var i = 0; i < this.rows; i++) {\n              sum[i] /= this.columns;\n            }\n            return sum;\n          }\n        case 'column':\n          {\n            for (var _i2 = 0; _i2 < this.columns; _i2++) {\n              sum[_i2] /= this.rows;\n            }\n            return sum;\n          }\n        case undefined:\n          return sum / this.size;\n        default:\n          throw new Error(\"invalid option: \".concat(by));\n      }\n    }\n  }, {\n    key: \"variance\",\n    value: function variance(by) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (typeof by === 'object') {\n        options = by;\n        by = undefined;\n      }\n      if (typeof options !== 'object') {\n        throw new TypeError('options must be an object');\n      }\n      var _options = options,\n        _options$unbiased = _options.unbiased,\n        unbiased = _options$unbiased === void 0 ? true : _options$unbiased,\n        _options$mean = _options.mean,\n        mean = _options$mean === void 0 ? this.mean(by) : _options$mean;\n      if (typeof unbiased !== 'boolean') {\n        throw new TypeError('unbiased must be a boolean');\n      }\n      switch (by) {\n        case 'row':\n          {\n            if (!isAnyArray(mean)) {\n              throw new TypeError('mean must be an array');\n            }\n            return varianceByRow(this, unbiased, mean);\n          }\n        case 'column':\n          {\n            if (!isAnyArray(mean)) {\n              throw new TypeError('mean must be an array');\n            }\n            return varianceByColumn(this, unbiased, mean);\n          }\n        case undefined:\n          {\n            if (typeof mean !== 'number') {\n              throw new TypeError('mean must be a number');\n            }\n            return varianceAll(this, unbiased, mean);\n          }\n        default:\n          throw new Error(\"invalid option: \".concat(by));\n      }\n    }\n  }, {\n    key: \"standardDeviation\",\n    value: function standardDeviation(by, options) {\n      if (typeof by === 'object') {\n        options = by;\n        by = undefined;\n      }\n      var variance = this.variance(by, options);\n      if (by === undefined) {\n        return Math.sqrt(variance);\n      } else {\n        for (var i = 0; i < variance.length; i++) {\n          variance[i] = Math.sqrt(variance[i]);\n        }\n        return variance;\n      }\n    }\n  }, {\n    key: \"center\",\n    value: function center(by) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (typeof by === 'object') {\n        options = by;\n        by = undefined;\n      }\n      if (typeof options !== 'object') {\n        throw new TypeError('options must be an object');\n      }\n      var _options2 = options,\n        _options2$center = _options2.center,\n        center = _options2$center === void 0 ? this.mean(by) : _options2$center;\n      switch (by) {\n        case 'row':\n          {\n            if (!isAnyArray(center)) {\n              throw new TypeError('center must be an array');\n            }\n            centerByRow(this, center);\n            return this;\n          }\n        case 'column':\n          {\n            if (!isAnyArray(center)) {\n              throw new TypeError('center must be an array');\n            }\n            centerByColumn(this, center);\n            return this;\n          }\n        case undefined:\n          {\n            if (typeof center !== 'number') {\n              throw new TypeError('center must be a number');\n            }\n            centerAll(this, center);\n            return this;\n          }\n        default:\n          throw new Error(\"invalid option: \".concat(by));\n      }\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(by) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (typeof by === 'object') {\n        options = by;\n        by = undefined;\n      }\n      if (typeof options !== 'object') {\n        throw new TypeError('options must be an object');\n      }\n      var scale = options.scale;\n      switch (by) {\n        case 'row':\n          {\n            if (scale === undefined) {\n              scale = getScaleByRow(this);\n            } else if (!isAnyArray(scale)) {\n              throw new TypeError('scale must be an array');\n            }\n            scaleByRow(this, scale);\n            return this;\n          }\n        case 'column':\n          {\n            if (scale === undefined) {\n              scale = getScaleByColumn(this);\n            } else if (!isAnyArray(scale)) {\n              throw new TypeError('scale must be an array');\n            }\n            scaleByColumn(this, scale);\n            return this;\n          }\n        case undefined:\n          {\n            if (scale === undefined) {\n              scale = getScaleAll(this);\n            } else if (typeof scale !== 'number') {\n              throw new TypeError('scale must be a number');\n            }\n            scaleAll(this, scale);\n            return this;\n          }\n        default:\n          throw new Error(\"invalid option: \".concat(by));\n      }\n    }\n  }, {\n    key: \"toString\",\n    value: function toString(options) {\n      return inspectMatrixWithOptions(this, options);\n    }\n  }], [{\n    key: \"from1DArray\",\n    value: function from1DArray(newRows, newColumns, newData) {\n      var length = newRows * newColumns;\n      if (length !== newData.length) {\n        throw new RangeError('data length does not match given dimensions');\n      }\n      var newMatrix = new Matrix(newRows, newColumns);\n      for (var row = 0; row < newRows; row++) {\n        for (var column = 0; column < newColumns; column++) {\n          newMatrix.set(row, column, newData[row * newColumns + column]);\n        }\n      }\n      return newMatrix;\n    }\n  }, {\n    key: \"rowVector\",\n    value: function rowVector(newData) {\n      var vector = new Matrix(1, newData.length);\n      for (var i = 0; i < newData.length; i++) {\n        vector.set(0, i, newData[i]);\n      }\n      return vector;\n    }\n  }, {\n    key: \"columnVector\",\n    value: function columnVector(newData) {\n      var vector = new Matrix(newData.length, 1);\n      for (var i = 0; i < newData.length; i++) {\n        vector.set(i, 0, newData[i]);\n      }\n      return vector;\n    }\n  }, {\n    key: \"zeros\",\n    value: function zeros(rows, columns) {\n      return new Matrix(rows, columns);\n    }\n  }, {\n    key: \"ones\",\n    value: function ones(rows, columns) {\n      return new Matrix(rows, columns).fill(1);\n    }\n  }, {\n    key: \"rand\",\n    value: function rand(rows, columns) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      if (typeof options !== 'object') {\n        throw new TypeError('options must be an object');\n      }\n      var _options$random = options.random,\n        random = _options$random === void 0 ? Math.random : _options$random;\n      var matrix = new Matrix(rows, columns);\n      for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < columns; j++) {\n          matrix.set(i, j, random());\n        }\n      }\n      return matrix;\n    }\n  }, {\n    key: \"randInt\",\n    value: function randInt(rows, columns) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      if (typeof options !== 'object') {\n        throw new TypeError('options must be an object');\n      }\n      var _options$min3 = options.min,\n        min = _options$min3 === void 0 ? 0 : _options$min3,\n        _options$max3 = options.max,\n        max = _options$max3 === void 0 ? 1000 : _options$max3,\n        _options$random2 = options.random,\n        random = _options$random2 === void 0 ? Math.random : _options$random2;\n      if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n      if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n      if (min >= max) throw new RangeError('min must be smaller than max');\n      var interval = max - min;\n      var matrix = new Matrix(rows, columns);\n      for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < columns; j++) {\n          var value = min + Math.round(random() * interval);\n          matrix.set(i, j, value);\n        }\n      }\n      return matrix;\n    }\n  }, {\n    key: \"eye\",\n    value: function eye(rows, columns, value) {\n      if (columns === undefined) columns = rows;\n      if (value === undefined) value = 1;\n      var min = Math.min(rows, columns);\n      var matrix = this.zeros(rows, columns);\n      for (var i = 0; i < min; i++) {\n        matrix.set(i, i, value);\n      }\n      return matrix;\n    }\n  }, {\n    key: \"diag\",\n    value: function diag(data, rows, columns) {\n      var l = data.length;\n      if (rows === undefined) rows = l;\n      if (columns === undefined) columns = rows;\n      var min = Math.min(l, rows, columns);\n      var matrix = this.zeros(rows, columns);\n      for (var i = 0; i < min; i++) {\n        matrix.set(i, i, data[i]);\n      }\n      return matrix;\n    }\n  }, {\n    key: \"min\",\n    value: function min(matrix1, matrix2) {\n      matrix1 = this.checkMatrix(matrix1);\n      matrix2 = this.checkMatrix(matrix2);\n      var rows = matrix1.rows;\n      var columns = matrix1.columns;\n      var result = new Matrix(rows, columns);\n      for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < columns; j++) {\n          result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n        }\n      }\n      return result;\n    }\n  }, {\n    key: \"max\",\n    value: function max(matrix1, matrix2) {\n      matrix1 = this.checkMatrix(matrix1);\n      matrix2 = this.checkMatrix(matrix2);\n      var rows = matrix1.rows;\n      var columns = matrix1.columns;\n      var result = new this(rows, columns);\n      for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < columns; j++) {\n          result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n        }\n      }\n      return result;\n    }\n  }, {\n    key: \"checkMatrix\",\n    value: function checkMatrix(value) {\n      return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n    }\n  }, {\n    key: \"isMatrix\",\n    value: function isMatrix(value) {\n      return value != null && value.klass === 'Matrix';\n    }\n  }]);\n  return AbstractMatrix;\n}();\nAbstractMatrix.prototype.klass = 'Matrix';\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspectMatrix;\n}\nfunction compareNumbers(a, b) {\n  return a - b;\n}\nfunction isArrayOfNumbers(array) {\n  return array.every(function (element) {\n    return typeof element === 'number';\n  });\n}\n\n// Synonyms\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct = AbstractMatrix.prototype.kroneckerProduct;\nvar Matrix = /*#__PURE__*/function (_AbstractMatrix) {\n  _inherits(Matrix, _AbstractMatrix);\n  var _super = _createSuper(Matrix);\n  function Matrix(nRows, nColumns) {\n    var _this;\n    _classCallCheck(this, Matrix);\n    _this = _super.call(this);\n    if (Matrix.isMatrix(nRows)) {\n      // eslint-disable-next-line no-constructor-return\n      return _possibleConstructorReturn(_this, nRows.clone());\n    } else if (Number.isInteger(nRows) && nRows >= 0) {\n      // Create an empty matrix\n      _this.data = [];\n      if (Number.isInteger(nColumns) && nColumns >= 0) {\n        for (var i = 0; i < nRows; i++) {\n          _this.data.push(new Float64Array(nColumns));\n        }\n      } else {\n        throw new TypeError('nColumns must be a positive integer');\n      }\n    } else if (isAnyArray(nRows)) {\n      // Copy the values from the 2D array\n      var arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = nRows ? arrayData[0].length : 0;\n      if (typeof nColumns !== 'number') {\n        throw new TypeError('Data must be a 2D array with at least one element');\n      }\n      _this.data = [];\n      for (var _i3 = 0; _i3 < nRows; _i3++) {\n        if (arrayData[_i3].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        if (!isArrayOfNumbers(arrayData[_i3])) {\n          throw new TypeError('Input data contains non-numeric values');\n        }\n        _this.data.push(Float64Array.from(arrayData[_i3]));\n      }\n    } else {\n      throw new TypeError('First argument must be a positive number or an array');\n    }\n    _this.rows = nRows;\n    _this.columns = nColumns;\n    return _this;\n  }\n  _createClass(Matrix, [{\n    key: \"set\",\n    value: function set(rowIndex, columnIndex, value) {\n      this.data[rowIndex][columnIndex] = value;\n      return this;\n    }\n  }, {\n    key: \"get\",\n    value: function get(rowIndex, columnIndex) {\n      return this.data[rowIndex][columnIndex];\n    }\n  }, {\n    key: \"removeRow\",\n    value: function removeRow(index) {\n      checkRowIndex(this, index);\n      this.data.splice(index, 1);\n      this.rows -= 1;\n      return this;\n    }\n  }, {\n    key: \"addRow\",\n    value: function addRow(index, array) {\n      if (array === undefined) {\n        array = index;\n        index = this.rows;\n      }\n      checkRowIndex(this, index, true);\n      array = Float64Array.from(checkRowVector(this, array));\n      this.data.splice(index, 0, array);\n      this.rows += 1;\n      return this;\n    }\n  }, {\n    key: \"removeColumn\",\n    value: function removeColumn(index) {\n      checkColumnIndex(this, index);\n      for (var i = 0; i < this.rows; i++) {\n        var newRow = new Float64Array(this.columns - 1);\n        for (var j = 0; j < index; j++) {\n          newRow[j] = this.data[i][j];\n        }\n        for (var _j2 = index + 1; _j2 < this.columns; _j2++) {\n          newRow[_j2 - 1] = this.data[i][_j2];\n        }\n        this.data[i] = newRow;\n      }\n      this.columns -= 1;\n      return this;\n    }\n  }, {\n    key: \"addColumn\",\n    value: function addColumn(index, array) {\n      if (typeof array === 'undefined') {\n        array = index;\n        index = this.columns;\n      }\n      checkColumnIndex(this, index, true);\n      array = checkColumnVector(this, array);\n      for (var i = 0; i < this.rows; i++) {\n        var newRow = new Float64Array(this.columns + 1);\n        var j = 0;\n        for (; j < index; j++) {\n          newRow[j] = this.data[i][j];\n        }\n        newRow[j++] = array[i];\n        for (; j < this.columns + 1; j++) {\n          newRow[j] = this.data[i][j - 1];\n        }\n        this.data[i] = newRow;\n      }\n      this.columns += 1;\n      return this;\n    }\n  }]);\n  return Matrix;\n}(AbstractMatrix);\nexport { Matrix as default };\ninstallMathOperations(AbstractMatrix, Matrix);","map":{"version":3,"names":["isAnyArray","rescale","inspectMatrix","inspectMatrixWithOptions","installMathOperations","sumByRow","sumByColumn","sumAll","productByRow","productByColumn","productAll","varianceByRow","varianceByColumn","varianceAll","centerByRow","centerByColumn","centerAll","scaleByRow","scaleByColumn","scaleAll","getScaleByRow","getScaleByColumn","getScaleAll","checkRowVector","checkRowIndex","checkColumnIndex","checkColumnVector","checkRange","checkNonEmpty","checkRowIndices","checkColumnIndices","AbstractMatrix","rows","columns","callback","TypeError","i","j","call","array","push","get","copy","to2DArray","isSquare","previousColumn","isEchelonForm","checked","isReducedEchelonForm","k","result","clone","h","iMax","swapRows","tmp","set","factor","echelonForm","m","n","maxRow","p","pivot","Error","options","Number","isInteger","matrix","Matrix","setSubMatrix","value","mulS","index","row","rowVector","getRow","row1","row2","temp","column","columnVector","getColumn","column1","column2","vector","by","isEmpty","NaN","max","Array","fill","NEGATIVE_INFINITY","undefined","v","idx","min","POSITIVE_INFINITY","Math","diag","type","sqrt","RangeError","sum","vector2","isMatrix","to1DArray","vector1","length","dot","other","checkMatrix","Bcolj","Float64Array","s","a11","b11","a12","b12","a21","b21","a22","b22","m1","m2","m3","m4","m5","m6","m7","c00","c01","c10","c11","a00","a01","a02","a10","a20","b00","b01","b02","b10","b20","m8","m9","m10","m11","m12","m13","m14","m15","m16","m17","m18","m19","m20","m21","m22","m23","c02","c12","c20","c21","c22","y","x","r1","c1","r2","c2","console","warn","embed","mat","cols","r","c","resultat","zeros","blockMult","a","b","mmul","halfRows","parseInt","halfCols","subMatrix","add","sub","isFinite","newMatrix","output","setRow","setColumn","middle","ceil","first","last","q","l","AxI","kroneckerProduct","eye","IxB","compareFunction","compareNumbers","sort","startRow","endRow","startColumn","endColumn","indices","rowIndices","columnIndices","rowIndex","columnIndex","trace","size","unbiased","mean","variance","center","scale","newRows","newColumns","newData","random","interval","round","data","matrix1","matrix2","klass","prototype","Symbol","for","isArrayOfNumbers","every","element","rand","randomInt","randInt","diagonal","identity","negate","neg","tensorProduct","nRows","nColumns","arrayData","from","splice","newRow"],"sources":["/home/iam/Documents/network/node_modules/ml-matrix/src/matrix.js"],"sourcesContent":["import { isAnyArray } from 'is-any-array';\nimport rescale from 'ml-array-rescale';\n\nimport { inspectMatrix, inspectMatrixWithOptions } from './inspect';\nimport { installMathOperations } from './mathOperations';\nimport {\n  sumByRow,\n  sumByColumn,\n  sumAll,\n  productByRow,\n  productByColumn,\n  productAll,\n  varianceByRow,\n  varianceByColumn,\n  varianceAll,\n  centerByRow,\n  centerByColumn,\n  centerAll,\n  scaleByRow,\n  scaleByColumn,\n  scaleAll,\n  getScaleByRow,\n  getScaleByColumn,\n  getScaleAll,\n} from './stat';\nimport {\n  checkRowVector,\n  checkRowIndex,\n  checkColumnIndex,\n  checkColumnVector,\n  checkRange,\n  checkNonEmpty,\n  checkRowIndices,\n  checkColumnIndices,\n} from './util';\n\nexport class AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    let length = newRows * newColumns;\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n    let newMatrix = new Matrix(newRows, newColumns);\n    for (let row = 0; row < newRows; row++) {\n      for (let column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n    return newMatrix;\n  }\n\n  static rowVector(newData) {\n    let vector = new Matrix(1, newData.length);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n    return vector;\n  }\n\n  static columnVector(newData) {\n    let vector = new Matrix(newData.length, 1);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n    return vector;\n  }\n\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { random = Math.random } = options;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n    return matrix;\n  }\n\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1000, random = Math.random } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let interval = max - min;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n    return matrix;\n  }\n\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    let min = Math.min(rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n    return matrix;\n  }\n\n  static diag(data, rows, columns) {\n    let l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    let min = Math.min(l, rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n    return matrix;\n  }\n\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new this(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n    return this;\n  }\n\n  to1DArray() {\n    let array = [];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n    return array;\n  }\n\n  to2DArray() {\n    let copy = [];\n    for (let i = 0; i < this.rows; i++) {\n      copy.push([]);\n      for (let j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n    return copy;\n  }\n\n  toJSON() {\n    return this.to2DArray();\n  }\n\n  isRowVector() {\n    return this.rows === 1;\n  }\n\n  isColumnVector() {\n    return this.columns === 1;\n  }\n\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isEmpty() {\n    return this.rows === 0 || this.columns === 0;\n  }\n\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n      i++;\n    }\n    return isEchelonForm;\n  }\n\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n      i++;\n    }\n    return isReducedEchelonForm;\n  }\n\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n    while (h < result.rows && k < result.columns) {\n      let iMax = h;\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n        h++;\n        k++;\n      }\n    }\n    return result;\n  }\n\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n        while (p < n && pivot === false) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n        h--;\n      }\n    }\n    return result;\n  }\n\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { rows = 1, columns = 1 } = options;\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n    return matrix;\n  }\n\n  fill(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n    return this;\n  }\n\n  neg() {\n    return this.mulS(-1);\n  }\n\n  getRow(index) {\n    checkRowIndex(this, index);\n    let row = [];\n    for (let i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n    return row;\n  }\n\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n    return this;\n  }\n\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n    for (let i = 0; i < this.columns; i++) {\n      let temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n    return this;\n  }\n\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    let column = [];\n    for (let i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n    return column;\n  }\n\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n    return this;\n  }\n\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n    for (let i = 0; i < this.rows; i++) {\n      let temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n    return this;\n  }\n\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n    return this;\n  }\n\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n    return this;\n  }\n\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n    return this;\n  }\n\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n    return this;\n  }\n\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n    return this;\n  }\n\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n    return this;\n  }\n\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n    return this;\n  }\n\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n    return this;\n  }\n\n  max(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    switch (by) {\n      case 'row': {\n        const max = new Array(this.rows).fill(Number.NEGATIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max[row]) {\n              max[row] = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      case 'column': {\n        const max = new Array(this.columns).fill(Number.NEGATIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max[column]) {\n              max[column] = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      case undefined: {\n        let max = this.get(0, 0);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max) {\n              max = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  maxIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  min(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n\n    switch (by) {\n      case 'row': {\n        const min = new Array(this.rows).fill(Number.POSITIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min[row]) {\n              min[row] = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      case 'column': {\n        const min = new Array(this.columns).fill(Number.POSITIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min[column]) {\n              min[column] = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      case undefined: {\n        let min = this.get(0, 0);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min) {\n              min = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  minIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  maxRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  minRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  minColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  diag() {\n    let min = Math.min(this.rows, this.columns);\n    let diag = [];\n    for (let i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n    return diag;\n  }\n\n  norm(type = 'frobenius') {\n    let result = 0;\n    if (type === 'max') {\n      return this.max();\n    } else if (type === 'frobenius') {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.columns; j++) {\n          result = result + this.get(i, j) * this.get(i, j);\n        }\n      }\n      return Math.sqrt(result);\n    } else {\n      throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n\n  cumulativeSum() {\n    let sum = 0;\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n    return this;\n  }\n\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    let vector1 = this.to1DArray();\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n    let dot = 0;\n    for (let i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n    return dot;\n  }\n\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.columns;\n\n    let result = new Matrix(m, p);\n\n    let Bcolj = new Float64Array(n);\n    for (let j = 0; j < p; j++) {\n      for (let k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n\n      for (let i = 0; i < m; i++) {\n        let s = 0;\n        for (let k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n\n        result.set(i, j, s);\n      }\n    }\n    return result;\n  }\n\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1);\n\n    // Compute intermediate values.\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22);\n\n    // Combine intermediate values into the output.\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(3, 3);\n\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    let x = this.clone();\n    let r1 = x.rows;\n    let c1 = x.columns;\n    let r2 = y.rows;\n    let c2 = y.columns;\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`,\n      );\n    }\n\n    // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n    function embed(mat, rows, cols) {\n      let r = mat.rows;\n      let c = mat.columns;\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        let resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    }\n\n    // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n    let r = Math.max(r1, r2);\n    let c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c);\n\n    // Our recursive multiplication function.\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      }\n\n      // Apply dynamic padding.\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n\n      let halfRows = parseInt(a.rows / 2, 10);\n      let halfCols = parseInt(a.columns / 2, 10);\n      // Subdivide input matrices.\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n      // Compute intermediate values.\n      let m1 = blockMult(\n        AbstractMatrix.add(a11, a22),\n        AbstractMatrix.add(b11, b22),\n        halfRows,\n        halfCols,\n      );\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      let m6 = blockMult(\n        AbstractMatrix.sub(a21, a11),\n        AbstractMatrix.add(b11, b12),\n        halfRows,\n        halfCols,\n      );\n      let m7 = blockMult(\n        AbstractMatrix.sub(a12, a22),\n        AbstractMatrix.add(b21, b22),\n        halfRows,\n        halfCols,\n      );\n\n      // Combine intermediate values into the output.\n      let c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      let c12 = AbstractMatrix.add(m3, m5);\n      let c21 = AbstractMatrix.add(m2, m4);\n      let c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6);\n\n      // Crop output to the desired size (undo dynamic padding).\n      let resultat = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      resultat = resultat.setSubMatrix(c11, 0, 0);\n      resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n      resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n      resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n      return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n\n    return blockMult(x, y, r, c);\n  }\n\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n      if (row.length > 0) {\n        rescale(row, { min, max, output: row });\n      }\n      newMatrix.setRow(i, row);\n    }\n    return newMatrix;\n  }\n\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n      if (column.length) {\n        rescale(column, {\n          min: min,\n          max: max,\n          output: column,\n        });\n      }\n      newMatrix.setColumn(i, column);\n    }\n    return newMatrix;\n  }\n\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < middle; j++) {\n        let first = this.get(i, j);\n        let last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n    return this;\n  }\n\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n    for (let j = 0; j < this.columns; j++) {\n      for (let i = 0; i < middle; i++) {\n        let first = this.get(i, j);\n        let last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n    return this;\n  }\n\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.rows;\n    let q = other.columns;\n\n    let result = new Matrix(m * p, n * q);\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < p; k++) {\n          for (let l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  kroneckerSum(other) {\n    other = Matrix.checkMatrix(other);\n    if (!this.isSquare() || !other.isSquare()) {\n      throw new Error('Kronecker Sum needs two Square Matrices');\n    }\n    let m = this.rows;\n    let n = other.rows;\n    let AxI = this.kroneckerProduct(Matrix.eye(n, n));\n    let IxB = Matrix.eye(m, m).kroneckerProduct(other);\n    return AxI.add(IxB);\n  }\n\n  transpose() {\n    let result = new Matrix(this.columns, this.rows);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n    return result;\n  }\n\n  sortRows(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  sortColumns(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    let newMatrix = new Matrix(\n      endRow - startRow + 1,\n      endColumn - startColumn + 1,\n    );\n    for (let i = startRow; i <= endRow; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n    if (\n      startColumn > endColumn ||\n      startColumn < 0 ||\n      startColumn >= this.columns ||\n      endColumn < 0 ||\n      endColumn >= this.columns\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n    if (\n      startRow > endRow ||\n      startRow < 0 ||\n      startRow >= this.rows ||\n      endRow < 0 ||\n      endRow >= this.rows\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n    return newMatrix;\n  }\n\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (matrix.isEmpty()) {\n      return this;\n    }\n    let endRow = startRow + matrix.rows - 1;\n    let endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    for (let i = 0; i < matrix.rows; i++) {\n      for (let j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n    return this;\n  }\n\n  selection(rowIndices, columnIndices) {\n    checkRowIndices(this, rowIndices);\n    checkColumnIndices(this, columnIndices);\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n    for (let i = 0; i < rowIndices.length; i++) {\n      let rowIndex = rowIndices[i];\n      for (let j = 0; j < columnIndices.length; j++) {\n        let columnIndex = columnIndices[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n    return newMatrix;\n  }\n\n  trace() {\n    let min = Math.min(this.rows, this.columns);\n    let trace = 0;\n    for (let i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n    return trace;\n  }\n\n  clone() {\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++) {\n        newMatrix.set(row, column, this.get(row, column));\n      }\n    }\n    return newMatrix;\n  }\n\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n      case 'column':\n        return sumByColumn(this);\n      case undefined:\n        return sumAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n      case 'column':\n        return productByColumn(this);\n      case undefined:\n        return productAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  mean(by) {\n    const sum = this.sum(by);\n    switch (by) {\n      case 'row': {\n        for (let i = 0; i < this.rows; i++) {\n          sum[i] /= this.columns;\n        }\n        return sum;\n      }\n      case 'column': {\n        for (let i = 0; i < this.columns; i++) {\n          sum[i] /= this.rows;\n        }\n        return sum;\n      }\n      case undefined:\n        return sum / this.size;\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { unbiased = true, mean = this.mean(by) } = options;\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n    switch (by) {\n      case 'row': {\n        if (!isAnyArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByRow(this, unbiased, mean);\n      }\n      case 'column': {\n        if (!isAnyArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByColumn(this, unbiased, mean);\n      }\n      case undefined: {\n        if (typeof mean !== 'number') {\n          throw new TypeError('mean must be a number');\n        }\n        return varianceAll(this, unbiased, mean);\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    const variance = this.variance(by, options);\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (let i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n      return variance;\n    }\n  }\n\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { center = this.mean(by) } = options;\n    switch (by) {\n      case 'row': {\n        if (!isAnyArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByRow(this, center);\n        return this;\n      }\n      case 'column': {\n        if (!isAnyArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByColumn(this, center);\n        return this;\n      }\n      case undefined: {\n        if (typeof center !== 'number') {\n          throw new TypeError('center must be a number');\n        }\n        centerAll(this, center);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    let scale = options.scale;\n    switch (by) {\n      case 'row': {\n        if (scale === undefined) {\n          scale = getScaleByRow(this);\n        } else if (!isAnyArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByRow(this, scale);\n        return this;\n      }\n      case 'column': {\n        if (scale === undefined) {\n          scale = getScaleByColumn(this);\n        } else if (!isAnyArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByColumn(this, scale);\n        return this;\n      }\n      case undefined: {\n        if (scale === undefined) {\n          scale = getScaleAll(this);\n        } else if (typeof scale !== 'number') {\n          throw new TypeError('scale must be a number');\n        }\n        scaleAll(this, scale);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  toString(options) {\n    return inspectMatrixWithOptions(this, options);\n  }\n}\n\nAbstractMatrix.prototype.klass = 'Matrix';\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[Symbol.for('nodejs.util.inspect.custom')] =\n    inspectMatrix;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\nfunction isArrayOfNumbers(array) {\n  return array.every((element) => {\n    return typeof element === 'number';\n  });\n}\n\n// Synonyms\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct =\n  AbstractMatrix.prototype.kroneckerProduct;\n\nexport default class Matrix extends AbstractMatrix {\n  constructor(nRows, nColumns) {\n    super();\n    if (Matrix.isMatrix(nRows)) {\n      // eslint-disable-next-line no-constructor-return\n      return nRows.clone();\n    } else if (Number.isInteger(nRows) && nRows >= 0) {\n      // Create an empty matrix\n      this.data = [];\n      if (Number.isInteger(nColumns) && nColumns >= 0) {\n        for (let i = 0; i < nRows; i++) {\n          this.data.push(new Float64Array(nColumns));\n        }\n      } else {\n        throw new TypeError('nColumns must be a positive integer');\n      }\n    } else if (isAnyArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = nRows ? arrayData[0].length : 0;\n      if (typeof nColumns !== 'number') {\n        throw new TypeError(\n          'Data must be a 2D array with at least one element',\n        );\n      }\n      this.data = [];\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        if (!isArrayOfNumbers(arrayData[i])) {\n          throw new TypeError('Input data contains non-numeric values');\n        }\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n    } else {\n      throw new TypeError(\n        'First argument must be a positive number or an array',\n      );\n    }\n    this.rows = nRows;\n    this.columns = nColumns;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  removeRow(index) {\n    checkRowIndex(this, index);\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns -= 1;\n    return this;\n  }\n\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      newRow[j++] = array[i];\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns += 1;\n    return this;\n  }\n}\n\ninstallMathOperations(AbstractMatrix, Matrix);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}