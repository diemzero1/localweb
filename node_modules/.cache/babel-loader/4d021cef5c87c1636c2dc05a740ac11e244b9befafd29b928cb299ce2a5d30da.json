{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { Plot } from '../../core/plot';\nimport { adaptor } from './adaptor';\nimport { DEFAULT_OPTIONS } from './constant';\n// 注册的shape\nimport './shapes/word-cloud';\nimport { processImageMask, transform } from './utils';\nvar WordCloud = /** @class */function (_super) {\n  __extends(WordCloud, _super);\n  function WordCloud() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** 词云图 */\n    _this.type = 'word-cloud';\n    return _this;\n  }\n  /**\n   * 获取 词云图 默认配置项\n   * 供外部使用\n   */\n  WordCloud.getDefaultOptions = function () {\n    return DEFAULT_OPTIONS;\n  };\n  /**\n   * @override\n   * @param data\n   */\n  WordCloud.prototype.changeData = function (data) {\n    this.updateOption({\n      data: data\n    });\n    if (this.options.imageMask) {\n      this.render();\n    } else {\n      this.chart.changeData(transform({\n        chart: this.chart,\n        options: this.options\n      }));\n    }\n  };\n  /**\n   * 获取默认的 options 配置项\n   */\n  WordCloud.prototype.getDefaultOptions = function () {\n    return WordCloud.getDefaultOptions();\n  };\n  /**\n   * 覆写父类方法，词云图需要加载图片资源，所以需要异步渲染\n   */\n  WordCloud.prototype.render = function () {\n    var _this = this;\n    return new Promise(function (res) {\n      var imageMask = _this.options.imageMask;\n      if (!imageMask) {\n        // 调用父类渲染函数\n        _super.prototype.render.call(_this);\n        res();\n        return;\n      }\n      var handler = function handler(img) {\n        _this.options = __assign(__assign({}, _this.options), {\n          imageMask: img || null\n        });\n        // 调用父类渲染函数\n        _super.prototype.render.call(_this);\n        res();\n      };\n      processImageMask(imageMask).then(handler).catch(handler);\n    });\n  };\n  /**\n   * 获取 词云图 的适配器\n   */\n  WordCloud.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n  /**\n   * 覆写父类的方法，因为词云图使用 单独的函数 进行布局，原理上有些不一样\n   */\n  WordCloud.prototype.triggerResize = function () {\n    var _this = this;\n    if (!this.chart.destroyed) {\n      // 当整个词云图图表的宽高信息发生变化时，每个词语的坐标\n      // 需要重新执行 adaptor，不然会出现布局错乱，\n      // 如相邻词语重叠的情况。\n      this.execAdaptor();\n      // 延迟执行，有利于动画更流畅\n      // TODO: 在多次更改画布尺寸时，动画会越来越卡顿，原因未知\n      window.setTimeout(function () {\n        // 执行父类的方法\n        _super.prototype.triggerResize.call(_this);\n      });\n    }\n  };\n  return WordCloud;\n}(Plot);\nexport { WordCloud };","map":{"version":3,"mappings":";AACA,SAASA,IAAI,QAAQ,iBAAiB;AACtC,SAASC,OAAO,QAAQ,WAAW;AACnC,SAASC,eAAe,QAAQ,YAAY;AAC5C;AACA,OAAO,qBAAqB;AAE5B,SAASC,gBAAgB,EAAEC,SAAS,QAAQ,SAAS;AAIrD;EAA+BC;EAA/B;IAAA;IASE;IACOC,UAAI,GAAW,YAAY;;EA4EpC;EArFE;;;;EAIOC,2BAAiB,GAAxB;IACE,OAAOL,eAAe;EACxB,CAAC;EAKD;;;;EAIOK,8BAAU,GAAjB,UAAkBC,IAAI;IACpB,IAAI,CAACC,YAAY,CAAC;MAAED,IAAI;IAAA,CAAE,CAAC;IAC3B,IAAI,IAAI,CAACE,OAAO,CAACC,SAAS,EAAE;MAC1B,IAAI,CAACC,MAAM,EAAE;KACd,MAAM;MACL,IAAI,CAACC,KAAK,CAACC,UAAU,CAACV,SAAS,CAAC;QAAES,KAAK,EAAE,IAAI,CAACA,KAAK;QAAEH,OAAO,EAAE,IAAI,CAACA;MAAO,CAAE,CAAC,CAAC;;EAElF,CAAC;EAED;;;EAGUH,qCAAiB,GAA3B;IACE,OAAOA,SAAS,CAACQ,iBAAiB,EAAE;EACtC,CAAC;EAED;;;EAGOR,0BAAM,GAAb;IAAA;IACE,OAAO,IAAIS,OAAO,CAAO,UAACC,GAAG;MACnB,aAAS,GAAKX,KAAI,CAACI,OAAO,UAAjB;MAEjB,IAAI,CAACC,SAAS,EAAE;QACd;QACAO,iBAAMN,MAAM,YAAE;QACdK,GAAG,EAAE;QACL;;MAGF,IAAME,OAAO,GAAG,SAAVA,OAAO,CAAIC,GAAqB;QACpCd,KAAI,CAACI,OAAO,yBACPJ,KAAI,CAACI,OAAO;UACfC,SAAS,EAAES,GAAG,IAAI;QAAI,EACvB;QAED;QACAF,iBAAMN,MAAM,YAAE;QACdK,GAAG,EAAE;MACP,CAAC;MAEDd,gBAAgB,CAACQ,SAAS,CAAC,CAACU,IAAI,CAACF,OAAO,CAAC,CAACG,KAAK,CAACH,OAAO,CAAC;IAC1D,CAAC,CAAC;EACJ,CAAC;EAED;;;EAGUZ,oCAAgB,GAA1B;IACE,OAAON,OAAO;EAChB,CAAC;EAED;;;EAGUM,iCAAa,GAAvB;IAAA;IACE,IAAI,CAAC,IAAI,CAACM,KAAK,CAACU,SAAS,EAAE;MACzB;MACA;MACA;MACA,IAAI,CAACC,WAAW,EAAE;MAElB;MACA;MACAC,MAAM,CAACC,UAAU,CAAC;QAChB;QACAR,iBAAMS,aAAa,YAAE;MACvB,CAAC,CAAC;;EAEN,CAAC;EACH,gBAAC;AAAD,CAAC,CAtF8B3B,IAAI","names":["Plot","adaptor","DEFAULT_OPTIONS","processImageMask","transform","__extends","_this","WordCloud","data","updateOption","options","imageMask","render","chart","changeData","getDefaultOptions","Promise","res","_super","handler","img","then","catch","destroyed","execAdaptor","window","setTimeout","triggerResize"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/g2plot/src/plots/word-cloud/index.ts"],"sourcesContent":["import { Adaptor } from '../../core/adaptor';\nimport { Plot } from '../../core/plot';\nimport { adaptor } from './adaptor';\nimport { DEFAULT_OPTIONS } from './constant';\n// 注册的shape\nimport './shapes/word-cloud';\nimport { WordCloudOptions } from './types';\nimport { processImageMask, transform } from './utils';\n\nexport type { WordCloudOptions };\n\nexport class WordCloud extends Plot<WordCloudOptions> {\n  /**\n   * 获取 词云图 默认配置项\n   * 供外部使用\n   */\n  static getDefaultOptions(): Partial<WordCloudOptions> {\n    return DEFAULT_OPTIONS;\n  }\n\n  /** 词云图 */\n  public type: string = 'word-cloud';\n\n  /**\n   * @override\n   * @param data\n   */\n  public changeData(data) {\n    this.updateOption({ data });\n    if (this.options.imageMask) {\n      this.render();\n    } else {\n      this.chart.changeData(transform({ chart: this.chart, options: this.options }));\n    }\n  }\n\n  /**\n   * 获取默认的 options 配置项\n   */\n  protected getDefaultOptions(): Partial<WordCloudOptions> {\n    return WordCloud.getDefaultOptions();\n  }\n\n  /**\n   * 覆写父类方法，词云图需要加载图片资源，所以需要异步渲染\n   */\n  public render() {\n    return new Promise<void>((res) => {\n      const { imageMask } = this.options;\n\n      if (!imageMask) {\n        // 调用父类渲染函数\n        super.render();\n        res();\n        return;\n      }\n\n      const handler = (img: HTMLImageElement) => {\n        this.options = {\n          ...this.options,\n          imageMask: img || null,\n        };\n\n        // 调用父类渲染函数\n        super.render();\n        res();\n      };\n\n      processImageMask(imageMask).then(handler).catch(handler);\n    });\n  }\n\n  /**\n   * 获取 词云图 的适配器\n   */\n  protected getSchemaAdaptor(): Adaptor<WordCloudOptions> {\n    return adaptor;\n  }\n\n  /**\n   * 覆写父类的方法，因为词云图使用 单独的函数 进行布局，原理上有些不一样\n   */\n  protected triggerResize() {\n    if (!this.chart.destroyed) {\n      // 当整个词云图图表的宽高信息发生变化时，每个词语的坐标\n      // 需要重新执行 adaptor，不然会出现布局错乱，\n      // 如相邻词语重叠的情况。\n      this.execAdaptor();\n\n      // 延迟执行，有利于动画更流畅\n      // TODO: 在多次更改画布尺寸时，动画会越来越卡顿，原因未知\n      window.setTimeout(() => {\n        // 执行父类的方法\n        super.triggerResize();\n      });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}