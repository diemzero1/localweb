{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { each, groupBy, uniq, map, size } from '@antv/util';\nimport { checkShapeOverlap } from '../../util';\nfunction filterLabel(labels) {\n  var MAX_CNT = 500; // 最多显示 500 个数据标签\n  var filteredLabels = [];\n  var pages = Math.max(Math.floor(labels.length / MAX_CNT), 1);\n  each(labels, function (label, idx) {\n    if (idx % pages === 0) {\n      filteredLabels.push(label);\n    } else {\n      label.set('visible', false);\n    }\n  });\n  return filteredLabels;\n}\n/**\n * 为 interval geometry 定制的数据标签重叠自动隐藏布局方法\n * @param items\n * @param labels\n * @param shapes\n */\nexport function intervalHideOverlap(items, labels, shapes) {\n  var _a;\n  if (shapes.length === 0) {\n    return;\n  }\n  var element = (_a = shapes[0]) === null || _a === void 0 ? void 0 : _a.get('element');\n  var geometry = element === null || element === void 0 ? void 0 : element.geometry;\n  if (!geometry || geometry.type !== 'interval') {\n    return;\n  }\n  var filteredLabels = filterLabel(labels);\n  var _b = __read(geometry.getXYFields(), 1),\n    xField = _b[0];\n  var dones = [];\n  var todo = [];\n  var groupedLabels = groupBy(filteredLabels, function (label) {\n    return label.get('data')[xField];\n  });\n  var xValues = uniq(map(filteredLabels, function (label) {\n    return label.get('data')[xField];\n  }));\n  var xValue;\n  filteredLabels.forEach(function (label) {\n    label.set('visible', true);\n  });\n  var addCurrentGroup = function addCurrentGroup(curItems) {\n    if (curItems) {\n      if (curItems.length) {\n        // 最后一个\n        todo.push(curItems.pop());\n      }\n      todo.push.apply(todo, __spreadArray([], __read(curItems), false));\n    }\n  };\n  if (size(xValues) > 0) {\n    // 第一组\n    xValue = xValues.shift();\n    addCurrentGroup(groupedLabels[xValue]);\n  }\n  if (size(xValues) > 0) {\n    // 最后一组\n    xValue = xValues.pop();\n    addCurrentGroup(groupedLabels[xValue]);\n  }\n  each(xValues.reverse(), function (val) {\n    // 其他组\n    addCurrentGroup(groupedLabels[val]);\n  });\n  while (todo.length > 0) {\n    var cur = todo.shift();\n    if (cur.get('visible')) {\n      if (checkShapeOverlap(cur, dones)) {\n        cur.set('visible', false);\n      } else {\n        dones.push(cur);\n      }\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["each","groupBy","uniq","map","size","checkShapeOverlap","filterLabel","labels","MAX_CNT","filteredLabels","pages","Math","max","floor","length","label","idx","push","set","intervalHideOverlap","items","shapes","element","get","geometry","type","getXYFields","xField","dones","todo","groupedLabels","xValues","xValue","forEach","addCurrentGroup","curItems","pop","shift","reverse","val","cur"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/g2/src/geometry/label/layout/interval/hide-overlap.ts"],"sourcesContent":["import { IGroup, IShape } from '../../../../dependents';\nimport { each, groupBy, uniq, map, size, filter } from '@antv/util';\nimport Geometry from '../../../base';\nimport Element from '../../../element';\nimport { LabelItem } from '../../interface';\nimport { checkShapeOverlap } from '../../util';\n\nfunction filterLabel(labels: IShape[] | IGroup[]) {\n  const MAX_CNT = 500; // 最多显示 500 个数据标签\n  const filteredLabels = [];\n  const pages = Math.max(Math.floor(labels.length / MAX_CNT), 1);\n  each(labels, (label, idx) => {\n    if (idx % pages === 0) {\n      filteredLabels.push(label);\n    } else {\n      label.set('visible', false);\n    }\n  });\n\n  return filteredLabels;\n}\n\n/**\n * 为 interval geometry 定制的数据标签重叠自动隐藏布局方法\n * @param items\n * @param labels\n * @param shapes\n */\nexport function intervalHideOverlap(items: LabelItem[], labels: IGroup[], shapes: IShape[] | IGroup[]) {\n  if (shapes.length === 0) {\n    return;\n  }\n  const element: Element = shapes[0]?.get('element');\n  const geometry: Geometry = element?.geometry;\n  if (!geometry || geometry.type !== 'interval') {\n    return;\n  }\n\n  const filteredLabels = filterLabel(labels);\n  const [xField] = geometry.getXYFields();\n  const dones: IShape[] = [];\n  const todo: IShape[] = [];\n  const groupedLabels = groupBy(filteredLabels, (label) => label.get('data')[xField]);\n  const xValues = uniq(map(filteredLabels, (label: IShape) => label.get('data')[xField]));\n  let xValue;\n\n  filteredLabels.forEach((label) => {\n    label.set('visible', true);\n  });\n\n  const addCurrentGroup = (curItems: IShape[]) => {\n    if (curItems) {\n      if (curItems.length) {\n        // 最后一个\n        todo.push(curItems.pop());\n      }\n      todo.push(...curItems);\n    }\n  };\n\n  if (size(xValues) > 0) {\n    // 第一组\n    xValue = xValues.shift();\n    addCurrentGroup(groupedLabels[xValue]);\n  }\n  if (size(xValues) > 0) {\n    // 最后一组\n    xValue = xValues.pop();\n    addCurrentGroup(groupedLabels[xValue]);\n  }\n  each(xValues.reverse(), (val) => {\n    // 其他组\n    addCurrentGroup(groupedLabels[val]);\n  });\n\n  while (todo.length > 0) {\n    const cur = todo.shift();\n    if (cur.get('visible')) {\n      if (checkShapeOverlap(cur, dones)) {\n        cur.set('visible', false);\n      } else {\n        dones.push(cur);\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}