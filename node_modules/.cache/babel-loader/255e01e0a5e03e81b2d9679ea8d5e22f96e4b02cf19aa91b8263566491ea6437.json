{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { Base } from '@antv/g-base';\nimport { deepMix, each, hasKey, isObject } from '@antv/util';\nvar LOCATION_FIELD_MAP = {\n  none: [],\n  point: ['x', 'y'],\n  region: ['start', 'end'],\n  points: ['points'],\n  circle: ['center', 'radius', 'startAngle', 'endAngle']\n};\nvar Component = /** @class */function (_super) {\n  __extends(Component, _super);\n  function Component(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    _this.initCfg();\n    return _this;\n  }\n  /**\n   * @protected\n   * 默认的配置项\n   * @returns {object} 默认的配置项\n   */\n  Component.prototype.getDefaultCfg = function () {\n    return {\n      id: '',\n      name: '',\n      type: '',\n      locationType: 'none',\n      offsetX: 0,\n      offsetY: 0,\n      animate: false,\n      capture: true,\n      updateAutoRender: false,\n      animateOption: {\n        appear: null,\n        update: {\n          duration: 400,\n          easing: 'easeQuadInOut'\n        },\n        enter: {\n          duration: 400,\n          easing: 'easeQuadInOut'\n        },\n        leave: {\n          duration: 350,\n          easing: 'easeQuadIn'\n        }\n      },\n      events: null,\n      defaultCfg: {},\n      visible: true\n    };\n  };\n  /**\n   * 清理组件的内容，一般配合 render 使用\n   * @example\n   * axis.clear();\n   * axis.render();\n   */\n  Component.prototype.clear = function () {};\n  /**\n   * 更新组件\n   * @param {object} cfg 更新属性\n   */\n  Component.prototype.update = function (cfg) {\n    var _this = this;\n    var defaultCfg = this.get('defaultCfg') || {};\n    each(cfg, function (value, name) {\n      var originCfg = _this.get(name);\n      var newCfg = value;\n      if (originCfg !== value) {\n        // 判断两者是否相等，主要是进行 null 的判定\n        if (isObject(value) && defaultCfg[name]) {\n          // 新设置的属性与默认值进行合并\n          newCfg = deepMix({}, defaultCfg[name], value);\n        }\n        _this.set(name, newCfg);\n      }\n    });\n    this.updateInner(cfg);\n    this.afterUpdate(cfg);\n  };\n  // 更新内部\n  Component.prototype.updateInner = function (cfg) {};\n  Component.prototype.afterUpdate = function (cfg) {\n    // 更新时考虑显示、隐藏\n    if (hasKey(cfg, 'visible')) {\n      if (cfg.visible) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    }\n    // 更新时考虑capture\n    if (hasKey(cfg, 'capture')) {\n      this.setCapture(cfg.capture);\n    }\n  };\n  Component.prototype.getLayoutBBox = function () {\n    return this.getBBox(); // 默认返回 getBBox，不同的组件内部单独实现\n  };\n\n  Component.prototype.getLocationType = function () {\n    return this.get('locationType');\n  };\n  Component.prototype.getOffset = function () {\n    return {\n      offsetX: this.get('offsetX'),\n      offsetY: this.get('offsetY')\n    };\n  };\n  // 默认使用 update\n  Component.prototype.setOffset = function (offsetX, offsetY) {\n    this.update({\n      offsetX: offsetX,\n      offsetY: offsetY\n    });\n  };\n  Component.prototype.setLocation = function (cfg) {\n    var location = __assign({}, cfg);\n    this.update(location);\n  };\n  // 实现 ILocation 接口的 getLocation\n  Component.prototype.getLocation = function () {\n    var _this = this;\n    var location = {};\n    var locationType = this.get('locationType');\n    var fields = LOCATION_FIELD_MAP[locationType];\n    each(fields, function (field) {\n      location[field] = _this.get(field);\n    });\n    return location;\n  };\n  Component.prototype.isList = function () {\n    return false;\n  };\n  Component.prototype.isSlider = function () {\n    return false;\n  };\n  /**\n   * @protected\n   * 初始化，用于具体的组件继承\n   */\n  Component.prototype.init = function () {};\n  // 将组件默认的配置项设置合并到传入的配置项\n  Component.prototype.initCfg = function () {\n    var _this = this;\n    var defaultCfg = this.get('defaultCfg');\n    each(defaultCfg, function (value, name) {\n      var cfg = _this.get(name);\n      if (isObject(cfg)) {\n        var newCfg = deepMix({}, value, cfg);\n        _this.set(name, newCfg);\n      }\n    });\n  };\n  return Component;\n}(Base);\nexport default Component;","map":{"version":3,"mappings":"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","names":["Base","deepMix","each","hasKey","isObject","LOCATION_FIELD_MAP","none","point","region","points","circle","__extends","cfg","_super","_this","initCfg","Component","id","name","type","locationType","offsetX","offsetY","animate","capture","updateAutoRender","animateOption","appear","update","duration","easing","enter","leave","events","defaultCfg","visible","get","value","originCfg","newCfg","set","updateInner","afterUpdate","show","hide","setCapture","getBBox","location","__assign","fields","field"],"sources":["/home/iam/Documents/network/node_modules/@antv/component/src/abstract/component.ts"],"sourcesContent":["import { Base } from '@antv/g-base';\nimport { deepMix, each, hasKey, isObject } from '@antv/util';\nimport { ILocation } from '../interfaces';\nimport { BBox, ComponentCfg, LocationCfg, OffsetPoint } from '../types';\nconst LOCATION_FIELD_MAP = {\n  none: [],\n  point: ['x', 'y'],\n  region: ['start', 'end'],\n  points: ['points'],\n  circle: ['center', 'radius', 'startAngle', 'endAngle'],\n};\n\nabstract class Component<T extends ComponentCfg = ComponentCfg> extends Base implements ILocation {\n  constructor(cfg: T) {\n    super(cfg);\n    this.initCfg();\n  }\n  /**\n   * @protected\n   * 默认的配置项\n   * @returns {object} 默认的配置项\n   */\n  public getDefaultCfg() {\n    return {\n      id: '',\n      name: '',\n      type: '',\n      locationType: 'none',\n      offsetX: 0,\n      offsetY: 0,\n      animate: false,\n      capture: true,\n      updateAutoRender: false,\n      animateOption: {\n        appear: null, // 初始入场动画配置\n        update: {\n          duration: 400,\n          easing: 'easeQuadInOut',\n        }, // 更新时发生变更的动画配置\n        enter: {\n          duration: 400,\n          easing: 'easeQuadInOut',\n        }, // 更新时新增元素的入场动画配置\n        leave: {\n          duration: 350,\n          easing: 'easeQuadIn',\n        }, // 更新时销毁动画配置\n      },\n      events: null,\n      defaultCfg: {},\n      visible: true,\n    };\n  }\n\n  /**\n   * 清理组件的内容，一般配合 render 使用\n   * @example\n   * axis.clear();\n   * axis.render();\n   */\n  public clear() {}\n\n  /**\n   * 更新组件\n   * @param {object} cfg 更新属性\n   */\n  public update(cfg: Partial<T>) {\n    const defaultCfg = this.get('defaultCfg') || {};\n    each(cfg, (value, name) => {\n      const originCfg = this.get(name);\n      let newCfg = value;\n      if (originCfg !== value) {\n        // 判断两者是否相等，主要是进行 null 的判定\n        if (isObject(value) && defaultCfg[name]) {\n          // 新设置的属性与默认值进行合并\n          newCfg = deepMix({}, defaultCfg[name], value);\n        }\n        this.set(name, newCfg);\n      }\n    });\n    this.updateInner(cfg);\n    this.afterUpdate(cfg);\n  }\n  // 更新内部\n  protected updateInner(cfg: Partial<T>) {\n\n  }\n\n  protected afterUpdate(cfg: Partial<T>) {\n    // 更新时考虑显示、隐藏\n    if (hasKey(cfg, 'visible')) {\n      if (cfg.visible) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    }\n    // 更新时考虑capture\n    if (hasKey(cfg, 'capture')) {\n      this.setCapture(cfg.capture);\n    }\n  }\n\n  public abstract getBBox(): BBox;\n\n  public getLayoutBBox(): BBox {\n    return this.getBBox(); // 默认返回 getBBox，不同的组件内部单独实现\n  }\n\n  public getLocationType() {\n    return this.get('locationType');\n  }\n\n  public getOffset(): OffsetPoint {\n    return {\n      offsetX: this.get('offsetX'),\n      offsetY: this.get('offsetY'),\n    };\n  }\n\n  // 默认使用 update\n  public setOffset(offsetX: number, offsetY: number) {\n    this.update({\n      offsetX,\n      offsetY,\n    } as T);\n  }\n\n  public setLocation(cfg: LocationCfg) {\n    const location = { ...cfg } as Partial<T>;\n    this.update(location);\n  }\n\n  // 实现 ILocation 接口的 getLocation\n  public getLocation(): LocationCfg {\n    const location = {} as LocationCfg;\n    const locationType = this.get('locationType');\n    const fields = LOCATION_FIELD_MAP[locationType];\n    each(fields, (field) => {\n      location[field] = this.get(field);\n    });\n    return location;\n  }\n\n  public isList(): boolean {\n    return false;\n  }\n\n  public isSlider(): boolean {\n    return false;\n  }\n\n  /**\n   * @protected\n   * 初始化，用于具体的组件继承\n   */\n  public init() {}\n\n  /**\n   * 绘制组件\n   */\n  public abstract render();\n\n  /**\n   * 显示\n   */\n  public abstract show();\n\n  public abstract setCapture(capture: boolean);\n\n  /**\n   * 隐藏\n   */\n  public abstract hide();\n\n  // 将组件默认的配置项设置合并到传入的配置项\n  private initCfg() {\n    const defaultCfg = this.get('defaultCfg');\n    each(defaultCfg, (value, name) => {\n      const cfg = this.get(name);\n      if (isObject(cfg)) {\n        const newCfg = deepMix({}, value, cfg);\n        this.set(name, newCfg);\n      }\n    });\n  }\n}\n\nexport default Component;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}