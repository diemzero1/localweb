{"ast":null,"code":"var GraphEvent = /** @class */function () {\n  function GraphEvent(type, event) {\n    /**\n     * 是否允许冒泡\n     * @type {boolean}\n     */\n    this.bubbles = true;\n    /**\n     * 触发对象\n     * @type {object}\n     */\n    this.target = null;\n    /**\n     * 监听对象\n     * @type {object}\n     */\n    this.currentTarget = null;\n    /**\n     * 委托对象\n     * @type {object}\n     */\n    this.delegateTarget = null;\n    /**\n     * 委托事件监听对象的代理对象，即 ev.delegateObject = ev.currentTarget.get('delegateObject')\n     * @type {object}\n     */\n    this.delegateObject = null;\n    /**\n     * 是否阻止了原生事件\n     * @type {boolean}\n     */\n    this.defaultPrevented = false;\n    /**\n     * 是否阻止传播（向上冒泡）\n     * @type {boolean}\n     */\n    this.propagationStopped = false;\n    /**\n     * 触发事件的图形\n     * @type {IShape}\n     */\n    this.shape = null;\n    /**\n     * 开始触发事件的图形\n     * @type {IShape}\n     */\n    this.fromShape = null;\n    /**\n     * 事件结束时的触发图形\n     * @type {IShape}\n     */\n    this.toShape = null;\n    // 触发事件的路径\n    this.propagationPath = [];\n    this.type = type;\n    this.name = type;\n    this.originalEvent = event;\n    this.timeStamp = event.timeStamp;\n  }\n  /**\n   * 阻止浏览器默认的行为\n   */\n  GraphEvent.prototype.preventDefault = function () {\n    this.defaultPrevented = true;\n    if (this.originalEvent.preventDefault) {\n      this.originalEvent.preventDefault();\n    }\n  };\n  /**\n   * 阻止冒泡\n   */\n  GraphEvent.prototype.stopPropagation = function () {\n    this.propagationStopped = true;\n  };\n  GraphEvent.prototype.toString = function () {\n    var type = this.type;\n    return \"[Event (type=\" + type + \")]\";\n  };\n  GraphEvent.prototype.save = function () {};\n  GraphEvent.prototype.restore = function () {};\n  return GraphEvent;\n}();\nexport default GraphEvent;","map":{"version":3,"mappings":"AAGA;EAiGE,oBAAYA,IAAI,EAAEC,KAAK;IAlEvB;;;;IAIA,YAAO,GAAY,IAAI;IACvB;;;;IAIA,WAAM,GAAgB,IAAI;IAC1B;;;;IAIA,kBAAa,GAAgB,IAAI;IACjC;;;;IAIA,mBAAc,GAAgB,IAAI;IAClC;;;;IAIA,mBAAc,GAAW,IAAI;IAC7B;;;;IAIA,qBAAgB,GAAY,KAAK;IACjC;;;;IAIA,uBAAkB,GAAY,KAAK;IACnC;;;;IAIA,UAAK,GAAW,IAAI;IACpB;;;;IAIA,cAAS,GAAW,IAAI;IACxB;;;;IAIA,YAAO,GAAW,IAAI;IActB;IACA,oBAAe,GAAU,EAAE;IAGzB,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACE,IAAI,GAAGF,IAAI;IAChB,IAAI,CAACG,aAAa,GAAGF,KAAK;IAC1B,IAAI,CAACG,SAAS,GAAGH,KAAK,CAACG,SAAS;EAClC;EAEA;;;EAGAC,mCAAc,GAAd;IACE,IAAI,CAACC,gBAAgB,GAAG,IAAI;IAC5B,IAAI,IAAI,CAACH,aAAa,CAACI,cAAc,EAAE;MACrC,IAAI,CAACJ,aAAa,CAACI,cAAc,EAAE;;EAEvC,CAAC;EAED;;;EAGAF,oCAAe,GAAf;IACE,IAAI,CAACG,kBAAkB,GAAG,IAAI;EAChC,CAAC;EAEDH,6BAAQ,GAAR;IACE,IAAML,IAAI,GAAG,IAAI,CAACA,IAAI;IACtB,OAAO,kBAAgBA,IAAI,OAAI;EACjC,CAAC;EAEDK,yBAAI,GAAJ,aAAQ,CAAC;EAETA,4BAAO,GAAP,aAAW,CAAC;EACd,iBAAC;AAAD,CAAC,EAjID;AAmIA,eAAeA,UAAU","names":["type","event","name","originalEvent","timeStamp","GraphEvent","defaultPrevented","preventDefault","propagationStopped"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/g-base/src/event/graph-event.ts"],"sourcesContent":["import { IShape } from '../interfaces';\nimport { LooseObject } from '../types';\n\nclass GraphEvent {\n  /**\n   * 事件类型\n   * @type {string}\n   */\n  type: string;\n  /**\n   * 事件名称\n   * @type {string}\n   */\n  name: string;\n  /**\n   * 画布上的位置 x\n   * @type {number}\n   */\n  x: number;\n  /**\n   * 画布上的位置 y\n   * @type {number}\n   */\n  y: number;\n  /**\n   * 窗口上的位置 x\n   * @type {number}\n   */\n  clientX: number;\n  /**\n   * 窗口上的位置 y\n   * @type {number}\n   */\n  clientY: number;\n  /**\n   * 是否允许冒泡\n   * @type {boolean}\n   */\n  bubbles: boolean = true;\n  /**\n   * 触发对象\n   * @type {object}\n   */\n  target: LooseObject = null;\n  /**\n   * 监听对象\n   * @type {object}\n   */\n  currentTarget: LooseObject = null;\n  /**\n   * 委托对象\n   * @type {object}\n   */\n  delegateTarget: LooseObject = null;\n  /**\n   * 委托事件监听对象的代理对象，即 ev.delegateObject = ev.currentTarget.get('delegateObject')\n   * @type {object}\n   */\n  delegateObject: object = null;\n  /**\n   * 是否阻止了原生事件\n   * @type {boolean}\n   */\n  defaultPrevented: boolean = false;\n  /**\n   * 是否阻止传播（向上冒泡）\n   * @type {boolean}\n   */\n  propagationStopped: boolean = false;\n  /**\n   * 触发事件的图形\n   * @type {IShape}\n   */\n  shape: IShape = null;\n  /**\n   * 开始触发事件的图形\n   * @type {IShape}\n   */\n  fromShape: IShape = null;\n  /**\n   * 事件结束时的触发图形\n   * @type {IShape}\n   */\n  toShape: IShape = null;\n\n  /**\n   * 触发时的时间\n   * @type {number}\n   */\n  timeStamp: number;\n\n  /**\n   * 触发时的对象\n   * @type {object}\n   */\n  originalEvent: Event;\n\n  // 触发事件的路径\n  propagationPath: any[] = [];\n\n  constructor(type, event) {\n    this.type = type;\n    this.name = type;\n    this.originalEvent = event;\n    this.timeStamp = event.timeStamp;\n  }\n\n  /**\n   * 阻止浏览器默认的行为\n   */\n  preventDefault() {\n    this.defaultPrevented = true;\n    if (this.originalEvent.preventDefault) {\n      this.originalEvent.preventDefault();\n    }\n  }\n\n  /**\n   * 阻止冒泡\n   */\n  stopPropagation() {\n    this.propagationStopped = true;\n  }\n\n  toString() {\n    const type = this.type;\n    return `[Event (type=${type})]`;\n  }\n\n  save() {}\n\n  restore() {}\n}\n\nexport default GraphEvent;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}