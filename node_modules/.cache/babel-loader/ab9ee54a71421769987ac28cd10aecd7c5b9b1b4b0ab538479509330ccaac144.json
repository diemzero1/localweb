{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport Action from '../base';\nimport { getCurrentElement, getElementValue, getElementsByField } from '../util';\nimport { deepMix, each, isFunction } from '@antv/util';\n/**\n * Link Elements by color\n *\n * public 方法是对外可用的反馈交互。使用方式，如：element-link-by-color:link, element-link-by-color:unlink, element-link-by-color:clear\n */\nvar LinkByColor = /** @class */function (_super) {\n  __extends(LinkByColor, _super);\n  function LinkByColor() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.cache = {};\n    return _this;\n  }\n  // 获取颜色对应的 scale\n  LinkByColor.prototype.getColorScale = function (view, element) {\n    var colorAttr = element.geometry.getAttribute('color');\n    if (!colorAttr) {\n      return null;\n    }\n    var scale = view.getScaleByField(colorAttr.getFields()[0]);\n    return scale;\n  };\n  // 获取连接的 path\n  LinkByColor.prototype.getLinkPath = function (element, nextElement) {\n    var view = this.context.view;\n    var isTransposed = view.getCoordinate().isTransposed;\n    var bbox = element.shape.getCanvasBBox();\n    var nextBBox = nextElement.shape.getCanvasBBox();\n    var path = isTransposed ? [['M', bbox.minX, bbox.minY], ['L', nextBBox.minX, nextBBox.maxY], ['L', nextBBox.maxX, nextBBox.maxY], ['L', bbox.maxX, bbox.minY], ['Z']] : [['M', bbox.maxX, bbox.minY], ['L', nextBBox.minX, nextBBox.minY], ['L', nextBBox.minX, nextBBox.maxY], ['L', bbox.maxX, bbox.maxY], ['Z']];\n    return path;\n  };\n  // 添加连接的图形\n  LinkByColor.prototype.addLinkShape = function (group, element, nextElement, activeStyle) {\n    var style = {\n      opacity: 0.4,\n      fill: element.shape.attr('fill')\n    };\n    group.addShape({\n      type: 'path',\n      attrs: __assign(__assign({}, deepMix({}, style, isFunction(activeStyle) ? activeStyle(style, element) : activeStyle)), {\n        path: this.getLinkPath(element, nextElement)\n      })\n    });\n  };\n  // 使用图形连接\n  LinkByColor.prototype.linkByElement = function (element, activeStyle) {\n    var _this = this;\n    var view = this.context.view;\n    var scale = this.getColorScale(view, element);\n    if (!scale) {\n      return;\n    }\n    var value = getElementValue(element, scale.field);\n    if (!this.cache[value]) {\n      var elements_1 = getElementsByField(view, scale.field, value);\n      var linkGroup = this.linkGroup;\n      var group_1 = linkGroup.addGroup();\n      this.cache[value] = group_1; // 缓存\n      var count_1 = elements_1.length;\n      each(elements_1, function (el, index) {\n        if (index < count_1 - 1) {\n          var nextEl = elements_1[index + 1];\n          _this.addLinkShape(group_1, el, nextEl, activeStyle);\n        }\n      });\n    }\n  };\n  // 移除连接\n  LinkByColor.prototype.removeLink = function (element) {\n    var scale = this.getColorScale(this.context.view, element);\n    if (!scale) {\n      return;\n    }\n    var value = getElementValue(element, scale.field);\n    if (this.cache[value]) {\n      this.cache[value].remove();\n      this.cache[value] = null;\n    }\n  };\n  /**\n   * 连接 elements\n   *\n   * @usage\n   * registerInteraction('xxx', {\n   *   start: [\n   *    {\n   *      trigger: 'interval:mouseenter',\n   *      action: 'element-link-by-color:link',\n   *      arg: {\n   *        // style: { fill: 'red' }\n   *        style: (style, element) => ({ fill: 'red' })\n   *     },\n   *   },\n   *  ],\n   * });\n   */\n  LinkByColor.prototype.link = function (args) {\n    var context = this.context;\n    if (!this.linkGroup) {\n      // 不允许被拾取\n      this.linkGroup = context.view.foregroundGroup.addGroup({\n        id: 'link-by-color-group',\n        capture: false\n      });\n    }\n    var element = getCurrentElement(context);\n    if (element) {\n      this.linkByElement(element, args === null || args === void 0 ? void 0 : args.style);\n    }\n  };\n  /**\n   * 取消连接 elements\n   */\n  LinkByColor.prototype.unlink = function () {\n    var element = getCurrentElement(this.context);\n    if (element) {\n      this.removeLink(element);\n    }\n  };\n  /**\n   * 清除所有连接\n   */\n  LinkByColor.prototype.clear = function () {\n    if (this.linkGroup) {\n      this.linkGroup.clear();\n    }\n    this.cache = {};\n  };\n  /**\n   * 销毁\n   */\n  LinkByColor.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n    if (this.linkGroup) {\n      this.linkGroup.remove();\n    }\n  };\n  return LinkByColor;\n}(Action);\nexport default LinkByColor;","map":{"version":3,"mappings":"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","names":["Action","getCurrentElement","getElementValue","getElementsByField","deepMix","each","isFunction","__extends","_this","LinkByColor","view","element","colorAttr","geometry","getAttribute","scale","getScaleByField","getFields","nextElement","context","getCoordinate","bbox","shape","getCanvasBBox","nextBBox","path","isTransposed","minX","minY","maxY","maxX","group","activeStyle","style","opacity","fill","attr","addShape","type","attrs","getLinkPath","getColorScale","value","field","cache","elements_1","linkGroup","group_1","addGroup","count_1","length","el","index","nextEl","addLinkShape","remove","args","foregroundGroup","id","capture","linkByElement","removeLink","clear","_super","destroy"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/g2/src/interaction/action/element/link-by-color.ts"],"sourcesContent":["import Action from '../base';\nimport { getCurrentElement, getElementValue, getElementsByField } from '../util';\nimport Element from '../../../geometry/element/';\nimport { deepMix, each, isFunction } from '@antv/util';\nimport { LooseObject } from '../../../interface';\nimport { IGroup, ShapeAttrs } from '../../../dependents';\n\ntype LinkActiveStyle = ShapeAttrs | ((style: ShapeAttrs, Element: Element) => ShapeAttrs);\n\n/**\n * Link Elements by color\n *\n * public 方法是对外可用的反馈交互。使用方式，如：element-link-by-color:link, element-link-by-color:unlink, element-link-by-color:clear\n */\nclass LinkByColor extends Action {\n  private linkGroup: IGroup;\n  private cache: LooseObject = {};\n  // 获取颜色对应的 scale\n  private getColorScale(view, element) {\n    const colorAttr = element.geometry.getAttribute('color');\n    if (!colorAttr) {\n      return null;\n    }\n    const scale = view.getScaleByField(colorAttr.getFields()[0]);\n    return scale;\n  }\n  // 获取连接的 path\n  private getLinkPath(element: Element, nextElement: Element) {\n    const view = this.context.view;\n    const { isTransposed } = view.getCoordinate();\n    const bbox = element.shape.getCanvasBBox();\n    const nextBBox = nextElement.shape.getCanvasBBox();\n    const path = isTransposed\n      ? [\n          ['M', bbox.minX, bbox.minY],\n          ['L', nextBBox.minX, nextBBox.maxY],\n          ['L', nextBBox.maxX, nextBBox.maxY],\n          ['L', bbox.maxX, bbox.minY],\n          ['Z'],\n        ]\n      : [\n          ['M', bbox.maxX, bbox.minY],\n          ['L', nextBBox.minX, nextBBox.minY],\n          ['L', nextBBox.minX, nextBBox.maxY],\n          ['L', bbox.maxX, bbox.maxY],\n          ['Z'],\n        ];\n    return path;\n  }\n  // 添加连接的图形\n  private addLinkShape(group: IGroup, element: Element, nextElement: Element, activeStyle?: LinkActiveStyle) {\n    const style = {\n      opacity: 0.4,\n      fill: element.shape.attr('fill'),\n    };\n    group.addShape({\n      type: 'path',\n      attrs: {\n        ...deepMix({}, style, isFunction(activeStyle) ? activeStyle(style, element) : activeStyle),\n        path: this.getLinkPath(element, nextElement),\n      },\n    });\n  }\n  // 使用图形连接\n  private linkByElement(element: Element, activeStyle?: LinkActiveStyle) {\n    const view = this.context.view;\n    const scale = this.getColorScale(view, element);\n    if (!scale) {\n      return;\n    }\n    const value = getElementValue(element, scale.field);\n    if (!this.cache[value]) {\n      const elements = getElementsByField(view, scale.field, value);\n      const linkGroup = this.linkGroup;\n      const group = linkGroup.addGroup();\n      this.cache[value] = group; // 缓存\n      const count = elements.length;\n      each(elements, (el, index) => {\n        if (index < count - 1) {\n          const nextEl = elements[index + 1];\n          this.addLinkShape(group, el, nextEl, activeStyle);\n        }\n      });\n    }\n  }\n  // 移除连接\n  private removeLink(element) {\n    const scale = this.getColorScale(this.context.view, element);\n    if (!scale) {\n      return;\n    }\n    const value = getElementValue(element, scale.field);\n    if (this.cache[value]) {\n      this.cache[value].remove();\n      this.cache[value] = null;\n    }\n  }\n\n  /**\n   * 连接 elements\n   *\n   * @usage\n   * registerInteraction('xxx', {\n   *   start: [\n   *    {\n   *      trigger: 'interval:mouseenter',\n   *      action: 'element-link-by-color:link',\n   *      arg: {\n   *        // style: { fill: 'red' }\n   *        style: (style, element) => ({ fill: 'red' })\n   *     },\n   *   },\n   *  ],\n   * });\n   */\n  public link(args?: { style: LinkActiveStyle }) {\n    const context = this.context;\n    if (!this.linkGroup) {\n      // 不允许被拾取\n      this.linkGroup = context.view.foregroundGroup.addGroup({\n        id: 'link-by-color-group',\n        capture: false,\n      });\n    }\n    const element = getCurrentElement(context);\n    if (element) {\n      this.linkByElement(element, args?.style);\n    }\n  }\n\n  /**\n   * 取消连接 elements\n   */\n  public unlink() {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      this.removeLink(element);\n    }\n  }\n\n  /**\n   * 清除所有连接\n   */\n  public clear() {\n    if (this.linkGroup) {\n      this.linkGroup.clear();\n    }\n    this.cache = {};\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    super.destroy();\n    if (this.linkGroup) {\n      this.linkGroup.remove();\n    }\n  }\n}\nexport default LinkByColor;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}