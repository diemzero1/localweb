{"ast":null,"code":"import { __extends, __read } from \"tslib\";\nimport { each } from '@antv/util';\nimport Action from '../base';\nimport { getDelegationObject, getElements, getElementValue, getScaleByField, isList, isSlider, isMask, getMaskedElements } from '../util';\n/**\n * 元素过滤的 Action，控制元素的显示隐藏\n * @ignore\n */\nvar ElementFilter = /** @class */function (_super) {\n  __extends(ElementFilter, _super);\n  function ElementFilter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * 过滤\n   */\n  ElementFilter.prototype.filter = function () {\n    var delegateObject = getDelegationObject(this.context);\n    var view = this.context.view;\n    var elements = getElements(view);\n    if (isMask(this.context)) {\n      var maskElements_1 = getMaskedElements(this.context, 10);\n      if (maskElements_1) {\n        each(elements, function (el) {\n          if (maskElements_1.includes(el)) {\n            el.show();\n          } else {\n            el.hide();\n          }\n        });\n      }\n    } else if (delegateObject) {\n      var component = delegateObject.component;\n      var field_1 = component.get('field');\n      // 列表类的组件能够触发\n      if (isList(delegateObject)) {\n        if (field_1) {\n          var unCheckedItems = component.getItemsByState('unchecked');\n          var scale_1 = getScaleByField(view, field_1);\n          var names_1 = unCheckedItems.map(function (item) {\n            return item.name;\n          });\n          // 直接控制显示、隐藏\n          each(elements, function (el) {\n            var value = getElementValue(el, field_1);\n            var text = scale_1.getText(value);\n            if (names_1.indexOf(text) >= 0) {\n              el.hide();\n            } else {\n              el.show();\n            }\n          });\n        }\n      } else if (isSlider(delegateObject)) {\n        var range = component.getValue();\n        var _a = __read(range, 2),\n          min_1 = _a[0],\n          max_1 = _a[1];\n        each(elements, function (el) {\n          var value = getElementValue(el, field_1);\n          if (value >= min_1 && value <= max_1) {\n            el.show();\n          } else {\n            el.hide();\n          }\n        });\n      }\n    }\n  };\n  /**\n   * 清除过滤\n   */\n  ElementFilter.prototype.clear = function () {\n    var elements = getElements(this.context.view);\n    each(elements, function (el) {\n      el.show();\n    });\n  };\n  /**\n   * 恢复发生的过滤，保持同 data-filter 命名的一致\n   */\n  ElementFilter.prototype.reset = function () {\n    this.clear();\n  };\n  return ElementFilter;\n}(Action);\nexport default ElementFilter;","map":{"version":3,"mappings":"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","names":["each","Action","getDelegationObject","getElements","getElementValue","getScaleByField","isList","isSlider","isMask","getMaskedElements","__extends","ElementFilter","delegateObject","context","view","elements","maskElements_1","el","includes","show","hide","field_1","component","get","unCheckedItems","getItemsByState","scale_1","names_1","map","item","name","value","text","getText","indexOf","range","getValue","min_1","max_1","clear"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/g2/src/interaction/action/element/filter.ts"],"sourcesContent":["import { each } from '@antv/util';\nimport Action from '../base';\nimport {\n  getDelegationObject,\n  getElements,\n  getElementValue,\n  getScaleByField,\n  isList,\n  isSlider,\n  isMask,\n  getMaskedElements,\n} from '../util';\n/**\n * 元素过滤的 Action，控制元素的显示隐藏\n * @ignore\n */\nclass ElementFilter extends Action {\n  /**\n   * 过滤\n   */\n  public filter() {\n    const delegateObject = getDelegationObject(this.context);\n    const view = this.context.view;\n    const elements = getElements(view);\n    if (isMask(this.context)) {\n      const maskElements = getMaskedElements(this.context, 10);\n      if (maskElements) {\n        each(elements, (el) => {\n          if (maskElements.includes(el)) {\n            el.show();\n          } else {\n            el.hide();\n          }\n        });\n      }\n    } else if (delegateObject) {\n      const { component } = delegateObject;\n      const field = component.get('field');\n      // 列表类的组件能够触发\n      if (isList(delegateObject)) {\n        if (field) {\n          const unCheckedItems = component.getItemsByState('unchecked');\n          const scale = getScaleByField(view, field);\n          const names = unCheckedItems.map((item) => item.name);\n          // 直接控制显示、隐藏\n          each(elements, (el) => {\n            const value = getElementValue(el, field);\n            const text = scale.getText(value);\n            if (names.indexOf(text) >= 0) {\n              el.hide();\n            } else {\n              el.show();\n            }\n          });\n        }\n      } else if (isSlider(delegateObject)) {\n        const range = component.getValue();\n        const [min, max] = range;\n        each(elements, (el) => {\n          const value = getElementValue(el, field);\n          if (value >= min && value <= max) {\n            el.show();\n          } else {\n            el.hide();\n          }\n        });\n      }\n    }\n  }\n  /**\n   * 清除过滤\n   */\n  public clear() {\n    const elements = getElements(this.context.view);\n    each(elements, (el) => {\n      el.show();\n    });\n  }\n\n  /**\n   * 恢复发生的过滤，保持同 data-filter 命名的一致\n   */\n  public reset() {\n    this.clear();\n  }\n}\n\nexport default ElementFilter;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}