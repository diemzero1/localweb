{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { BRUSH_FILTER_EVENTS, VIEW_LIFE_CIRCLE } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { deepAssign } from '../../utils';\nimport { adaptor, meta, transformOptions } from './adaptor';\nimport { DEFAULT_OPTIONS } from './constant';\nimport './interactions';\nvar Scatter = /** @class */function (_super) {\n  __extends(Scatter, _super);\n  function Scatter(container, options) {\n    var _this = _super.call(this, container, options) || this;\n    /** 图表类型 */\n    _this.type = 'scatter';\n    // 监听 brush 事件，处理 meta\n    _this.on(VIEW_LIFE_CIRCLE.BEFORE_RENDER, function (evt) {\n      var _a, _b;\n      // 运行时，读取 option\n      var _c = _this,\n        options = _c.options,\n        chart = _c.chart;\n      if (((_a = evt.data) === null || _a === void 0 ? void 0 : _a.source) === BRUSH_FILTER_EVENTS.FILTER) {\n        var filteredData = _this.chart.filterData(_this.chart.getData());\n        meta({\n          chart: chart,\n          options: __assign(__assign({}, options), {\n            data: filteredData\n          })\n        });\n      }\n      if (((_b = evt.data) === null || _b === void 0 ? void 0 : _b.source) === BRUSH_FILTER_EVENTS.RESET) {\n        meta({\n          chart: chart,\n          options: options\n        });\n      }\n    });\n    return _this;\n  }\n  /**\n   * 获取 散点图 默认配置项\n   * 供外部使用\n   */\n  Scatter.getDefaultOptions = function () {\n    return DEFAULT_OPTIONS;\n  };\n  /**\n   * @override\n   * @param data\n   */\n  Scatter.prototype.changeData = function (data) {\n    this.updateOption(transformOptions(deepAssign({}, this.options, {\n      data: data\n    })));\n    var _a = this,\n      options = _a.options,\n      chart = _a.chart;\n    meta({\n      chart: chart,\n      options: options\n    });\n    this.chart.changeData(data);\n  };\n  /**\n   * 获取 散点图 的适配器\n   */\n  Scatter.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n  Scatter.prototype.getDefaultOptions = function () {\n    return Scatter.getDefaultOptions();\n  };\n  return Scatter;\n}(Plot);\nexport { Scatter };","map":{"version":3,"mappings":";AAAA,SAASA,mBAAmB,EAAEC,gBAAgB,QAAQ,UAAU;AAEhE,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,UAAU,QAAQ,aAAa;AACxC,SAASC,OAAO,EAAEC,IAAI,EAAEC,gBAAgB,QAAQ,WAAW;AAC3D,SAASC,eAAe,QAAQ,YAAY;AAC5C,OAAO,gBAAgB;AAKvB;EAA6BC;EAY3B,iBAAYC,SAA+B,EAAEC,OAAuB;IAApE,YACEC,kBAAMF,SAAS,EAAEC,OAAO,CAAC;IAJ3B;IACOE,UAAI,GAAW,SAAS;IAK7B;IACAA,KAAI,CAACC,EAAE,CAACZ,gBAAgB,CAACa,aAAa,EAAE,UAACC,GAAG;;MAC1C;MACM,SAAqBH,KAAI;QAAvBF,OAAO;QAAEM,KAAK,WAAS;MAC/B,IAAI,UAAG,CAACC,IAAI,0CAAEC,MAAM,MAAKlB,mBAAmB,CAACmB,MAAM,EAAE;QACnD,IAAMC,YAAY,GAAGR,KAAI,CAACI,KAAK,CAACK,UAAU,CAACT,KAAI,CAACI,KAAK,CAACM,OAAO,EAAE,CAAC;QAChEjB,IAAI,CAAC;UAAEW,KAAK;UAAEN,OAAO,wBAAOA,OAAO;YAAEO,IAAI,EAAEG;UAAY;QAAE,CAAE,CAAC;;MAG9D,IAAI,UAAG,CAACH,IAAI,0CAAEC,MAAM,MAAKlB,mBAAmB,CAACuB,KAAK,EAAE;QAClDlB,IAAI,CAAC;UAAEW,KAAK;UAAEN,OAAO;QAAA,CAAE,CAAC;;IAE5B,CAAC,CAAC;;EACJ;EA3BA;;;;EAIOc,yBAAiB,GAAxB;IACE,OAAOjB,eAAe;EACxB,CAAC;EAuBD;;;;EAIOiB,4BAAU,GAAjB,UAAkBP,IAA4B;IAC5C,IAAI,CAACQ,YAAY,CAACnB,gBAAgB,CAACH,UAAU,CAAC,EAAE,EAAE,IAAI,CAACO,OAAO,EAAE;MAAEO,IAAI;IAAA,CAAE,CAAC,CAAC,CAAC;IACrE,SAAqB,IAAI;MAAvBP,OAAO;MAAEM,KAAK,WAAS;IAC/BX,IAAI,CAAC;MAAEW,KAAK;MAAEN,OAAO;IAAA,CAAE,CAAC;IACxB,IAAI,CAACM,KAAK,CAACU,UAAU,CAACT,IAAI,CAAC;EAC7B,CAAC;EAED;;;EAGUO,kCAAgB,GAA1B;IACE,OAAOpB,OAAO;EAChB,CAAC;EAESoB,mCAAiB,GAA3B;IACE,OAAOA,OAAO,CAACG,iBAAiB,EAAE;EACpC,CAAC;EACH,cAAC;AAAD,CAAC,CAnD4BzB,IAAI","names":["BRUSH_FILTER_EVENTS","VIEW_LIFE_CIRCLE","Plot","deepAssign","adaptor","meta","transformOptions","DEFAULT_OPTIONS","__extends","container","options","_super","_this","on","BEFORE_RENDER","evt","chart","data","source","FILTER","filteredData","filterData","getData","RESET","Scatter","updateOption","changeData","getDefaultOptions"],"sources":["/home/iam/Documents/network/node_modules/@antv/g2plot/src/plots/scatter/index.ts"],"sourcesContent":["import { BRUSH_FILTER_EVENTS, VIEW_LIFE_CIRCLE } from '@antv/g2';\nimport { Adaptor } from '../../core/adaptor';\nimport { Plot } from '../../core/plot';\nimport { deepAssign } from '../../utils';\nimport { adaptor, meta, transformOptions } from './adaptor';\nimport { DEFAULT_OPTIONS } from './constant';\nimport './interactions';\nimport { ScatterOptions } from './types';\n\nexport type { ScatterOptions };\n\nexport class Scatter extends Plot<ScatterOptions> {\n  /**\n   * 获取 散点图 默认配置项\n   * 供外部使用\n   */\n  static getDefaultOptions(): Partial<ScatterOptions> {\n    return DEFAULT_OPTIONS;\n  }\n\n  /** 图表类型 */\n  public type: string = 'scatter';\n\n  constructor(container: string | HTMLElement, options: ScatterOptions) {\n    super(container, options);\n\n    // 监听 brush 事件，处理 meta\n    this.on(VIEW_LIFE_CIRCLE.BEFORE_RENDER, (evt) => {\n      // 运行时，读取 option\n      const { options, chart } = this;\n      if (evt.data?.source === BRUSH_FILTER_EVENTS.FILTER) {\n        const filteredData = this.chart.filterData(this.chart.getData());\n        meta({ chart, options: { ...options, data: filteredData } });\n      }\n\n      if (evt.data?.source === BRUSH_FILTER_EVENTS.RESET) {\n        meta({ chart, options });\n      }\n    });\n  }\n\n  /**\n   * @override\n   * @param data\n   */\n  public changeData(data: ScatterOptions['data']) {\n    this.updateOption(transformOptions(deepAssign({}, this.options, { data })));\n    const { options, chart } = this;\n    meta({ chart, options });\n    this.chart.changeData(data);\n  }\n\n  /**\n   * 获取 散点图 的适配器\n   */\n  protected getSchemaAdaptor(): Adaptor<ScatterOptions> {\n    return adaptor;\n  }\n\n  protected getDefaultOptions() {\n    return Scatter.getDefaultOptions();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}