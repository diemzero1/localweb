{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * 按照数据中的结果设置fixorder\n */\nvar initDataOrder = function initDataOrder(g, nodeOrder) {\n  var simpleNodes = g.nodes().filter(function (v) {\n    var _a;\n    return !((_a = g.children(v)) === null || _a === void 0 ? void 0 : _a.length);\n  });\n  var ranks = simpleNodes.map(function (v) {\n    return g.node(v).rank;\n  });\n  var maxRank = Math.max.apply(Math, ranks);\n  var layers = Array(maxRank + 1).fill([]);\n  nodeOrder === null || nodeOrder === void 0 ? void 0 : nodeOrder.forEach(function (n) {\n    var node = g.node(n);\n    // 只考虑原有节点，dummy节点需要按照后续算法排出\n    if (!node || (node === null || node === void 0 ? void 0 : node.dummy)) {\n      return;\n    }\n    if (!isNaN(node.rank)) {\n      node.fixorder = layers[node.rank].length; // 设置fixorder为当层的顺序\n      layers[node.rank].push(n);\n    }\n  });\n};\nexports.default = initDataOrder;","map":{"version":3,"mappings":";;;;;AAEA;;;AAGA,IAAMA,aAAa,GAAG,SAAhBA,aAAa,CAAIC,CAAQ,EAAEC,SAAmB;EAClD,IAAMC,WAAW,GAAGF,CAAC,CAACG,KAAK,EAAE,CAACC,MAAM,CAAC,UAACC,CAAC;;IACrC,OAAO,EAAC,OAAC,CAACC,QAAQ,CAACD,CAAC,CAAC,0CAAEE,MAAM;EAC/B,CAAC,CAAC;EACF,IAAMC,KAAK,GAAGN,WAAW,CAACO,GAAG,CAAC,UAACJ,CAAC;IAAK,QAAC,CAACK,IAAI,CAACL,CAAC,CAAE,CAACM,IAAc;EAAzB,CAAyB,CAAC;EAC/D,IAAMC,OAAO,GAAGC,IAAI,CAACC,GAAG,OAARD,IAAI,EAAQL,KAAK,CAAC;EAClC,IAAMO,MAAM,GAAeC,KAAK,CAACJ,OAAO,GAAG,CAAC,CAAC,CAACK,IAAI,CAAC,EAAE,CAAC;EAEtDhB,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEiB,OAAO,CAAC,UAACC,CAAC;IACnB,IAAMT,IAAI,GAAGV,CAAC,CAACU,IAAI,CAACS,CAAC,CAAC;IACtB;IACA,IAAI,CAACT,IAAI,KAAIA,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEU,KAAK,GAAE;MACxB;;IAEF,IAAI,CAACC,KAAK,CAACX,IAAI,CAACC,IAAc,CAAC,EAAE;MAC/BD,IAAI,CAACY,QAAQ,GAAGP,MAAM,CAACL,IAAI,CAACC,IAAc,CAAC,CAACJ,MAAM,CAAC,CAAC;MACpDQ,MAAM,CAACL,IAAI,CAACC,IAAc,CAAC,CAACY,IAAI,CAACJ,CAAC,CAAC;;EAEvC,CAAC,CAAC;AACJ,CAAC;AAEDK,kBAAezB,aAAa","names":["initDataOrder","g","nodeOrder","simpleNodes","nodes","filter","v","children","length","ranks","map","node","rank","maxRank","Math","max","layers","Array","fill","forEach","n","dummy","isNaN","fixorder","push","exports"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/layout/src/layout/dagre/src/order/init-data-order.ts"],"sourcesContent":["import { Graph } from \"../../graph\";\n\n/**\n * 按照数据中的结果设置fixorder\n */\nconst initDataOrder = (g: Graph, nodeOrder: string[]) => {\n  const simpleNodes = g.nodes().filter((v) => {\n    return !g.children(v)?.length;\n  });\n  const ranks = simpleNodes.map((v) => g.node(v)!.rank as number);\n  const maxRank = Math.max(...ranks);\n  const layers: string[][] = Array(maxRank + 1).fill([]);\n\n  nodeOrder?.forEach((n) => {\n    const node = g.node(n);\n    // 只考虑原有节点，dummy节点需要按照后续算法排出\n    if (!node || node?.dummy) {\n      return;\n    }\n    if (!isNaN(node.rank as number)) {\n      node.fixorder = layers[node.rank as number].length; // 设置fixorder为当层的顺序\n      layers[node.rank as number].push(n);\n    }\n  });\n};\n\nexport default initDataOrder;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}