{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { clone, each } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nimport { regionToBBox } from '../util/util';\nvar RegionFilterAnnotation = /** @class */function (_super) {\n  __extends(RegionFilterAnnotation, _super);\n  function RegionFilterAnnotation() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * 默认的配置项\n   * @returns {object} 默认的配置项\n   */\n  RegionFilterAnnotation.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    return __assign(__assign({}, cfg), {\n      name: 'annotation',\n      type: 'regionFilter',\n      locationType: 'region',\n      start: null,\n      end: null,\n      color: null,\n      shape: []\n    });\n  };\n  RegionFilterAnnotation.prototype.renderInner = function (group) {\n    var _this = this;\n    var start = this.get('start');\n    var end = this.get('end');\n    // 1. add region layer\n    var layer = this.addGroup(group, {\n      id: this.getElementId('region-filter'),\n      capture: false\n    });\n    // 2. clone shape & color it\n    each(this.get('shapes'), function (shape, shapeIdx) {\n      var type = shape.get('type');\n      var attrs = clone(shape.attr());\n      _this.adjustShapeAttrs(attrs);\n      _this.addShape(layer, {\n        id: _this.getElementId(\"shape-\" + type + \"-\" + shapeIdx),\n        capture: false,\n        type: type,\n        attrs: attrs\n      });\n    });\n    // 3. clip\n    var clipBBox = regionToBBox({\n      start: start,\n      end: end\n    });\n    layer.setClip({\n      type: 'rect',\n      attrs: {\n        x: clipBBox.minX,\n        y: clipBBox.minY,\n        width: clipBBox.width,\n        height: clipBBox.height\n      }\n    });\n  };\n  RegionFilterAnnotation.prototype.adjustShapeAttrs = function (attr) {\n    var color = this.get('color');\n    if (attr.fill) {\n      attr.fill = attr.fillStyle = color;\n    }\n    attr.stroke = attr.strokeStyle = color;\n  };\n  return RegionFilterAnnotation;\n}(GroupComponent);\nexport default RegionFilterAnnotation;","map":{"version":3,"mappings":";AACA,SAASA,KAAK,EAAEC,IAAI,QAAQ,YAAY;AACxC,OAAOC,cAAc,MAAM,6BAA6B;AAGxD,SAASC,YAAY,QAAQ,cAAc;AAE3C;EAAqCC;EAArC;;EA8DA;EA7DE;;;;EAIOC,8CAAa,GAApB;IACE,IAAMC,GAAG,GAAGC,iBAAMC,aAAa,WAAE;IACjC,6BACKF,GAAG;MACNG,IAAI,EAAE,YAAY;MAClBC,IAAI,EAAE,cAAc;MACpBC,YAAY,EAAE,QAAQ;MACtBC,KAAK,EAAE,IAAI;MACXC,GAAG,EAAE,IAAI;MACTC,KAAK,EAAE,IAAI;MACXC,KAAK,EAAE;IAAE;EAEb,CAAC;EAESV,4CAAW,GAArB,UAAsBW,KAAa;IAAnC;IACE,IAAMJ,KAAK,GAAU,IAAI,CAACK,GAAG,CAAC,OAAO,CAAC;IACtC,IAAMJ,GAAG,GAAU,IAAI,CAACI,GAAG,CAAC,KAAK,CAAC;IAElC;IACA,IAAMC,KAAK,GAAW,IAAI,CAACC,QAAQ,CAACH,KAAK,EAAE;MACzCI,EAAE,EAAE,IAAI,CAACC,YAAY,CAAC,eAAe,CAAC;MACtCC,OAAO,EAAE;KACV,CAAC;IAEF;IACArB,IAAI,CAAC,IAAI,CAACgB,GAAG,CAAC,QAAQ,CAAC,EAAE,UAACF,KAAa,EAAEQ,QAAgB;MACvD,IAAMb,IAAI,GAAGK,KAAK,CAACE,GAAG,CAAC,MAAM,CAAC;MAC9B,IAAMO,KAAK,GAAGxB,KAAK,CAACe,KAAK,CAACU,IAAI,EAAE,CAAC;MACjCC,KAAI,CAACC,gBAAgB,CAACH,KAAK,CAAC;MAC5BE,KAAI,CAACE,QAAQ,CAACV,KAAK,EAAE;QACnBE,EAAE,EAAEM,KAAI,CAACL,YAAY,CAAC,WAASX,IAAI,SAAIa,QAAU,CAAC;QAClDD,OAAO,EAAE,KAAK;QACdZ,IAAI;QACJc,KAAK;OACN,CAAC;IACJ,CAAC,CAAC;IAEF;IACA,IAAMK,QAAQ,GAAG1B,YAAY,CAAC;MAAES,KAAK;MAAEC,GAAG;IAAA,CAAE,CAAC;IAC7CK,KAAK,CAACY,OAAO,CAAC;MACZpB,IAAI,EAAE,MAAM;MACZc,KAAK,EAAE;QACLO,CAAC,EAAEF,QAAQ,CAACG,IAAI;QAChBC,CAAC,EAAEJ,QAAQ,CAACK,IAAI;QAChBC,KAAK,EAAEN,QAAQ,CAACM,KAAK;QACrBC,MAAM,EAAEP,QAAQ,CAACO;;KAEpB,CAAC;EACJ,CAAC;EAEO/B,iDAAgB,GAAxB,UAAyBoB,IAAgB;IACvC,IAAMX,KAAK,GAAG,IAAI,CAACG,GAAG,CAAC,OAAO,CAAC;IAC/B,IAAIQ,IAAI,CAACY,IAAI,EAAE;MACbZ,IAAI,CAACY,IAAI,GAAGZ,IAAI,CAACa,SAAS,GAAGxB,KAAK;;IAEpCW,IAAI,CAACc,MAAM,GAAGd,IAAI,CAACe,WAAW,GAAG1B,KAAK;EACxC,CAAC;EACH,6BAAC;AAAD,CAAC,CA9DoCZ,cAAc;AAgEnD,eAAeG,sBAAsB","names":["clone","each","GroupComponent","regionToBBox","__extends","RegionFilterAnnotation","cfg","_super","getDefaultCfg","name","type","locationType","start","end","color","shape","group","get","layer","addGroup","id","getElementId","capture","shapeIdx","attrs","attr","_this","adjustShapeAttrs","addShape","clipBBox","setClip","x","minX","y","minY","width","height","fill","fillStyle","stroke","strokeStyle"],"sources":["/home/iam/Documents/network/node_modules/@antv/component/src/annotation/region-filter.ts"],"sourcesContent":["import { IGroup, IShape, Point, ShapeAttrs } from '@antv/g-base';\nimport { clone, each } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nimport { ILocation } from '../interfaces';\nimport { RegionFilterAnnotationCfg, RegionLocationCfg } from '../types';\nimport { regionToBBox } from '../util/util';\n\nclass RegionFilterAnnotation extends GroupComponent<RegionFilterAnnotationCfg> implements ILocation<RegionLocationCfg> {\n  /**\n   * 默认的配置项\n   * @returns {object} 默认的配置项\n   */\n  public getDefaultCfg() {\n    const cfg = super.getDefaultCfg();\n    return {\n      ...cfg,\n      name: 'annotation',\n      type: 'regionFilter',\n      locationType: 'region',\n      start: null,\n      end: null,\n      color: null,\n      shape: [],\n    };\n  }\n\n  protected renderInner(group: IGroup) {\n    const start: Point = this.get('start');\n    const end: Point = this.get('end');\n\n    // 1. add region layer\n    const layer: IGroup = this.addGroup(group, {\n      id: this.getElementId('region-filter'),\n      capture: false,\n    });\n\n    // 2. clone shape & color it\n    each(this.get('shapes'), (shape: IShape, shapeIdx: number) => {\n      const type = shape.get('type');\n      const attrs = clone(shape.attr());\n      this.adjustShapeAttrs(attrs);\n      this.addShape(layer, {\n        id: this.getElementId(`shape-${type}-${shapeIdx}`),\n        capture: false,\n        type,\n        attrs,\n      });\n    });\n\n    // 3. clip\n    const clipBBox = regionToBBox({ start, end });\n    layer.setClip({\n      type: 'rect',\n      attrs: {\n        x: clipBBox.minX,\n        y: clipBBox.minY,\n        width: clipBBox.width,\n        height: clipBBox.height,\n      },\n    });\n  }\n\n  private adjustShapeAttrs(attr: ShapeAttrs) {\n    const color = this.get('color');\n    if (attr.fill) {\n      attr.fill = attr.fillStyle = color;\n    }\n    attr.stroke = attr.strokeStyle = color;\n  }\n}\n\nexport default RegionFilterAnnotation;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}