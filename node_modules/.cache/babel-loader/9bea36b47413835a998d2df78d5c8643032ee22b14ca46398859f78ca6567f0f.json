{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport GroupComponent from '../abstract/group-component';\nimport { createBBox, formatPadding } from '../util/util';\nvar LegendBase = /** @class */function (_super) {\n  __extends(LegendBase, _super);\n  function LegendBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  LegendBase.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    return __assign(__assign({}, cfg), {\n      name: 'legend',\n      /**\n       * 布局方式： horizontal，vertical\n       * @type {String}\n       */\n      layout: 'horizontal',\n      locationType: 'point',\n      x: 0,\n      y: 0,\n      offsetX: 0,\n      offsetY: 0,\n      title: null,\n      background: null\n    });\n  };\n  LegendBase.prototype.getLayoutBBox = function () {\n    var bbox = _super.prototype.getLayoutBBox.call(this);\n    var maxWidth = this.get('maxWidth');\n    var maxHeight = this.get('maxHeight');\n    var width = bbox.width,\n      height = bbox.height;\n    if (maxWidth) {\n      width = Math.min(width, maxWidth);\n    }\n    if (maxHeight) {\n      height = Math.min(height, maxHeight);\n    }\n    return createBBox(bbox.minX, bbox.minY, width, height);\n  };\n  LegendBase.prototype.setLocation = function (cfg) {\n    this.set('x', cfg.x);\n    this.set('y', cfg.y);\n    this.resetLocation();\n  };\n  LegendBase.prototype.resetLocation = function () {\n    var x = this.get('x');\n    var y = this.get('y');\n    var offsetX = this.get('offsetX');\n    var offsetY = this.get('offsetY');\n    this.moveElementTo(this.get('group'), {\n      x: x + offsetX,\n      y: y + offsetY\n    });\n  };\n  LegendBase.prototype.applyOffset = function () {\n    this.resetLocation();\n  };\n  // 获取当前绘制的点\n  LegendBase.prototype.getDrawPoint = function () {\n    return this.get('currentPoint');\n  };\n  LegendBase.prototype.setDrawPoint = function (point) {\n    return this.set('currentPoint', point);\n  };\n  // 复写父类定义的绘制方法\n  LegendBase.prototype.renderInner = function (group) {\n    this.resetDraw();\n    if (this.get('title')) {\n      this.drawTitle(group);\n    }\n    this.drawLegendContent(group);\n    if (this.get('background')) {\n      this.drawBackground(group);\n    }\n    // this.resetLocation(); // 在顶层已经在处理偏移时一起处理了\n  };\n  // 绘制背景\n  LegendBase.prototype.drawBackground = function (group) {\n    var background = this.get('background');\n    var bbox = group.getBBox();\n    var padding = formatPadding(background.padding);\n    var attrs = __assign({\n      // 背景从 (0,0) 开始绘制\n      x: 0,\n      y: 0,\n      width: bbox.width + padding[1] + padding[3],\n      height: bbox.height + padding[0] + padding[2]\n    }, background.style);\n    var backgroundShape = this.addShape(group, {\n      type: 'rect',\n      id: this.getElementId('background'),\n      name: 'legend-background',\n      attrs: attrs\n    });\n    backgroundShape.toBack();\n  };\n  // 绘制标题，标题在图例项的上面\n  LegendBase.prototype.drawTitle = function (group) {\n    var currentPoint = this.get('currentPoint');\n    var titleCfg = this.get('title');\n    var spacing = titleCfg.spacing,\n      style = titleCfg.style,\n      text = titleCfg.text;\n    var shape = this.addShape(group, {\n      type: 'text',\n      id: this.getElementId('title'),\n      name: 'legend-title',\n      attrs: __assign({\n        text: text,\n        x: currentPoint.x,\n        y: currentPoint.y\n      }, style)\n    });\n    var bbox = shape.getBBox();\n    // 标题单独在一行\n    this.set('currentPoint', {\n      x: currentPoint.x,\n      y: bbox.maxY + spacing\n    });\n  };\n  // 重置绘制时开始的位置，如果绘制边框，考虑边框的 padding\n  LegendBase.prototype.resetDraw = function () {\n    var background = this.get('background');\n    var currentPoint = {\n      x: 0,\n      y: 0\n    };\n    if (background) {\n      var padding = formatPadding(background.padding);\n      currentPoint.x = padding[3]; // 左边 padding\n      currentPoint.y = padding[0]; // 上面 padding\n    }\n\n    this.set('currentPoint', currentPoint); // 设置绘制的初始位置\n  };\n\n  return LegendBase;\n}(GroupComponent);\nexport default LegendBase;","map":{"version":3,"mappings":"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","names":["GroupComponent","createBBox","formatPadding","__extends","LegendBase","cfg","_super","getDefaultCfg","name","layout","locationType","x","y","offsetX","offsetY","title","background","bbox","getLayoutBBox","maxWidth","get","maxHeight","height","width","Math","min","minX","minY","set","resetLocation","moveElementTo","point","group","resetDraw","drawTitle","drawLegendContent","drawBackground","getBBox","padding","attrs","style","backgroundShape","addShape","type","id","getElementId","toBack","currentPoint","titleCfg","text","shape","maxY","spacing"],"sources":["/home/iam/Documents/network/node_modules/@antv/component/src/legend/base.ts"],"sourcesContent":["import { IGroup } from '@antv/g-base';\nimport GroupComponent from '../abstract/group-component';\nimport { ILocation } from '../interfaces';\nimport { BBox, LegendBaseCfg, Point, PointLocationCfg } from '../types';\nimport { createBBox, formatPadding } from '../util/util';\n\nabstract class LegendBase<T extends LegendBaseCfg = LegendBaseCfg> extends GroupComponent\n  implements ILocation<PointLocationCfg> {\n  public getDefaultCfg() {\n    const cfg = super.getDefaultCfg();\n    return {\n      ...cfg,\n      name: 'legend',\n      /**\n       * 布局方式： horizontal，vertical\n       * @type {String}\n       */\n      layout: 'horizontal',\n      locationType: 'point',\n      x: 0,\n      y: 0,\n      offsetX: 0,\n      offsetY: 0,\n      title: null,\n      background: null,\n    };\n  }\n\n  public getLayoutBBox(): BBox {\n    const bbox = super.getLayoutBBox();\n    const maxWidth = this.get('maxWidth');\n    const maxHeight = this.get('maxHeight');\n\n    let { width, height } = bbox;\n    if (maxWidth) {\n      width = Math.min(width, maxWidth);\n    }\n    if (maxHeight) {\n      height = Math.min(height, maxHeight);\n    }\n    \n    return createBBox(bbox.minX, bbox.minY, width, height);\n  }\n\n  public setLocation(cfg: PointLocationCfg) {\n    this.set('x', cfg.x);\n    this.set('y', cfg.y);\n    this.resetLocation();\n  }\n\n  protected resetLocation() {\n    const x = this.get('x');\n    const y = this.get('y');\n    const offsetX = this.get('offsetX');\n    const offsetY = this.get('offsetY');\n    this.moveElementTo(this.get('group'), {\n      x: x + offsetX,\n      y: y + offsetY,\n    });\n  }\n\n  protected applyOffset() {\n    this.resetLocation();\n  }\n\n  // 获取当前绘制的点\n  protected getDrawPoint(): Point {\n    return this.get('currentPoint');\n  }\n\n  protected setDrawPoint(point: Point) {\n    return this.set('currentPoint', point);\n  }\n  // 复写父类定义的绘制方法\n  protected renderInner(group: IGroup) {\n    this.resetDraw();\n    if (this.get('title')) {\n      this.drawTitle(group);\n    }\n    this.drawLegendContent(group);\n    if (this.get('background')) {\n      this.drawBackground(group);\n    }\n    // this.resetLocation(); // 在顶层已经在处理偏移时一起处理了\n  }\n\n  protected abstract drawLegendContent(group);\n\n  // 绘制背景\n  protected drawBackground(group: IGroup) {\n    const background = this.get('background');\n    const bbox = group.getBBox();\n    const padding = formatPadding(background.padding);\n    const attrs = {\n      // 背景从 (0,0) 开始绘制\n      x: 0,\n      y: 0,\n      width: bbox.width + padding[1] + padding[3],\n      height: bbox.height + padding[0] + padding[2],\n      ...background.style,\n    };\n    const backgroundShape = this.addShape(group, {\n      type: 'rect',\n      id: this.getElementId('background'),\n      name: 'legend-background',\n      attrs,\n    });\n    backgroundShape.toBack();\n  }\n\n  // 绘制标题，标题在图例项的上面\n  protected drawTitle(group: IGroup) {\n    const currentPoint = this.get('currentPoint');\n    const titleCfg = this.get('title');\n    const { spacing, style, text } = titleCfg;\n    const shape = this.addShape(group, {\n      type: 'text',\n      id: this.getElementId('title'),\n      name: 'legend-title',\n      attrs: {\n        text,\n        x: currentPoint.x,\n        y: currentPoint.y,\n        ...style,\n      },\n    });\n    const bbox = shape.getBBox();\n    // 标题单独在一行\n    this.set('currentPoint', { x: currentPoint.x, y: bbox.maxY + spacing });\n  }\n\n  // 重置绘制时开始的位置，如果绘制边框，考虑边框的 padding\n  private resetDraw() {\n    const background = this.get('background');\n    const currentPoint = { x: 0, y: 0 };\n    if (background) {\n      const padding = formatPadding(background.padding);\n      currentPoint.x = padding[3]; // 左边 padding\n      currentPoint.y = padding[0]; // 上面 padding\n    }\n    this.set('currentPoint', currentPoint); // 设置绘制的初始位置\n  }\n}\n\nexport default LegendBase;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}