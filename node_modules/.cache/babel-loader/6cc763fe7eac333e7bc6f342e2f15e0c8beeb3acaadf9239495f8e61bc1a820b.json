{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { createDom, modifyCSS } from '@antv/dom-util';\nimport { isNil, isString, deepMix, each, hasKey } from '@antv/util';\nimport { clearDom, createBBox, hasClass } from '../util/util';\nimport Component from './component';\nvar HtmlComponent = /** @class */function (_super) {\n  __extends(HtmlComponent, _super);\n  function HtmlComponent() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  HtmlComponent.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    return __assign(__assign({}, cfg), {\n      container: null,\n      containerTpl: '<div></div>',\n      updateAutoRender: true,\n      containerClassName: '',\n      parent: null\n    });\n  };\n  HtmlComponent.prototype.getContainer = function () {\n    return this.get('container');\n  };\n  /**\n   * 显示组件\n   */\n  HtmlComponent.prototype.show = function () {\n    var container = this.get('container');\n    container.style.display = '';\n    this.set('visible', true);\n  };\n  /**\n   * 隐藏组件\n   */\n  HtmlComponent.prototype.hide = function () {\n    var container = this.get('container');\n    container.style.display = 'none';\n    this.set('visible', false);\n  };\n  /**\n   * 是否允许捕捉事件\n   * @param capture 事件捕捉\n   */\n  HtmlComponent.prototype.setCapture = function (capture) {\n    var container = this.getContainer();\n    var value = capture ? 'auto' : 'none';\n    container.style.pointerEvents = value;\n    this.set('capture', capture);\n  };\n  HtmlComponent.prototype.getBBox = function () {\n    var container = this.getContainer();\n    var x = parseFloat(container.style.left) || 0;\n    var y = parseFloat(container.style.top) || 0;\n    return createBBox(x, y, container.clientWidth, container.clientHeight);\n  };\n  HtmlComponent.prototype.clear = function () {\n    var container = this.get('container');\n    clearDom(container);\n  };\n  HtmlComponent.prototype.destroy = function () {\n    this.removeEvent();\n    this.removeDom();\n    _super.prototype.destroy.call(this);\n  };\n  /**\n   * 复写 init，主要是初始化 DOM 和事件\n   */\n  HtmlComponent.prototype.init = function () {\n    _super.prototype.init.call(this);\n    this.initContainer();\n    this.initDom();\n    this.resetStyles(); // 初始化样式\n    this.applyStyles(); // 应用样式\n    this.initEvent();\n    this.initCapture();\n    this.initVisible();\n  };\n  HtmlComponent.prototype.initCapture = function () {\n    this.setCapture(this.get('capture'));\n  };\n  HtmlComponent.prototype.initVisible = function () {\n    if (!this.get('visible')) {\n      // 设置初始显示状态\n      this.hide();\n    } else {\n      this.show();\n    }\n  };\n  HtmlComponent.prototype.initDom = function () {};\n  HtmlComponent.prototype.initContainer = function () {\n    var container = this.get('container');\n    if (isNil(container)) {\n      // 未指定 container 则创建\n      container = this.createDom();\n      var parent_1 = this.get('parent');\n      if (isString(parent_1)) {\n        parent_1 = document.getElementById(parent_1);\n        this.set('parent', parent_1);\n      }\n      parent_1.appendChild(container);\n      if (this.get('containerId')) {\n        container.setAttribute('id', this.get('containerId'));\n      }\n      this.set('container', container);\n    } else if (isString(container)) {\n      // 用户传入的 id, 作为 container\n      container = document.getElementById(container);\n      this.set('container', container);\n    } // else container 是 DOM\n    if (!this.get('parent')) {\n      this.set('parent', container.parentNode);\n    }\n  };\n  // 样式需要进行合并，不能单纯的替换，否则使用非常不方便\n  HtmlComponent.prototype.resetStyles = function () {\n    var style = this.get('domStyles');\n    var defaultStyles = this.get('defaultStyles');\n    if (!style) {\n      style = defaultStyles;\n    } else {\n      style = deepMix({}, defaultStyles, style);\n    }\n    this.set('domStyles', style);\n  };\n  // 应用所有的样式\n  HtmlComponent.prototype.applyStyles = function () {\n    var domStyles = this.get('domStyles');\n    if (!domStyles) {\n      return;\n    }\n    var container = this.getContainer();\n    this.applyChildrenStyles(container, domStyles);\n    var containerClassName = this.get('containerClassName');\n    if (containerClassName && hasClass(container, containerClassName)) {\n      var containerCss = domStyles[containerClassName];\n      modifyCSS(container, containerCss);\n    }\n  };\n  HtmlComponent.prototype.applyChildrenStyles = function (element, styles) {\n    each(styles, function (style, name) {\n      var elements = element.getElementsByClassName(name);\n      each(elements, function (el) {\n        modifyCSS(el, style);\n      });\n    });\n  };\n  // 应用到单个 DOM\n  HtmlComponent.prototype.applyStyle = function (cssName, dom) {\n    var domStyles = this.get('domStyles');\n    modifyCSS(dom, domStyles[cssName]);\n  };\n  /**\n   * @protected\n   */\n  HtmlComponent.prototype.createDom = function () {\n    var containerTpl = this.get('containerTpl');\n    return createDom(containerTpl);\n  };\n  /**\n   * @protected\n   * 初始化事件\n   */\n  HtmlComponent.prototype.initEvent = function () {};\n  /**\n   * @protected\n   * 清理 DOM\n   */\n  HtmlComponent.prototype.removeDom = function () {\n    var container = this.get('container');\n    // 节点不一定有parentNode\n    container && container.parentNode && container.parentNode.removeChild(container);\n  };\n  /**\n   * @protected\n   * 清理事件\n   */\n  HtmlComponent.prototype.removeEvent = function () {};\n  HtmlComponent.prototype.updateInner = function (cfg) {\n    // 更新样式\n    if (hasKey(cfg, 'domStyles')) {\n      this.resetStyles();\n      this.applyStyles();\n    }\n    // 只要属性发生变化，都调整一些位置\n    this.resetPosition();\n  };\n  HtmlComponent.prototype.resetPosition = function () {};\n  ;\n  return HtmlComponent;\n}(Component);\nexport default HtmlComponent;","map":{"version":3,"mappings":"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","names":["createDom","modifyCSS","isNil","isString","deepMix","each","hasKey","clearDom","createBBox","hasClass","Component","__extends","HtmlComponent","cfg","_super","getDefaultCfg","container","containerTpl","updateAutoRender","containerClassName","parent","get","style","display","set","capture","getContainer","value","pointerEvents","x","parseFloat","left","y","top","clientWidth","clientHeight","removeEvent","removeDom","destroy","init","initContainer","initDom","resetStyles","applyStyles","initEvent","initCapture","initVisible","setCapture","hide","show","parent_1","document","getElementById","appendChild","setAttribute","parentNode","defaultStyles","domStyles","applyChildrenStyles","containerCss","element","styles","name","elements","getElementsByClassName","el","cssName","dom","removeChild","resetPosition"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/component/src/abstract/html-component.ts"],"sourcesContent":["import { createDom, modifyCSS } from '@antv/dom-util';\nimport { isNil, isString, deepMix, each, hasKey } from '@antv/util';\nimport { BBox, ComponentCfg, HtmlComponentCfg } from '../types';\nimport { clearDom, createBBox, hasClass } from '../util/util';\nimport Component from './component';\n\nabstract class HtmlComponent<T extends ComponentCfg = HtmlComponentCfg> extends Component<T> {\n  public getDefaultCfg() {\n    const cfg = super.getDefaultCfg();\n    return {\n      ...cfg,\n      container: null,\n      containerTpl: '<div></div>',\n      updateAutoRender: true,\n      containerClassName: '',\n      parent: null,\n    };\n  }\n\n  public getContainer(): HTMLElement {\n    return this.get('container') as HTMLElement;\n  }\n\n  /**\n   * 显示组件\n   */\n  public show() {\n    const container = this.get('container');\n    container.style.display = '';\n    this.set('visible', true);\n  }\n  /**\n   * 隐藏组件\n   */\n  public hide() {\n    const container = this.get('container');\n    container.style.display = 'none';\n    this.set('visible', false);\n  }\n  /**\n   * 是否允许捕捉事件\n   * @param capture 事件捕捉\n   */\n  public setCapture(capture) {\n    const container = this.getContainer();\n    const value = capture ? 'auto' : 'none';\n    container.style.pointerEvents = value;\n    this.set('capture', capture);\n  }\n  public getBBox(): BBox {\n    const container = this.getContainer();\n    const x = parseFloat(container.style.left) || 0;\n    const y = parseFloat(container.style.top) || 0;\n    return createBBox(x, y, container.clientWidth, container.clientHeight);\n  }\n\n  public clear() {\n    const container = this.get('container');\n    clearDom(container);\n  }\n\n  public destroy() {\n    this.removeEvent();\n    this.removeDom();\n    super.destroy();\n  }\n\n  /**\n   * 复写 init，主要是初始化 DOM 和事件\n   */\n  public init() {\n    super.init();\n    this.initContainer();\n    this.initDom();\n    this.resetStyles(); // 初始化样式\n    this.applyStyles(); // 应用样式\n    this.initEvent();\n    this.initCapture();\n    this.initVisible();\n  }\n\n  protected initCapture() {\n    this.setCapture(this.get('capture'));\n  }\n  protected initVisible() {\n    if (!this.get('visible')) {\n      // 设置初始显示状态\n      this.hide();\n    } else {\n      this.show();\n    }\n  }\n\n  protected initDom() {\n\n  }\n\n  protected initContainer() {\n    let container = this.get('container');\n    if (isNil(container)) {\n      // 未指定 container 则创建\n      container = this.createDom();\n      let parent = this.get('parent');\n      if (isString(parent)) {\n        parent = document.getElementById(parent);\n        this.set('parent', parent);\n      }\n      parent.appendChild(container);\n      if (this.get('containerId')) {\n        container.setAttribute('id', this.get('containerId'));\n      }\n      this.set('container', container);\n    } else if (isString(container)) {\n      // 用户传入的 id, 作为 container\n      container = document.getElementById(container);\n      this.set('container', container);\n    } // else container 是 DOM\n    if (!this.get('parent')) {\n      this.set('parent', container.parentNode);\n    }\n  }\n\n  // 样式需要进行合并，不能单纯的替换，否则使用非常不方便\n  protected resetStyles() {\n    let style = this.get('domStyles');\n    const defaultStyles = this.get('defaultStyles');\n    if (!style) {\n      style = defaultStyles;\n    } else {\n      style = deepMix({}, defaultStyles, style);\n    }\n    this.set('domStyles', style);\n  }\n  // 应用所有的样式\n  protected applyStyles() {\n    const domStyles = this.get('domStyles');\n    if (!domStyles) {\n      return;\n    }\n    const container = this.getContainer();\n    this.applyChildrenStyles(container, domStyles);\n    const containerClassName = this.get('containerClassName');\n    if (containerClassName && hasClass(container, containerClassName)) {\n      const containerCss = domStyles[containerClassName];\n      modifyCSS(container, containerCss);\n    }\n  }\n\n  protected applyChildrenStyles(element, styles) {\n    each(styles, (style, name) => {\n      const elements = element.getElementsByClassName(name);\n      each(elements, (el) => {\n        modifyCSS(el, style);\n      });\n    });\n  }\n  // 应用到单个 DOM\n  protected applyStyle(cssName, dom) {\n    const domStyles = this.get('domStyles');\n    modifyCSS(dom, domStyles[cssName]);\n  }\n\n  /**\n   * @protected\n   */\n  protected createDom() {\n    const containerTpl = this.get('containerTpl');\n    return createDom(containerTpl);\n  }\n\n  /**\n   * @protected\n   * 初始化事件\n   */\n  protected initEvent() { }\n\n  /**\n   * @protected\n   * 清理 DOM\n   */\n  protected removeDom() {\n    const container = this.get('container');\n    // 节点不一定有parentNode\n    container && container.parentNode && container.parentNode.removeChild(container);\n  }\n\n  /**\n   * @protected\n   * 清理事件\n   */\n  protected removeEvent() { }\n\n  protected updateInner(cfg) {\n    // 更新样式\n    if (hasKey(cfg, 'domStyles')) {\n      this.resetStyles();\n      this.applyStyles();\n    }\n    // 只要属性发生变化，都调整一些位置\n    this.resetPosition();\n  }\n  protected resetPosition() { };\n}\n\nexport default HtmlComponent;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}