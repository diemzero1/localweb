{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { isArray, isNil } from '@antv/util';\nimport Attribute from './base';\nvar Position = /** @class */function (_super) {\n  __extends(Position, _super);\n  function Position(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    _this.names = ['x', 'y'];\n    _this.type = 'position';\n    return _this;\n  }\n  Position.prototype.mapping = function (x, y) {\n    var _a = this.scales,\n      scaleX = _a[0],\n      scaleY = _a[1];\n    if (isNil(x) || isNil(y)) {\n      return [];\n    }\n    return [isArray(x) ? x.map(function (xi) {\n      return scaleX.scale(xi);\n    }) : scaleX.scale(x), isArray(y) ? y.map(function (yi) {\n      return scaleY.scale(yi);\n    }) : scaleY.scale(y)];\n  };\n  return Position;\n}(Attribute);\nexport default Position;","map":{"version":3,"mappings":";AAAA,SAASA,OAAO,EAAEC,KAAK,QAAQ,YAAY;AAE3C,OAAOC,SAAS,MAAM,QAAQ;AAK9B;EAAsCC;EACpC,kBAAYC,GAAiB;IAA7B,YACEC,kBAAMD,GAAG,CAAC;IACVE,KAAI,CAACC,KAAK,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC;IACvBD,KAAI,CAACE,IAAI,GAAG,UAAU;;EACxB;EAEOC,0BAAO,GAAd,UAAeC,CAAe,EAAEC,CAAe;IACvC,SAAmB,IAAI,CAACC,MAAM;MAA7BC,MAAM;MAAEC,MAAM,QAAe;IAEpC,IAAIb,KAAK,CAACS,CAAC,CAAC,IAAIT,KAAK,CAACU,CAAC,CAAC,EAAE;MACxB,OAAO,EAAE;;IAGX,OAAO,CACLX,OAAO,CAACU,CAAC,CAAC,GAAGA,CAAC,CAACK,GAAG,CAAC,UAACC,EAAE;MAAK,aAAM,CAACC,KAAK,CAACD,EAAE,CAAC;IAAhB,CAAgB,CAAC,GAAGH,MAAM,CAACI,KAAK,CAACP,CAAC,CAAC,EAC9DV,OAAO,CAACW,CAAC,CAAC,GAAGA,CAAC,CAACI,GAAG,CAAC,UAACG,EAAE;MAAK,aAAM,CAACD,KAAK,CAACC,EAAE,CAAC;IAAhB,CAAgB,CAAC,GAAGJ,MAAM,CAACG,KAAK,CAACN,CAAC,CAAC,CAC/D;EACH,CAAC;EACH,eAAC;AAAD,CAAC,CAnBqCT,SAAS","names":["isArray","isNil","Attribute","__extends","cfg","_super","_this","names","type","Position","x","y","scales","scaleX","scaleY","map","xi","scale","yi"],"sources":["/home/iam/Documents/network/node_modules/@antv/attr/src/attributes/position.ts"],"sourcesContent":["import { isArray, isNil } from '@antv/util';\nimport { AttributeCfg } from '../interface';\nimport Attribute from './base';\n\nexport type Value = number | string;\nexport type MappingValue = Value[] | Value;\n\nexport default class Position extends Attribute {\n  constructor(cfg: AttributeCfg) {\n    super(cfg);\n    this.names = ['x', 'y'];\n    this.type = 'position';\n  }\n\n  public mapping(x: MappingValue, y: MappingValue) {\n    const [scaleX, scaleY] = this.scales;\n\n    if (isNil(x) || isNil(y)) {\n      return [];\n    }\n\n    return [\n      isArray(x) ? x.map((xi) => scaleX.scale(xi)) : scaleX.scale(x),\n      isArray(y) ? y.map((yi) => scaleY.scale(yi)) : scaleY.scale(y),\n    ];\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}