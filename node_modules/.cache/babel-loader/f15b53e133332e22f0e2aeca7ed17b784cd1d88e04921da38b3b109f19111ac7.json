{"ast":null,"code":"import { __assign, __extends, __spreadArrays } from \"tslib\";\nimport EE from '@antv/event-emitter';\nimport { Chart } from '@antv/g2';\nimport { each } from '@antv/util';\nimport { bind } from 'size-sensor';\nimport { deepAssign, getAllElementsRecursively, getContainerSize, pick } from '../utils';\nvar SOURCE_ATTRIBUTE_NAME = 'data-chart-source-type';\n/** plot 图表容器的配置 */\nexport var PLOT_CONTAINER_OPTIONS = ['padding', 'appendPadding', 'renderer', 'pixelRatio', 'syncViewPadding', 'supportCSSTransform', 'limitInPlot'];\n/**\n * 所有 plot 的基类\n */\nvar Plot = /** @class */function (_super) {\n  __extends(Plot, _super);\n  function Plot(container, options) {\n    var _this = _super.call(this) || this;\n    _this.container = typeof container === 'string' ? document.getElementById(container) : container;\n    _this.options = deepAssign({}, _this.getDefaultOptions(), options);\n    _this.createG2();\n    _this.bindEvents();\n    return _this;\n  }\n  /**\n   * 获取默认的 options 配置项\n   * 每个组件都可以复写\n   */\n  Plot.getDefaultOptions = function () {\n    return {\n      renderer: 'canvas',\n      xAxis: {\n        nice: true,\n        label: {\n          autoRotate: false,\n          autoHide: {\n            type: 'equidistance',\n            cfg: {\n              minGap: 6\n            }\n          }\n        }\n      },\n      yAxis: {\n        nice: true,\n        label: {\n          autoHide: true,\n          autoRotate: false\n        }\n      },\n      animation: true\n    };\n  };\n  /**\n   * 创建 G2 实例\n   */\n  Plot.prototype.createG2 = function () {\n    var _a = this.options,\n      width = _a.width,\n      height = _a.height,\n      defaultInteractions = _a.defaultInteractions;\n    this.chart = new Chart(__assign(__assign(__assign(__assign({\n      container: this.container,\n      autoFit: false\n    }, this.getChartSize(width, height)), {\n      localRefresh: false\n    }), pick(this.options, PLOT_CONTAINER_OPTIONS)), {\n      defaultInteractions: defaultInteractions\n    }));\n    // 给容器增加标识，知道图表的来源区别于 G2\n    this.container.setAttribute(SOURCE_ATTRIBUTE_NAME, 'G2Plot');\n  };\n  /**\n   * 计算默认的 chart 大小。逻辑简化：如果存在 width 或 height，则直接使用，否则使用容器大小\n   * @param width\n   * @param height\n   */\n  Plot.prototype.getChartSize = function (width, height) {\n    var chartSize = getContainerSize(this.container);\n    return {\n      width: width || chartSize.width || 400,\n      height: height || chartSize.height || 400\n    };\n  };\n  /**\n   * 绑定代理所有 G2 的事件\n   */\n  Plot.prototype.bindEvents = function () {\n    var _this = this;\n    if (this.chart) {\n      this.chart.on('*', function (e) {\n        if (e === null || e === void 0 ? void 0 : e.type) {\n          _this.emit(e.type, e);\n        }\n      });\n    }\n  };\n  /**\n   * 获取默认的 options 配置项\n   * 每个组件都可以复写\n   */\n  Plot.prototype.getDefaultOptions = function () {\n    return Plot.getDefaultOptions();\n  };\n  /**\n   * 绘制\n   */\n  Plot.prototype.render = function () {\n    // 暴力处理，先清空再渲染，需要 G2 层自行做好更新渲染\n    this.chart.clear();\n    // 因为子 view 会继承父 view 的 options 配置（包括 legend，所以会导致 legend 重复创建）\n    // 所以这里给 chart 实例的 options 配置清空\n    // 最好的解法是在 G2 view.clear 方法的时候，重置 options 配置。或者提供方法去 resetOptions\n    // #1684 理论上在多 view 图形上，只要存在 custom legend，都存在类似问题（子弹图、双轴图）\n    // @ts-ignore\n    this.chart.options = {\n      data: [],\n      animate: true\n    };\n    this.chart.views = []; // 删除已有的 views\n    // 执行 adaptor\n    this.execAdaptor();\n    // 渲染\n    this.chart.render();\n    // 绑定\n    this.bindSizeSensor();\n  };\n  /**\n   * 更新: 更新配置且重新渲染\n   * @param options\n   */\n  Plot.prototype.update = function (options) {\n    this.updateOption(options);\n    this.render();\n  };\n  /**\n   * 更新配置\n   * @param options\n   */\n  Plot.prototype.updateOption = function (options) {\n    this.options = deepAssign({}, this.options, options);\n  };\n  /**\n   * 设置状态\n   * @param type 状态类型，支持 'active' | 'inactive' | 'selected' 三种\n   * @param conditions 条件，支持数组\n   * @param status 是否激活，默认 true\n   */\n  Plot.prototype.setState = function (type, condition, status) {\n    if (status === void 0) {\n      status = true;\n    }\n    var elements = getAllElementsRecursively(this.chart);\n    each(elements, function (ele) {\n      if (condition(ele.getData())) {\n        ele.setState(type, status);\n      }\n    });\n  };\n  /**\n   * 获取状态\n   */\n  Plot.prototype.getStates = function () {\n    var elements = getAllElementsRecursively(this.chart);\n    var stateObjects = [];\n    each(elements, function (element) {\n      var data = element.getData();\n      var states = element.getStates();\n      each(states, function (state) {\n        stateObjects.push({\n          data: data,\n          state: state,\n          geometry: element.geometry,\n          element: element\n        });\n      });\n    });\n    return stateObjects;\n  };\n  /**\n   * 更新数据\n   * @override\n   * @param options\n   */\n  Plot.prototype.changeData = function (data) {\n    // @ts-ignore\n    this.update({\n      data: data\n    });\n    // TODO: 临时方案，最好使用下面的方式去更新数据\n    // this.chart.changeData(data);\n  };\n  /**\n   * 修改画布大小\n   * @param width\n   * @param height\n   */\n  Plot.prototype.changeSize = function (width, height) {\n    this.chart.changeSize(width, height);\n  };\n  /**\n   * 增加图表标注。通过 id 标识，如果匹配到，就做更新\n   */\n  Plot.prototype.addAnnotations = function (annotations, view) {\n    view = view ? view : this.chart;\n    var incoming = __spreadArrays(annotations);\n    var controller = view.getController('annotation');\n    var current = controller.getComponents().map(function (co) {\n      return co.extra;\n    });\n    controller.clear(true);\n    var _loop_1 = function _loop_1(i) {\n      var annotation = current[i];\n      var findIndex = incoming.findIndex(function (item) {\n        return item.id && item.id === annotation.id;\n      });\n      if (findIndex !== -1) {\n        annotation = deepAssign({}, annotation, incoming[findIndex]);\n        incoming.splice(findIndex, 1);\n      }\n      controller.annotation(annotation);\n    };\n    for (var i = 0; i < current.length; i++) {\n      _loop_1(i);\n    }\n    incoming.forEach(function (annotation) {\n      return controller.annotation(annotation);\n    });\n    view.render(true);\n  };\n  /**\n   * 删除图表标注。通过 id 标识，如果匹配到，就做删除\n   */\n  Plot.prototype.removeAnnotations = function (annotations) {\n    var controller = this.chart.getController('annotation');\n    var current = controller.getComponents().map(function (co) {\n      return co.extra;\n    });\n    controller.clear(true);\n    var _loop_2 = function _loop_2(i) {\n      var annotation = current[i];\n      if (!annotations.find(function (item) {\n        return item.id && item.id === annotation.id;\n      })) {\n        controller.annotation(annotation);\n      }\n    };\n    for (var i = 0; i < current.length; i++) {\n      _loop_2(i);\n    }\n    this.chart.render(true);\n  };\n  /**\n   * 销毁\n   */\n  Plot.prototype.destroy = function () {\n    // 取消 size-sensor 的绑定\n    this.unbindSizeSensor();\n    // G2 的销毁\n    this.chart.destroy();\n    // 清空已经绑定的事件\n    this.off();\n    this.container.removeAttribute(SOURCE_ATTRIBUTE_NAME);\n  };\n  /**\n   * 执行 adaptor 操作\n   */\n  Plot.prototype.execAdaptor = function () {\n    var adaptor = this.getSchemaAdaptor();\n    var _a = this.options,\n      padding = _a.padding,\n      appendPadding = _a.appendPadding;\n    // 更新 padding\n    this.chart.padding = padding;\n    // 更新 appendPadding\n    this.chart.appendPadding = appendPadding;\n    // 转化成 G2 API\n    adaptor({\n      chart: this.chart,\n      options: this.options\n    });\n  };\n  /**\n   * 当图表容器大小变化的时候，执行的函数\n   */\n  Plot.prototype.triggerResize = function () {\n    this.chart.forceFit();\n  };\n  /**\n   * 绑定 dom 容器大小变化的事件\n   */\n  Plot.prototype.bindSizeSensor = function () {\n    var _this = this;\n    if (this.unbind) {\n      return;\n    }\n    var _a = this.options.autoFit,\n      autoFit = _a === void 0 ? true : _a;\n    if (autoFit) {\n      this.unbind = bind(this.container, function () {\n        // 获取最新的宽高信息\n        var _a = getContainerSize(_this.container),\n          width = _a.width,\n          height = _a.height;\n        // 主要是防止绑定的时候触发 resize 回调\n        if (width !== _this.chart.width || height !== _this.chart.height) {\n          _this.triggerResize();\n        }\n      });\n    }\n  };\n  /**\n   * 取消绑定\n   */\n  Plot.prototype.unbindSizeSensor = function () {\n    if (this.unbind) {\n      this.unbind();\n      this.unbind = undefined;\n    }\n  };\n  return Plot;\n}(EE);\nexport { Plot };","map":{"version":3,"mappings":"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","names":["EE","Chart","each","bind","deepAssign","getAllElementsRecursively","getContainerSize","pick","SOURCE_ATTRIBUTE_NAME","PLOT_CONTAINER_OPTIONS","__extends","container","options","_super","_this","document","getElementById","getDefaultOptions","createG2","bindEvents","Plot","renderer","xAxis","nice","label","autoRotate","autoHide","type","cfg","minGap","yAxis","animation","width","height","defaultInteractions","chart","autoFit","getChartSize","localRefresh","setAttribute","chartSize","on","e","emit","clear","data","animate","views","execAdaptor","render","bindSizeSensor","updateOption","condition","status","elements","ele","getData","setState","stateObjects","element","states","getStates","state","push","geometry","update","changeSize","annotations","view","incoming","controller","getController","current","getComponents","map","co","extra","i","annotation","findIndex","item","id","splice","length","forEach","find","unbindSizeSensor","destroy","off","removeAttribute","adaptor","getSchemaAdaptor","padding","appendPadding","forceFit","unbind","triggerResize","undefined"],"sources":["/home/iam/Documents/network/node_modules/@antv/g2plot/src/core/plot.ts"],"sourcesContent":["import EE from '@antv/event-emitter';\nimport { Chart, Element, Event, View } from '@antv/g2';\nimport { each } from '@antv/util';\nimport { bind } from 'size-sensor';\nimport { Annotation, Options, Size, StateCondition, StateName, StateObject } from '../types';\nimport { deepAssign, getAllElementsRecursively, getContainerSize, pick } from '../utils';\nimport { Adaptor } from './adaptor';\n\n/** 单独 pick 出来的用于基类的类型定义 */\nexport type PickOptions = Pick<\n  Options,\n  | 'width'\n  | 'height'\n  | 'padding'\n  | 'appendPadding'\n  | 'renderer'\n  | 'pixelRatio'\n  | 'autoFit'\n  | 'syncViewPadding'\n  | 'supportCSSTransform'\n  | 'limitInPlot'\n  | 'locale'\n  | 'defaultInteractions'\n>;\n\nconst SOURCE_ATTRIBUTE_NAME = 'data-chart-source-type';\n\n/** plot 图表容器的配置 */\nexport const PLOT_CONTAINER_OPTIONS = [\n  'padding',\n  'appendPadding',\n  'renderer',\n  'pixelRatio',\n  'syncViewPadding',\n  'supportCSSTransform',\n  'limitInPlot',\n];\n\n/**\n * 所有 plot 的基类\n */\nexport abstract class Plot<O extends PickOptions> extends EE {\n  /**\n   * 获取默认的 options 配置项\n   * 每个组件都可以复写\n   */\n  static getDefaultOptions(): any {\n    return {\n      renderer: 'canvas',\n      xAxis: {\n        nice: true,\n        label: {\n          autoRotate: false,\n          autoHide: { type: 'equidistance', cfg: { minGap: 6 } },\n        },\n      },\n      yAxis: {\n        nice: true,\n        label: {\n          autoHide: true,\n          autoRotate: false,\n        },\n      },\n      animation: true,\n    };\n  }\n\n  /** plot 类型名称 */\n  public abstract readonly type: string;\n  /** plot 的 schema 配置 */\n  public options: O;\n  /** plot 绘制的 dom */\n  public readonly container: HTMLElement;\n  /** G2 chart 实例 */\n  public chart: Chart;\n  /** resizer unbind  */\n  private unbind: () => void;\n\n  constructor(container: string | HTMLElement, options: O) {\n    super();\n    this.container = typeof container === 'string' ? document.getElementById(container) : container;\n\n    this.options = deepAssign({}, this.getDefaultOptions(), options);\n\n    this.createG2();\n\n    this.bindEvents();\n  }\n\n  /**\n   * 创建 G2 实例\n   */\n  private createG2() {\n    const { width, height, defaultInteractions } = this.options;\n\n    this.chart = new Chart({\n      container: this.container,\n      autoFit: false, // G2Plot 使用 size-sensor 进行 autoFit\n      ...this.getChartSize(width, height),\n      localRefresh: false, // 默认关闭，目前 G 还有一些位置问题，难以排查！\n      ...pick(this.options, PLOT_CONTAINER_OPTIONS),\n      defaultInteractions,\n    });\n\n    // 给容器增加标识，知道图表的来源区别于 G2\n    this.container.setAttribute(SOURCE_ATTRIBUTE_NAME, 'G2Plot');\n  }\n\n  /**\n   * 计算默认的 chart 大小。逻辑简化：如果存在 width 或 height，则直接使用，否则使用容器大小\n   * @param width\n   * @param height\n   */\n  private getChartSize(width: number, height: number): Size {\n    const chartSize = getContainerSize(this.container);\n    return { width: width || chartSize.width || 400, height: height || chartSize.height || 400 };\n  }\n\n  /**\n   * 绑定代理所有 G2 的事件\n   */\n  private bindEvents() {\n    if (this.chart) {\n      this.chart.on('*', (e: Event) => {\n        if (e?.type) {\n          this.emit(e.type, e);\n        }\n      });\n    }\n  }\n\n  /**\n   * 获取默认的 options 配置项\n   * 每个组件都可以复写\n   */\n  protected getDefaultOptions(): any {\n    return Plot.getDefaultOptions();\n  }\n\n  /**\n   * 每个组件有自己的 schema adaptor\n   */\n  protected abstract getSchemaAdaptor(): Adaptor<O>;\n\n  /**\n   * 绘制\n   */\n  public render() {\n    // 暴力处理，先清空再渲染，需要 G2 层自行做好更新渲染\n    this.chart.clear();\n    // 因为子 view 会继承父 view 的 options 配置（包括 legend，所以会导致 legend 重复创建）\n    // 所以这里给 chart 实例的 options 配置清空\n    // 最好的解法是在 G2 view.clear 方法的时候，重置 options 配置。或者提供方法去 resetOptions\n    // #1684 理论上在多 view 图形上，只要存在 custom legend，都存在类似问题（子弹图、双轴图）\n    // @ts-ignore\n    this.chart.options = {\n      data: [],\n      animate: true,\n    };\n    this.chart.views = []; // 删除已有的 views\n    // 执行 adaptor\n    this.execAdaptor();\n    // 渲染\n    this.chart.render();\n    // 绑定\n    this.bindSizeSensor();\n  }\n\n  /**\n   * 更新: 更新配置且重新渲染\n   * @param options\n   */\n  public update(options: Partial<O>) {\n    this.updateOption(options);\n    this.render();\n  }\n\n  /**\n   * 更新配置\n   * @param options\n   */\n  protected updateOption(options: Partial<O>) {\n    this.options = deepAssign({}, this.options, options);\n  }\n\n  /**\n   * 设置状态\n   * @param type 状态类型，支持 'active' | 'inactive' | 'selected' 三种\n   * @param conditions 条件，支持数组\n   * @param status 是否激活，默认 true\n   */\n  public setState(type: StateName, condition: StateCondition, status: boolean = true) {\n    const elements = getAllElementsRecursively(this.chart);\n\n    each(elements, (ele: Element) => {\n      if (condition(ele.getData())) {\n        ele.setState(type, status);\n      }\n    });\n  }\n\n  /**\n   * 获取状态\n   */\n  public getStates(): StateObject[] {\n    const elements = getAllElementsRecursively(this.chart);\n\n    const stateObjects: StateObject[] = [];\n    each(elements, (element: Element) => {\n      const data = element.getData();\n      const states = element.getStates();\n      each(states, (state) => {\n        stateObjects.push({ data, state, geometry: element.geometry, element });\n      });\n    });\n\n    return stateObjects;\n  }\n\n  /**\n   * 更新数据\n   * @override\n   * @param options\n   */\n  public changeData(data: any) {\n    // @ts-ignore\n    this.update({ data });\n    // TODO: 临时方案，最好使用下面的方式去更新数据\n    // this.chart.changeData(data);\n  }\n\n  /**\n   * 修改画布大小\n   * @param width\n   * @param height\n   */\n  public changeSize(width: number, height: number) {\n    this.chart.changeSize(width, height);\n  }\n\n  /**\n   * 增加图表标注。通过 id 标识，如果匹配到，就做更新\n   */\n  public addAnnotations(annotations: Annotation[], view?: View): void {\n    view = view ? view : this.chart;\n    const incoming = [...annotations];\n    const controller = view.getController('annotation');\n    const current = controller.getComponents().map((co) => co.extra);\n\n    controller.clear(true);\n    for (let i = 0; i < current.length; i++) {\n      let annotation = current[i];\n\n      const findIndex = incoming.findIndex((item) => item.id && item.id === annotation.id);\n      if (findIndex !== -1) {\n        annotation = deepAssign({}, annotation, incoming[findIndex]);\n        incoming.splice(findIndex, 1);\n      }\n      controller.annotation(annotation);\n    }\n\n    incoming.forEach((annotation) => controller.annotation(annotation));\n    view.render(true);\n  }\n\n  /**\n   * 删除图表标注。通过 id 标识，如果匹配到，就做删除\n   */\n  public removeAnnotations(annotations: Array<{ id: string } & Partial<Annotation>>): void {\n    const controller = this.chart.getController('annotation');\n    const current = controller.getComponents().map((co) => co.extra);\n\n    controller.clear(true);\n    for (let i = 0; i < current.length; i++) {\n      const annotation = current[i];\n\n      if (!annotations.find((item) => item.id && item.id === annotation.id)) {\n        controller.annotation(annotation);\n      }\n    }\n\n    this.chart.render(true);\n  }\n  /**\n   * 销毁\n   */\n  public destroy() {\n    // 取消 size-sensor 的绑定\n    this.unbindSizeSensor();\n    // G2 的销毁\n    this.chart.destroy();\n    // 清空已经绑定的事件\n    this.off();\n\n    this.container.removeAttribute(SOURCE_ATTRIBUTE_NAME);\n  }\n\n  /**\n   * 执行 adaptor 操作\n   */\n  protected execAdaptor() {\n    const adaptor = this.getSchemaAdaptor();\n\n    const { padding, appendPadding } = this.options;\n    // 更新 padding\n    this.chart.padding = padding;\n    // 更新 appendPadding\n    this.chart.appendPadding = appendPadding;\n\n    // 转化成 G2 API\n    adaptor({\n      chart: this.chart,\n      options: this.options,\n    });\n  }\n\n  /**\n   * 当图表容器大小变化的时候，执行的函数\n   */\n  protected triggerResize() {\n    this.chart.forceFit();\n  }\n\n  /**\n   * 绑定 dom 容器大小变化的事件\n   */\n  private bindSizeSensor() {\n    if (this.unbind) {\n      return;\n    }\n\n    const { autoFit = true } = this.options;\n    if (autoFit) {\n      this.unbind = bind(this.container, () => {\n        // 获取最新的宽高信息\n        const { width, height } = getContainerSize(this.container);\n\n        // 主要是防止绑定的时候触发 resize 回调\n        if (width !== this.chart.width || height !== this.chart.height) {\n          this.triggerResize();\n        }\n      });\n    }\n  }\n\n  /**\n   * 取消绑定\n   */\n  private unbindSizeSensor() {\n    if (this.unbind) {\n      this.unbind();\n      this.unbind = undefined;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}