{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLayoutByName = exports.unRegisterLayout = exports.registerLayout = void 0;\nvar base_1 = require(\"../layout/base\");\nvar util_1 = require(\"../util\");\nvar map = new Map();\nvar registerLayout = function registerLayout(name, layoutOverride) {\n  if (map.get(name)) {\n    console.warn(\"The layout with the name \".concat(name, \" exists already, it will be overridden\"));\n  }\n  if ((0, util_1.isObject)(layoutOverride)) {\n    // tslint:disable-next-line: max-classes-per-file\n    var GLayout = /** @class */function (_super) {\n      __extends(GLayout, _super);\n      function GLayout(cfg) {\n        var _this = _super.call(this) || this;\n        var self = _this;\n        var props = {};\n        var defaultCfg = self.getDefaultCfg();\n        Object.assign(props, defaultCfg, layoutOverride, cfg);\n        Object.keys(props).forEach(function (key) {\n          var value = props[key];\n          self[key] = value;\n        });\n        return _this;\n      }\n      return GLayout;\n    }(base_1.Base);\n    map.set(name, GLayout);\n  } else {\n    map.set(name, layoutOverride);\n  }\n  return map.get(name);\n};\nexports.registerLayout = registerLayout;\nvar unRegisterLayout = function unRegisterLayout(name) {\n  if (map.has(name)) {\n    map.delete(name);\n  }\n};\nexports.unRegisterLayout = unRegisterLayout;\nvar getLayoutByName = function getLayoutByName(name) {\n  if (map.has(name)) {\n    return map.get(name);\n  }\n  return null;\n};\nexports.getLayoutByName = getLayoutByName;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA,IAAMA,GAAG,GAAqB,IAAIC,GAAG,EAAE;AAEhC,IAAMC,cAAc,GAAG,SAAjBA,cAAc,CAAIC,IAAY,EAAEC,cAAmB;EAC9D,IAAIJ,GAAG,CAACK,GAAG,CAACF,IAAI,CAAC,EAAE;IACjBG,OAAO,CAACC,IAAI,CAAC,mCAA4BJ,IAAI,2CAAwC,CAAC;;EAExF,IAAI,mBAAQ,EAACC,cAAc,CAAC,EAAE;IAC5B;IACA;MAAsBI;MACpB,iBAAYC,GAAQ;QAApB,YACEC,iBAAO;QACP,IAAMC,IAAI,GAAGC,KAAW;QACxB,IAAMC,KAAK,GAAQ,EAAE;QACrB,IAAMC,UAAU,GAAGH,IAAI,CAACI,aAAa,EAAE;QACvCC,MAAM,CAACC,MAAM,CAACJ,KAAK,EAAEC,UAAU,EAAEV,cAAc,EAAEK,GAAc,CAAC;QAChEO,MAAM,CAACE,IAAI,CAACL,KAAK,CAAC,CAACM,OAAO,CAAC,UAACC,GAAW;UACrC,IAAMC,KAAK,GAAGR,KAAK,CAACO,GAAG,CAAC;UACxBT,IAAI,CAACS,GAAG,CAAC,GAAGC,KAAK;QACnB,CAAC,CAAC;;MACJ;MACF,cAAC;IAAD,CAAC,CAZqBC,WAAI;IAa1BtB,GAAG,CAACuB,GAAG,CAACpB,IAAI,EAAEqB,OAAO,CAAC;GACvB,MAAM;IACLxB,GAAG,CAACuB,GAAG,CAACpB,IAAI,EAAEC,cAAc,CAAC;;EAE/B,OAAOJ,GAAG,CAACK,GAAG,CAACF,IAAI,CAAC;AACtB,CAAC;AAxBYsB,sBAAc;AA0BpB,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAIvB,IAAY;EAC3C,IAAIH,GAAG,CAAC2B,GAAG,CAACxB,IAAI,CAAC,EAAE;IACjBH,GAAG,CAAC4B,MAAM,CAACzB,IAAI,CAAC;;AAEpB,CAAC;AAJYsB,wBAAgB;AAMtB,IAAMI,eAAe,GAAG,SAAlBA,eAAe,CAAI1B,IAAY;EAC1C,IAAIH,GAAG,CAAC2B,GAAG,CAACxB,IAAI,CAAC,EAAE;IACjB,OAAOH,GAAG,CAACK,GAAG,CAACF,IAAI,CAAC;;EAEtB,OAAO,IAAI;AACb,CAAC;AALYsB,uBAAe","names":["map","Map","registerLayout","name","layoutOverride","get","console","warn","__extends","cfg","_super","self","_this","props","defaultCfg","getDefaultCfg","Object","assign","keys","forEach","key","value","base_1","set","GLayout","exports","unRegisterLayout","has","delete","getLayoutByName"],"sources":["/home/iam/Documents/network/node_modules/@antv/layout/src/registy/index.ts"],"sourcesContent":["import { Base } from \"../layout/base\";\nimport { isObject } from \"../util\";\n\nconst map: Map<string, any> = new Map();\n\nexport const registerLayout = (name: string, layoutOverride: any) => {\n  if (map.get(name)) {\n    console.warn(`The layout with the name ${name} exists already, it will be overridden`);\n  }\n  if (isObject(layoutOverride)) {\n    // tslint:disable-next-line: max-classes-per-file\n    class GLayout extends Base {\n      constructor(cfg: any) {\n        super();\n        const self = this as any;\n        const props: any = {};\n        const defaultCfg = self.getDefaultCfg();\n        Object.assign(props, defaultCfg, layoutOverride, cfg as unknown);\n        Object.keys(props).forEach((key: string) => {\n          const value = props[key];\n          self[key] = value;\n        });\n      }\n    }\n    map.set(name, GLayout);\n  } else {\n    map.set(name, layoutOverride);\n  }\n  return map.get(name);\n};\n\nexport const unRegisterLayout = (name: string) => {\n  if (map.has(name)) {\n    map.delete(name);\n  }\n};\n\nexport const getLayoutByName = (name: string) => {\n  if (map.has(name)) {\n    return map.get(name);\n  }\n  return null;\n};\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}