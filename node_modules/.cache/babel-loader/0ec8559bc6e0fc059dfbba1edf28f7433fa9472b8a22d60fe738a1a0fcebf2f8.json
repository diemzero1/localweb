{"ast":null,"code":"import { __assign, __awaiter, __extends, __generator, __read, __spreadArray, __values } from \"tslib\";\nimport { getAdjust as getAdjustClass } from '@antv/adjust';\nimport { getAttribute as getAttributeClass } from '@antv/attr';\nimport { clone, deepMix, each, flatten, get, isArray, isEmpty, isEqual, isFunction, isNil, isNumber, isObject, isPlainObject, isString, set } from '@antv/util';\nimport { doGroupAppearAnimate, getDefaultAnimateCfg } from '../animate';\nimport Base from '../base';\nimport { FIELD_ORIGIN, GEOMETRY_LIFE_CIRCLE, GROUP_ATTRS } from '../constant';\nimport { uniq } from '../util/helper';\nimport Element from './element';\nimport { getGeometryLabel } from './label';\nimport { getShapeFactory } from './shape/base';\nimport { group } from './util/group-data';\nimport { isModelChange } from './util/is-model-change';\nimport { parseFields } from './util/parse-fields';\nimport { diff } from './util/diff';\nimport { inferScaleType } from '../util/scale';\nimport { getXDimensionLength } from '../util/coordinate';\n/**\n * Geometry 几何标记基类，主要负责数据到图形属性的映射以及绘制逻辑。\n */\nvar Geometry = /** @class */function (_super) {\n  __extends(Geometry, _super);\n  /**\n   * 创建 Geometry 实例。\n   * @param cfg\n   */\n  function Geometry(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /** Geometry 几何标记类型。 */\n    _this.type = 'base';\n    // 内部产生的属性\n    /** Attribute map  */\n    _this.attributes = {};\n    /** Element map */\n    _this.elements = [];\n    /** 使用 key-value 结构存储 Element，key 为每个 Element 实例对应的唯一 ID */\n    _this.elementsMap = {};\n    /** animate 配置项 */\n    _this.animateOption = true;\n    /** 图形属性映射配置 */\n    _this.attributeOption = {};\n    /** 存储上一次渲染时的 element 映射表，用于更新逻辑 */\n    _this.lastElementsMap = {};\n    /** 是否生成多个点来绘制图形。 */\n    _this.generatePoints = false;\n    /** 存储发生图形属性映射前的数据 */\n    _this.beforeMappingData = null;\n    _this.adjusts = {};\n    _this.idFields = [];\n    _this.hasSorted = false;\n    _this.isCoordinateChanged = false;\n    var container = cfg.container,\n      labelsContainer = cfg.labelsContainer,\n      coordinate = cfg.coordinate,\n      data = cfg.data,\n      _a = cfg.sortable,\n      sortable = _a === void 0 ? false : _a,\n      _b = cfg.visible,\n      visible = _b === void 0 ? true : _b,\n      theme = cfg.theme,\n      _c = cfg.scales,\n      scales = _c === void 0 ? {} : _c,\n      _d = cfg.scaleDefs,\n      scaleDefs = _d === void 0 ? {} : _d,\n      // 柱状图间隔与宽度相关配置\n      intervalPadding = cfg.intervalPadding,\n      dodgePadding = cfg.dodgePadding,\n      maxColumnWidth = cfg.maxColumnWidth,\n      minColumnWidth = cfg.minColumnWidth,\n      columnWidthRatio = cfg.columnWidthRatio,\n      roseWidthRatio = cfg.roseWidthRatio,\n      multiplePieWidthRatio = cfg.multiplePieWidthRatio,\n      zIndexReversed = cfg.zIndexReversed,\n      sortZIndex = cfg.sortZIndex,\n      useDeferredLabel = cfg.useDeferredLabel;\n    _this.container = container;\n    _this.labelsContainer = labelsContainer;\n    _this.coordinate = coordinate;\n    _this.data = data;\n    _this.sortable = sortable;\n    _this.visible = visible;\n    _this.userTheme = theme;\n    _this.scales = scales;\n    _this.scaleDefs = scaleDefs;\n    // 柱状图间隔与宽度相关配置\n    _this.intervalPadding = intervalPadding;\n    _this.dodgePadding = dodgePadding;\n    _this.maxColumnWidth = maxColumnWidth;\n    _this.minColumnWidth = minColumnWidth;\n    _this.columnWidthRatio = columnWidthRatio;\n    _this.roseWidthRatio = roseWidthRatio;\n    _this.multiplePieWidthRatio = multiplePieWidthRatio;\n    _this.zIndexReversed = zIndexReversed;\n    _this.sortZIndex = sortZIndex;\n    _this.useDeferredLabel = useDeferredLabel ? typeof useDeferredLabel === 'number' ? useDeferredLabel : Infinity : null;\n    return _this;\n  }\n  /**\n   * 配置 position 通道映射规则。\n   *\n   * @example\n   * ```typescript\n   * // 数据结构: [{ x: 'A', y: 10, color: 'red' }]\n   * geometry.position('x*y');\n   * geometry.position([ 'x', 'y' ]);\n   * geometry.position({\n   *   fields: [ 'x', 'y' ],\n   * });\n   * ```\n   *\n   * @param cfg 映射规则\n   * @returns\n   */\n  Geometry.prototype.position = function (cfg) {\n    var positionCfg = cfg;\n    if (!isPlainObject(cfg)) {\n      // 字符串字段或者数组字段\n      positionCfg = {\n        fields: parseFields(cfg)\n      };\n    }\n    var fields = get(positionCfg, 'fields');\n    if (fields.length === 1) {\n      // 默认填充一维 1*xx\n      fields.unshift('1');\n      set(positionCfg, 'fields', fields);\n    }\n    set(this.attributeOption, 'position', positionCfg);\n    return this;\n  };\n  Geometry.prototype.color = function (field, cfg) {\n    this.createAttrOption('color', field, cfg);\n    return this;\n  };\n  Geometry.prototype.shape = function (field, cfg) {\n    this.createAttrOption('shape', field, cfg);\n    return this;\n  };\n  Geometry.prototype.size = function (field, cfg) {\n    this.createAttrOption('size', field, cfg);\n    return this;\n  };\n  /**\n   * 设置数据调整方式。G2 目前内置了四种类型：\n   * 1. dodge\n   * 2. stack\n   * 3. symmetric\n   * 4. jitter\n   *\n   *\n   * **Tip**\n   * + 对于 'dodge' 类型，可以额外进行如下属性的配置:\n   * ```typescript\n   * geometry.adjust('dodge', {\n   *   marginRatio: 0, // 取 0 到 1 范围的值（相对于每个柱子宽度），用于控制一个分组中柱子之间的间距\n   *   dodgeBy: 'x', // 该属性只对 'dodge' 类型生效，声明以哪个数据字段为分组依据\n   * });\n   * ```\n   *\n   * + 对于 'stack' 类型，可以额外进行如下属性的配置:\n   * ```typescript\n   * geometry.adjust('stack', {\n   *   reverseOrder: false, // 用于控制是否对数据进行反序操作\n   * });\n   * ```\n   *\n   * @example\n   * ```typescript\n   * geometry.adjust('stack');\n   *\n   * geometry.adjust({\n   *   type: 'stack',\n   *   reverseOrder: false,\n   * });\n   *\n   * // 组合使用 adjust\n   * geometry.adjust([ 'stack', 'dodge' ]);\n   *\n   * geometry.adjust([\n   *   { type: 'stack' },\n   *   { type: 'dodge', dodgeBy: 'x' },\n   * ]);\n   * ```\n   *\n   * @param adjustCfg 数据调整配置\n   * @returns\n   */\n  Geometry.prototype.adjust = function (adjustCfg) {\n    var adjusts = adjustCfg;\n    if (isString(adjustCfg) || isPlainObject(adjustCfg)) {\n      adjusts = [adjustCfg];\n    }\n    each(adjusts, function (adjust, index) {\n      if (!isObject(adjust)) {\n        adjusts[index] = {\n          type: adjust\n        };\n      }\n    });\n    this.adjustOption = adjusts;\n    return this;\n  };\n  Geometry.prototype.style = function (field, styleFunc) {\n    if (isString(field)) {\n      var fields = parseFields(field);\n      this.styleOption = {\n        fields: fields,\n        callback: styleFunc\n      };\n    } else {\n      var _a = field,\n        fields = _a.fields,\n        callback = _a.callback,\n        cfg = _a.cfg;\n      if (fields || callback || cfg) {\n        this.styleOption = field;\n      } else {\n        this.styleOption = {\n          cfg: field\n        };\n      }\n    }\n    return this;\n  };\n  Geometry.prototype.tooltip = function (field, cfg) {\n    if (isString(field)) {\n      var fields = parseFields(field);\n      this.tooltipOption = {\n        fields: fields,\n        callback: cfg\n      };\n    } else {\n      this.tooltipOption = field;\n    }\n    return this;\n  };\n  /**\n   * Geometry 动画配置。\n   *\n   * + `animate(false)` 关闭动画\n   * + `animate(true)` 开启动画，默认开启。\n   *\n   * 我们将动画分为四个场景：\n   * 1. appear: 图表第一次加载时的入场动画；\n   * 2. enter: 图表绘制完成，发生更新后，产生的新图形的进场动画；\n   * 3. update: 图表绘制完成，数据发生变更后，有状态变更的图形的更新动画；\n   * 4. leave: 图表绘制完成，数据发生变更后，被销毁图形的销毁动画。\n   *\n   * @example\n   * ```typescript\n   * animate({\n   *   enter: {\n   *     duration: 1000, // enter 动画执行时间\n   *   },\n   *   leave: false, // 关闭 leave 销毁动画\n   * });\n   * ```\n   *\n   * @param cfg 动画配置\n   * @returns\n   */\n  Geometry.prototype.animate = function (cfg) {\n    this.animateOption = cfg;\n    return this;\n  };\n  Geometry.prototype.label = function (field, secondParam, thirdParam) {\n    if (isString(field)) {\n      var labelOption = {};\n      var fields = parseFields(field);\n      labelOption.fields = fields;\n      if (isFunction(secondParam)) {\n        labelOption.callback = secondParam;\n      } else if (isPlainObject(secondParam)) {\n        labelOption.cfg = secondParam;\n      }\n      if (thirdParam) {\n        labelOption.cfg = thirdParam;\n      }\n      this.labelOption = labelOption;\n    } else {\n      this.labelOption = field;\n    }\n    return this;\n  };\n  /**\n   * 设置状态对应的样式。\n   *\n   * @example\n   * ```ts\n   * chart.interval().state({\n   *   selected: {\n   *     animate: { duration: 100, easing: 'easeLinear' },\n   *     style: {\n   *       lineWidth: 2,\n   *       stroke: '#000',\n   *     },\n   *   },\n   * });\n   * ```\n   *\n   * 如果图形 shape 是由多个 shape 组成，即为一个 G.Group 对象，那么针对 group 中的每个 shape，我们需要使用下列方式进行状态样式设置：\n   * 如果我们为 group 中的每个 shape 设置了 'name' 属性(shape.set('name', 'xx'))，则以 'name' 作为 key，否则默认以索引值（即 shape 的 添加顺序）为 key。\n   *\n   * ```ts\n   * chart.interval().shape('groupShape').state({\n   *   selected: {\n   *     style: {\n   *       0: { lineWidth: 2 },\n   *       1: { fillOpacity: 1 },\n   *     }\n   *   }\n   * });\n   * ```\n   *\n   * @param cfg 状态样式\n   */\n  Geometry.prototype.state = function (cfg) {\n    this.stateOption = cfg;\n    return this;\n  };\n  /**\n   * 用于向 shape 中传入自定义的数据。目前可能仅仅可能用于在自定义 shape 的时候，像自定义 shape 中传入自定义的数据，方便实现自定义 shape 的配置能力。\n   *\n   * @example\n   * ```ts\n   * chart.interval().customInfo({ yourData: 'hello, g2!' });\n   * ```\n   *\n   * 然后在自定义 shape 的时候，可以拿到这个信息。\n   *\n   * ```ts\n   * registerShape('interval', 'your-shape', {\n   *   draw(shapeInfo, container) {\n   *     const { customInfo } = shapeInfo;\n   *     console.log(customInfo); // will log { yourData: 'hello, g2!' }.\n   *   }\n   * });\n   * ```\n   *\n   * @param cfg\n   */\n  Geometry.prototype.customInfo = function (cfg) {\n    this.customOption = cfg;\n    return this;\n  };\n  /**\n   * 初始化 Geomtry 实例：\n   * 创建 [[Attribute]] and [[Scale]] 实例，进行数据处理，包括分组、数值化以及数据调整。\n   */\n  Geometry.prototype.init = function (cfg) {\n    if (cfg === void 0) {\n      cfg = {};\n    }\n    this.setCfg(cfg);\n    this.initAttributes(); // 创建图形属性\n    // 数据加工：分组 -> 数字化 -> adjust\n    this.processData(this.data);\n    // 调整 scale\n    this.adjustScale();\n  };\n  /**\n   * Geometry 更新。\n   * @param [cfg] 更新的配置\n   */\n  Geometry.prototype.update = function (cfg) {\n    if (cfg === void 0) {\n      cfg = {};\n    }\n    var data = cfg.data,\n      isDataChanged = cfg.isDataChanged,\n      isCoordinateChanged = cfg.isCoordinateChanged;\n    var _a = this,\n      attributeOption = _a.attributeOption,\n      lastAttributeOption = _a.lastAttributeOption;\n    if (!isEqual(attributeOption, lastAttributeOption)) {\n      // 映射发生改变，则重新创建图形属性\n      this.init(cfg);\n    } else if (data && (isDataChanged || !isEqual(data, this.data))) {\n      // 数据发生变化\n      this.setCfg(cfg);\n      this.initAttributes(); // 创建图形属性\n      this.processData(data); // 数据加工：分组 -> 数字化 -> adjust\n    } else {\n      // 有可能 coordinate 变化\n      this.setCfg(cfg);\n    }\n    // 调整 scale\n    this.adjustScale();\n    this.isCoordinateChanged = isCoordinateChanged;\n  };\n  /**\n   * 将原始数据映射至图形空间，同时创建图形对象。\n   */\n  Geometry.prototype.paint = function (isUpdate) {\n    var _this = this;\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n    if (this.animateOption) {\n      this.animateOption = deepMix({}, getDefaultAnimateCfg(this.type, this.coordinate), this.animateOption);\n    }\n    this.defaultSize = undefined;\n    this.elementsMap = {};\n    this.elements = [];\n    var offscreenGroup = this.getOffscreenGroup();\n    offscreenGroup.clear();\n    var beforeMappingData = this.beforeMappingData;\n    var dataArray = this.beforeMapping(beforeMappingData);\n    this.dataArray = new Array(dataArray.length);\n    for (var i = 0; i < dataArray.length; i++) {\n      var data = dataArray[i];\n      this.dataArray[i] = this.mapping(data);\n    }\n    this.updateElements(this.dataArray, isUpdate);\n    this.lastElementsMap = this.elementsMap;\n    if (this.canDoGroupAnimation(isUpdate)) {\n      // 如果用户没有配置 appear.animation，就默认走整体动画\n      var container = this.container;\n      var type = this.type;\n      var coordinate = this.coordinate;\n      var animateCfg = get(this.animateOption, 'appear');\n      var yScale = this.getYScale();\n      var yMinPoint = coordinate.convert({\n        x: 0,\n        y: yScale.scale(this.getYMinValue())\n      });\n      doGroupAppearAnimate(container, animateCfg, type, coordinate, yMinPoint);\n    }\n    // 添加 label\n    if (this.labelOption) {\n      var deferred = this.useDeferredLabel;\n      var callback = function () {\n        return _this.renderLabels(flatten(_this.dataArray), isUpdate);\n      }.bind(this);\n      if (typeof deferred === 'number') {\n        // Use `requestIdleCallback` to render labels in idle time (like react fiber)\n        var timeout = typeof deferred === 'number' && deferred !== Infinity ? deferred : 0;\n        if (!window.requestIdleCallback) {\n          setTimeout(callback, timeout);\n        } else {\n          var options = timeout && timeout !== Infinity ? {\n            timeout: timeout\n          } : undefined;\n          window.requestIdleCallback(callback, options);\n        }\n      } else {\n        callback();\n      }\n    }\n    // 缓存，用于更新\n    this.lastAttributeOption = __assign({}, this.attributeOption);\n    if (this.visible === false) {\n      // 用户在初始化的时候声明 visible: false\n      this.changeVisible(false);\n    }\n  };\n  /**\n   * 清空当前 Geometry，配置项仍保留，但是内部创建的对象全部清空。\n   * @override\n   */\n  Geometry.prototype.clear = function () {\n    var _a = this,\n      container = _a.container,\n      geometryLabel = _a.geometryLabel,\n      offscreenGroup = _a.offscreenGroup;\n    if (container) {\n      container.clear();\n    }\n    if (geometryLabel) {\n      geometryLabel.clear();\n    }\n    if (offscreenGroup) {\n      offscreenGroup.clear();\n    }\n    // 属性恢复至出厂状态\n    this.scaleDefs = undefined;\n    this.attributes = {};\n    this.scales = {};\n    this.elementsMap = {};\n    this.lastElementsMap = {};\n    this.elements = [];\n    this.adjusts = {};\n    this.dataArray = null;\n    this.beforeMappingData = null;\n    this.lastAttributeOption = undefined;\n    this.defaultSize = undefined;\n    this.idFields = [];\n    this.groupScales = undefined;\n    this.hasSorted = false;\n    this.isCoordinateChanged = false;\n  };\n  /**\n   * 销毁 Geometry 实例。\n   */\n  Geometry.prototype.destroy = function () {\n    this.clear();\n    var container = this.container;\n    container.remove(true);\n    if (this.offscreenGroup) {\n      this.offscreenGroup.remove(true);\n      this.offscreenGroup = null;\n    }\n    if (this.geometryLabel) {\n      this.geometryLabel.destroy();\n      this.geometryLabel = null;\n    }\n    this.theme = undefined;\n    this.shapeFactory = undefined;\n    _super.prototype.destroy.call(this);\n  };\n  /**\n   * 获取决定分组的图形属性对应的 scale 实例。\n   * @returns\n   */\n  Geometry.prototype.getGroupScales = function () {\n    return this.groupScales;\n  };\n  /**\n   * 根据名字获取图形属性实例。\n   */\n  Geometry.prototype.getAttribute = function (name) {\n    return this.attributes[name];\n  };\n  /** 获取 x 轴对应的 scale 实例。 */\n  Geometry.prototype.getXScale = function () {\n    return this.getAttribute('position').scales[0];\n  };\n  /** 获取 y 轴对应的 scale 实例。 */\n  Geometry.prototype.getYScale = function () {\n    return this.getAttribute('position').scales[1];\n  };\n  /**\n   * 获取决定分组的图形属性实例。\n   */\n  Geometry.prototype.getGroupAttributes = function () {\n    var rst = [];\n    each(this.attributes, function (attr) {\n      if (GROUP_ATTRS.includes(attr.type)) {\n        rst.push(attr);\n      }\n    });\n    return rst;\n  };\n  /** 获取图形属性默认的映射值。 */\n  Geometry.prototype.getDefaultValue = function (attrName) {\n    var value;\n    var attr = this.getAttribute(attrName);\n    if (attr && isEmpty(attr.scales)) {\n      // 获取映射至常量的值\n      value = attr.values[0];\n    }\n    return value;\n  };\n  /**\n   * 获取该数据发生图形映射后对应的 Attribute 图形空间数据。\n   * @param attr Attribute 图形属性实例。\n   * @param obj 需要进行映射的原始数据。\n   * @returns\n   */\n  Geometry.prototype.getAttributeValues = function (attr, obj) {\n    var params = [];\n    var scales = attr.scales;\n    for (var index = 0, length_1 = scales.length; index < length_1; index++) {\n      var scale = scales[index];\n      var field = scale.field;\n      if (scale.isIdentity) {\n        params.push(scale.values);\n      } else {\n        params.push(obj[field]);\n      }\n    }\n    return attr.mapping.apply(attr, __spreadArray([], __read(params), false));\n  };\n  /**\n   * 获取对应的 adjust 实例\n   * @param adjustType\n   * @returns\n   */\n  Geometry.prototype.getAdjust = function (adjustType) {\n    return this.adjusts[adjustType];\n  };\n  /**\n   * 获得 coordinate 实例\n   * @returns\n   */\n  Geometry.prototype.getCoordinate = function () {\n    return this.coordinate;\n  };\n  Geometry.prototype.getData = function () {\n    return this.data;\n  };\n  /**\n   * 获取 shape 对应的 marker 样式。\n   * @param shapeName shape 具体名字\n   * @param cfg marker 信息\n   * @returns\n   */\n  Geometry.prototype.getShapeMarker = function (shapeName, cfg) {\n    var shapeFactory = this.getShapeFactory();\n    return shapeFactory.getMarker(shapeName, cfg);\n  };\n  /**\n   * 根据一定的规则查找 Geometry 的 Elements。\n   *\n   * ```typescript\n   * getElementsBy((element) => {\n   *   const data = element.getData();\n   *\n   *   return data.a === 'a';\n   * });\n   * ```\n   *\n   * @param condition 定义查找规则的回调函数。\n   * @returns\n   */\n  Geometry.prototype.getElementsBy = function (condition) {\n    return this.elements.filter(function (element) {\n      return condition(element);\n    });\n  };\n  /**\n   * 获取 Geometry 的所有 Elements。\n   *\n   * ```typescript\n   * getElements();\n   * ```\n   */\n  Geometry.prototype.getElements = function () {\n    return this.elements;\n  };\n  /**\n   * 获取数据对应的唯一 id。\n   * @param data Element 对应的绘制数据\n   * @returns\n   */\n  Geometry.prototype.getElementId = function (data) {\n    data = isArray(data) ? data[0] : data;\n    var originData = data[FIELD_ORIGIN];\n    // 如果用户声明了使用哪些字段作为 id 值\n    if (this.idFields.length) {\n      var elementId = originData[this.idFields[0]];\n      for (var index = 1; index < this.idFields.length; index++) {\n        elementId += '-' + originData[this.idFields[index]];\n      }\n      return elementId;\n    }\n    var type = this.type;\n    var xScale = this.getXScale();\n    var yScale = this.getYScale();\n    var xField = xScale.field || 'x';\n    var yField = yScale.field || 'y';\n    var yVal = originData[yField];\n    var xVal;\n    if (xScale.type === 'identity') {\n      xVal = xScale.values[0];\n    } else {\n      xVal = originData[xField];\n    }\n    var id;\n    if (type === 'interval' || type === 'schema') {\n      id = \"\".concat(xVal);\n    } else if (type === 'line' || type === 'area' || type === 'path') {\n      id = type;\n    } else {\n      id = \"\".concat(xVal, \"-\").concat(yVal);\n    }\n    var groupScales = this.groupScales;\n    for (var index = 0, length_2 = groupScales.length; index < length_2; index++) {\n      var groupScale = groupScales[index];\n      var field = groupScale.field;\n      id = \"\".concat(id, \"-\").concat(originData[field]);\n    }\n    // 用户在进行 dodge 类型的 adjust 调整的时候设置了 dodgeBy 属性\n    var dodgeAdjust = this.getAdjust('dodge');\n    if (dodgeAdjust) {\n      var dodgeBy = dodgeAdjust.dodgeBy;\n      if (dodgeBy) {\n        id = \"\".concat(id, \"-\").concat(originData[dodgeBy]);\n      }\n    }\n    if (this.getAdjust('jitter')) {\n      id = \"\".concat(id, \"-\").concat(data.x, \"-\").concat(data.y);\n    }\n    return id;\n  };\n  /**\n   * 获取所有需要创建 scale 的字段名称。\n   */\n  Geometry.prototype.getScaleFields = function () {\n    var fields = [];\n    var tmpMap = new Map();\n    var _a = this,\n      attributeOption = _a.attributeOption,\n      labelOption = _a.labelOption,\n      tooltipOption = _a.tooltipOption;\n    // 获取图形属性上的 fields\n    for (var attributeType in attributeOption) {\n      if (attributeOption.hasOwnProperty(attributeType)) {\n        var eachOpt = attributeOption[attributeType];\n        if (eachOpt.fields) {\n          uniq(eachOpt.fields, fields, tmpMap);\n        } else if (eachOpt.values) {\n          // 考虑 size(10), shape('circle') 等场景\n          uniq(eachOpt.values, fields, tmpMap);\n        }\n      }\n    }\n    // 获取 label 上的字段\n    if (labelOption && labelOption.fields) {\n      uniq(labelOption.fields, fields, tmpMap);\n    }\n    // 获取 tooltip 上的字段\n    if (isObject(tooltipOption) && tooltipOption.fields) {\n      uniq(tooltipOption.fields, fields, tmpMap);\n    }\n    return fields;\n  };\n  /**\n   * 显示或者隐藏 geometry。\n   * @param visible\n   */\n  Geometry.prototype.changeVisible = function (visible) {\n    _super.prototype.changeVisible.call(this, visible);\n    var elements = this.elements;\n    for (var index = 0, length_3 = elements.length; index < length_3; index++) {\n      var element = elements[index];\n      element.changeVisible(visible);\n    }\n    if (visible) {\n      if (this.container) {\n        this.container.show();\n      }\n      if (this.labelsContainer) {\n        this.labelsContainer.show();\n      }\n    } else {\n      if (this.container) {\n        this.container.hide();\n      }\n      if (this.labelsContainer) {\n        this.labelsContainer.hide();\n      }\n    }\n  };\n  /**\n   * 获得所有的字段\n   */\n  Geometry.prototype.getFields = function () {\n    var uniqMap = new Map();\n    var fields = [];\n    Object.values(this.attributeOption).forEach(function (cfg) {\n      var fs = (cfg === null || cfg === void 0 ? void 0 : cfg.fields) || [];\n      fs.forEach(function (f) {\n        if (!uniqMap.has(f)) {\n          fields.push(f);\n        }\n        uniqMap.set(f, true);\n      });\n    }, []);\n    return fields;\n  };\n  /**\n   * 获取当前配置中的所有分组 & 分类的字段。\n   * @return fields string[]\n   */\n  Geometry.prototype.getGroupFields = function () {\n    var groupFields = [];\n    var tmpMap = new Map(); // 用于去重过滤\n    for (var index = 0, length_4 = GROUP_ATTRS.length; index < length_4; index++) {\n      var attributeName = GROUP_ATTRS[index];\n      var cfg = this.attributeOption[attributeName];\n      if (cfg && cfg.fields) {\n        uniq(cfg.fields, groupFields, tmpMap);\n      }\n    }\n    return groupFields;\n  };\n  /**\n   * 获得图形的 x y 字段。\n   */\n  Geometry.prototype.getXYFields = function () {\n    var _a = __read(this.attributeOption.position.fields, 2),\n      x = _a[0],\n      y = _a[1];\n    return [x, y];\n  };\n  /**\n   * x 字段\n   * @returns\n   */\n  Geometry.prototype.getXField = function () {\n    return get(this.getXYFields(), [0]);\n  };\n  /**\n   * y 字段\n   * @returns\n   */\n  Geometry.prototype.getYField = function () {\n    return get(this.getXYFields(), [1]);\n  };\n  /**\n   * 获取该 Geometry 下所有生成的 shapes。\n   * @returns shapes\n   */\n  Geometry.prototype.getShapes = function () {\n    return this.elements.map(function (element) {\n      return element.shape;\n    });\n  };\n  /**\n   * 获取虚拟 Group。\n   * @returns\n   */\n  Geometry.prototype.getOffscreenGroup = function () {\n    if (!this.offscreenGroup) {\n      var GroupCtor = this.container.getGroupBase(); // 获取分组的构造函数\n      this.offscreenGroup = new GroupCtor({});\n    }\n    return this.offscreenGroup;\n  };\n  // 对数据进行排序\n  Geometry.prototype.sort = function (mappingArray) {\n    if (!this.hasSorted) {\n      // 未发生过排序\n      var xScale_1 = this.getXScale();\n      var xField_1 = xScale_1.field;\n      for (var index = 0; index < mappingArray.length; index++) {\n        var itemArr = mappingArray[index];\n        itemArr.sort(function (obj1, obj2) {\n          return xScale_1.translate(obj1[FIELD_ORIGIN][xField_1]) - xScale_1.translate(obj2[FIELD_ORIGIN][xField_1]);\n        });\n      }\n    }\n    this.hasSorted = true;\n  };\n  /**\n   * 调整度量范围。主要针对发生层叠以及一些特殊需求的 Geometry，比如 Interval 下的柱状图 Y 轴默认从 0 开始。\n   */\n  Geometry.prototype.adjustScale = function () {\n    var yScale = this.getYScale();\n    // 如果数据发生过 stack adjust，需要调整下 yScale 的数据范围\n    if (yScale && this.getAdjust('stack')) {\n      this.updateStackRange(yScale, this.beforeMappingData);\n    }\n  };\n  /**\n   * 获取当前 Geometry 对应的 Shape 工厂实例。\n   */\n  Geometry.prototype.getShapeFactory = function () {\n    var shapeType = this.shapeType;\n    if (!getShapeFactory(shapeType)) {\n      return;\n    }\n    if (!this.shapeFactory) {\n      this.shapeFactory = clone(getShapeFactory(shapeType)); // 防止多个 view 共享一个 shapeFactory 实例，导致 coordinate 被篡改\n    }\n    // 因为这里缓存了 shapeFactory，但是外部可能会变更 coordinate，导致无法重新设置到 shapeFactory 中\n    this.shapeFactory.coordinate = this.coordinate;\n    // theme 原因同上\n    this.shapeFactory.theme = this.theme.geometries[shapeType] || {};\n    return this.shapeFactory;\n  };\n  /**\n   * 获取每个 Shape 对应的关键点数据。\n   * @param obj 经过分组 -> 数字化 -> adjust 调整后的数据记录\n   * @returns\n   */\n  Geometry.prototype.createShapePointsCfg = function (obj) {\n    var xScale = this.getXScale();\n    var yScale = this.getYScale();\n    var x = this.normalizeValues(obj[xScale.field], xScale);\n    var y; // 存在没有 y 的情况\n    if (yScale) {\n      y = this.normalizeValues(obj[yScale.field], yScale);\n    } else {\n      y = obj.y ? obj.y : 0.1;\n    }\n    return {\n      x: x,\n      y: y,\n      y0: yScale ? yScale.scale(this.getYMinValue()) : undefined\n    };\n  };\n  /**\n   * 创建 Element 实例。\n   * @param mappingDatum Element 对应的绘制数据\n   * @param [isUpdate] 是否处于更新阶段\n   * @returns element 返回创建的 Element 实例\n   */\n  Geometry.prototype.createElement = function (mappingDatum, index, isUpdate) {\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n    var container = this.container;\n    var shapeCfg = this.getDrawCfg(mappingDatum); // 获取绘制图形的配置信息\n    var shapeFactory = this.getShapeFactory();\n    var element = new Element({\n      shapeFactory: shapeFactory,\n      container: container,\n      offscreenGroup: this.getOffscreenGroup(),\n      elementIndex: index\n    });\n    element.animate = this.animateOption;\n    element.geometry = this;\n    element.draw(shapeCfg, isUpdate); // 绘制\n    return element;\n  };\n  /**\n   * 获取每条数据对应的图形绘制数据。\n   * @param mappingDatum 映射后的数据\n   * @returns draw cfg\n   */\n  Geometry.prototype.getDrawCfg = function (mappingDatum) {\n    var originData = mappingDatum[FIELD_ORIGIN]; // 原始数据\n    var cfg = {\n      mappingData: mappingDatum,\n      data: originData,\n      x: mappingDatum.x,\n      y: mappingDatum.y,\n      color: mappingDatum.color,\n      size: mappingDatum.size,\n      isInCircle: this.coordinate.isPolar,\n      customInfo: this.customOption\n    };\n    var shapeName = mappingDatum.shape;\n    if (!shapeName && this.getShapeFactory()) {\n      shapeName = this.getShapeFactory().defaultShapeType;\n    }\n    cfg.shape = shapeName;\n    // 获取默认样式\n    var theme = this.theme.geometries[this.shapeType];\n    cfg.defaultStyle = get(theme, [shapeName, 'default'], {}).style;\n    if (!cfg.defaultStyle && this.getShapeFactory()) {\n      cfg.defaultStyle = this.getShapeFactory().getDefaultStyle(theme);\n    }\n    var styleOption = this.styleOption;\n    if (styleOption) {\n      cfg.style = this.getStyleCfg(styleOption, originData);\n    }\n    if (this.generatePoints) {\n      cfg.points = mappingDatum.points;\n      cfg.nextPoints = mappingDatum.nextPoints;\n    }\n    return cfg;\n  };\n  Geometry.prototype.updateElements = function (mappingDataArray, isUpdate) {\n    var e_1, _a, e_2, _b, e_3, _c;\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n    var keyDatum = new Map();\n    var keys = [];\n    // 用来保持 diff 元素之后 added, updated 的相对顺序\n    var keyIndex = new Map();\n    var index = 0;\n    // 获得更新数据所有的 keys\n    // 将更新的数据用 key 索引\n    for (var i = 0; i < mappingDataArray.length; i++) {\n      var mappingData = mappingDataArray[i];\n      for (var j = 0; j < mappingData.length; j++) {\n        var mappingDatum = mappingData[j];\n        var key = this.getElementId(mappingDatum);\n        var finalKey = keyDatum.has(key) ? \"\".concat(key, \"-\").concat(i, \"-\").concat(j) : key;\n        keys.push(finalKey);\n        keyDatum.set(finalKey, mappingDatum);\n        keyIndex.set(finalKey, index);\n        index++;\n      }\n    }\n    this.elements = new Array(index);\n    var _d = diff(this.lastElementsMap, keys),\n      added = _d.added,\n      updated = _d.updated,\n      removed = _d.removed;\n    try {\n      // 新建 element\n      for (var added_1 = __values(added), added_1_1 = added_1.next(); !added_1_1.done; added_1_1 = added_1.next()) {\n        var key = added_1_1.value;\n        var mappingDatum = keyDatum.get(key);\n        var i = keyIndex.get(key);\n        var element = this.createElement(mappingDatum, i, isUpdate);\n        this.elements[i] = element;\n        this.elementsMap[key] = element;\n        if (element.shape) {\n          element.shape.set('zIndex', this.zIndexReversed ? this.elements.length - i : i);\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (added_1_1 && !added_1_1.done && (_a = added_1.return)) _a.call(added_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    try {\n      // 更新 element\n      for (var updated_1 = __values(updated), updated_1_1 = updated_1.next(); !updated_1_1.done; updated_1_1 = updated_1.next()) {\n        var key = updated_1_1.value;\n        var element = this.lastElementsMap[key];\n        var mappingDatum = keyDatum.get(key);\n        var currentShapeCfg = this.getDrawCfg(mappingDatum);\n        var preShapeCfg = element.getModel();\n        var i = keyIndex.get(key);\n        if (this.isCoordinateChanged || isModelChange(currentShapeCfg, preShapeCfg)) {\n          element.animate = this.animateOption;\n          // 通过绘制数据的变更来判断是否需要更新，因为用户有可能会修改图形属性映射\n          element.update(currentShapeCfg); // 更新对应的 element\n        }\n\n        this.elements[i] = element;\n        this.elementsMap[key] = element;\n        if (element.shape) {\n          element.shape.set('zIndex', this.zIndexReversed ? this.elements.length - i : i);\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (updated_1_1 && !updated_1_1.done && (_b = updated_1.return)) _b.call(updated_1);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    // 全部 setZIndex 之后，再执行 sort\n    if (this.container) {\n      this.container.sort();\n    }\n    try {\n      // 销毁被删除的 elements\n      for (var removed_1 = __values(removed), removed_1_1 = removed_1.next(); !removed_1_1.done; removed_1_1 = removed_1.next()) {\n        var key = removed_1_1.value;\n        var element = this.lastElementsMap[key];\n        // 更新动画配置，用户有可能在更新之前有对动画进行配置操作\n        element.animate = this.animateOption;\n        element.destroy();\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (removed_1_1 && !removed_1_1.done && (_c = removed_1.return)) _c.call(removed_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n  };\n  /**\n   * 获取渲染的 label 类型。\n   */\n  Geometry.prototype.getLabelType = function () {\n    var _a = this,\n      labelOption = _a.labelOption,\n      coordinate = _a.coordinate,\n      type = _a.type;\n    var coordinateType = coordinate.type,\n      isTransposed = coordinate.isTransposed;\n    var labelType = get(labelOption, ['cfg', 'type']);\n    if (!labelType) {\n      // 用户未定义，则进行默认的逻辑\n      if (coordinateType === 'polar') {\n        // 极坐标下使用通用的极坐标文本，转置则使用饼图\n        labelType = isTransposed ? 'pie' : 'polar';\n      } else if (coordinateType === 'theta') {\n        // theta 坐标系下使用饼图文本\n        labelType = 'pie';\n      } else if (type === 'interval' || type === 'polygon') {\n        labelType = 'interval';\n      } else {\n        labelType = 'base';\n      }\n    }\n    return labelType;\n  };\n  /**\n   * 获取 Y 轴上的最小值。\n   */\n  Geometry.prototype.getYMinValue = function () {\n    var yScale = this.getYScale();\n    var min = yScale.min,\n      max = yScale.max;\n    var value;\n    if (min >= 0) {\n      value = min;\n    } else if (max <= 0) {\n      // 当值全位于负区间时，需要保证 ymin 在区域内，不可为 0\n      value = max;\n    } else {\n      value = 0;\n    }\n    return value;\n  };\n  // 创建图形属性相关的配置项\n  Geometry.prototype.createAttrOption = function (attrName, field, cfg) {\n    if (isNil(field) || isObject(field)) {\n      if (isObject(field) && isEqual(Object.keys(field), ['values'])) {\n        // shape({ values: [ 'funnel' ] })\n        set(this.attributeOption, attrName, {\n          fields: field.values\n        });\n      } else {\n        set(this.attributeOption, attrName, field);\n      }\n    } else {\n      var attrCfg = {};\n      if (isNumber(field)) {\n        // size(3)\n        attrCfg.values = [field];\n      } else {\n        attrCfg.fields = parseFields(field);\n      }\n      if (cfg) {\n        if (isFunction(cfg)) {\n          attrCfg.callback = cfg;\n        } else {\n          attrCfg.values = cfg;\n        }\n      }\n      set(this.attributeOption, attrName, attrCfg);\n    }\n  };\n  Geometry.prototype.initAttributes = function () {\n    var _this = this;\n    var _a = this,\n      attributes = _a.attributes,\n      attributeOption = _a.attributeOption,\n      theme = _a.theme,\n      shapeType = _a.shapeType;\n    this.groupScales = [];\n    var tmpMap = {};\n    var _loop_1 = function _loop_1(attrType) {\n      if (attributeOption.hasOwnProperty(attrType)) {\n        var option = attributeOption[attrType];\n        if (!option) {\n          return {\n            value: void 0\n          };\n        }\n        var attrCfg = __assign({}, option);\n        var callback = attrCfg.callback,\n          values = attrCfg.values,\n          _b = attrCfg.fields,\n          fields = _b === void 0 ? [] : _b;\n        // 获取每一个字段对应的 scale\n        var scales = fields.map(function (field) {\n          var scale = _this.scales[field];\n          if (!tmpMap[field] && GROUP_ATTRS.includes(attrType)) {\n            var inferedScaleType = inferScaleType(scale, get(_this.scaleDefs, field), attrType, _this.type);\n            if (inferedScaleType === 'cat') {\n              _this.groupScales.push(scale);\n              tmpMap[field] = true;\n            }\n          }\n          return scale;\n        });\n        attrCfg.scales = scales;\n        if (attrType !== 'position' && scales.length === 1 && scales[0].type === 'identity') {\n          // 用户在图形通道上声明了常量字段 color('red'), size(5)\n          attrCfg.values = scales[0].values;\n        } else if (!callback && !values) {\n          // 用户没有指定任何规则，则使用默认的映射规则\n          if (attrType === 'size') {\n            attrCfg.values = theme.sizes;\n          } else if (attrType === 'shape') {\n            attrCfg.values = theme.shapes[shapeType] || [];\n          } else if (attrType === 'color') {\n            if (scales.length) {\n              // 根据数值个数使用对应的色板\n              attrCfg.values = scales[0].values.length <= 10 ? theme.colors10 : theme.colors20;\n            } else {\n              attrCfg.values = theme.colors10;\n            }\n          }\n        }\n        var AttributeCtor = getAttributeClass(attrType);\n        attributes[attrType] = new AttributeCtor(attrCfg);\n      }\n    };\n    // 遍历每一个 attrOption，各自创建 Attribute 实例\n    for (var attrType in attributeOption) {\n      var state_1 = _loop_1(attrType);\n      if (typeof state_1 === \"object\") return state_1.value;\n    }\n  };\n  // 处理数据：分组 -> 数字化 -> adjust 调整\n  Geometry.prototype.processData = function (data) {\n    var e_4, _a;\n    this.hasSorted = false;\n    var scales = this.getAttribute('position').scales;\n    var categoryScales = scales.filter(function (scale) {\n      return scale.isCategory;\n    });\n    var groupedArray = this.groupData(data); // 数据分组\n    var beforeAdjust = [];\n    for (var i = 0, len = groupedArray.length; i < len; i++) {\n      var subData = groupedArray[i];\n      var arr = [];\n      for (var j = 0, subLen = subData.length; j < subLen; j++) {\n        var originData = subData[j];\n        var item = {};\n        // tslint:disable-next-line: forin\n        for (var k in originData) {\n          item[k] = originData[k];\n        }\n        item[FIELD_ORIGIN] = originData;\n        try {\n          // 将分类数据翻译成数据, 仅对位置相关的度量进行数字化处理\n          for (var categoryScales_1 = (e_4 = void 0, __values(categoryScales)), categoryScales_1_1 = categoryScales_1.next(); !categoryScales_1_1.done; categoryScales_1_1 = categoryScales_1.next()) {\n            var scale = categoryScales_1_1.value;\n            var field = scale.field;\n            item[field] = scale.translate(item[field]);\n          }\n        } catch (e_4_1) {\n          e_4 = {\n            error: e_4_1\n          };\n        } finally {\n          try {\n            if (categoryScales_1_1 && !categoryScales_1_1.done && (_a = categoryScales_1.return)) _a.call(categoryScales_1);\n          } finally {\n            if (e_4) throw e_4.error;\n          }\n        }\n        arr.push(item);\n      }\n      beforeAdjust.push(arr);\n    }\n    var dataArray = this.adjustData(beforeAdjust); // 进行 adjust 数据调整\n    this.beforeMappingData = dataArray;\n    return dataArray;\n  };\n  // 调整数据\n  Geometry.prototype.adjustData = function (dataArray) {\n    var adjustOption = this.adjustOption;\n    var _a = this,\n      intervalPadding = _a.intervalPadding,\n      dodgePadding = _a.dodgePadding,\n      theme = _a.theme;\n    // 兼容theme配置\n    var maxColumnWidth = this.maxColumnWidth || theme.maxColumnWidth;\n    var minColumnWidth = this.minColumnWidth || theme.minColumnWidth;\n    var columnWidthRatio = this.columnWidthRatio || theme.columnWidthRatio;\n    var result = dataArray;\n    if (adjustOption) {\n      var xScale_2 = this.getXScale();\n      var yScale = this.getYScale();\n      var xField = xScale_2.field;\n      var yField = yScale ? yScale.field : null;\n      var xDimensionLength = getXDimensionLength(this.coordinate);\n      var groupNum = xScale_2.values.length;\n      // 传入size计算相关参数，默认宽度、最大最小宽度约束\n      var sizeAttr = this.getAttribute('size');\n      var defaultSize = void 0;\n      if (sizeAttr) {\n        defaultSize = sizeAttr.values[0];\n      }\n      for (var i = 0, len = adjustOption.length; i < len; i++) {\n        var adjust = adjustOption[i];\n        var adjustCfg = __assign({\n          xField: xField,\n          yField: yField,\n          intervalPadding: intervalPadding,\n          dodgePadding: dodgePadding,\n          xDimensionLength: xDimensionLength,\n          groupNum: groupNum,\n          defaultSize: defaultSize,\n          maxColumnWidth: maxColumnWidth,\n          minColumnWidth: minColumnWidth,\n          columnWidthRatio: columnWidthRatio\n        }, adjust);\n        var type = adjust.type;\n        if (type === 'dodge') {\n          var adjustNames = [];\n          if (xScale_2.isCategory || xScale_2.type === 'identity') {\n            adjustNames.push('x');\n          } else if (!yScale) {\n            adjustNames.push('y');\n          } else {\n            throw new Error('dodge is not support linear attribute, please use category attribute!');\n          }\n          adjustCfg.adjustNames = adjustNames;\n          // 每个分组内每条柱子的宽度占比，用户不可指定，用户需要通过 columnWidthRatio 指定\n          // 兼容theme配置\n          adjustCfg.dodgeRatio = columnWidthRatio;\n        } else if (type === 'stack') {\n          var coordinate = this.coordinate;\n          if (!yScale) {\n            // 一维的情况下获取高度和默认size\n            adjustCfg.height = coordinate.getHeight();\n            var size = this.getDefaultValue('size') || 3;\n            adjustCfg.size = size;\n          }\n          // 不进行 transpose 时，用户又没有设置这个参数时，默认从上向下\n          if (!coordinate.isTransposed && isNil(adjustCfg.reverseOrder)) {\n            adjustCfg.reverseOrder = true;\n          }\n        }\n        var adjustCtor = getAdjustClass(type);\n        adjustCfg.dimValuesMap = {};\n        //生成dimValuesMap\n        if (xScale_2 && xScale_2.values) {\n          adjustCfg.dimValuesMap[xScale_2.field] = xScale_2.values.map(function (v) {\n            return xScale_2.translate(v);\n          });\n        }\n        var adjustInstance = new adjustCtor(adjustCfg);\n        result = adjustInstance.process(result);\n        this.adjusts[type] = adjustInstance;\n      }\n    }\n    return result;\n  };\n  // 对数据进行分组\n  Geometry.prototype.groupData = function (data) {\n    var groupScales = this.getGroupScales();\n    var scaleDefs = this.scaleDefs;\n    var appendConditions = {};\n    var groupFields = [];\n    for (var index = 0; index < groupScales.length; index++) {\n      var scale = groupScales[index];\n      var field = scale.field;\n      groupFields.push(field);\n      if (get(scaleDefs, [field, 'values'])) {\n        // 用户通过 view.scale() 接口指定了 values 属性\n        appendConditions[field] = scaleDefs[field].values;\n      }\n    }\n    return group(data, groupFields, appendConditions);\n  };\n  // 更新发生层叠后的数据对应的度量范围\n  Geometry.prototype.updateStackRange = function (scale, dataArray) {\n    var mergeArray = flatten(dataArray);\n    var field = scale.field;\n    var min = scale.min;\n    var max = scale.max;\n    for (var index = 0; index < mergeArray.length; index++) {\n      var obj = mergeArray[index];\n      var tmpMin = Math.min.apply(null, obj[field]);\n      var tmpMax = Math.max.apply(null, obj[field]);\n      if (tmpMin < min) {\n        min = tmpMin;\n      }\n      if (tmpMax > max) {\n        max = tmpMax;\n      }\n    }\n    var scaleDefs = this.scaleDefs;\n    var cfg = {};\n    if (min < scale.min && !get(scaleDefs, [field, 'min'])) {\n      // 用户如果在列定义中定义了 min，则以用户定义的为准\n      cfg.min = min;\n    }\n    if (max > scale.max && !get(scaleDefs, [field, 'max'])) {\n      // 用户如果在列定义中定义了 max\n      cfg.max = max;\n    }\n    scale.change(cfg);\n  };\n  // 将数据映射至图形空间前的操作：排序以及关键点的生成\n  Geometry.prototype.beforeMapping = function (beforeMappingData) {\n    // 当初加 clone 是因为 points 的引用关系，导致更新失败，可是现在貌似复现不出来了，所以暂时不进行 clone\n    // const source = clone(beforeMappingData);\n    var source = beforeMappingData;\n    if (this.sortable) {\n      this.sort(source);\n    }\n    if (this.generatePoints) {\n      // 需要生成关键点\n      for (var index = 0, length_5 = source.length; index < length_5; index++) {\n        var currentData = source[index];\n        this.generateShapePoints(currentData);\n        var nextData = source[index + 1];\n        if (nextData) {\n          this.generateShapePoints(nextData);\n          currentData[0].nextPoints = nextData[0].points;\n        }\n      }\n    }\n    return source;\n  };\n  // 生成 shape 的关键点\n  Geometry.prototype.generateShapePoints = function (data) {\n    var shapeFactory = this.getShapeFactory();\n    var shapeAttr = this.getAttribute('shape');\n    for (var index = 0; index < data.length; index++) {\n      var obj = data[index];\n      var cfg = this.createShapePointsCfg(obj);\n      var shape = shapeAttr ? this.getAttributeValues(shapeAttr, obj) : null;\n      var points = shapeFactory.getShapePoints(shape, cfg);\n      obj.points = points;\n    }\n  };\n  // 将数据归一化\n  Geometry.prototype.normalizeValues = function (values, scale) {\n    var rst = [];\n    if (isArray(values)) {\n      for (var index = 0; index < values.length; index++) {\n        var value = values[index];\n        rst.push(scale.scale(value));\n      }\n    } else {\n      rst = scale.scale(values);\n    }\n    return rst;\n  };\n  // 将数据映射至图形空间\n  Geometry.prototype.mapping = function (data) {\n    var attributes = this.attributes;\n    var mappingData = [];\n    for (var index = 0; index < data.length; index++) {\n      var record = data[index];\n      var newRecord = {\n        _origin: record[FIELD_ORIGIN],\n        points: record.points,\n        nextPoints: record.nextPoints\n      };\n      for (var k in attributes) {\n        if (attributes.hasOwnProperty(k)) {\n          var attr = attributes[k];\n          var names = attr.names;\n          var values = this.getAttributeValues(attr, record);\n          if (names.length > 1) {\n            // position 之类的生成多个字段的属性\n            for (var j = 0; j < values.length; j += 1) {\n              var val = values[j];\n              var name_1 = names[j];\n              newRecord[name_1] = isArray(val) && val.length === 1 ? val[0] : val; // 只有一个值时返回第一个属性值\n            }\n          } else {\n            // values.length === 1 的判断是以下情况，获取用户设置的图形属性值\n            // shape('a', ['dot', 'dash']), color('a', ['red', 'yellow'])\n            newRecord[names[0]] = values.length === 1 ? values[0] : values;\n          }\n        }\n      }\n      this.convertPoint(newRecord); // 将 x、y 转换成画布坐标\n      mappingData.push(newRecord);\n    }\n    return mappingData;\n  };\n  // 将归一化的坐标值转换成画布坐标\n  Geometry.prototype.convertPoint = function (mappingRecord) {\n    var x = mappingRecord.x,\n      y = mappingRecord.y;\n    var rstX;\n    var rstY;\n    var obj;\n    var coordinate = this.coordinate;\n    if (isArray(x) && isArray(y)) {\n      rstX = [];\n      rstY = [];\n      for (var i = 0, j = 0, xLen = x.length, yLen = y.length; i < xLen && j < yLen; i += 1, j += 1) {\n        obj = coordinate.convert({\n          x: x[i],\n          y: y[j]\n        });\n        rstX.push(obj.x);\n        rstY.push(obj.y);\n      }\n    } else if (isArray(y)) {\n      rstY = [];\n      for (var index = 0; index < y.length; index++) {\n        var yVal = y[index];\n        obj = coordinate.convert({\n          x: x,\n          y: yVal\n        });\n        if (rstX && rstX !== obj.x) {\n          if (!isArray(rstX)) {\n            rstX = [rstX];\n          }\n          rstX.push(obj.x);\n        } else {\n          rstX = obj.x;\n        }\n        rstY.push(obj.y);\n      }\n    } else if (isArray(x)) {\n      rstX = [];\n      for (var index = 0; index < x.length; index++) {\n        var xVal = x[index];\n        obj = coordinate.convert({\n          x: xVal,\n          y: y\n        });\n        if (rstY && rstY !== obj.y) {\n          if (!isArray(rstY)) {\n            rstY = [rstY];\n          }\n          rstY.push(obj.y);\n        } else {\n          rstY = obj.y;\n        }\n        rstX.push(obj.x);\n      }\n    } else {\n      var point = coordinate.convert({\n        x: x,\n        y: y\n      });\n      rstX = point.x;\n      rstY = point.y;\n    }\n    mappingRecord.x = rstX;\n    mappingRecord.y = rstY;\n  };\n  // 获取 style 配置\n  Geometry.prototype.getStyleCfg = function (styleOption, originData) {\n    var _a = styleOption.fields,\n      fields = _a === void 0 ? [] : _a,\n      callback = styleOption.callback,\n      cfg = styleOption.cfg;\n    if (cfg) {\n      // 用户直接配置样式属性\n      return cfg;\n    }\n    var params = fields.map(function (field) {\n      return originData[field];\n    });\n    return callback.apply(void 0, __spreadArray([], __read(params), false));\n  };\n  Geometry.prototype.setCfg = function (cfg) {\n    var _this = this;\n    var coordinate = cfg.coordinate,\n      data = cfg.data,\n      theme = cfg.theme,\n      scaleDefs = cfg.scaleDefs;\n    if (coordinate) {\n      this.coordinate = coordinate;\n    }\n    if (data) {\n      this.data = data;\n    }\n    if (scaleDefs) {\n      this.scaleDefs = scaleDefs;\n      this.idFields = [];\n      each(scaleDefs, function (scaleDef, field) {\n        if (scaleDef && scaleDef.key) {\n          _this.idFields.push(field);\n        }\n      });\n    }\n    if (theme) {\n      this.theme = this.userTheme ? deepMix({}, theme, this.userTheme) : theme; // 支持 geometry 层级的主题设置\n    }\n  };\n\n  Geometry.prototype.renderLabels = function (mappingArray, isUpdate) {\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var geometryLabel, labelType, GeometryLabelsCtor, labelsMap, elementLabels, _a, _b, _c, element, labels;\n      var e_5, _d;\n      var _this = this;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            geometryLabel = this.geometryLabel;\n            this.emit(GEOMETRY_LIFE_CIRCLE.BEFORE_RENDER_LABEL);\n            if (!geometryLabel) {\n              labelType = this.getLabelType();\n              GeometryLabelsCtor = getGeometryLabel(labelType);\n              geometryLabel = new GeometryLabelsCtor(this);\n              this.geometryLabel = geometryLabel;\n            }\n            return [4 /*yield*/, geometryLabel.render(mappingArray, isUpdate)];\n          case 1:\n            _e.sent();\n            labelsMap = geometryLabel.labelsRenderer.shapesMap;\n            elementLabels = new Map();\n            each(labelsMap, function (labelGroup, labelGroupId) {\n              var labelChildren = labelGroup.getChildren() || [];\n              for (var j = 0; j < labelChildren.length; j++) {\n                var labelShape = labelChildren[j];\n                var element = _this.elementsMap[labelShape.get('elementId') || labelGroupId.split(' ')[0]];\n                if (element) {\n                  labelShape.cfg.name = ['element', 'label'];\n                  labelShape.cfg.element = element;\n                  var labels = elementLabels.get(element) || new Set();\n                  labels.add(labelGroup);\n                  elementLabels.set(element, labels);\n                }\n              }\n            });\n            try {\n              for (_a = __values(elementLabels.entries()), _b = _a.next(); !_b.done; _b = _a.next()) {\n                _c = __read(_b.value, 2), element = _c[0], labels = _c[1];\n                element.labelShape = __spreadArray([], __read(labels), false);\n              }\n            } catch (e_5_1) {\n              e_5 = {\n                error: e_5_1\n              };\n            } finally {\n              try {\n                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);\n              } finally {\n                if (e_5) throw e_5.error;\n              }\n            }\n            this.emit(GEOMETRY_LIFE_CIRCLE.AFTER_RENDER_LABEL);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * 是否需要进行群组入场动画\n   * 规则：\n   * 1. 如果发生更新，则不进行\n   * 2. 如果用户关闭 geometry 动画，则不进行\n   * 3. 如果用户关闭了 appear 动画，则不进行\n   * 4. 如果用户配置了 appear.animation，则不进行\n   */\n  Geometry.prototype.canDoGroupAnimation = function (isUpdate) {\n    return !isUpdate && this.animateOption && (get(this.animateOption, 'appear') === undefined || get(this.animateOption, 'appear') && get(this.animateOption, ['appear', 'animation']) === undefined);\n  };\n  return Geometry;\n}(Base);\nexport default Geometry;","map":{"version":3,"mappings":"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","names":["getAdjust","getAdjustClass","getAttribute","getAttributeClass","clone","deepMix","each","flatten","get","isArray","isEmpty","isEqual","isFunction","isNil","isNumber","isObject","isPlainObject","isString","set","doGroupAppearAnimate","getDefaultAnimateCfg","Base","FIELD_ORIGIN","GEOMETRY_LIFE_CIRCLE","GROUP_ATTRS","uniq","Element","getGeometryLabel","getShapeFactory","group","isModelChange","parseFields","diff","inferScaleType","getXDimensionLength","__extends","cfg","_super","_this","labelsContainer","coordinate","data","_a","sortable","_b","visible","theme","_c","scales","_d","scaleDefs","intervalPadding","dodgePadding","maxColumnWidth","minColumnWidth","columnWidthRatio","roseWidthRatio","multiplePieWidthRatio","zIndexReversed","sortZIndex","useDeferredLabel","container","userTheme","Infinity","Geometry","positionCfg","fields","length","unshift","attributeOption","field","createAttrOption","adjustCfg","adjusts","adjust","index","type","adjustOption","styleFunc","styleOption","callback","tooltipOption","animateOption","secondParam","thirdParam","labelOption","stateOption","customOption","setCfg","initAttributes","processData","adjustScale","isDataChanged","isCoordinateChanged","lastAttributeOption","init","isUpdate","defaultSize","undefined","elementsMap","elements","offscreenGroup","getOffscreenGroup","clear","beforeMappingData","dataArray","beforeMapping","Array","i","mapping","updateElements","lastElementsMap","canDoGroupAnimation","animateCfg","yScale","getYScale","yMinPoint","convert","x","y","scale","getYMinValue","deferred","renderLabels","bind","timeout","window","requestIdleCallback","setTimeout","options","changeVisible","geometryLabel","attributes","idFields","groupScales","hasSorted","remove","destroy","shapeFactory","name","rst","attr","includes","push","attrName","value","values","obj","params","length_1","isIdentity","adjustType","shapeName","getMarker","condition","filter","element","originData","elementId","xScale","getXScale","xField","yField","yVal","xVal","id","length_2","groupScale","dodgeAdjust","dodgeBy","tmpMap","Map","attributeType","hasOwnProperty","eachOpt","length_3","show","hide","uniqMap","Object","forEach","fs","f","has","groupFields","length_4","attributeName","position","getXYFields","map","shape","GroupCtor","getGroupBase","mappingArray","xScale_1","xField_1","itemArr","sort","obj1","obj2","translate","updateStackRange","shapeType","geometries","normalizeValues","y0","mappingDatum","shapeCfg","getDrawCfg","elementIndex","animate","geometry","draw","mappingData","color","size","isInCircle","isPolar","customInfo","defaultShapeType","defaultStyle","style","getDefaultStyle","getStyleCfg","generatePoints","points","nextPoints","mappingDataArray","keyDatum","keys","keyIndex","j","key","getElementId","finalKey","added","updated","removed","createElement","currentShapeCfg","preShapeCfg","getModel","update","coordinateType","isTransposed","labelType","max","min","attrCfg","attrType","option","inferedScaleType","sizes","shapes","colors10","colors20","AttributeCtor","categoryScales","isCategory","groupedArray","groupData","beforeAdjust","len","subData","arr","subLen","item","k","adjustData","result","xScale_2","xDimensionLength","groupNum","sizeAttr","adjustNames","Error","dodgeRatio","height","getHeight","getDefaultValue","reverseOrder","adjustCtor","dimValuesMap","v","adjustInstance","process","getGroupScales","appendConditions","mergeArray","tmpMin","Math","apply","tmpMax","change","source","length_5","currentData","generateShapePoints","nextData","shapeAttr","createShapePointsCfg","getAttributeValues","getShapePoints","record","newRecord","_origin","names","val","name_1","convertPoint","mappingRecord","rstX","rstY","xLen","yLen","point","scaleDef","emit","BEFORE_RENDER_LABEL","getLabelType","GeometryLabelsCtor","render","_e","labelsMap","labelsRenderer","shapesMap","elementLabels","labelGroup","labelGroupId","labelChildren","getChildren","labelShape","split","labels","Set","add","entries","AFTER_RENDER_LABEL"],"sources":["/home/iam/Documents/network/node_modules/@antv/g2/src/geometry/base.ts"],"sourcesContent":["import { Adjust, getAdjust as getAdjustClass } from '@antv/adjust';\nimport { Attribute, getAttribute as getAttributeClass } from '@antv/attr';\nimport {\n  clone,\n  deepMix,\n  each,\n  flatten,\n  get,\n  isArray,\n  isEmpty,\n  isEqual,\n  isFunction,\n  isNil,\n  isNumber,\n  isObject,\n  isPlainObject,\n  isString,\n  set,\n} from '@antv/util';\nimport { doGroupAppearAnimate, getDefaultAnimateCfg } from '../animate';\nimport Base from '../base';\nimport { FIELD_ORIGIN, GEOMETRY_LIFE_CIRCLE, GROUP_ATTRS } from '../constant';\nimport { BBox, Coordinate, IGroup, IShape, Scale } from '../dependents';\nimport {\n  AdjustOption,\n  AdjustType,\n  AnimateOption,\n  AttributeOption,\n  ColorAttrCallback,\n  Data,\n  Datum,\n  GeometryLabelCfg,\n  GeometryTooltipOption,\n  LabelCallback,\n  LabelOption,\n  LooseObject,\n  MappingDatum,\n  ScaleOption,\n  ShapeAttrCallback,\n  ShapeFactory,\n  ShapeInfo,\n  ShapeMarkerCfg,\n  ShapeMarkerAttrs,\n  ShapePoint,\n  SizeAttrCallback,\n  StateOption,\n  StyleCallback,\n  StyleOption,\n  TooltipCallback,\n  CustomOption,\n} from '../interface';\nimport { uniq } from '../util/helper';\nimport Element from './element';\nimport { getGeometryLabel } from './label';\nimport GeometryLabel from './label/base';\nimport { getShapeFactory } from './shape/base';\nimport { group } from './util/group-data';\nimport { isModelChange } from './util/is-model-change';\nimport { parseFields } from './util/parse-fields';\nimport { diff } from './util/diff';\nimport { inferScaleType } from '../util/scale';\nimport { getXDimensionLength } from '../util/coordinate';\n\n/** @ignore */\ninterface AttributeInstanceCfg {\n  fields?: string[];\n  callback?: (...args) => any;\n  values?: string[] | number[];\n  scales?: Scale[];\n}\ninterface DimValuesMapType {\n  [dim: string]: number[];\n}\n/** @ignore */\ninterface AdjustInstanceCfg {\n  type: AdjustType;\n  adjustNames?: string[];\n  xField?: string;\n  yField?: string;\n\n  dodgeBy?: string;\n  marginRatio?: number;\n  dodgeRatio?: number;\n\n  size?: number;\n  height?: number;\n  reverseOrder?: boolean;\n\n  /** 像素级柱间宽度，调整offset */\n  intervalPadding?: number;\n  dodgePadding?: number;\n  /** x维度长度，计算归一化padding使用 */\n  xDimensionLength?: number;\n  /** 分组数，计算offset */\n  groupNum?: number;\n  /** 用户配置宽度 size */\n  defaultSize?: number;\n  /** 最大最小宽度约束 */\n  maxColumnWidth?: number;\n  minColumnWidth?: number;\n  /** 柱宽比例 */\n  columnWidthRatio?: number;\n  /** 用户自定义的dimValuesMap */\n  dimValuesMap?: DimValuesMapType;\n}\n\n/** geometry.init() 传入参数 */\nexport interface InitCfg {\n  /** 坐标系 */\n  coordinate?: Coordinate;\n  /** 数据 */\n  data?: Data;\n  /** 主题对象 */\n  theme?: LooseObject;\n  /** 列定义 */\n  scaleDefs?: Record<string, ScaleOption>;\n  /** 因为数据使用的引用，所以需要有一个标识位标识数据是否发生了更新 */\n  isDataChanged?: boolean;\n  isCoordinateChanged?: boolean;\n}\n\n/** Geometry 构造函数参数 */\nexport interface GeometryCfg {\n  /** Geometry shape 的容器。 */\n  container: IGroup;\n  /** 绘制的坐标系对象。 */\n  coordinate?: Coordinate;\n  /** 绘制数据。 */\n  data?: Data;\n  /** 需要的 scales。 */\n  scales?: Record<string, Scale>;\n  /** 列定义 */\n  scaleDefs?: Record<string, ScaleOption>;\n  /** Geometry labels 的容器 */\n  labelsContainer?: IGroup;\n  /** 是否对数据进行排序 */\n  sortable?: boolean;\n  /** elements 的 zIndex 默认按顺序提升，通过 zIndexReversed 可以反序，从而数据越前，层级越高 */\n  zIndexReversed?: boolean;\n  /** 是否需要对 zIndex 进行 sort。因为耗时长，由具体场景自行决定 */\n  sortZIndex?: boolean;\n  /** 延迟渲染 Geometry 数据标签. 设置为 true 时，会在浏览器空闲时期被调用, 也可以指定具体 timeout 时间 */\n  useDeferredLabel?: boolean | number;\n  /** 是否可见 */\n  visible?: boolean;\n  /** 主题配置 */\n  theme?: LooseObject;\n\n  /** 组间距 */\n  intervalPadding?: number;\n  /** 组内间距 */\n  dodgePadding?: number;\n  /** 柱状图最大宽度 */\n  maxColumnWidth?: number;\n  /** 柱状图最小宽度 */\n  minColumnWidth?: number;\n  /** 默认宽度占比，interval类型和schema类型通用 */\n  columnWidthRatio?: number;\n  /** 玫瑰图占比 */\n  roseWidthRatio?: number;\n  /** 多层饼图/环图占比 */\n  multiplePieWidthRatio?: number;\n}\n\n/**\n * Geometry 几何标记基类，主要负责数据到图形属性的映射以及绘制逻辑。\n */\nexport default class Geometry<S extends ShapePoint = ShapePoint> extends Base {\n  /** Geometry 几何标记类型。 */\n  public readonly type: string = 'base';\n  /** ShapeFactory 对应的类型。 */\n  public readonly shapeType: string;\n\n  // 在创建 Geometry 实例时可以传入的属性\n  /** Coordinate 坐标系实例。 */\n  public coordinate: Coordinate;\n  /** 用户绘制数据。 */\n  public data: Data;\n  /** 图形绘制容器。 */\n  public readonly container: IGroup;\n  /** label 绘制容器。 */\n  public readonly labelsContainer: IGroup;\n  /** 是否对数据进行排序，默认为 false。  */\n  public sortable: boolean;\n  /** 当前 Geometry 实例主题。  */\n  public theme: LooseObject;\n  /** 存储 geometry 需要的 scales，需要外部传入。 */\n  public scales: Record<string, Scale>;\n  /** scale 定义，需要外部传入。 */\n  public scaleDefs: Record<string, ScaleOption>;\n  /** 画布区域，用于 label 布局。 */\n  public canvasRegion: BBox;\n\n  // 内部产生的属性\n  /** Attribute map  */\n  public attributes: Record<string, Attribute> = {};\n  /** Element map */\n  public elements: Element[] = [];\n  /**\n   * 存储处理后的数据，\n   * + init() 及 updateData() 逻辑后, 结构为 Data[]；\n   * + paint() 逻辑后，结构为 MappingDatum[][]。\n   */\n  public dataArray: MappingDatum[][];\n  /** 存储 tooltip 配置信息。 */\n  public tooltipOption: GeometryTooltipOption | boolean;\n  /** 存储 label 配置信息。 */\n  public labelOption: LabelOption | false;\n  /** 状态量相关的配置项 */\n  public stateOption: StateOption;\n  /** 使用 key-value 结构存储 Element，key 为每个 Element 实例对应的唯一 ID */\n  public elementsMap: Record<string, Element> = {};\n  /** animate 配置项 */\n  public animateOption: AnimateOption | boolean = true;\n  /** 图形属性映射配置 */\n  protected attributeOption: Record<string, AttributeOption> = {};\n  /** adjust 配置项 */\n  protected adjustOption: AdjustOption[];\n  /** style 配置项 */\n  protected styleOption: StyleOption;\n  /** custom 自定义的配置项 */\n  protected customOption: CustomOption;\n  /** 每个 Geometry 对应的 Shape 工厂实例，用于创建各个 Shape */\n  protected shapeFactory: ShapeFactory;\n  /** 存储上一次渲染时的 element 映射表，用于更新逻辑 */\n  protected lastElementsMap: Record<string, Element> = {};\n  /** 是否生成多个点来绘制图形。 */\n  protected generatePoints: boolean = false;\n  /** 存储发生图形属性映射前的数据 */\n  protected beforeMappingData: Data[] = null;\n  /** 存储每个 shape 的默认 size，用于 Interval、Schema 几何标记 */\n  protected defaultSize: number;\n\n  // 用户通过 geometry 构造函数设置的主题\n  private userTheme: LooseObject;\n  private adjusts: Record<string, Adjust> = {};\n  private lastAttributeOption;\n  private idFields: string[] = [];\n  private geometryLabel: GeometryLabel;\n\n  // 柱状图间距相关配置\n  /** 组间距 */\n  protected intervalPadding: number;\n  /** 组内间距 */\n  protected dodgePadding: number;\n  /** 柱状图最大宽度 */\n  protected maxColumnWidth: number;\n  /** 柱状图最小宽度 */\n  protected minColumnWidth: number;\n  /** 一般柱状图宽度占比 */\n  protected columnWidthRatio: number;\n  /** 玫瑰图占比 */\n  protected roseWidthRatio: number;\n  /** 多层饼图/环图占比 */\n  protected multiplePieWidthRatio: number;\n  /** elements 的 zIndex 默认按顺序提升，通过 zIndexReversed 可以反序，从而数据越前，层级越高 */\n  public zIndexReversed?: boolean;\n  /** 是否需要对 zIndex 进行 sort。因为耗时长，由具体场景自行决定 */\n  public sortZIndex?: boolean;\n  protected useDeferredLabel?: null | number;\n\n  /** 虚拟 Group，用于图形更新 */\n  private offscreenGroup: IGroup;\n  private groupScales: Scale[];\n  private hasSorted: boolean = false;\n  protected isCoordinateChanged: boolean = false;\n\n  /**\n   * 创建 Geometry 实例。\n   * @param cfg\n   */\n  constructor(cfg: GeometryCfg) {\n    super(cfg);\n\n    const {\n      container,\n      labelsContainer,\n      coordinate,\n      data,\n      sortable = false,\n      visible = true,\n      theme,\n      scales = {},\n      scaleDefs = {},\n      // 柱状图间隔与宽度相关配置\n      intervalPadding,\n      dodgePadding,\n      maxColumnWidth,\n      minColumnWidth,\n      columnWidthRatio,\n      roseWidthRatio,\n      multiplePieWidthRatio,\n      zIndexReversed,\n      sortZIndex,\n      useDeferredLabel,\n    } = cfg;\n\n    this.container = container;\n    this.labelsContainer = labelsContainer;\n    this.coordinate = coordinate;\n    this.data = data;\n    this.sortable = sortable;\n    this.visible = visible;\n    this.userTheme = theme;\n    this.scales = scales;\n    this.scaleDefs = scaleDefs;\n    // 柱状图间隔与宽度相关配置\n    this.intervalPadding = intervalPadding;\n    this.dodgePadding = dodgePadding;\n    this.maxColumnWidth = maxColumnWidth;\n    this.minColumnWidth = minColumnWidth;\n    this.columnWidthRatio = columnWidthRatio;\n    this.roseWidthRatio = roseWidthRatio;\n    this.multiplePieWidthRatio = multiplePieWidthRatio;\n    this.zIndexReversed = zIndexReversed;\n    this.sortZIndex = sortZIndex;\n    this.useDeferredLabel = useDeferredLabel ? (typeof useDeferredLabel === 'number' ? useDeferredLabel : Infinity) : null;\n  }\n\n  /**\n   * 配置 position 通道映射规则。\n   *\n   * @example\n   * ```typescript\n   * // 数据结构: [{ x: 'A', y: 10, color: 'red' }]\n   * geometry.position('x*y');\n   * geometry.position([ 'x', 'y' ]);\n   * geometry.position({\n   *   fields: [ 'x', 'y' ],\n   * });\n   * ```\n   *\n   * @param cfg 映射规则\n   * @returns\n   */\n  public position(cfg: string | string[] | AttributeOption): Geometry {\n    let positionCfg = cfg;\n    if (!isPlainObject(cfg)) {\n      // 字符串字段或者数组字段\n      positionCfg = {\n        fields: parseFields(cfg),\n      };\n    }\n\n    const fields = get(positionCfg, 'fields');\n    if (fields.length === 1) {\n      // 默认填充一维 1*xx\n      fields.unshift('1');\n      set(positionCfg, 'fields', fields);\n    }\n    set(this.attributeOption, 'position', positionCfg);\n\n    return this;\n  }\n\n  /**\n   * 配置 color 通道映射规则。\n   *\n   * @example\n   * ```typescript\n   * // data: [{ x: 'A', y: 10, color: 'red' }, { x: 'B', y: 30, color: 'yellow' }]\n   * geometry.color({\n   *   fields: [ 'x' ],\n   *   values: [ '#1890ff', '#5AD8A6' ],\n   * });\n   * ```\n   *\n   * @param field 映射规则\n   * @returns\n   */\n  public color(field: AttributeOption): Geometry;\n  /**\n   * @example\n   * ```typescript\n   * // data: [{ x: 'A', y: 10, color: 'red' }, { x: 'B', y: 30, color: 'yellow' }]\n   *\n   * // 使用 '#1890ff' 颜色渲染图形\n   * geometry.color('#1890ff');\n   *\n   * // 根据 x 字段的数据值进行颜色的映射，这时候 G2 会在内部调用默认的回调函数，读取默认提供的颜色进行数据值到颜色值的映射。\n   * geometry.color('x');\n   *\n   * // 将 'x' 字段的数据值映射至指定的颜色值 colors（可以是字符串也可以是数组），此时用于通常映射分类数据\n   * geometry.color('x', [ '#1890ff', '#5AD8A6' ]);\n   *\n   * // 使用回调函数进行颜色值的自定义；可以使用多个字段使用、*号连接\n   * geometry.color('x', (xVal) => {\n   *   if (xVal === 'a') {\n   *     return 'red';\n   *   }\n   *   return 'blue';\n   * });\n   *\n   * // 指定颜色的渐变路径，用于映射连续的数据\n   * geometry.color('x', '#BAE7FF-#1890FF-#0050B3');\n   * ```\n   *\n   * @param field 参与颜色映射的数据字段，多个字段使用 '*' 连接符进行连接。\n   * @param cfg Optional, color 映射规则。\n   * @returns\n   */\n  public color(field: string, cfg?: string | string[] | ColorAttrCallback): Geometry;\n  public color(field: AttributeOption | string, cfg?: string | string[] | ColorAttrCallback): Geometry {\n    this.createAttrOption('color', field, cfg);\n\n    return this;\n  }\n\n  /**\n   * 配置 shape 通道映射规则。\n   *\n   * @example\n   *\n   * ```typescript\n   * // data: [{ x: 'A', y: 10, color: 'red' }, { x: 'B', y: 30, color: 'yellow' }]\n   * geometry.shape({\n   *   fields: [ 'x' ],\n   * });\n   * ```\n   *\n   * @param field 映射规则配置。\n   * @returns\n   */\n  public shape(field: AttributeOption): Geometry;\n  /**\n   *\n   * @example\n   * ```typescript\n   * // data: [{ x: 'A', y: 10, color: 'red' }, { x: 'B', y: 30, color: 'yellow' }]\n   *\n   * // 指定常量，将所有数据值映射到固定的 shape\n   * geometry.shape('circle');\n   *\n   * // 将指定的字段映射到内置的 shapes 数组中\n   * geometry.shape('x');\n   *\n   * // 将指定的字段映射到指定的 shapes 数组中\n   * geometry.shape('x', [ 'circle', 'diamond', 'square' ]);\n   *\n   * // 使用回调函数获取 shape，用于个性化的 shape 定制，可以根据单个或者多个字段确定\n   * geometry.shape('x', (xVal) => {\n   *   if (xVal === 'a') {\n   *     return 'circle';\n   *   }\n   *   return 'diamond';\n   * });\n   * ```\n   *\n   * @param field 参与 shape 映射的数据字段，多个字段使用 '*' 连接符进行连接。\n   * @param cfg Optional, shape 映射规则。\n   * @returns\n   */\n  public shape(field: string, cfg?: string[] | ShapeAttrCallback): Geometry;\n  public shape(field: AttributeOption | string, cfg?: string[] | ShapeAttrCallback): Geometry {\n    this.createAttrOption('shape', field, cfg);\n\n    return this;\n  }\n\n  /**\n   * 配置 size 通道映射规则。\n   *\n   * @example\n   * ```typescript\n   * // data: [{ x: 'A', y: 10, color: 'red' }, { x: 'B', y: 30, color: 'yellow' }]\n   * geometry.size({\n   *   values: [ 10 ],\n   * })\n   * ```\n   *\n   * @param field 映射规则。\n   * @returns\n   */\n  public size(field: AttributeOption): Geometry;\n  /**\n   *\n   * @example\n   * ```typescript\n   * // data: [{ x: 'A', y: 10, color: 'red' }, { x: 'B', y: 30, color: 'yellow' }]\n   *\n   * // 直接指定像素大小\n   * geometry.size(10);\n   *\n   * // 指定映射到 size 的字段，使用内置的默认大小范围为 [1, 10]\n   * geometry.size('x');\n   *\n   * // 指定映射到 size 字段外，还提供了 size 的最大值和最小值范围\n   * geometry.size('x', [ 5, 30 ]);\n   *\n   * // 使用回调函数映射 size，用于个性化的 size 定制，可以使用多个字段进行映射\n   * geometry.size('x', (xVal) => {\n   *   if (xVal === 'a') {\n   *     return 10;\n   *   }\n   *   return 5;\n   * });\n   * ```\n   *\n   * @param field 参与 size 映射的数据字段，多个字段使用 '*' 连接符进行连接。\n   * @param cfg Optional, size 映射规则\n   * @returns\n   */\n  public size(field: number | string, cfg?: [number, number] | SizeAttrCallback): Geometry;\n  public size(field: AttributeOption | number | string, cfg?: [number, number] | SizeAttrCallback): Geometry {\n    this.createAttrOption('size', field, cfg);\n\n    return this;\n  }\n\n  /**\n   * 设置数据调整方式。G2 目前内置了四种类型：\n   * 1. dodge\n   * 2. stack\n   * 3. symmetric\n   * 4. jitter\n   *\n   *\n   * **Tip**\n   * + 对于 'dodge' 类型，可以额外进行如下属性的配置:\n   * ```typescript\n   * geometry.adjust('dodge', {\n   *   marginRatio: 0, // 取 0 到 1 范围的值（相对于每个柱子宽度），用于控制一个分组中柱子之间的间距\n   *   dodgeBy: 'x', // 该属性只对 'dodge' 类型生效，声明以哪个数据字段为分组依据\n   * });\n   * ```\n   *\n   * + 对于 'stack' 类型，可以额外进行如下属性的配置:\n   * ```typescript\n   * geometry.adjust('stack', {\n   *   reverseOrder: false, // 用于控制是否对数据进行反序操作\n   * });\n   * ```\n   *\n   * @example\n   * ```typescript\n   * geometry.adjust('stack');\n   *\n   * geometry.adjust({\n   *   type: 'stack',\n   *   reverseOrder: false,\n   * });\n   *\n   * // 组合使用 adjust\n   * geometry.adjust([ 'stack', 'dodge' ]);\n   *\n   * geometry.adjust([\n   *   { type: 'stack' },\n   *   { type: 'dodge', dodgeBy: 'x' },\n   * ]);\n   * ```\n   *\n   * @param adjustCfg 数据调整配置\n   * @returns\n   */\n  public adjust(adjustCfg: string | string[] | AdjustOption | AdjustOption[]): Geometry {\n    let adjusts: any = adjustCfg;\n    if (isString(adjustCfg) || isPlainObject(adjustCfg)) {\n      adjusts = [adjustCfg];\n    }\n    each(adjusts, (adjust, index) => {\n      if (!isObject(adjust)) {\n        adjusts[index] = { type: adjust };\n      }\n    });\n\n    this.adjustOption = adjusts;\n    return this;\n  }\n\n  /**\n   * 图形样式配置。\n   *\n   * @example\n   * ```typescript\n   * // 配置图形样式\n   * style({\n   *   lineWidth: 2,\n   *   stroke: '#1890ff',\n   * });\n   *\n   * // 根据具体的数据进行详细配置\n   * style({\n   *   fields: [ 'x', 'y' ], // 数据字段\n   *   callback: (xVal, yVal) => {\n   *     const style = { lineWidth: 2, stroke: '#1890ff' };\n   *     if (xVal === 'a') {\n   *       style.lineDash = [ 2, 2 ];\n   *     }\n   *     return style;\n   *   },\n   * });\n   * ```\n   *\n   * @param field 配置样式属性或者样式规则。\n   * @returns\n   */\n  public style(field: StyleOption | LooseObject): Geometry;\n  /**\n   * @example\n   * ```typescript\n   * style('x*y', (xVal, yVal) => {\n   *   const style = { lineWidth: 2, stroke: '#1890ff' };\n   *   if (xVal === 'a') {\n   *     style.lineDash = [ 2, 2 ];\n   *   }\n   *   return style;\n   * });\n   * ```\n   *\n   * @param field 数据字段或者样式配置规则。\n   * @param styleFunc Optional, 样式配置回调函数。\n   * @returns\n   */\n  public style(field: string, styleFunc: StyleCallback): Geometry;\n  public style(field: StyleOption | LooseObject | string, styleFunc?: StyleCallback): Geometry {\n    if (isString(field)) {\n      const fields = parseFields(field);\n      this.styleOption = {\n        fields,\n        callback: styleFunc,\n      };\n    } else {\n      const { fields, callback, cfg } = field as StyleOption;\n      if (fields || callback || cfg) {\n        this.styleOption = field;\n      } else {\n        this.styleOption = {\n          cfg: field,\n        };\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * 配置 Geometry 显示的 tooltip 内容。\n   *\n   * `tooltip(false)` 代表关闭 tooltip。\n   * `tooltip(true)` 代表开启 tooltip。\n   *\n   * Geometry 默认允许 tooltip 展示，我们可以使用以下方法对 tooltip 的展示内容进行配置：\n   *\n   * @example\n   * ```typescript\n   * // data: [{x: 'a', y: 10}]\n   * tooltip({\n   *   fields: [ 'x' ],\n   * });\n   * ```\n   * ![](https://gw.alipayobjects.com/mdn/rms_2274c3/afts/img/A*268uQ50if60AAAAAAAAAAABkARQnAQ)\n   *\n   * ```typescript\n   * tooltip({\n   *   fields: [ 'x', 'y' ],\n   * });\n   * ```\n   * ![](https://gw.alipayobjects.com/mdn/rms_2274c3/afts/img/A*A_ujSa8QhtcAAAAAAAAAAABkARQnAQ)\n   *\n   * tooltip() 方法同样支持数据映射及回调用法：\n   *\n   * @example\n   * ```typescript\n   * chart.tooltip({\n   *   itemTpl: '<li>{x}: {y}</li>',\n   * });\n   *\n   * chart.line()\n   *   .position('x*y')\n   *   .tooltip({\n   *     fields: [ 'x', 'y' ],\n   *     callback: (x, y) => {\n   *       return {\n   *         x,\n   *         y,\n   *       };\n   *     },\n   *   });\n   * ```\n   *\n   * 其返回的值必须为对象，该值中的属性同 chart.tooltip() 的 itemTpl 模板相对应，返回的变量可用于 itemTpl 的字符串模板。\n   *\n   * @param field tooltip 配置信息。\n   * @returns\n   */\n  public tooltip(field: GeometryTooltipOption | boolean): Geometry;\n  /**\n   * @example\n   * ```typescript\n   * // data: [{x: 'a', y: 10}]\n   *\n   * // 等同于 tooltip({ fields: [ 'x' ] })\n   * tooltip('x');\n   *\n   * // 等同于 tooltip({ fields: [ 'x', 'y' ] })\n   * tooltip('x*y');\n   *\n   * // 等同于 tooltip({ fields: [ 'x', 'y' ], callback: (x, y) => { x, y } })\n   * tooltip('x*y', (x, y) => {\n   *   return {\n   *     x,\n   *     y,\n   *   };\n   * });\n   * ```\n   *\n   * @param field 参与映射的字段。\n   * @param cfg Optional, 回调函数\n   * @returns\n   */\n  public tooltip(field: string, cfg?: TooltipCallback): Geometry;\n  public tooltip(field: GeometryTooltipOption | boolean | string, cfg?: TooltipCallback): Geometry {\n    if (isString(field)) {\n      const fields = parseFields(field);\n      this.tooltipOption = {\n        fields,\n        callback: cfg,\n      };\n    } else {\n      this.tooltipOption = field;\n    }\n\n    return this;\n  }\n\n  /**\n   * Geometry 动画配置。\n   *\n   * + `animate(false)` 关闭动画\n   * + `animate(true)` 开启动画，默认开启。\n   *\n   * 我们将动画分为四个场景：\n   * 1. appear: 图表第一次加载时的入场动画；\n   * 2. enter: 图表绘制完成，发生更新后，产生的新图形的进场动画；\n   * 3. update: 图表绘制完成，数据发生变更后，有状态变更的图形的更新动画；\n   * 4. leave: 图表绘制完成，数据发生变更后，被销毁图形的销毁动画。\n   *\n   * @example\n   * ```typescript\n   * animate({\n   *   enter: {\n   *     duration: 1000, // enter 动画执行时间\n   *   },\n   *   leave: false, // 关闭 leave 销毁动画\n   * });\n   * ```\n   *\n   * @param cfg 动画配置\n   * @returns\n   */\n  public animate(cfg: AnimateOption | boolean): Geometry {\n    this.animateOption = cfg;\n    return this;\n  }\n\n  /**\n   * Geometry label 配置。\n   *\n   * @example\n   * ```ts\n   * // data: [ {x: 1, y: 2, z: 'a'}, {x: 2, y: 2, z: 'b'} ]\n   * // 在每个图形上显示 z 字段对应的数值\n   * label({\n   *   fields: [ 'z' ]\n   * });\n   *\n   * label(false); // 不展示 label\n   *\n   * // 在每个图形上显示 x 字段对应的数值，同时配置文本颜色为红色\n   * label('x', {\n   *   style: {\n   *     fill: 'red',\n   *   },\n   * })\n   *\n   * // 以 type 类型的 label 渲染每个图形上显示 x 字段对应的数值，同时格式化文本内容\n   * label('x', (xValue) => {\n   *   return {\n   *     content: xValue + '%',\n   *   };\n   * }, {\n   *   type: 'base' // 声明 label 类型\n   * })\n   * ```\n   *\n   * @param field\n   * @returns label\n   */\n  public label(field: LabelOption | false | string): Geometry;\n  public label(field: string, secondParam: GeometryLabelCfg | LabelCallback): Geometry;\n  public label(field: string, secondParam: LabelCallback, thirdParam: GeometryLabelCfg): Geometry;\n  public label(\n    field: string | LabelOption | false,\n    secondParam?: GeometryLabelCfg | LabelCallback,\n    thirdParam?: GeometryLabelCfg\n  ): Geometry {\n    if (isString(field)) {\n      const labelOption: LabelOption = {};\n      const fields = parseFields(field);\n      labelOption.fields = fields;\n      if (isFunction(secondParam)) {\n        labelOption.callback = secondParam;\n      } else if (isPlainObject(secondParam)) {\n        labelOption.cfg = secondParam;\n      }\n\n      if (thirdParam) {\n        labelOption.cfg = thirdParam;\n      }\n      this.labelOption = labelOption;\n    } else {\n      this.labelOption = field;\n    }\n\n    return this;\n  }\n\n  /**\n   * 设置状态对应的样式。\n   *\n   * @example\n   * ```ts\n   * chart.interval().state({\n   *   selected: {\n   *     animate: { duration: 100, easing: 'easeLinear' },\n   *     style: {\n   *       lineWidth: 2,\n   *       stroke: '#000',\n   *     },\n   *   },\n   * });\n   * ```\n   *\n   * 如果图形 shape 是由多个 shape 组成，即为一个 G.Group 对象，那么针对 group 中的每个 shape，我们需要使用下列方式进行状态样式设置：\n   * 如果我们为 group 中的每个 shape 设置了 'name' 属性(shape.set('name', 'xx'))，则以 'name' 作为 key，否则默认以索引值（即 shape 的 添加顺序）为 key。\n   *\n   * ```ts\n   * chart.interval().shape('groupShape').state({\n   *   selected: {\n   *     style: {\n   *       0: { lineWidth: 2 },\n   *       1: { fillOpacity: 1 },\n   *     }\n   *   }\n   * });\n   * ```\n   *\n   * @param cfg 状态样式\n   */\n  public state(cfg: StateOption) {\n    this.stateOption = cfg;\n    return this;\n  }\n\n  /**\n   * 用于向 shape 中传入自定义的数据。目前可能仅仅可能用于在自定义 shape 的时候，像自定义 shape 中传入自定义的数据，方便实现自定义 shape 的配置能力。\n   *\n   * @example\n   * ```ts\n   * chart.interval().customInfo({ yourData: 'hello, g2!' });\n   * ```\n   *\n   * 然后在自定义 shape 的时候，可以拿到这个信息。\n   *\n   * ```ts\n   * registerShape('interval', 'your-shape', {\n   *   draw(shapeInfo, container) {\n   *     const { customInfo } = shapeInfo;\n   *     console.log(customInfo); // will log { yourData: 'hello, g2!' }.\n   *   }\n   * });\n   * ```\n   *\n   * @param cfg\n   */\n  public customInfo(cfg: any) {\n    this.customOption = cfg;\n    return this;\n  }\n\n  /**\n   * 初始化 Geomtry 实例：\n   * 创建 [[Attribute]] and [[Scale]] 实例，进行数据处理，包括分组、数值化以及数据调整。\n   */\n  public init(cfg: InitCfg = {}) {\n    this.setCfg(cfg);\n    this.initAttributes(); // 创建图形属性\n\n    // 数据加工：分组 -> 数字化 -> adjust\n    this.processData(this.data);\n\n    // 调整 scale\n    this.adjustScale();\n  }\n\n  /**\n   * Geometry 更新。\n   * @param [cfg] 更新的配置\n   */\n  public update(cfg: InitCfg = {}) {\n    const { data, isDataChanged, isCoordinateChanged } = cfg;\n    const { attributeOption, lastAttributeOption } = this;\n\n    if (!isEqual(attributeOption, lastAttributeOption)) {\n      // 映射发生改变，则重新创建图形属性\n      this.init(cfg);\n    } else if (data && (isDataChanged || !isEqual(data, this.data))) {\n      // 数据发生变化\n      this.setCfg(cfg);\n      this.initAttributes(); // 创建图形属性\n      this.processData(data); // 数据加工：分组 -> 数字化 -> adjust\n    } else {\n      // 有可能 coordinate 变化\n      this.setCfg(cfg);\n    }\n\n    // 调整 scale\n    this.adjustScale();\n    this.isCoordinateChanged = isCoordinateChanged;\n  }\n\n  /**\n   * 将原始数据映射至图形空间，同时创建图形对象。\n   */\n  public paint(isUpdate: boolean = false) {\n    if (this.animateOption) {\n      this.animateOption = deepMix({}, getDefaultAnimateCfg(this.type, this.coordinate), this.animateOption);\n    }\n\n    this.defaultSize = undefined;\n    this.elementsMap = {};\n    this.elements = [];\n    const offscreenGroup = this.getOffscreenGroup();\n    offscreenGroup.clear();\n\n    const beforeMappingData = this.beforeMappingData;\n    const dataArray = this.beforeMapping(beforeMappingData);\n\n    this.dataArray = new Array(dataArray.length);\n    for (let i = 0; i < dataArray.length; i++) {\n      const data = dataArray[i];\n      this.dataArray[i] = this.mapping(data);\n    }\n    this.updateElements(this.dataArray, isUpdate);\n    this.lastElementsMap = this.elementsMap;\n\n    if (this.canDoGroupAnimation(isUpdate)) {\n      // 如果用户没有配置 appear.animation，就默认走整体动画\n      const container = this.container;\n      const type = this.type;\n      const coordinate = this.coordinate;\n      const animateCfg = get(this.animateOption, 'appear');\n      const yScale = this.getYScale();\n      const yMinPoint = coordinate.convert({\n        x: 0,\n        y: yScale.scale(this.getYMinValue()),\n      });\n      doGroupAppearAnimate(container, animateCfg, type, coordinate, yMinPoint);\n    }\n\n    // 添加 label\n    if (this.labelOption) {\n      const deferred = this.useDeferredLabel;\n      const callback = (() => this.renderLabels(flatten(this.dataArray) as unknown as MappingDatum[], isUpdate)).bind(this);\n      if (typeof deferred === 'number') {\n        // Use `requestIdleCallback` to render labels in idle time (like react fiber)\n        const timeout = (typeof deferred === 'number' && deferred !== Infinity) ? deferred : 0;\n        if (!window.requestIdleCallback) {\n          setTimeout(callback, timeout);\n        } else {\n          const options = timeout && timeout !== Infinity ? { timeout } : undefined;\n          window.requestIdleCallback(callback, options);\n        }\n      } else {\n        callback();\n      }\n    }\n\n    // 缓存，用于更新\n    this.lastAttributeOption = {\n      ...this.attributeOption,\n    };\n\n    if (this.visible === false) {\n      // 用户在初始化的时候声明 visible: false\n      this.changeVisible(false);\n    }\n  }\n\n  /**\n   * 清空当前 Geometry，配置项仍保留，但是内部创建的对象全部清空。\n   * @override\n   */\n  public clear() {\n    const { container, geometryLabel, offscreenGroup } = this;\n    if (container) {\n      container.clear();\n    }\n\n    if (geometryLabel) {\n      geometryLabel.clear();\n    }\n\n    if (offscreenGroup) {\n      offscreenGroup.clear();\n    }\n\n    // 属性恢复至出厂状态\n    this.scaleDefs = undefined;\n    this.attributes = {};\n    this.scales = {};\n    this.elementsMap = {};\n    this.lastElementsMap = {};\n    this.elements = [];\n    this.adjusts = {};\n    this.dataArray = null;\n    this.beforeMappingData = null;\n    this.lastAttributeOption = undefined;\n    this.defaultSize = undefined;\n    this.idFields = [];\n    this.groupScales = undefined;\n    this.hasSorted = false;\n    this.isCoordinateChanged = false;\n  }\n\n  /**\n   * 销毁 Geometry 实例。\n   */\n  public destroy() {\n    this.clear();\n    const container = this.container;\n    container.remove(true);\n\n    if (this.offscreenGroup) {\n      this.offscreenGroup.remove(true);\n      this.offscreenGroup = null;\n    }\n\n    if (this.geometryLabel) {\n      this.geometryLabel.destroy();\n      this.geometryLabel = null;\n    }\n    this.theme = undefined;\n    this.shapeFactory = undefined;\n\n    super.destroy();\n  }\n\n  /**\n   * 获取决定分组的图形属性对应的 scale 实例。\n   * @returns\n   */\n  public getGroupScales(): Scale[] {\n    return this.groupScales;\n  }\n\n  /**\n   * 根据名字获取图形属性实例。\n   */\n  public getAttribute(name: string): Attribute {\n    return this.attributes[name];\n  }\n\n  /** 获取 x 轴对应的 scale 实例。 */\n  public getXScale(): Scale {\n    return this.getAttribute('position').scales[0];\n  }\n\n  /** 获取 y 轴对应的 scale 实例。 */\n  public getYScale(): Scale {\n    return this.getAttribute('position').scales[1];\n  }\n\n  /**\n   * 获取决定分组的图形属性实例。\n   */\n  public getGroupAttributes(): Attribute[] {\n    const rst = [];\n    each(this.attributes, (attr: Attribute) => {\n      if (GROUP_ATTRS.includes(attr.type)) {\n        rst.push(attr);\n      }\n    });\n    return rst;\n  }\n\n  /** 获取图形属性默认的映射值。 */\n  public getDefaultValue(attrName: string) {\n    let value: any;\n    const attr = this.getAttribute(attrName);\n    if (attr && isEmpty(attr.scales)) {\n      // 获取映射至常量的值\n      value = attr.values[0];\n    }\n    return value;\n  }\n\n  /**\n   * 获取该数据发生图形映射后对应的 Attribute 图形空间数据。\n   * @param attr Attribute 图形属性实例。\n   * @param obj 需要进行映射的原始数据。\n   * @returns\n   */\n  public getAttributeValues(attr: Attribute, obj: Datum) {\n    const params = [];\n    const scales = attr.scales;\n    for (let index = 0, length = scales.length; index < length; index++) {\n      const scale = scales[index];\n      const field = scale.field;\n      if (scale.isIdentity) {\n        params.push(scale.values);\n      } else {\n        params.push(obj[field]);\n      }\n    }\n\n    return attr.mapping(...params);\n  }\n\n  /**\n   * 获取对应的 adjust 实例\n   * @param adjustType\n   * @returns\n   */\n  public getAdjust(adjustType: string) {\n    return this.adjusts[adjustType];\n  }\n\n  /**\n   * 获得 coordinate 实例\n   * @returns\n   */\n  public getCoordinate() {\n    return this.coordinate;\n  }\n\n  public getData() {\n    return this.data;\n  }\n\n  /**\n   * 获取 shape 对应的 marker 样式。\n   * @param shapeName shape 具体名字\n   * @param cfg marker 信息\n   * @returns\n   */\n  public getShapeMarker(shapeName: string, cfg: ShapeMarkerCfg): ShapeMarkerAttrs {\n    const shapeFactory = this.getShapeFactory();\n    return shapeFactory.getMarker(shapeName, cfg);\n  }\n\n  /**\n   * 根据一定的规则查找 Geometry 的 Elements。\n   *\n   * ```typescript\n   * getElementsBy((element) => {\n   *   const data = element.getData();\n   *\n   *   return data.a === 'a';\n   * });\n   * ```\n   *\n   * @param condition 定义查找规则的回调函数。\n   * @returns\n   */\n  public getElementsBy(condition: (element: Element) => boolean): Element[] {\n    return this.elements.filter((element) => condition(element));\n  }\n\n  /**\n   * 获取 Geometry 的所有 Elements。\n   *\n   * ```typescript\n   * getElements();\n   * ```\n   */\n  public getElements() {\n    return this.elements;\n  }\n\n  /**\n   * 获取数据对应的唯一 id。\n   * @param data Element 对应的绘制数据\n   * @returns\n   */\n  public getElementId(data: MappingDatum | MappingDatum[]) {\n    data = isArray(data) ? data[0] : data;\n    const originData = data[FIELD_ORIGIN];\n\n    // 如果用户声明了使用哪些字段作为 id 值\n    if (this.idFields.length) {\n      let elementId = originData[this.idFields[0]];\n      for (let index = 1; index < this.idFields.length; index++) {\n        elementId += '-' + originData[this.idFields[index]];\n      }\n\n      return elementId;\n    }\n\n    const type = this.type;\n    const xScale = this.getXScale();\n    const yScale = this.getYScale();\n    const xField = xScale.field || 'x';\n    const yField = yScale.field || 'y';\n    const yVal = originData[yField];\n    let xVal;\n    if (xScale.type === 'identity') {\n      xVal = xScale.values[0];\n    } else {\n      xVal = originData[xField];\n    }\n\n    let id: string;\n    if (type === 'interval' || type === 'schema') {\n      id = `${xVal}`;\n    } else if (type === 'line' || type === 'area' || type === 'path') {\n      id = type;\n    } else {\n      id = `${xVal}-${yVal}`;\n    }\n\n    const groupScales = this.groupScales;\n\n    for (let index = 0, length = groupScales.length; index < length; index++) {\n      const groupScale = groupScales[index];\n      const field = groupScale.field;\n      id = `${id}-${originData[field]}`;\n    }\n\n    // 用户在进行 dodge 类型的 adjust 调整的时候设置了 dodgeBy 属性\n    const dodgeAdjust = this.getAdjust('dodge');\n    if (dodgeAdjust) {\n      const dodgeBy = dodgeAdjust.dodgeBy;\n      if (dodgeBy) {\n        id = `${id}-${originData[dodgeBy]}`;\n      }\n    }\n\n    if (this.getAdjust('jitter')) {\n      id = `${id}-${data.x}-${data.y}`;\n    }\n\n    return id;\n  }\n\n  /**\n   * 获取所有需要创建 scale 的字段名称。\n   */\n  public getScaleFields(): string[] {\n    const fields = [];\n    const tmpMap = new Map();\n    const { attributeOption, labelOption, tooltipOption } = this;\n    // 获取图形属性上的 fields\n    for (const attributeType in attributeOption) {\n      if (attributeOption.hasOwnProperty(attributeType)) {\n        const eachOpt = attributeOption[attributeType];\n        if (eachOpt.fields) {\n          uniq(eachOpt.fields, fields, tmpMap);\n        } else if (eachOpt.values) {\n          // 考虑 size(10), shape('circle') 等场景\n          uniq(eachOpt.values, fields, tmpMap);\n        }\n      }\n    }\n    // 获取 label 上的字段\n    if (labelOption && labelOption.fields) {\n      uniq(labelOption.fields, fields, tmpMap);\n    }\n\n    // 获取 tooltip 上的字段\n    if (isObject(tooltipOption) && tooltipOption.fields) {\n      uniq(tooltipOption.fields, fields, tmpMap);\n    }\n\n    return fields;\n  }\n\n  /**\n   * 显示或者隐藏 geometry。\n   * @param visible\n   */\n  public changeVisible(visible: boolean) {\n    super.changeVisible(visible);\n    const elements = this.elements;\n    for (let index = 0, length = elements.length; index < length; index++) {\n      const element = elements[index];\n      element.changeVisible(visible);\n    }\n    if (visible) {\n      if (this.container) {\n        this.container.show();\n      }\n      if (this.labelsContainer) {\n        this.labelsContainer.show();\n      }\n    } else {\n      if (this.container) {\n        this.container.hide();\n      }\n      if (this.labelsContainer) {\n        this.labelsContainer.hide();\n      }\n    }\n  }\n\n  /**\n   * 获得所有的字段\n   */\n  public getFields() {\n    const uniqMap = new Map<string, boolean>();\n    const fields = [];\n\n    Object.values(this.attributeOption).forEach((cfg) => {\n      const fs = cfg?.fields || [];\n      fs.forEach((f) => {\n        if (!uniqMap.has(f)) {\n          fields.push(f);\n        }\n        uniqMap.set(f, true);\n      });\n    }, []);\n\n    return fields;\n  }\n\n  /**\n   * 获取当前配置中的所有分组 & 分类的字段。\n   * @return fields string[]\n   */\n  public getGroupFields(): string[] {\n    const groupFields = [];\n    const tmpMap = new Map(); // 用于去重过滤\n    for (let index = 0, length = GROUP_ATTRS.length; index < length; index++) {\n      const attributeName = GROUP_ATTRS[index];\n      const cfg = this.attributeOption[attributeName];\n      if (cfg && cfg.fields) {\n        uniq(cfg.fields, groupFields, tmpMap);\n      }\n    }\n\n    return groupFields;\n  }\n\n  /**\n   * 获得图形的 x y 字段。\n   */\n  public getXYFields() {\n    const [x, y] = this.attributeOption.position.fields;\n    return [x, y];\n  }\n\n  /**\n   * x 字段\n   * @returns\n   */\n  public getXField(): string {\n    return get(this.getXYFields(), [0]);\n  }\n\n  /**\n   * y 字段\n   * @returns\n   */\n  public getYField(): string {\n    return get(this.getXYFields(), [1]);\n  }\n\n  /**\n   * 获取该 Geometry 下所有生成的 shapes。\n   * @returns shapes\n   */\n  public getShapes(): (IShape | IGroup)[] {\n    return this.elements.map((element: Element) => element.shape);\n  }\n\n  /**\n   * 获取虚拟 Group。\n   * @returns\n   */\n  public getOffscreenGroup() {\n    if (!this.offscreenGroup) {\n      const GroupCtor = this.container.getGroupBase(); // 获取分组的构造函数\n      this.offscreenGroup = new GroupCtor({});\n    }\n    return this.offscreenGroup;\n  }\n\n  // 对数据进行排序\n  public sort(mappingArray: Data[]) {\n    if (!this.hasSorted) {\n      // 未发生过排序\n      const xScale = this.getXScale();\n      const xField = xScale.field;\n      for (let index = 0; index < mappingArray.length; index++) {\n        const itemArr = mappingArray[index];\n        itemArr.sort((obj1: Datum, obj2: Datum) => {\n          return xScale.translate(obj1[FIELD_ORIGIN][xField]) - xScale.translate(obj2[FIELD_ORIGIN][xField]);\n        });\n      }\n    }\n\n    this.hasSorted = true;\n  }\n\n  /**\n   * 调整度量范围。主要针对发生层叠以及一些特殊需求的 Geometry，比如 Interval 下的柱状图 Y 轴默认从 0 开始。\n   */\n  protected adjustScale() {\n    const yScale = this.getYScale();\n    // 如果数据发生过 stack adjust，需要调整下 yScale 的数据范围\n    if (yScale && this.getAdjust('stack')) {\n      this.updateStackRange(yScale, this.beforeMappingData);\n    }\n  }\n\n  /**\n   * 获取当前 Geometry 对应的 Shape 工厂实例。\n   */\n  protected getShapeFactory() {\n    const shapeType = this.shapeType;\n    if (!getShapeFactory(shapeType)) {\n      return;\n    }\n    if (!this.shapeFactory) {\n      this.shapeFactory = clone(getShapeFactory(shapeType)); // 防止多个 view 共享一个 shapeFactory 实例，导致 coordinate 被篡改\n    }\n    // 因为这里缓存了 shapeFactory，但是外部可能会变更 coordinate，导致无法重新设置到 shapeFactory 中\n    this.shapeFactory.coordinate = this.coordinate;\n    // theme 原因同上\n    this.shapeFactory.theme = this.theme.geometries[shapeType] || {};\n\n    return this.shapeFactory;\n  }\n\n  /**\n   * 获取每个 Shape 对应的关键点数据。\n   * @param obj 经过分组 -> 数字化 -> adjust 调整后的数据记录\n   * @returns\n   */\n  protected createShapePointsCfg(obj: Datum): S {\n    const xScale = this.getXScale();\n    const yScale = this.getYScale();\n    const x = this.normalizeValues(obj[xScale.field], xScale);\n    let y; // 存在没有 y 的情况\n\n    if (yScale) {\n      y = this.normalizeValues(obj[yScale.field], yScale);\n    } else {\n      y = obj.y ? obj.y : 0.1;\n    }\n\n    return {\n      x,\n      y,\n      y0: yScale ? yScale.scale(this.getYMinValue()) : undefined,\n    } as S;\n  }\n\n  /**\n   * 创建 Element 实例。\n   * @param mappingDatum Element 对应的绘制数据\n   * @param [isUpdate] 是否处于更新阶段\n   * @returns element 返回创建的 Element 实例\n   */\n  protected createElement(mappingDatum: MappingDatum, index: number, isUpdate: boolean = false): Element {\n    const { container } = this;\n\n    const shapeCfg = this.getDrawCfg(mappingDatum); // 获取绘制图形的配置信息\n    const shapeFactory = this.getShapeFactory();\n\n    const element = new Element({\n      shapeFactory,\n      container,\n      offscreenGroup: this.getOffscreenGroup(),\n      elementIndex: index,\n    });\n    element.animate = this.animateOption;\n    element.geometry = this;\n    element.draw(shapeCfg, isUpdate); // 绘制\n\n    return element;\n  }\n\n  /**\n   * 获取每条数据对应的图形绘制数据。\n   * @param mappingDatum 映射后的数据\n   * @returns draw cfg\n   */\n  protected getDrawCfg(mappingDatum: MappingDatum): ShapeInfo {\n    const originData = mappingDatum[FIELD_ORIGIN]; // 原始数据\n    const cfg: ShapeInfo = {\n      mappingData: mappingDatum, // 映射后的数据\n      data: originData, // 原始数据\n      x: mappingDatum.x,\n      y: mappingDatum.y,\n      color: mappingDatum.color,\n      size: mappingDatum.size,\n      isInCircle: this.coordinate.isPolar,\n      customInfo: this.customOption,\n    };\n\n    let shapeName = mappingDatum.shape;\n    if (!shapeName && this.getShapeFactory()) {\n      shapeName = this.getShapeFactory().defaultShapeType;\n    }\n    cfg.shape = shapeName;\n    // 获取默认样式\n    const theme = this.theme.geometries[this.shapeType];\n    cfg.defaultStyle = get(theme, [shapeName, 'default'], {}).style;\n    if (!cfg.defaultStyle && this.getShapeFactory()) {\n      cfg.defaultStyle = this.getShapeFactory().getDefaultStyle(theme);\n    }\n\n    const styleOption = this.styleOption;\n    if (styleOption) {\n      cfg.style = this.getStyleCfg(styleOption, originData);\n    }\n    if (this.generatePoints) {\n      cfg.points = mappingDatum.points;\n      cfg.nextPoints = mappingDatum.nextPoints;\n    }\n\n    return cfg;\n  }\n\n  protected updateElements(mappingDataArray: MappingDatum[][], isUpdate: boolean = false): void {\n    const keyDatum = new Map<string, MappingDatum>();\n    const keys: string[] = [];\n\n    // 用来保持 diff 元素之后 added, updated 的相对顺序\n    const keyIndex = new Map<string, number>();\n    let index = 0;\n\n    // 获得更新数据所有的 keys\n    // 将更新的数据用 key 索引\n    for (let i = 0; i < mappingDataArray.length; i++) {\n      const mappingData = mappingDataArray[i];\n      for (let j = 0; j < mappingData.length; j++) {\n        const mappingDatum = mappingData[j];\n        const key = this.getElementId(mappingDatum);\n        const finalKey = keyDatum.has(key) ? `${key}-${i}-${j}` : key;\n        keys.push(finalKey);\n        keyDatum.set(finalKey, mappingDatum);\n        keyIndex.set(finalKey, index);\n        index++;\n      }\n    }\n\n    this.elements = new Array(index);\n\n    const { added, updated, removed } = diff(this.lastElementsMap, keys);\n\n    // 新建 element\n    for (const key of added) {\n      const mappingDatum = keyDatum.get(key);\n      const i = keyIndex.get(key);\n      const element = this.createElement(mappingDatum, i, isUpdate);\n      this.elements[i] = element;\n      this.elementsMap[key] = element;\n      if (element.shape) {\n        element.shape.set('zIndex', this.zIndexReversed ? this.elements.length - i : i);\n      }\n    }\n\n    // 更新 element\n    for (const key of updated) {\n      const element = this.lastElementsMap[key];\n      const mappingDatum = keyDatum.get(key);\n      const currentShapeCfg = this.getDrawCfg(mappingDatum);\n      const preShapeCfg = element.getModel();\n      const i = keyIndex.get(key);\n      if (this.isCoordinateChanged || isModelChange(currentShapeCfg, preShapeCfg)) {\n        element.animate = this.animateOption;\n        // 通过绘制数据的变更来判断是否需要更新，因为用户有可能会修改图形属性映射\n        element.update(currentShapeCfg); // 更新对应的 element\n      }\n      this.elements[i] = element;\n      this.elementsMap[key] = element;\n      if (element.shape) {\n        element.shape.set('zIndex', this.zIndexReversed ? this.elements.length - i : i);\n      }\n    }\n\n    // 全部 setZIndex 之后，再执行 sort\n    if (this.container) {\n      this.container.sort();\n    }\n\n    // 销毁被删除的 elements\n    for (const key of removed) {\n      const element = this.lastElementsMap[key];\n      // 更新动画配置，用户有可能在更新之前有对动画进行配置操作\n      element.animate = this.animateOption;\n      element.destroy();\n    }\n  }\n\n  /**\n   * 获取渲染的 label 类型。\n   */\n  protected getLabelType(): string {\n    const { labelOption, coordinate, type } = this;\n    const { type: coordinateType, isTransposed } = coordinate;\n    let labelType = get(labelOption, ['cfg', 'type']);\n    if (!labelType) {\n      // 用户未定义，则进行默认的逻辑\n      if (coordinateType === 'polar') {\n        // 极坐标下使用通用的极坐标文本，转置则使用饼图\n        labelType = isTransposed ? 'pie' : 'polar';\n      } else if (coordinateType === 'theta') {\n        // theta 坐标系下使用饼图文本\n        labelType = 'pie';\n      } else if (type === 'interval' || type === 'polygon') {\n        labelType = 'interval';\n      } else {\n        labelType = 'base';\n      }\n    }\n\n    return labelType;\n  }\n\n  /**\n   * 获取 Y 轴上的最小值。\n   */\n  protected getYMinValue(): number {\n    const yScale = this.getYScale();\n    const { min, max } = yScale;\n    let value: number;\n\n    if (min >= 0) {\n      value = min;\n    } else if (max <= 0) {\n      // 当值全位于负区间时，需要保证 ymin 在区域内，不可为 0\n      value = max;\n    } else {\n      value = 0;\n    }\n    return value;\n  }\n\n  // 创建图形属性相关的配置项\n  protected createAttrOption(attrName: string, field: AttributeOption | string | number, cfg?) {\n    if (isNil(field) || isObject(field)) {\n      if (isObject(field) && isEqual(Object.keys(field), ['values'])) {\n        // shape({ values: [ 'funnel' ] })\n        set(this.attributeOption, attrName, {\n          fields: field.values,\n        });\n      } else {\n        set(this.attributeOption, attrName, field);\n      }\n    } else {\n      const attrCfg: AttributeOption = {};\n      if (isNumber(field)) {\n        // size(3)\n        attrCfg.values = [field];\n      } else {\n        attrCfg.fields = parseFields(field);\n      }\n\n      if (cfg) {\n        if (isFunction(cfg)) {\n          attrCfg.callback = cfg;\n        } else {\n          attrCfg.values = cfg;\n        }\n      }\n\n      set(this.attributeOption, attrName, attrCfg);\n    }\n  }\n\n  protected initAttributes() {\n    const { attributes, attributeOption, theme, shapeType } = this;\n    this.groupScales = [];\n    const tmpMap = {};\n\n    // 遍历每一个 attrOption，各自创建 Attribute 实例\n    for (const attrType in attributeOption) {\n      if (attributeOption.hasOwnProperty(attrType)) {\n        const option: AttributeOption = attributeOption[attrType];\n        if (!option) {\n          return;\n        }\n        const attrCfg: AttributeInstanceCfg = {\n          ...option,\n        };\n        const { callback, values, fields = [] } = attrCfg;\n\n        // 获取每一个字段对应的 scale\n        const scales = fields.map((field) => {\n          const scale = this.scales[field];\n          if (!tmpMap[field] && GROUP_ATTRS.includes(attrType)) {\n            const inferedScaleType = inferScaleType(scale, get(this.scaleDefs, field), attrType, this.type);\n            if (inferedScaleType === 'cat') {\n              this.groupScales.push(scale);\n              tmpMap[field] = true;\n            }\n          }\n          return scale;\n        });\n\n        attrCfg.scales = scales;\n\n        if (attrType !== 'position' && scales.length === 1 && scales[0].type === 'identity') {\n          // 用户在图形通道上声明了常量字段 color('red'), size(5)\n          attrCfg.values = scales[0].values;\n        } else if (!callback && !values) {\n          // 用户没有指定任何规则，则使用默认的映射规则\n          if (attrType === 'size') {\n            attrCfg.values = theme.sizes;\n          } else if (attrType === 'shape') {\n            attrCfg.values = theme.shapes[shapeType] || [];\n          } else if (attrType === 'color') {\n            if (scales.length) {\n              // 根据数值个数使用对应的色板\n              attrCfg.values = scales[0].values.length <= 10 ? theme.colors10 : theme.colors20;\n            } else {\n              attrCfg.values = theme.colors10;\n            }\n          }\n        }\n        const AttributeCtor = getAttributeClass(attrType);\n        attributes[attrType] = new AttributeCtor(attrCfg);\n      }\n    }\n  }\n\n  // 处理数据：分组 -> 数字化 -> adjust 调整\n  private processData(data: Data) {\n    this.hasSorted = false;\n    const { scales } = this.getAttribute('position');\n    const categoryScales = scales.filter((scale: Scale) => scale.isCategory);\n\n    const groupedArray = this.groupData(data); // 数据分组\n    const beforeAdjust = [];\n    for (let i = 0, len = groupedArray.length; i < len; i++) {\n      const subData = groupedArray[i];\n      const arr = [];\n      for (let j = 0, subLen = subData.length; j < subLen; j++) {\n        const originData = subData[j];\n        const item = {};\n        // tslint:disable-next-line: forin\n        for (const k in originData) {\n          item[k] = originData[k];\n        }\n        item[FIELD_ORIGIN] = originData;\n\n        // 将分类数据翻译成数据, 仅对位置相关的度量进行数字化处理\n        for (const scale of categoryScales) {\n          const field = scale.field;\n          item[field] = scale.translate(item[field]);\n        }\n        arr.push(item);\n      }\n      beforeAdjust.push(arr);\n    }\n\n    const dataArray = this.adjustData(beforeAdjust); // 进行 adjust 数据调整\n    this.beforeMappingData = dataArray;\n\n    return dataArray;\n  }\n\n  // 调整数据\n  private adjustData(dataArray: Data[]): Data[] {\n    const adjustOption = this.adjustOption;\n    const { intervalPadding, dodgePadding, theme } = this;\n    // 兼容theme配置\n    const maxColumnWidth = this.maxColumnWidth || theme.maxColumnWidth;\n    const minColumnWidth = this.minColumnWidth || theme.minColumnWidth;\n    const columnWidthRatio = this.columnWidthRatio || theme.columnWidthRatio;\n    let result = dataArray;\n\n    if (adjustOption) {\n      const xScale = this.getXScale();\n      const yScale = this.getYScale();\n      const xField = xScale.field;\n      const yField = yScale ? yScale.field : null;\n      const xDimensionLength = getXDimensionLength(this.coordinate);\n      const groupNum = xScale.values.length;\n      // 传入size计算相关参数，默认宽度、最大最小宽度约束\n      const sizeAttr = this.getAttribute('size');\n      let defaultSize;\n      if (sizeAttr) {\n        defaultSize = sizeAttr.values[0];\n      }\n      for (let i = 0, len = adjustOption.length; i < len; i++) {\n        const adjust = adjustOption[i];\n        const adjustCfg: AdjustInstanceCfg = {\n          xField,\n          yField,\n          intervalPadding,\n          dodgePadding,\n          xDimensionLength,\n          groupNum,\n          defaultSize,\n          maxColumnWidth,\n          minColumnWidth,\n          columnWidthRatio,\n          ...adjust,\n        };\n        const type = adjust.type;\n        if (type === 'dodge') {\n          const adjustNames = [];\n          if (xScale.isCategory || xScale.type === 'identity') {\n            adjustNames.push('x');\n          } else if (!yScale) {\n            adjustNames.push('y');\n          } else {\n            throw new Error('dodge is not support linear attribute, please use category attribute!');\n          }\n          adjustCfg.adjustNames = adjustNames;\n          // 每个分组内每条柱子的宽度占比，用户不可指定，用户需要通过 columnWidthRatio 指定\n          // 兼容theme配置\n          adjustCfg.dodgeRatio = columnWidthRatio;\n        } else if (type === 'stack') {\n          const coordinate = this.coordinate;\n          if (!yScale) {\n            // 一维的情况下获取高度和默认size\n            adjustCfg.height = coordinate.getHeight();\n            const size = this.getDefaultValue('size') || 3;\n            adjustCfg.size = size;\n          }\n          // 不进行 transpose 时，用户又没有设置这个参数时，默认从上向下\n          if (!coordinate.isTransposed && isNil(adjustCfg.reverseOrder)) {\n            adjustCfg.reverseOrder = true;\n          }\n        }\n        const adjustCtor = getAdjustClass(type);\n        adjustCfg.dimValuesMap = {};\n        //生成dimValuesMap\n        if (xScale && xScale.values) {\n          adjustCfg.dimValuesMap[xScale.field] = xScale.values.map((v) => xScale.translate(v));\n        }\n        const adjustInstance = new adjustCtor(adjustCfg);\n\n        result = adjustInstance.process(result);\n\n        this.adjusts[type] = adjustInstance;\n      }\n    }\n\n    return result;\n  }\n\n  // 对数据进行分组\n  private groupData(data: Data): Data[] {\n    const groupScales = this.getGroupScales();\n    const scaleDefs = this.scaleDefs;\n    const appendConditions = {};\n    const groupFields = [];\n    for (let index = 0; index < groupScales.length; index++) {\n      const scale = groupScales[index];\n      const field = scale.field;\n      groupFields.push(field);\n      if (get(scaleDefs, [field, 'values'])) {\n        // 用户通过 view.scale() 接口指定了 values 属性\n        appendConditions[field] = scaleDefs[field].values;\n      }\n    }\n\n    return group(data, groupFields, appendConditions);\n  }\n\n  // 更新发生层叠后的数据对应的度量范围\n  private updateStackRange(scale: Scale, dataArray: Data[]) {\n    const mergeArray = flatten(dataArray);\n    const field = scale.field;\n    let min = scale.min;\n    let max = scale.max;\n    for (let index = 0; index < mergeArray.length; index++) {\n      const obj = mergeArray[index];\n      const tmpMin = Math.min.apply(null, obj[field]);\n      const tmpMax = Math.max.apply(null, obj[field]);\n      if (tmpMin < min) {\n        min = tmpMin;\n      }\n      if (tmpMax > max) {\n        max = tmpMax;\n      }\n    }\n    const scaleDefs = this.scaleDefs;\n    const cfg: LooseObject = {};\n    if (min < scale.min && !get(scaleDefs, [field, 'min'])) {\n      // 用户如果在列定义中定义了 min，则以用户定义的为准\n      cfg.min = min;\n    }\n    if (max > scale.max && !get(scaleDefs, [field, 'max'])) {\n      // 用户如果在列定义中定义了 max\n      cfg.max = max;\n    }\n\n    scale.change(cfg);\n  }\n\n  // 将数据映射至图形空间前的操作：排序以及关键点的生成\n  private beforeMapping(beforeMappingData: Data[]) {\n    // 当初加 clone 是因为 points 的引用关系，导致更新失败，可是现在貌似复现不出来了，所以暂时不进行 clone\n    // const source = clone(beforeMappingData);\n    const source = beforeMappingData;\n    if (this.sortable) {\n      this.sort(source);\n    }\n    if (this.generatePoints) {\n      // 需要生成关键点\n      for (let index = 0, length = source.length; index < length; index++) {\n        const currentData = source[index];\n        this.generateShapePoints(currentData);\n        const nextData = source[index + 1];\n        if (nextData) {\n          this.generateShapePoints(nextData);\n          currentData[0].nextPoints = nextData[0].points;\n        }\n      }\n    }\n\n    return source;\n  }\n\n  // 生成 shape 的关键点\n  private generateShapePoints(data: Data) {\n    const shapeFactory = this.getShapeFactory();\n    const shapeAttr = this.getAttribute('shape');\n    for (let index = 0; index < data.length; index++) {\n      const obj = data[index];\n      const cfg = this.createShapePointsCfg(obj);\n      const shape = shapeAttr ? this.getAttributeValues(shapeAttr, obj) : null;\n      const points = shapeFactory.getShapePoints(shape, cfg);\n      obj.points = points;\n    }\n  }\n\n  // 将数据归一化\n  private normalizeValues(values, scale) {\n    let rst = [];\n    if (isArray(values)) {\n      for (let index = 0; index < values.length; index++) {\n        const value = values[index];\n        rst.push(scale.scale(value));\n      }\n    } else {\n      rst = scale.scale(values);\n    }\n    return rst;\n  }\n\n  // 将数据映射至图形空间\n  private mapping(data: Data): MappingDatum[] {\n    const attributes = this.attributes;\n    const mappingData = [];\n    for (let index = 0; index < data.length; index++) {\n      const record = data[index];\n      const newRecord: MappingDatum = {\n        _origin: record[FIELD_ORIGIN],\n        points: record.points,\n        nextPoints: record.nextPoints,\n      };\n      for (const k in attributes) {\n        if (attributes.hasOwnProperty(k)) {\n          const attr = attributes[k];\n          const names = attr.names;\n          const values = this.getAttributeValues(attr, record);\n          if (names.length > 1) {\n            // position 之类的生成多个字段的属性\n            for (let j = 0; j < values.length; j += 1) {\n              const val = values[j];\n              const name = names[j];\n              newRecord[name] = isArray(val) && val.length === 1 ? val[0] : val; // 只有一个值时返回第一个属性值\n            }\n          } else {\n            // values.length === 1 的判断是以下情况，获取用户设置的图形属性值\n            // shape('a', ['dot', 'dash']), color('a', ['red', 'yellow'])\n            newRecord[names[0]] = values.length === 1 ? values[0] : values;\n          }\n        }\n      }\n\n      this.convertPoint(newRecord); // 将 x、y 转换成画布坐标\n      mappingData.push(newRecord);\n    }\n\n    return mappingData;\n  }\n\n  // 将归一化的坐标值转换成画布坐标\n  private convertPoint(mappingRecord: MappingDatum) {\n    const { x, y } = mappingRecord;\n\n    let rstX;\n    let rstY;\n    let obj;\n    const coordinate = this.coordinate;\n    if (isArray(x) && isArray(y)) {\n      rstX = [];\n      rstY = [];\n      for (let i = 0, j = 0, xLen = x.length, yLen = y.length; i < xLen && j < yLen; i += 1, j += 1) {\n        obj = coordinate.convert({\n          x: x[i],\n          y: y[j],\n        });\n        rstX.push(obj.x);\n        rstY.push(obj.y);\n      }\n    } else if (isArray(y)) {\n      rstY = [];\n      for (let index = 0; index < y.length; index++) {\n        const yVal = y[index];\n        obj = coordinate.convert({\n          x: x as number,\n          y: yVal,\n        });\n        if (rstX && rstX !== obj.x) {\n          if (!isArray(rstX)) {\n            rstX = [rstX];\n          }\n          rstX.push(obj.x);\n        } else {\n          rstX = obj.x;\n        }\n        rstY.push(obj.y);\n      }\n    } else if (isArray(x)) {\n      rstX = [];\n      for (let index = 0; index < x.length; index++) {\n        const xVal = x[index];\n        obj = coordinate.convert({\n          x: xVal,\n          y,\n        });\n        if (rstY && rstY !== obj.y) {\n          if (!isArray(rstY)) {\n            rstY = [rstY];\n          }\n          rstY.push(obj.y);\n        } else {\n          rstY = obj.y;\n        }\n        rstX.push(obj.x);\n      }\n    } else {\n      const point = coordinate.convert({\n        x,\n        y,\n      });\n      rstX = point.x;\n      rstY = point.y;\n    }\n    mappingRecord.x = rstX;\n    mappingRecord.y = rstY;\n  }\n\n  // 获取 style 配置\n  private getStyleCfg(styleOption: StyleOption, originData: Datum) {\n    const { fields = [], callback, cfg } = styleOption;\n    if (cfg) {\n      // 用户直接配置样式属性\n      return cfg;\n    }\n\n    const params = fields.map((field) => {\n      return originData[field];\n    });\n\n    return callback(...params);\n  }\n\n  private setCfg(cfg: InitCfg) {\n    const { coordinate, data, theme, scaleDefs } = cfg;\n    if (coordinate) {\n      this.coordinate = coordinate;\n    }\n    if (data) {\n      this.data = data;\n    }\n    if (scaleDefs) {\n      this.scaleDefs = scaleDefs;\n      this.idFields = [];\n      each(scaleDefs, (scaleDef, field) => {\n        if (scaleDef && scaleDef.key) {\n          this.idFields.push(field);\n        }\n      });\n    }\n    if (theme) {\n      this.theme = this.userTheme ? deepMix({}, theme, this.userTheme) : theme; // 支持 geometry 层级的主题设置\n    }\n  }\n\n  private async renderLabels(mappingArray: MappingDatum[], isUpdate: boolean = false) {\n    let geometryLabel = this.geometryLabel;\n\n    this.emit(GEOMETRY_LIFE_CIRCLE.BEFORE_RENDER_LABEL);\n\n    if (!geometryLabel) {\n      // 初次创建\n      const labelType = this.getLabelType();\n      const GeometryLabelsCtor = getGeometryLabel(labelType);\n      geometryLabel = new GeometryLabelsCtor(this);\n      this.geometryLabel = geometryLabel;\n    }\n    await geometryLabel.render(mappingArray, isUpdate);\n\n    // 将 label 同 element 进行关联\n    const labelsMap = geometryLabel.labelsRenderer.shapesMap;\n    // Store labels for every element.\n    const elementLabels = new Map<Element, Set<IGroup>>();\n    each(labelsMap, (labelGroup: IGroup, labelGroupId: string) => {\n      const labelChildren = labelGroup.getChildren() || [];\n      for (let j = 0; j < labelChildren.length; j++) {\n        const labelShape = labelChildren[j];\n        const element = this.elementsMap[labelShape.get('elementId') || labelGroupId.split(' ')[0]];\n        if (element) {\n          labelShape.cfg.name = ['element', 'label'];\n          labelShape.cfg.element = element;\n          const labels = elementLabels.get(element) || new Set();\n          labels.add(labelGroup);\n          elementLabels.set(element, labels);\n        }\n      }\n    });\n    for (const [element, labels] of elementLabels.entries()) {\n      element.labelShape = [...labels];\n    }\n\n    this.emit(GEOMETRY_LIFE_CIRCLE.AFTER_RENDER_LABEL);\n  }\n  /**\n   * 是否需要进行群组入场动画\n   * 规则：\n   * 1. 如果发生更新，则不进行\n   * 2. 如果用户关闭 geometry 动画，则不进行\n   * 3. 如果用户关闭了 appear 动画，则不进行\n   * 4. 如果用户配置了 appear.animation，则不进行\n   */\n  private canDoGroupAnimation(isUpdate: boolean) {\n    return (\n      !isUpdate &&\n      this.animateOption &&\n      (get(this.animateOption, 'appear') === undefined ||\n        (get(this.animateOption, 'appear') && get(this.animateOption, ['appear', 'animation']) === undefined))\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}