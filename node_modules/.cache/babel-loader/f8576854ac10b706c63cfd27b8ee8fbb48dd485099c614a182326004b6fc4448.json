{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { isString, memoize, values, toString } from '@antv/util';\nimport { getCanvasContext } from './context';\n/**\n * 计算文本在画布中的宽度\n */\nexport var measureTextWidth = memoize(function (text, font) {\n  if (font === void 0) {\n    font = {};\n  }\n  var fontSize = font.fontSize,\n    fontFamily = font.fontFamily,\n    fontWeight = font.fontWeight,\n    fontStyle = font.fontStyle,\n    fontVariant = font.fontVariant;\n  var ctx = getCanvasContext();\n  ctx.font = [fontStyle, fontVariant, fontWeight, \"\".concat(fontSize, \"px\"), fontFamily].join(' ');\n  return ctx.measureText(isString(text) ? text : '').width;\n}, function (text, font) {\n  if (font === void 0) {\n    font = {};\n  }\n  return __spreadArray([text], __read(values(font)), false).join('');\n});\n/**\n * 获取文本的 ... 文本。\n * 算法（减少每次 measureText 的长度，measureText 的性能跟字符串时间相关）：\n * 1. 先通过 STEP 逐步计算，找到最后一个小于 maxWidth 的字符串\n * 2. 然后对最后这个字符串二分计算\n * @param text 需要计算的文本, 由于历史原因 除了支持string，还支持空值,number和数组等\n * @param maxWidth\n * @param font\n */\nexport var getEllipsisText = function getEllipsisText(text, maxWidth, font) {\n  var STEP = 16; // 每次 16，调参工程师\n  var DOT_WIDTH = measureTextWidth('...', font);\n  var leftText;\n  if (!isString(text)) {\n    leftText = toString(text);\n  } else {\n    leftText = text;\n  }\n  var leftWidth = maxWidth;\n  var r = []; // 最终的分段字符串\n  var currentText;\n  var currentWidth;\n  if (measureTextWidth(text, font) <= maxWidth) {\n    return text;\n  }\n  // 首先通过 step 计算，找出最大的未超出长度的\n  while (true) {\n    // 更新字符串\n    currentText = leftText.substr(0, STEP);\n    // 计算宽度\n    currentWidth = measureTextWidth(currentText, font);\n    // 超出剩余宽度，则停止\n    if (currentWidth + DOT_WIDTH > leftWidth) {\n      if (currentWidth > leftWidth) {\n        break;\n      }\n    }\n    r.push(currentText);\n    // 没有超出，则计算剩余宽度\n    leftWidth -= currentWidth;\n    leftText = leftText.substr(STEP);\n    // 字符串整体没有超出\n    if (!leftText) {\n      return r.join('');\n    }\n  }\n  // 最下的最后一个 STEP，使用 1 递增（用二分效果更高）\n  while (true) {\n    // 更新字符串\n    currentText = leftText.substr(0, 1);\n    // 计算宽度\n    currentWidth = measureTextWidth(currentText, font);\n    // 超出剩余宽度，则停止\n    if (currentWidth + DOT_WIDTH > leftWidth) {\n      break;\n    }\n    r.push(currentText);\n    // 没有超出，则计算剩余宽度\n    leftWidth -= currentWidth;\n    leftText = leftText.substr(1);\n    if (!leftText) {\n      return r.join('');\n    }\n  }\n  return \"\".concat(r.join(''), \"...\");\n};","map":{"version":3,"mappings":";AAAA,SAASA,QAAQ,EAAEC,OAAO,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,YAAY;AAEhE,SAASC,gBAAgB,QAAQ,WAAW;AAQ5C;;;AAGA,OAAO,IAAMC,gBAAgB,GAAGJ,OAAO,CACrC,UAACK,IAAS,EAAEC,IAAe;EAAf;IAAAA,SAAe;EAAA;EACjB,YAAQ,GAAqDA,IAAI,SAAzD;IAAEC,UAAU,GAAyCD,IAAI,WAA7C;IAAEE,UAAU,GAA6BF,IAAI,WAAjC;IAAEG,SAAS,GAAkBH,IAAI,UAAtB;IAAEI,WAAW,GAAKJ,IAAI,YAAT;EAChE,IAAMK,GAAG,GAAGR,gBAAgB,EAAE;EAC9BQ,GAAI,CAACL,IAAI,GAAG,CAACG,SAAS,EAAEC,WAAW,EAAEF,UAAU,EAAE,UAAGI,QAAQ,OAAI,EAAEL,UAAU,CAAC,CAACM,IAAI,CAAC,GAAG,CAAC;EACvF,OAAOF,GAAI,CAACG,WAAW,CAACf,QAAQ,CAACM,IAAI,CAAC,GAAGA,IAAI,GAAG,EAAE,CAAC,CAACU,KAAK;AAC3D,CAAC,EACD,UAACV,IAAS,EAAEC,IAAe;EAAf;IAAAA,SAAe;EAAA;EAAK,sBAACD,IAAI,UAAKJ,MAAM,CAACK,IAAI,CAAC,UAAEO,IAAI,CAAC,EAAE,CAAC;AAAhC,CAAgC,CACjE;AAED;;;;;;;;;AASA,OAAO,IAAMG,eAAe,GAAG,SAAlBA,eAAe,CAAIX,IAAS,EAAEY,QAAgB,EAAEX,IAAW;EACtE,IAAMY,IAAI,GAAG,EAAE,CAAC,CAAC;EACjB,IAAMC,SAAS,GAAGf,gBAAgB,CAAC,KAAK,EAAEE,IAAI,CAAC;EAE/C,IAAIc,QAAQ;EAEZ,IAAI,CAACrB,QAAQ,CAACM,IAAI,CAAC,EAAE;IACnBe,QAAQ,GAAGlB,QAAQ,CAACG,IAAI,CAAC;GAC1B,MAAM;IACLe,QAAQ,GAAGf,IAAI;;EAGjB,IAAIgB,SAAS,GAAGJ,QAAQ;EAExB,IAAMK,CAAC,GAAG,EAAE,CAAC,CAAC;EACd,IAAIC,WAAW;EACf,IAAIC,YAAY;EAEhB,IAAIpB,gBAAgB,CAACC,IAAI,EAAEC,IAAI,CAAC,IAAIW,QAAQ,EAAE;IAC5C,OAAOZ,IAAI;;EAGb;EACA,OAAO,IAAI,EAAE;IACX;IACAkB,WAAW,GAAGH,QAAQ,CAACK,MAAM,CAAC,CAAC,EAAEP,IAAI,CAAC;IAEtC;IACAM,YAAY,GAAGpB,gBAAgB,CAACmB,WAAW,EAAEjB,IAAI,CAAC;IAElD;IACA,IAAIkB,YAAY,GAAGL,SAAS,GAAGE,SAAS,EAAE;MACxC,IAAIG,YAAY,GAAGH,SAAS,EAAE;QAC5B;;;IAIJC,CAAC,CAACI,IAAI,CAACH,WAAW,CAAC;IAEnB;IACAF,SAAS,IAAIG,YAAY;IACzBJ,QAAQ,GAAGA,QAAQ,CAACK,MAAM,CAACP,IAAI,CAAC;IAEhC;IACA,IAAI,CAACE,QAAQ,EAAE;MACb,OAAOE,CAAC,CAACT,IAAI,CAAC,EAAE,CAAC;;;EAIrB;EACA,OAAO,IAAI,EAAE;IACX;IACAU,WAAW,GAAGH,QAAQ,CAACK,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;IAEnC;IACAD,YAAY,GAAGpB,gBAAgB,CAACmB,WAAW,EAAEjB,IAAI,CAAC;IAElD;IACA,IAAIkB,YAAY,GAAGL,SAAS,GAAGE,SAAS,EAAE;MACxC;;IAGFC,CAAC,CAACI,IAAI,CAACH,WAAW,CAAC;IACnB;IACAF,SAAS,IAAIG,YAAY;IACzBJ,QAAQ,GAAGA,QAAQ,CAACK,MAAM,CAAC,CAAC,CAAC;IAE7B,IAAI,CAACL,QAAQ,EAAE;MACb,OAAOE,CAAC,CAACT,IAAI,CAAC,EAAE,CAAC;;;EAIrB,OAAO,UAAGS,CAAC,CAACT,IAAI,CAAC,EAAE,CAAC,QAAK;AAC3B,CAAC","names":["isString","memoize","values","toString","getCanvasContext","measureTextWidth","text","font","fontFamily","fontWeight","fontStyle","fontVariant","ctx","fontSize","join","measureText","width","getEllipsisText","maxWidth","STEP","DOT_WIDTH","leftText","leftWidth","r","currentText","currentWidth","substr","push"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/g2/src/util/text.ts"],"sourcesContent":["import { isString, memoize, values, toString } from '@antv/util';\nimport * as CSS from 'csstype';\nimport { getCanvasContext } from './context';\n\ntype FontFace = CSS.Properties;\n\ntype Font = Pick<FontFace, 'fontFamily' | 'fontWeight' | 'fontStyle' | 'fontVariant'> & {\n  fontSize?: number;\n};\n\n/**\n * 计算文本在画布中的宽度\n */\nexport const measureTextWidth = memoize(\n  (text: any, font: Font = {}): number => {\n    const { fontSize, fontFamily, fontWeight, fontStyle, fontVariant } = font;\n    const ctx = getCanvasContext();\n    ctx!.font = [fontStyle, fontVariant, fontWeight, `${fontSize}px`, fontFamily].join(' ');\n    return ctx!.measureText(isString(text) ? text : '').width;\n  },\n  (text: any, font: Font = {}) => [text, ...values(font)].join('')\n);\n\n/**\n * 获取文本的 ... 文本。\n * 算法（减少每次 measureText 的长度，measureText 的性能跟字符串时间相关）：\n * 1. 先通过 STEP 逐步计算，找到最后一个小于 maxWidth 的字符串\n * 2. 然后对最后这个字符串二分计算\n * @param text 需要计算的文本, 由于历史原因 除了支持string，还支持空值,number和数组等\n * @param maxWidth\n * @param font\n */\nexport const getEllipsisText = (text: any, maxWidth: number, font?: Font) => {\n  const STEP = 16; // 每次 16，调参工程师\n  const DOT_WIDTH = measureTextWidth('...', font);\n\n  let leftText;\n\n  if (!isString(text)) {\n    leftText = toString(text);\n  } else {\n    leftText = text;\n  }\n\n  let leftWidth = maxWidth;\n\n  const r = []; // 最终的分段字符串\n  let currentText;\n  let currentWidth;\n\n  if (measureTextWidth(text, font) <= maxWidth) {\n    return text;\n  }\n\n  // 首先通过 step 计算，找出最大的未超出长度的\n  while (true) {\n    // 更新字符串\n    currentText = leftText.substr(0, STEP);\n\n    // 计算宽度\n    currentWidth = measureTextWidth(currentText, font);\n\n    // 超出剩余宽度，则停止\n    if (currentWidth + DOT_WIDTH > leftWidth) {\n      if (currentWidth > leftWidth) {\n        break;\n      }\n    }\n\n    r.push(currentText);\n\n    // 没有超出，则计算剩余宽度\n    leftWidth -= currentWidth;\n    leftText = leftText.substr(STEP);\n\n    // 字符串整体没有超出\n    if (!leftText) {\n      return r.join('');\n    }\n  }\n\n  // 最下的最后一个 STEP，使用 1 递增（用二分效果更高）\n  while (true) {\n    // 更新字符串\n    currentText = leftText.substr(0, 1);\n\n    // 计算宽度\n    currentWidth = measureTextWidth(currentText, font);\n\n    // 超出剩余宽度，则停止\n    if (currentWidth + DOT_WIDTH > leftWidth) {\n      break;\n    }\n\n    r.push(currentText);\n    // 没有超出，则计算剩余宽度\n    leftWidth -= currentWidth;\n    leftText = leftText.substr(1);\n\n    if (!leftText) {\n      return r.join('');\n    }\n  }\n\n  return `${r.join('')}...`;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}