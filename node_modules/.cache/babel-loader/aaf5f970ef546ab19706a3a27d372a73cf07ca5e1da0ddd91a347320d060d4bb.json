{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { isNumber, isString } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nimport { renderTag } from '../util/graphic';\nimport Theme from '../util/theme';\nimport { getValueByPercent } from '../util/util';\nvar LineAnnotation = /** @class */function (_super) {\n  __extends(LineAnnotation, _super);\n  function LineAnnotation() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * @protected\n   * 默认的配置项\n   * @returns {object} 默认的配置项\n   */\n  LineAnnotation.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    return __assign(__assign({}, cfg), {\n      name: 'annotation',\n      type: 'line',\n      locationType: 'region',\n      start: null,\n      end: null,\n      style: {},\n      text: null,\n      defaultCfg: {\n        style: {\n          fill: Theme.textColor,\n          fontSize: 12,\n          textAlign: 'center',\n          textBaseline: 'bottom',\n          fontFamily: Theme.fontFamily\n        },\n        text: {\n          position: 'center',\n          autoRotate: true,\n          content: null,\n          offsetX: 0,\n          offsetY: 0,\n          style: {\n            stroke: Theme.lineColor,\n            lineWidth: 1\n          }\n        }\n      }\n    });\n  };\n  LineAnnotation.prototype.renderInner = function (group) {\n    this.renderLine(group);\n    if (this.get('text')) {\n      this.renderLabel(group);\n    }\n  };\n  // 绘制线\n  LineAnnotation.prototype.renderLine = function (group) {\n    var start = this.get('start');\n    var end = this.get('end');\n    var style = this.get('style');\n    this.addShape(group, {\n      type: 'line',\n      id: this.getElementId('line'),\n      name: 'annotation-line',\n      attrs: __assign({\n        x1: start.x,\n        y1: start.y,\n        x2: end.x,\n        y2: end.y\n      }, style)\n    });\n  };\n  // 获取 label 的位置\n  LineAnnotation.prototype.getLabelPoint = function (start, end, position) {\n    var percent;\n    if (position === 'start') {\n      percent = 0;\n    } else if (position === 'center') {\n      percent = 0.5;\n    } else if (isString(position) && position.indexOf('%') !== -1) {\n      percent = parseInt(position, 10) / 100;\n    } else if (isNumber(position)) {\n      percent = position;\n    } else {\n      percent = 1;\n    }\n    if (percent > 1 || percent < 0) {\n      percent = 1;\n    }\n    return {\n      x: getValueByPercent(start.x, end.x, percent),\n      y: getValueByPercent(start.y, end.y, percent)\n    };\n  };\n  // 绘制 label\n  LineAnnotation.prototype.renderLabel = function (group) {\n    var text = this.get('text');\n    var start = this.get('start');\n    var end = this.get('end');\n    var position = text.position,\n      content = text.content,\n      style = text.style,\n      offsetX = text.offsetX,\n      offsetY = text.offsetY,\n      autoRotate = text.autoRotate,\n      maxLength = text.maxLength,\n      autoEllipsis = text.autoEllipsis,\n      ellipsisPosition = text.ellipsisPosition,\n      background = text.background,\n      _a = text.isVertical,\n      isVertical = _a === void 0 ? false : _a;\n    var point = this.getLabelPoint(start, end, position);\n    var x = point.x + offsetX;\n    var y = point.y + offsetY;\n    var cfg = {\n      id: this.getElementId('line-text'),\n      name: 'annotation-line-text',\n      x: x,\n      y: y,\n      content: content,\n      style: style,\n      maxLength: maxLength,\n      autoEllipsis: autoEllipsis,\n      ellipsisPosition: ellipsisPosition,\n      background: background,\n      isVertical: isVertical\n    };\n    // 如果自动旋转\n    if (autoRotate) {\n      var vector = [end.x - start.x, end.y - start.y];\n      cfg.rotate = Math.atan2(vector[1], vector[0]);\n    }\n    renderTag(group, cfg);\n  };\n  return LineAnnotation;\n}(GroupComponent);\nexport default LineAnnotation;","map":{"version":3,"mappings":"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","names":["isNumber","isString","GroupComponent","renderTag","Theme","getValueByPercent","__extends","LineAnnotation","cfg","_super","getDefaultCfg","name","type","locationType","start","end","style","text","defaultCfg","fill","textColor","fontSize","textAlign","textBaseline","fontFamily","position","autoRotate","content","offsetX","offsetY","stroke","lineColor","lineWidth","group","renderLine","get","renderLabel","addShape","id","getElementId","attrs","x1","x","y1","y","x2","y2","percent","indexOf","parseInt","maxLength","autoEllipsis","ellipsisPosition","background","_a","isVertical","point","getLabelPoint","vector","rotate","Math","atan2"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/component/src/annotation/line.ts"],"sourcesContent":["import { IGroup, Point } from '@antv/g-base';\nimport { isNumber, isString } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nimport { ILocation } from '../interfaces';\nimport { LineAnnotationCfg, RegionLocationCfg } from '../types';\nimport { renderTag, TagCfg } from '../util/graphic';\nimport Theme from '../util/theme';\nimport { getValueByPercent } from '../util/util';\n\nclass LineAnnotation extends GroupComponent<LineAnnotationCfg> implements ILocation<RegionLocationCfg> {\n  /**\n   * @protected\n   * 默认的配置项\n   * @returns {object} 默认的配置项\n   */\n  public getDefaultCfg() {\n    const cfg = super.getDefaultCfg();\n    return {\n      ...cfg,\n      name: 'annotation',\n      type: 'line',\n      locationType: 'region',\n      start: null,\n      end: null,\n      style: {},\n      text: null,\n      defaultCfg: {\n        style: {\n          fill: Theme.textColor,\n          fontSize: 12,\n          textAlign: 'center',\n          textBaseline: 'bottom',\n          fontFamily: Theme.fontFamily,\n        },\n        text: {\n          position: 'center',\n          autoRotate: true,\n          content: null,\n          offsetX: 0,\n          offsetY: 0,\n          style: {\n            stroke: Theme.lineColor,\n            lineWidth: 1,\n          },\n        },\n      },\n    };\n  }\n\n  protected renderInner(group: IGroup) {\n    this.renderLine(group);\n    if (this.get('text')) {\n      this.renderLabel(group);\n    }\n  }\n\n  // 绘制线\n  private renderLine(group: IGroup) {\n    const start = this.get('start');\n    const end = this.get('end');\n    const style = this.get('style');\n    this.addShape(group, {\n      type: 'line',\n      id: this.getElementId('line'),\n      name: 'annotation-line',\n      attrs: {\n        x1: start.x,\n        y1: start.y,\n        x2: end.x,\n        y2: end.y,\n        ...style,\n      },\n    });\n  }\n\n  // 获取 label 的位置\n  private getLabelPoint(start: Point, end: Point, position: string) {\n    let percent;\n    if (position === 'start') {\n      percent = 0;\n    } else if (position === 'center') {\n      percent = 0.5;\n    } else if (isString(position) && position.indexOf('%') !== -1) {\n      percent = parseInt(position, 10) / 100;\n    } else if (isNumber(position)) {\n      percent = position;\n    } else {\n      percent = 1;\n    }\n\n    if (percent > 1 || percent < 0) {\n      percent = 1;\n    }\n\n    return {\n      x: getValueByPercent(start.x, end.x, percent),\n      y: getValueByPercent(start.y, end.y, percent),\n    };\n  }\n\n  // 绘制 label\n  private renderLabel(group: IGroup) {\n    const text = this.get('text');\n    const start = this.get('start');\n    const end = this.get('end');\n    const { position, content, style, offsetX, offsetY, autoRotate,\n      maxLength, autoEllipsis, ellipsisPosition, background, isVertical = false } = text;\n    const point = this.getLabelPoint(start, end, position);\n    const x = point.x + offsetX;\n    const y = point.y + offsetY;\n\n    const cfg: TagCfg = {\n      id: this.getElementId('line-text'),\n      name: 'annotation-line-text',\n      x,\n      y,\n      content,\n      style,\n      maxLength,\n      autoEllipsis,\n      ellipsisPosition,\n      background,\n      isVertical,\n    };\n\n    // 如果自动旋转\n    if (autoRotate) {\n      const vector = [end.x - start.x, end.y - start.y];\n      cfg.rotate = Math.atan2(vector[1], vector[0]);\n    }\n\n    renderTag(group, cfg);\n  }\n}\n\nexport default LineAnnotation;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}