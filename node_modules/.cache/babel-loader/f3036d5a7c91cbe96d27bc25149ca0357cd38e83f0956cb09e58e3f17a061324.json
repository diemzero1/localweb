{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Plot } from '../../core/plot';\nimport { adaptor } from './adaptor';\nimport { DEFAULT_OPTIONS } from './constant';\nimport './interactions';\n/**\n *  CirclePacking\n * @usage hierarchy, proportions\n */\nvar CirclePacking = /** @class */function (_super) {\n  __extends(CirclePacking, _super);\n  function CirclePacking() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** 图表类型 */\n    _this.type = 'circle-packing';\n    return _this;\n  }\n  /**\n   * 获取 面积图 默认配置项\n   * 供外部使用\n   */\n  CirclePacking.getDefaultOptions = function () {\n    return DEFAULT_OPTIONS;\n  };\n  CirclePacking.prototype.getDefaultOptions = function () {\n    return CirclePacking.getDefaultOptions();\n  };\n  /**\n   * 获取适配器\n   */\n  CirclePacking.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n  /**\n   * 覆写父类的方法\n   */\n  CirclePacking.prototype.triggerResize = function () {\n    if (!this.chart.destroyed) {\n      // 首先自适应容器的宽高\n      this.chart.forceFit(); // g2 内部执行 changeSize，changeSize 中执行 render(true)\n      this.chart.clear();\n      this.execAdaptor(); // 核心：宽高更新之后计算padding\n      // 渲染\n      this.chart.render(true);\n    }\n  };\n  return CirclePacking;\n}(Plot);\nexport { CirclePacking };","map":{"version":3,"mappings":";AACA,SAASA,IAAI,QAAQ,iBAAiB;AACtC,SAASC,OAAO,QAAQ,WAAW;AACnC,SAASC,eAAe,QAAQ,YAAY;AAC5C,OAAO,gBAAgB;AAKvB;;;;AAIA;EAAmCC;EAAnC;IAAA;IAQE;IACOC,UAAI,GAAW,gBAAgB;;EA0BxC;EAlCE;;;;EAIOC,+BAAiB,GAAxB;IACE,OAAOH,eAAe;EACxB,CAAC;EAISG,yCAAiB,GAA3B;IACE,OAAOA,aAAa,CAACC,iBAAiB,EAAE;EAC1C,CAAC;EAED;;;EAGUD,wCAAgB,GAA1B;IACE,OAAOJ,OAAO;EAChB,CAAC;EAED;;;EAGUI,qCAAa,GAAvB;IACE,IAAI,CAAC,IAAI,CAACE,KAAK,CAACC,SAAS,EAAE;MACzB;MACA,IAAI,CAACD,KAAK,CAACE,QAAQ,EAAE,CAAC,CAAC;MACvB,IAAI,CAACF,KAAK,CAACG,KAAK,EAAE;MAClB,IAAI,CAACC,WAAW,EAAE,CAAC,CAAC;MACpB;MACA,IAAI,CAACJ,KAAK,CAACK,MAAM,CAAC,IAAI,CAAC;;EAE3B,CAAC;EACH,oBAAC;AAAD,CAAC,CAnCkCZ,IAAI","names":["Plot","adaptor","DEFAULT_OPTIONS","__extends","_this","CirclePacking","getDefaultOptions","chart","destroyed","forceFit","clear","execAdaptor","render"],"sources":["/home/iam/Documents/network/node_modules/@antv/g2plot/src/plots/circle-packing/index.ts"],"sourcesContent":["import { Adaptor } from '../../core/adaptor';\nimport { Plot } from '../../core/plot';\nimport { adaptor } from './adaptor';\nimport { DEFAULT_OPTIONS } from './constant';\nimport './interactions';\nimport { CirclePackingOptions } from './types';\n\nexport type { CirclePackingOptions };\n\n/**\n *  CirclePacking\n * @usage hierarchy, proportions\n */\nexport class CirclePacking extends Plot<CirclePackingOptions> {\n  /**\n   * 获取 面积图 默认配置项\n   * 供外部使用\n   */\n  static getDefaultOptions(): Partial<CirclePackingOptions> {\n    return DEFAULT_OPTIONS;\n  }\n  /** 图表类型 */\n  public type: string = 'circle-packing';\n\n  protected getDefaultOptions() {\n    return CirclePacking.getDefaultOptions();\n  }\n\n  /**\n   * 获取适配器\n   */\n  protected getSchemaAdaptor(): Adaptor<CirclePackingOptions> {\n    return adaptor;\n  }\n\n  /**\n   * 覆写父类的方法\n   */\n  protected triggerResize() {\n    if (!this.chart.destroyed) {\n      // 首先自适应容器的宽高\n      this.chart.forceFit(); // g2 内部执行 changeSize，changeSize 中执行 render(true)\n      this.chart.clear();\n      this.execAdaptor(); // 核心：宽高更新之后计算padding\n      // 渲染\n      this.chart.render(true);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}