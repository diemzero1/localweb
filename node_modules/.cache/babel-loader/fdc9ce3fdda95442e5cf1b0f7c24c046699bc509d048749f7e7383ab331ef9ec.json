{"ast":null,"code":"import { wrapBehavior, each, deepMix } from '@antv/util';\nvar PluginBase = /** @class */function () {\n  /**\n   * 插件基类的构造函数\n   * @param cfgs 插件的配置项\n   */\n  function PluginBase(cfgs) {\n    this._cfgs = deepMix(this.getDefaultCfgs(), cfgs);\n    this._events = {};\n    this.destroyed = false;\n  }\n  /**\n   * 获取默认的插件配置\n   */\n  PluginBase.prototype.getDefaultCfgs = function () {\n    return {};\n  };\n  /**\n   * 初始化插件\n   * @param graph IGraph 实例\n   */\n  PluginBase.prototype.initPlugin = function (graph) {\n    var self = this;\n    self.set('graph', graph);\n    var events = self.getEvents();\n    var bindEvents = {};\n    each(events, function (v, k) {\n      var event = wrapBehavior(self, v);\n      bindEvents[k] = event;\n      graph.on(k, event);\n    });\n    this._events = bindEvents;\n    this.init();\n  };\n  /**\n   * 获取插件中的事件和事件处理方法，供子类实现\n   */\n  PluginBase.prototype.getEvents = function () {\n    return {};\n  };\n  /**\n   * 获取配置项中的某个值\n   * @param key 键值\n   */\n  PluginBase.prototype.get = function (key) {\n    var _a;\n    return (_a = this._cfgs) === null || _a === void 0 ? void 0 : _a[key];\n  };\n  /**\n   * 将指定的值存储到 cfgs 中\n   * @param key 键值\n   * @param val 设置的值\n   */\n  PluginBase.prototype.set = function (key, val) {\n    this._cfgs[key] = val;\n  };\n  /**\n   * 销毁方法，供子类复写\n   */\n  PluginBase.prototype.destroy = function () {};\n  /**\n   * 销毁插件\n   */\n  PluginBase.prototype.destroyPlugin = function () {\n    this.destroy();\n    var graph = this.get('graph');\n    var events = this._events;\n    each(events, function (v, k) {\n      graph.off(k, v);\n    });\n    this._events = null;\n    this._cfgs = null;\n    this.destroyed = true;\n  };\n  return PluginBase;\n}();\nexport default PluginBase;","map":{"version":3,"names":["wrapBehavior","each","deepMix","PluginBase","cfgs","_cfgs","getDefaultCfgs","_events","destroyed","prototype","initPlugin","graph","self","set","events","getEvents","bindEvents","v","k","event","on","init","get","key","_a","val","destroy","destroyPlugin","off"],"sources":["/home/iam/Documents/network/node_modules/@ant-design/graphs/es/plugins/base.js"],"sourcesContent":["import { wrapBehavior, each, deepMix } from '@antv/util';\nvar PluginBase = /** @class */ (function () {\n    /**\n     * 插件基类的构造函数\n     * @param cfgs 插件的配置项\n     */\n    function PluginBase(cfgs) {\n        this._cfgs = deepMix(this.getDefaultCfgs(), cfgs);\n        this._events = {};\n        this.destroyed = false;\n    }\n    /**\n     * 获取默认的插件配置\n     */\n    PluginBase.prototype.getDefaultCfgs = function () {\n        return {};\n    };\n    /**\n     * 初始化插件\n     * @param graph IGraph 实例\n     */\n    PluginBase.prototype.initPlugin = function (graph) {\n        var self = this;\n        self.set('graph', graph);\n        var events = self.getEvents();\n        var bindEvents = {};\n        each(events, function (v, k) {\n            var event = wrapBehavior(self, v);\n            bindEvents[k] = event;\n            graph.on(k, event);\n        });\n        this._events = bindEvents;\n        this.init();\n    };\n    /**\n     * 获取插件中的事件和事件处理方法，供子类实现\n     */\n    PluginBase.prototype.getEvents = function () {\n        return {};\n    };\n    /**\n     * 获取配置项中的某个值\n     * @param key 键值\n     */\n    PluginBase.prototype.get = function (key) {\n        var _a;\n        return (_a = this._cfgs) === null || _a === void 0 ? void 0 : _a[key];\n    };\n    /**\n     * 将指定的值存储到 cfgs 中\n     * @param key 键值\n     * @param val 设置的值\n     */\n    PluginBase.prototype.set = function (key, val) {\n        this._cfgs[key] = val;\n    };\n    /**\n     * 销毁方法，供子类复写\n     */\n    PluginBase.prototype.destroy = function () { };\n    /**\n     * 销毁插件\n     */\n    PluginBase.prototype.destroyPlugin = function () {\n        this.destroy();\n        var graph = this.get('graph');\n        var events = this._events;\n        each(events, function (v, k) {\n            graph.off(k, v);\n        });\n        this._events = null;\n        this._cfgs = null;\n        this.destroyed = true;\n    };\n    return PluginBase;\n}());\nexport default PluginBase;\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,IAAI,EAAEC,OAAO,QAAQ,YAAY;AACxD,IAAIC,UAAU,GAAG,aAAe,YAAY;EACxC;AACJ;AACA;AACA;EACI,SAASA,UAAU,CAACC,IAAI,EAAE;IACtB,IAAI,CAACC,KAAK,GAAGH,OAAO,CAAC,IAAI,CAACI,cAAc,EAAE,EAAEF,IAAI,CAAC;IACjD,IAAI,CAACG,OAAO,GAAG,CAAC,CAAC;IACjB,IAAI,CAACC,SAAS,GAAG,KAAK;EAC1B;EACA;AACJ;AACA;EACIL,UAAU,CAACM,SAAS,CAACH,cAAc,GAAG,YAAY;IAC9C,OAAO,CAAC,CAAC;EACb,CAAC;EACD;AACJ;AACA;AACA;EACIH,UAAU,CAACM,SAAS,CAACC,UAAU,GAAG,UAAUC,KAAK,EAAE;IAC/C,IAAIC,IAAI,GAAG,IAAI;IACfA,IAAI,CAACC,GAAG,CAAC,OAAO,EAAEF,KAAK,CAAC;IACxB,IAAIG,MAAM,GAAGF,IAAI,CAACG,SAAS,EAAE;IAC7B,IAAIC,UAAU,GAAG,CAAC,CAAC;IACnBf,IAAI,CAACa,MAAM,EAAE,UAAUG,CAAC,EAAEC,CAAC,EAAE;MACzB,IAAIC,KAAK,GAAGnB,YAAY,CAACY,IAAI,EAAEK,CAAC,CAAC;MACjCD,UAAU,CAACE,CAAC,CAAC,GAAGC,KAAK;MACrBR,KAAK,CAACS,EAAE,CAACF,CAAC,EAAEC,KAAK,CAAC;IACtB,CAAC,CAAC;IACF,IAAI,CAACZ,OAAO,GAAGS,UAAU;IACzB,IAAI,CAACK,IAAI,EAAE;EACf,CAAC;EACD;AACJ;AACA;EACIlB,UAAU,CAACM,SAAS,CAACM,SAAS,GAAG,YAAY;IACzC,OAAO,CAAC,CAAC;EACb,CAAC;EACD;AACJ;AACA;AACA;EACIZ,UAAU,CAACM,SAAS,CAACa,GAAG,GAAG,UAAUC,GAAG,EAAE;IACtC,IAAIC,EAAE;IACN,OAAO,CAACA,EAAE,GAAG,IAAI,CAACnB,KAAK,MAAM,IAAI,IAAImB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACD,GAAG,CAAC;EACzE,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIpB,UAAU,CAACM,SAAS,CAACI,GAAG,GAAG,UAAUU,GAAG,EAAEE,GAAG,EAAE;IAC3C,IAAI,CAACpB,KAAK,CAACkB,GAAG,CAAC,GAAGE,GAAG;EACzB,CAAC;EACD;AACJ;AACA;EACItB,UAAU,CAACM,SAAS,CAACiB,OAAO,GAAG,YAAY,CAAE,CAAC;EAC9C;AACJ;AACA;EACIvB,UAAU,CAACM,SAAS,CAACkB,aAAa,GAAG,YAAY;IAC7C,IAAI,CAACD,OAAO,EAAE;IACd,IAAIf,KAAK,GAAG,IAAI,CAACW,GAAG,CAAC,OAAO,CAAC;IAC7B,IAAIR,MAAM,GAAG,IAAI,CAACP,OAAO;IACzBN,IAAI,CAACa,MAAM,EAAE,UAAUG,CAAC,EAAEC,CAAC,EAAE;MACzBP,KAAK,CAACiB,GAAG,CAACV,CAAC,EAAED,CAAC,CAAC;IACnB,CAAC,CAAC;IACF,IAAI,CAACV,OAAO,GAAG,IAAI;IACnB,IAAI,CAACF,KAAK,GAAG,IAAI;IACjB,IAAI,CAACG,SAAS,GAAG,IAAI;EACzB,CAAC;EACD,OAAOL,UAAU;AACrB,CAAC,EAAG;AACJ,eAAeA,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}