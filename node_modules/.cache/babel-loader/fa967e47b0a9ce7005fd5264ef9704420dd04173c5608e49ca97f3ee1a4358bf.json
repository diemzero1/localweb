{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { each, isString, mix, isFunction } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nimport Theme from '../util/theme';\nvar GridBase = /** @class */function (_super) {\n  __extends(GridBase, _super);\n  function GridBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  GridBase.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    return __assign(__assign({}, cfg), {\n      name: 'grid',\n      line: {},\n      alternateColor: null,\n      capture: false,\n      items: [],\n      closed: false,\n      defaultCfg: {\n        line: {\n          type: 'line',\n          style: {\n            lineWidth: 1,\n            stroke: Theme.lineColor\n          }\n        }\n      }\n    });\n  };\n  /**\n   * 获取栅格线的类型\n   * @return {string} 栅格线类型\n   */\n  GridBase.prototype.getLineType = function () {\n    var line = this.get('line') || this.get('defaultCfg').line;\n    return line.type;\n  };\n  GridBase.prototype.renderInner = function (group) {\n    this.drawGrid(group);\n  };\n  GridBase.prototype.getAlternatePath = function (prePoints, points) {\n    var regionPath = this.getGridPath(prePoints);\n    var reversePoints = points.slice(0).reverse();\n    var nextPath = this.getGridPath(reversePoints, true);\n    var closed = this.get('closed');\n    if (closed) {\n      regionPath = regionPath.concat(nextPath);\n    } else {\n      nextPath[0][0] = 'L'; // 更新第一个节点\n      regionPath = regionPath.concat(nextPath);\n      regionPath.push(['Z']);\n    }\n    return regionPath;\n  };\n  // 获取路径的配置项\n  GridBase.prototype.getPathStyle = function () {\n    return this.get('line').style;\n  };\n  // 绘制栅格\n  GridBase.prototype.drawGrid = function (group) {\n    var _this = this;\n    var line = this.get('line');\n    var items = this.get('items');\n    var alternateColor = this.get('alternateColor');\n    var preItem = null;\n    each(items, function (item, index) {\n      var id = item.id || index;\n      // 绘制栅格线\n      if (line) {\n        var style = _this.getPathStyle();\n        style = isFunction(style) ? style(item, index, items) : style;\n        var lineId = _this.getElementId(\"line-\" + id);\n        var gridPath = _this.getGridPath(item.points);\n        _this.addShape(group, {\n          type: 'path',\n          name: 'grid-line',\n          id: lineId,\n          attrs: mix({\n            path: gridPath\n          }, style)\n        });\n      }\n      // 如果存在 alternateColor 则绘制矩形\n      // 从第二个栅格线开始绘制\n      if (alternateColor && index > 0) {\n        var regionId = _this.getElementId(\"region-\" + id);\n        var isEven = index % 2 === 0;\n        if (isString(alternateColor)) {\n          // 如果颜色是单值，则是仅绘制偶数时的区域\n          if (isEven) {\n            _this.drawAlternateRegion(regionId, group, preItem.points, item.points, alternateColor);\n          }\n        } else {\n          var color = isEven ? alternateColor[1] : alternateColor[0];\n          _this.drawAlternateRegion(regionId, group, preItem.points, item.points, color);\n        }\n      }\n      preItem = item;\n    });\n  };\n  // 绘制栅格线间的间隔\n  GridBase.prototype.drawAlternateRegion = function (id, group, prePoints, points, color) {\n    var regionPath = this.getAlternatePath(prePoints, points);\n    this.addShape(group, {\n      type: 'path',\n      id: id,\n      name: 'grid-region',\n      attrs: {\n        path: regionPath,\n        fill: color\n      }\n    });\n  };\n  return GridBase;\n}(GroupComponent);\nexport default GridBase;","map":{"version":3,"mappings":"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","names":["each","isString","mix","isFunction","GroupComponent","Theme","__extends","GridBase","cfg","_super","getDefaultCfg","name","line","alternateColor","capture","items","closed","defaultCfg","type","style","lineWidth","stroke","lineColor","get","group","drawGrid","prePoints","points","regionPath","getGridPath","reversePoints","slice","reverse","nextPath","concat","push","preItem","item","index","id","_this","getPathStyle","lineId","getElementId","gridPath","addShape","attrs","path","regionId","isEven","drawAlternateRegion","color","getAlternatePath","fill"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/component/src/grid/base.ts"],"sourcesContent":["import { IGroup } from '@antv/g-base';\nimport { each, isString, mix, isFunction } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nimport { GridBaseCfg, GroupComponentCfg, Point } from '../types';\nimport Theme from '../util/theme';\n\nabstract class GridBase<T extends GroupComponentCfg = GridBaseCfg> extends GroupComponent<T> {\n  public getDefaultCfg() {\n    const cfg = super.getDefaultCfg();\n    return {\n      ...cfg,\n      name: 'grid',\n      line: {},\n      alternateColor: null,\n      capture: false,\n      items: [],\n      closed: false,\n      defaultCfg: {\n        line: {\n          type: 'line', // 对于 line 类型的 grid 有 line, smooth 两种，cirle 类型的 grid 有 line 和 circle\n          style: {\n            lineWidth: 1,\n            stroke: Theme.lineColor,\n          },\n        },\n      },\n    };\n  }\n\n  /**\n   * 获取栅格线的类型\n   * @return {string} 栅格线类型\n   */\n  protected getLineType(): string {\n    const line = this.get('line') || this.get('defaultCfg').line;\n    return line.type;\n  }\n\n  protected renderInner(group: IGroup) {\n    this.drawGrid(group);\n  }\n\n  /**\n   * 获取栅格线的路径\n   * @param  {Point[]} points   栅格线的点集合\n   * @param  {boolean} reversed 顺序是否相反\n   * @return {any[]}            路径\n   */\n  protected abstract getGridPath(points: Point[], reversed?: boolean): any[];\n\n  protected getAlternatePath(prePoints: Point[], points: Point[]) {\n    let regionPath = this.getGridPath(prePoints);\n    const reversePoints = points.slice(0).reverse();\n    const nextPath = this.getGridPath(reversePoints, true);\n    const closed = this.get('closed');\n    if (closed) {\n      regionPath = regionPath.concat(nextPath);\n    } else {\n      nextPath[0][0] = 'L'; // 更新第一个节点\n      regionPath = regionPath.concat(nextPath);\n      regionPath.push(['Z']);\n    }\n    return regionPath;\n  }\n  // 获取路径的配置项\n  private getPathStyle() {\n    return this.get('line').style;\n  }\n\n  // 绘制栅格\n  private drawGrid(group: IGroup) {\n    const line = this.get('line');\n    const items = this.get('items');\n    const alternateColor = this.get('alternateColor');\n    let preItem = null;\n    each(items, (item, index) => {\n      const id = item.id || index;\n      // 绘制栅格线\n      if (line) {\n        let style = this.getPathStyle();\n        style = isFunction(style) ? style(item, index, items) : style;\n\n        const lineId = this.getElementId(`line-${id}`);\n        const gridPath = this.getGridPath(item.points);\n        this.addShape(group, {\n          type: 'path',\n          name: 'grid-line',\n          id: lineId,\n          attrs: mix(\n            {\n              path: gridPath,\n            },\n            style\n          ),\n        });\n      }\n      // 如果存在 alternateColor 则绘制矩形\n      // 从第二个栅格线开始绘制\n      if (alternateColor && index > 0) {\n        const regionId = this.getElementId(`region-${id}`);\n        const isEven = index % 2 === 0;\n        if (isString(alternateColor)) {\n          // 如果颜色是单值，则是仅绘制偶数时的区域\n          if (isEven) {\n            this.drawAlternateRegion(regionId, group, preItem.points, item.points, alternateColor);\n          }\n        } else {\n          const color = isEven ? alternateColor[1] : alternateColor[0];\n          this.drawAlternateRegion(regionId, group, preItem.points, item.points, color);\n        }\n      }\n      preItem = item;\n    });\n  }\n\n  // 绘制栅格线间的间隔\n  private drawAlternateRegion(id: string, group: IGroup, prePoints: Point[], points: Point[], color: string) {\n    const regionPath = this.getAlternatePath(prePoints, points);\n    this.addShape(group, {\n      type: 'path',\n      id,\n      name: 'grid-region',\n      attrs: {\n        path: regionPath,\n        fill: color,\n      },\n    });\n  }\n}\n\nexport default GridBase;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}