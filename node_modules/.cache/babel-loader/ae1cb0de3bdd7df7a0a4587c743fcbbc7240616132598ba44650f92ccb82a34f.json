{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { isArray } from '@antv/util';\nimport { registerShape } from '../base';\nimport { getStyle } from '../util/get-style';\nimport { getRectPath } from './util';\nimport { omit } from '../../../util/helper';\n// 根据数据点生成 Line 的两个关键点\nfunction getLinePoints(pointInfo) {\n  var x = pointInfo.x,\n    y = pointInfo.y,\n    y0 = pointInfo.y0;\n  if (isArray(y)) {\n    return y.map(function (yItem, idx) {\n      return {\n        x: isArray(x) ? x[idx] : x,\n        y: yItem\n      };\n    });\n  }\n  // 起始点从 y0 开始\n  return [{\n    x: x,\n    y: y0\n  }, {\n    x: x,\n    y: y\n  }];\n}\nregisterShape('interval', 'line', {\n  getPoints: function getPoints(shapePoint) {\n    return getLinePoints(shapePoint);\n  },\n  draw: function draw(cfg, container) {\n    var style = getStyle(cfg, true, false, 'lineWidth');\n    var newStyle = omit(__assign({}, style), ['fill']);\n    var path = this.parsePath(getRectPath(cfg.points, false));\n    var shape = container.addShape('path', {\n      attrs: __assign(__assign({}, newStyle), {\n        path: path\n      }),\n      name: 'interval'\n    });\n    return shape;\n  },\n  getMarker: function getMarker(markerCfg) {\n    var color = markerCfg.color;\n    return {\n      symbol: function symbol(x, y, r) {\n        return [['M', x, y - r], ['L', x, y + r]];\n      },\n      style: {\n        r: 5,\n        stroke: color\n      }\n    };\n  }\n});","map":{"version":3,"mappings":";AAAA,SAASA,OAAO,QAAQ,YAAY;AAIpC,SAASC,aAAa,QAAQ,SAAS;AACvC,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,WAAW,QAAQ,QAAQ;AACpC,SAASC,IAAI,QAAQ,sBAAsB;AAE3C;AACA,SAASC,aAAa,CAACC,SAAqB;EAClC,KAAC,GAAYA,SAAS,EAArB;IAAEC,CAAC,GAASD,SAAS,EAAlB;IAAEE,EAAE,GAAKF,SAAS,GAAd;EAEhB,IAAIN,OAAO,CAACO,CAAC,CAAC,EAAE;IACd,OAAOA,CAAC,CAACE,GAAG,CAAC,UAACC,KAAK,EAAEC,GAAG;MACtB,OAAO;QACLC,CAAC,EAAEZ,OAAO,CAACY,CAAC,CAAC,GAAGA,CAAC,CAACD,GAAG,CAAC,GAAGC,CAAC;QAC1BL,CAAC,EAAEG;OACJ;IACH,CAAC,CAAC;;EAGJ;EACA,OAAO,CACL;IAAEE,CAAC,EAAEA,CAAW;IAAEL,CAAC,EAAEC;EAAE,CAAE,EACzB;IAAEI,CAAC,EAAEA,CAAW;IAAEL,CAAC;EAAA,CAAE,CACtB;AACH;AAEAN,aAAa,CAAC,UAAU,EAAE,MAAM,EAAE;EAChCY,SAAS,qBAACC,UAAsB;IAC9B,OAAOT,aAAa,CAACS,UAAU,CAAC;EAClC,CAAC;EACDC,IAAI,gBAACC,GAAc,EAAEC,SAAiB;IACpC,IAAMC,KAAK,GAAGhB,QAAQ,CAACc,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,WAAW,CAAC;IACrD,IAAMG,QAAQ,GAAGf,IAAI,cAAMc,KAAK,GAAI,CAAC,MAAM,CAAC,CAAC;IAC7C,IAAME,IAAI,GAAG,IAAI,CAACC,SAAS,CAAClB,WAAW,CAACa,GAAG,CAACM,MAAiB,EAAE,KAAK,CAAC,CAAC;IACtE,IAAMC,KAAK,GAAGN,SAAS,CAACO,QAAQ,CAAC,MAAM,EAAE;MACvCC,KAAK,wBACAN,QAAQ;QACXC,IAAI;MAAA,EACL;MACDM,IAAI,EAAE;KACP,CAAC;IAEF,OAAOH,KAAK;EACd,CAAC;EACDI,SAAS,qBAACC,SAAyB;IACzB,SAAK,GAAKA,SAAS,MAAd;IACb,OAAO;MACLC,MAAM,EAAE,gBAACjB,CAAS,EAAEL,CAAS,EAAEuB,CAAS;QACtC,OAAO,CACL,CAAC,GAAG,EAAElB,CAAC,EAAEL,CAAC,GAAGuB,CAAC,CAAC,EACf,CAAC,GAAG,EAAElB,CAAC,EAAEL,CAAC,GAAGuB,CAAC,CAAC,CAChB;MACH,CAAC;MACDZ,KAAK,EAAE;QACLY,CAAC,EAAE,CAAC;QACJC,MAAM,EAAEC;;KAEX;EACH;CACD,CAAC","names":["isArray","registerShape","getStyle","getRectPath","omit","getLinePoints","pointInfo","y","y0","map","yItem","idx","x","getPoints","shapePoint","draw","cfg","container","style","newStyle","path","parsePath","points","shape","addShape","attrs","name","getMarker","markerCfg","symbol","r","stroke","color"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/g2/src/geometry/shape/interval/line.ts"],"sourcesContent":["import { isArray } from '@antv/util';\nimport { IGroup } from '../../../dependents';\nimport { Point, ShapeInfo, ShapeMarkerCfg, ShapePoint } from '../../../interface';\n\nimport { registerShape } from '../base';\nimport { getStyle } from '../util/get-style';\nimport { getRectPath } from './util';\nimport { omit } from '../../../util/helper';\n\n// 根据数据点生成 Line 的两个关键点\nfunction getLinePoints(pointInfo: ShapePoint): Point[] {\n  const { x, y, y0 } = pointInfo;\n\n  if (isArray(y)) {\n    return y.map((yItem, idx) => {\n      return {\n        x: isArray(x) ? x[idx] : x,\n        y: yItem,\n      };\n    });\n  }\n\n  // 起始点从 y0 开始\n  return [\n    { x: x as number, y: y0 },\n    { x: x as number, y },\n  ];\n}\n\nregisterShape('interval', 'line', {\n  getPoints(shapePoint: ShapePoint) {\n    return getLinePoints(shapePoint);\n  },\n  draw(cfg: ShapeInfo, container: IGroup) {\n    const style = getStyle(cfg, true, false, 'lineWidth');\n    const newStyle = omit({ ...style }, ['fill']);\n    const path = this.parsePath(getRectPath(cfg.points as Point[], false));\n    const shape = container.addShape('path', {\n      attrs: {\n        ...newStyle,\n        path,\n      },\n      name: 'interval',\n    });\n\n    return shape;\n  },\n  getMarker(markerCfg: ShapeMarkerCfg) {\n    const { color } = markerCfg;\n    return {\n      symbol: (x: number, y: number, r: number) => {\n        return [\n          ['M', x, y - r],\n          ['L', x, y + r],\n        ];\n      },\n      style: {\n        r: 5,\n        stroke: color,\n      },\n    };\n  },\n});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}