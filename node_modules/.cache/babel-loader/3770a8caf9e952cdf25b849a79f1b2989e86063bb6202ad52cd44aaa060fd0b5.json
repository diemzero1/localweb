{"ast":null,"code":"import { deepAssign } from '../../utils';\nimport { drawBackground, getPixelRatio, initCanvas, transformMatrix } from './util';\n/**\n * linePattern 的 默认配置\n */\nexport var defaultLinePatternCfg = {\n  rotation: 45,\n  spacing: 5,\n  opacity: 1,\n  backgroundColor: 'transparent',\n  strokeOpacity: 0.5,\n  stroke: '#fff',\n  lineWidth: 2\n};\n/**\n * 绘制line\n *\n * @param context canvasContext\n * @param cfg linePattern 的配置\n * @param d 绘制 path 所需的 d\n */\nexport function drawLine(context, cfg, d) {\n  var stroke = cfg.stroke,\n    lineWidth = cfg.lineWidth,\n    strokeOpacity = cfg.strokeOpacity;\n  var path = new Path2D(d);\n  context.globalAlpha = strokeOpacity;\n  context.lineCap = 'square';\n  context.strokeStyle = lineWidth ? stroke : 'transparent';\n  context.lineWidth = lineWidth;\n  context.stroke(path);\n}\n/**\n * 创建 linePattern\n */\nexport function createLinePattern(cfg) {\n  var lineCfg = deepAssign({}, defaultLinePatternCfg, cfg);\n  var spacing = lineCfg.spacing,\n    rotation = lineCfg.rotation,\n    lineWidth = lineCfg.lineWidth;\n  // 计算 pattern 画布的大小， path 所需的 d\n  var width = spacing + lineWidth || 1;\n  var height = spacing + lineWidth || 1;\n  var d = \"\\n            M 0 0 L \" + width + \" 0\\n            M 0 \" + height + \" L \" + width + \" \" + height + \"\\n            \";\n  // 初始化 patternCanvas\n  var canvas = initCanvas(width, height);\n  var ctx = canvas.getContext('2d');\n  // 绘制 background，line\n  drawBackground(ctx, lineCfg, width, height);\n  drawLine(ctx, lineCfg, d);\n  var pattern = ctx.createPattern(canvas, 'repeat');\n  if (pattern) {\n    var dpr = getPixelRatio();\n    var matrix = transformMatrix(dpr, rotation);\n    pattern.setTransform(matrix);\n  }\n  // 返回 Pattern 对象\n  return pattern;\n}","map":{"version":3,"mappings":"AACA,SAASA,UAAU,QAAQ,aAAa;AACxC,SAASC,cAAc,EAAEC,aAAa,EAAEC,UAAU,EAAEC,eAAe,QAAQ,QAAQ;AAEnF;;;AAGA,OAAO,IAAMC,qBAAqB,GAAG;EACnCC,QAAQ,EAAE,EAAE;EACZC,OAAO,EAAE,CAAC;EACVC,OAAO,EAAE,CAAC;EACVC,eAAe,EAAE,aAAa;EAC9BC,aAAa,EAAE,GAAG;EAClBC,MAAM,EAAE,MAAM;EACdC,SAAS,EAAE;CACZ;AAED;;;;;;;AAOA,OAAM,SAAUC,QAAQ,CAACC,OAAiC,EAAEC,GAAmB,EAAEC,CAAS;EAChF,UAAM,GAA+BD,GAAG,OAAlC;IAAEH,SAAS,GAAoBG,GAAG,UAAvB;IAAEL,aAAa,GAAKK,GAAG,cAAR;EACxC,IAAME,IAAI,GAAG,IAAIC,MAAM,CAACF,CAAC,CAAC;EAE1BF,OAAO,CAACK,WAAW,GAAGT,aAAa;EACnCI,OAAO,CAACM,OAAO,GAAG,QAAQ;EAC1BN,OAAO,CAACO,WAAW,GAAGT,SAAS,GAAGD,MAAM,GAAG,aAAa;EACxDG,OAAO,CAACF,SAAS,GAAGA,SAAS;EAC7BE,OAAO,CAACH,MAAM,CAACM,IAAI,CAAC;AACtB;AAEA;;;AAGA,OAAM,SAAUK,iBAAiB,CAACP,GAAoB;EACpD,IAAMQ,OAAO,GAAGvB,UAAU,CAAC,EAAE,EAAEK,qBAAqB,EAAEU,GAAG,CAAC;EAElD,WAAO,GAA0BQ,OAAO,QAAjC;IAAEjB,QAAQ,GAAgBiB,OAAO,SAAvB;IAAEX,SAAS,GAAKW,OAAO,UAAZ;EAEpC;EACA,IAAMC,KAAK,GAAGjB,OAAO,GAAGK,SAAS,IAAI,CAAC;EACtC,IAAMa,MAAM,GAAGlB,OAAO,GAAGK,SAAS,IAAI,CAAC;EACvC,IAAMI,CAAC,GAAG,2BACUQ,KAAK,4BACTC,MAAM,WAAMD,KAAK,SAAIC,MAAM,mBAChC;EAEX;EACA,IAAMC,MAAM,GAAGvB,UAAU,CAACqB,KAAK,EAAEC,MAAM,CAAC;EACxC,IAAME,GAAG,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;EAEnC;EACA3B,cAAc,CAAC0B,GAAG,EAAEJ,OAAO,EAAEC,KAAK,EAAEC,MAAM,CAAC;EAC3CZ,QAAQ,CAACc,GAAG,EAAEJ,OAAO,EAAEP,CAAC,CAAC;EAEzB,IAAMa,OAAO,GAAGF,GAAG,CAACG,aAAa,CAACJ,MAAM,EAAE,QAAQ,CAAC;EAEnD,IAAIG,OAAO,EAAE;IACX,IAAME,GAAG,GAAG7B,aAAa,EAAE;IAC3B,IAAM8B,MAAM,GAAG5B,eAAe,CAAC2B,GAAG,EAAEzB,QAAQ,CAAC;IAC7CuB,OAAO,CAACI,YAAY,CAACD,MAAM,CAAC;;EAG9B;EACA,OAAOH,OAAO;AAChB","names":["deepAssign","drawBackground","getPixelRatio","initCanvas","transformMatrix","defaultLinePatternCfg","rotation","spacing","opacity","backgroundColor","strokeOpacity","stroke","lineWidth","drawLine","context","cfg","d","path","Path2D","globalAlpha","lineCap","strokeStyle","createLinePattern","lineCfg","width","height","canvas","ctx","getContext","pattern","createPattern","dpr","matrix","setTransform"],"sources":["/home/iam/Documents/network/node_modules/@antv/g2plot/src/utils/pattern/line.ts"],"sourcesContent":["import { LinePatternCfg } from '../../types/pattern';\nimport { deepAssign } from '../../utils';\nimport { drawBackground, getPixelRatio, initCanvas, transformMatrix } from './util';\n\n/**\n * linePattern 的 默认配置\n */\nexport const defaultLinePatternCfg = {\n  rotation: 45,\n  spacing: 5,\n  opacity: 1,\n  backgroundColor: 'transparent',\n  strokeOpacity: 0.5,\n  stroke: '#fff',\n  lineWidth: 2,\n};\n\n/**\n * 绘制line\n *\n * @param context canvasContext\n * @param cfg linePattern 的配置\n * @param d 绘制 path 所需的 d\n */\nexport function drawLine(context: CanvasRenderingContext2D, cfg: LinePatternCfg, d: string) {\n  const { stroke, lineWidth, strokeOpacity } = cfg;\n  const path = new Path2D(d);\n\n  context.globalAlpha = strokeOpacity;\n  context.lineCap = 'square';\n  context.strokeStyle = lineWidth ? stroke : 'transparent';\n  context.lineWidth = lineWidth;\n  context.stroke(path);\n}\n\n/**\n * 创建 linePattern\n */\nexport function createLinePattern(cfg?: LinePatternCfg): CanvasPattern {\n  const lineCfg = deepAssign({}, defaultLinePatternCfg, cfg);\n\n  const { spacing, rotation, lineWidth } = lineCfg;\n\n  // 计算 pattern 画布的大小， path 所需的 d\n  const width = spacing + lineWidth || 1;\n  const height = spacing + lineWidth || 1;\n  const d = `\n            M 0 0 L ${width} 0\n            M 0 ${height} L ${width} ${height}\n            `;\n\n  // 初始化 patternCanvas\n  const canvas = initCanvas(width, height);\n  const ctx = canvas.getContext('2d');\n\n  // 绘制 background，line\n  drawBackground(ctx, lineCfg, width, height);\n  drawLine(ctx, lineCfg, d);\n\n  const pattern = ctx.createPattern(canvas, 'repeat');\n\n  if (pattern) {\n    const dpr = getPixelRatio();\n    const matrix = transformMatrix(dpr, rotation);\n    pattern.setTransform(matrix);\n  }\n\n  // 返回 Pattern 对象\n  return pattern;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}