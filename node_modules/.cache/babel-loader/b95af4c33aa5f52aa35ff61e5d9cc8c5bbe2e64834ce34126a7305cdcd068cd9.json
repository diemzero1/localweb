{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { isNil } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nimport { getMatrixByAngle } from '../util/matrix';\nimport Theme from '../util/theme';\nimport { formatPadding } from '../util/util';\nvar CrosshairBase = /** @class */function (_super) {\n  __extends(CrosshairBase, _super);\n  function CrosshairBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  CrosshairBase.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    return __assign(__assign({}, cfg), {\n      name: 'crosshair',\n      type: 'base',\n      line: {},\n      text: null,\n      textBackground: {},\n      capture: false,\n      defaultCfg: {\n        line: {\n          style: {\n            lineWidth: 1,\n            stroke: Theme.lineColor\n          }\n        },\n        text: {\n          position: 'start',\n          offset: 10,\n          autoRotate: false,\n          content: null,\n          style: {\n            fill: Theme.textColor,\n            textAlign: 'center',\n            textBaseline: 'middle',\n            fontFamily: Theme.fontFamily\n          }\n        },\n        textBackground: {\n          padding: 5,\n          style: {\n            stroke: Theme.lineColor\n          }\n        }\n      }\n    });\n  };\n  CrosshairBase.prototype.renderInner = function (group) {\n    if (this.get('line')) {\n      this.renderLine(group);\n    }\n    if (this.get('text')) {\n      this.renderText(group);\n      this.renderBackground(group);\n    }\n  };\n  CrosshairBase.prototype.renderText = function (group) {\n    var text = this.get('text');\n    var style = text.style,\n      autoRotate = text.autoRotate,\n      content = text.content;\n    if (!isNil(content)) {\n      var textPoint = this.getTextPoint();\n      var matrix = null;\n      if (autoRotate) {\n        var angle = this.getRotateAngle();\n        matrix = getMatrixByAngle(textPoint, angle);\n      }\n      this.addShape(group, {\n        type: 'text',\n        name: 'crosshair-text',\n        id: this.getElementId('text'),\n        attrs: __assign(__assign(__assign({}, textPoint), {\n          text: content,\n          matrix: matrix\n        }), style)\n      });\n    }\n  };\n  CrosshairBase.prototype.renderLine = function (group) {\n    var path = this.getLinePath();\n    var line = this.get('line');\n    var style = line.style;\n    this.addShape(group, {\n      type: 'path',\n      name: 'crosshair-line',\n      id: this.getElementId('line'),\n      attrs: __assign({\n        path: path\n      }, style)\n    });\n  };\n  // 绘制文本的背景\n  CrosshairBase.prototype.renderBackground = function (group) {\n    var textId = this.getElementId('text');\n    var textShape = group.findById(textId); // 查找文本\n    var textBackground = this.get('textBackground');\n    if (textBackground && textShape) {\n      var textBBox = textShape.getBBox();\n      var padding = formatPadding(textBackground.padding); // 用户传入的 padding 格式不定\n      var style = textBackground.style;\n      var backgroundShape = this.addShape(group, {\n        type: 'rect',\n        name: 'crosshair-text-background',\n        id: this.getElementId('text-background'),\n        attrs: __assign({\n          x: textBBox.x - padding[3],\n          y: textBBox.y - padding[0],\n          width: textBBox.width + padding[1] + padding[3],\n          height: textBBox.height + padding[0] + padding[2],\n          matrix: textShape.attr('matrix')\n        }, style)\n      });\n      backgroundShape.toBack();\n    }\n  };\n  return CrosshairBase;\n}(GroupComponent);\nexport default CrosshairBase;","map":{"version":3,"mappings":";AACA,SAASA,KAAK,QAAQ,YAAY;AAClC,OAAOC,cAAc,MAAM,6BAA6B;AAExD,SAASC,gBAAgB,QAAQ,gBAAgB;AACjD,OAAOC,KAAK,MAAM,eAAe;AACjC,SAASC,aAAa,QAAQ,cAAc;AAE5C;EAAoFC;EAApF;;EA8HA;EA7HSC,qCAAa,GAApB;IACE,IAAMC,GAAG,GAAGC,iBAAMC,aAAa,WAAE;IACjC,6BACKF,GAAG;MACNG,IAAI,EAAE,WAAW;MACjBC,IAAI,EAAE,MAAM;MACZC,IAAI,EAAE,EAAE;MACRC,IAAI,EAAE,IAAI;MACVC,cAAc,EAAE,EAAE;MAClBC,OAAO,EAAE,KAAK;MACdC,UAAU,EAAE;QACVJ,IAAI,EAAE;UACJK,KAAK,EAAE;YACLC,SAAS,EAAE,CAAC;YACZC,MAAM,EAAEhB,KAAK,CAACiB;;SAEjB;QACDP,IAAI,EAAE;UACJQ,QAAQ,EAAE,OAAO;UACjBC,MAAM,EAAE,EAAE;UACVC,UAAU,EAAE,KAAK;UACjBC,OAAO,EAAE,IAAI;UACbP,KAAK,EAAE;YACLQ,IAAI,EAAEtB,KAAK,CAACuB,SAAS;YACrBC,SAAS,EAAE,QAAQ;YACnBC,YAAY,EAAE,QAAQ;YACtBC,UAAU,EAAE1B,KAAK,CAAC0B;;SAErB;QACDf,cAAc,EAAE;UACdgB,OAAO,EAAE,CAAC;UACVb,KAAK,EAAE;YACLE,MAAM,EAAEhB,KAAK,CAACiB;;;;IAGnB;EAEL,CAAC;EAESd,mCAAW,GAArB,UAAsByB,KAAa;IACjC,IAAI,IAAI,CAACC,GAAG,CAAC,MAAM,CAAC,EAAE;MACpB,IAAI,CAACC,UAAU,CAACF,KAAK,CAAC;;IAExB,IAAI,IAAI,CAACC,GAAG,CAAC,MAAM,CAAC,EAAE;MACpB,IAAI,CAACE,UAAU,CAACH,KAAK,CAAC;MACtB,IAAI,CAACI,gBAAgB,CAACJ,KAAK,CAAC;;EAEhC,CAAC;EAWSzB,kCAAU,GAApB,UAAqByB,KAAa;IAChC,IAAMlB,IAAI,GAAG,IAAI,CAACmB,GAAG,CAAC,MAAM,CAAC;IACrB,SAAK,GAA0BnB,IAAI,MAA9B;MAAEU,UAAU,GAAcV,IAAI,WAAlB;MAAEW,OAAO,GAAKX,IAAI,QAAT;IAClC,IAAI,CAACb,KAAK,CAACwB,OAAO,CAAC,EAAE;MACnB,IAAMY,SAAS,GAAG,IAAI,CAACC,YAAY,EAAE;MACrC,IAAIC,MAAM,GAAG,IAAI;MACjB,IAAIf,UAAU,EAAE;QACd,IAAMgB,KAAK,GAAG,IAAI,CAACC,cAAc,EAAE;QACnCF,MAAM,GAAGpC,gBAAgB,CAACkC,SAAS,EAAEG,KAAK,CAAC;;MAE7C,IAAI,CAACE,QAAQ,CAACV,KAAK,EAAE;QACnBpB,IAAI,EAAE,MAAM;QACZD,IAAI,EAAE,gBAAgB;QACtBgC,EAAE,EAAE,IAAI,CAACC,YAAY,CAAC,MAAM,CAAC;QAC7BC,KAAK,iCACAR,SAAS;UACZvB,IAAI,EAAEW,OAAO;UACbc,MAAM;QAAA,IACHrB,KAAK;OAEX,CAAC;;EAEN,CAAC;EAISX,kCAAU,GAApB,UAAqByB,KAAa;IAChC,IAAMc,IAAI,GAAG,IAAI,CAACC,WAAW,EAAE;IAC/B,IAAMlC,IAAI,GAAG,IAAI,CAACoB,GAAG,CAAC,MAAM,CAAC;IAC7B,IAAMf,KAAK,GAAGL,IAAI,CAACK,KAAK;IACxB,IAAI,CAACwB,QAAQ,CAACV,KAAK,EAAE;MACnBpB,IAAI,EAAE,MAAM;MACZD,IAAI,EAAE,gBAAgB;MACtBgC,EAAE,EAAE,IAAI,CAACC,YAAY,CAAC,MAAM,CAAC;MAC7BC,KAAK;QACHC,IAAI;MAAA,GACD5B,KAAK;KAEX,CAAC;EACJ,CAAC;EAED;EACQX,wCAAgB,GAAxB,UAAyByB,KAAa;IACpC,IAAMgB,MAAM,GAAG,IAAI,CAACJ,YAAY,CAAC,MAAM,CAAC;IACxC,IAAMK,SAAS,GAAGjB,KAAK,CAACkB,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC;IAC1C,IAAMjC,cAAc,GAAG,IAAI,CAACkB,GAAG,CAAC,gBAAgB,CAAC;IAEjD,IAAIlB,cAAc,IAAIkC,SAAS,EAAE;MAC/B,IAAME,QAAQ,GAAGF,SAAS,CAACG,OAAO,EAAE;MACpC,IAAMrB,OAAO,GAAG1B,aAAa,CAACU,cAAc,CAACgB,OAAO,CAAC,CAAC,CAAC;MACvD,IAAMb,KAAK,GAAGH,cAAc,CAACG,KAAK;MAClC,IAAMmC,eAAe,GAAG,IAAI,CAACX,QAAQ,CAACV,KAAK,EAAE;QAC3CpB,IAAI,EAAE,MAAM;QACZD,IAAI,EAAE,2BAA2B;QACjCgC,EAAE,EAAE,IAAI,CAACC,YAAY,CAAC,iBAAiB,CAAC;QACxCC,KAAK;UACHS,CAAC,EAAEH,QAAQ,CAACG,CAAC,GAAGvB,OAAO,CAAC,CAAC,CAAC;UAC1BwB,CAAC,EAAEJ,QAAQ,CAACI,CAAC,GAAGxB,OAAO,CAAC,CAAC,CAAC;UAC1ByB,KAAK,EAAEL,QAAQ,CAACK,KAAK,GAAGzB,OAAO,CAAC,CAAC,CAAC,GAAGA,OAAO,CAAC,CAAC,CAAC;UAC/C0B,MAAM,EAAEN,QAAQ,CAACM,MAAM,GAAG1B,OAAO,CAAC,CAAC,CAAC,GAAGA,OAAO,CAAC,CAAC,CAAC;UACjDQ,MAAM,EAAEU,SAAS,CAACS,IAAI,CAAC,QAAQ;QAAC,GAC7BxC,KAAK;OAEX,CAAC;MACFmC,eAAe,CAACM,MAAM,EAAE;;EAE5B,CAAC;EACH,oBAAC;AAAD,CAAC,CA9HmFzD,cAAc;AAgIlG,eAAeK,aAAa","names":["isNil","GroupComponent","getMatrixByAngle","Theme","formatPadding","__extends","CrosshairBase","cfg","_super","getDefaultCfg","name","type","line","text","textBackground","capture","defaultCfg","style","lineWidth","stroke","lineColor","position","offset","autoRotate","content","fill","textColor","textAlign","textBaseline","fontFamily","padding","group","get","renderLine","renderText","renderBackground","textPoint","getTextPoint","matrix","angle","getRotateAngle","addShape","id","getElementId","attrs","path","getLinePath","textId","textShape","findById","textBBox","getBBox","backgroundShape","x","y","width","height","attr","toBack"],"sources":["/home/iam/Documents/network/node_modules/@antv/component/src/crosshair/base.ts"],"sourcesContent":["import { IGroup } from '@antv/g-base';\nimport { isNil } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nimport { CrosshairBaseCfg, Point } from '../types';\nimport { getMatrixByAngle } from '../util/matrix';\nimport Theme from '../util/theme';\nimport { formatPadding } from '../util/util';\n\nabstract class CrosshairBase<T extends CrosshairBaseCfg = CrosshairBaseCfg> extends GroupComponent {\n  public getDefaultCfg() {\n    const cfg = super.getDefaultCfg();\n    return {\n      ...cfg,\n      name: 'crosshair',\n      type: 'base',\n      line: {},\n      text: null,\n      textBackground: {},\n      capture: false, // 不能被拾取\n      defaultCfg: {\n        line: {\n          style: {\n            lineWidth: 1,\n            stroke: Theme.lineColor,\n          },\n        },\n        text: {\n          position: 'start',\n          offset: 10,\n          autoRotate: false,\n          content: null,\n          style: {\n            fill: Theme.textColor,\n            textAlign: 'center',\n            textBaseline: 'middle',\n            fontFamily: Theme.fontFamily,\n          },\n        },\n        textBackground: {\n          padding: 5,\n          style: {\n            stroke: Theme.lineColor,\n          },\n        },\n      },\n    };\n  }\n\n  protected renderInner(group: IGroup) {\n    if (this.get('line')) {\n      this.renderLine(group);\n    }\n    if (this.get('text')) {\n      this.renderText(group);\n      this.renderBackground(group);\n    }\n  }\n\n  /**\n   * @protected\n   * 获取文本点的位置\n   * @return {Point} 文本的位置\n   */\n  protected abstract getTextPoint(): Point;\n\n  protected abstract getRotateAngle(): number;\n\n  protected renderText(group: IGroup) {\n    const text = this.get('text');\n    const { style, autoRotate, content } = text;\n    if (!isNil(content)) {\n      const textPoint = this.getTextPoint();\n      let matrix = null;\n      if (autoRotate) {\n        const angle = this.getRotateAngle();\n        matrix = getMatrixByAngle(textPoint, angle);\n      }\n      this.addShape(group, {\n        type: 'text',\n        name: 'crosshair-text',\n        id: this.getElementId('text'),\n        attrs: {\n          ...textPoint,\n          text: content,\n          matrix,\n          ...style,\n        },\n      });\n    }\n  }\n\n  protected abstract getLinePath(): any[];\n\n  protected renderLine(group: IGroup) {\n    const path = this.getLinePath();\n    const line = this.get('line');\n    const style = line.style;\n    this.addShape(group, {\n      type: 'path',\n      name: 'crosshair-line',\n      id: this.getElementId('line'),\n      attrs: {\n        path,\n        ...style,\n      },\n    });\n  }\n\n  // 绘制文本的背景\n  private renderBackground(group: IGroup) {\n    const textId = this.getElementId('text');\n    const textShape = group.findById(textId); // 查找文本\n    const textBackground = this.get('textBackground');\n\n    if (textBackground && textShape) {\n      const textBBox = textShape.getBBox();\n      const padding = formatPadding(textBackground.padding); // 用户传入的 padding 格式不定\n      const style = textBackground.style;\n      const backgroundShape = this.addShape(group, {\n        type: 'rect',\n        name: 'crosshair-text-background',\n        id: this.getElementId('text-background'),\n        attrs: {\n          x: textBBox.x - padding[3],\n          y: textBBox.y - padding[0],\n          width: textBBox.width + padding[1] + padding[3],\n          height: textBBox.height + padding[0] + padding[2],\n          matrix: textShape.attr('matrix'),\n          ...style,\n        },\n      });\n      backgroundShape.toBack();\n    }\n  }\n}\n\nexport default CrosshairBase;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}