{"ast":null,"code":"import { __extends, __read } from \"tslib\";\nimport { deepMix, each, find, get, head, isBoolean, last } from '@antv/util';\nimport { COMPONENT_MAX_VIEW_PERCENTAGE, COMPONENT_TYPE, DIRECTION, LAYER } from '../../constant';\nimport { CategoryLegend, ContinuousLegend } from '../../dependents';\nimport { DEFAULT_ANIMATE_CFG } from '../../animate';\nimport { BBox } from '../../util/bbox';\nimport { directionToPosition } from '../../util/direction';\nimport { omit } from '../../util/helper';\nimport { getCustomLegendItems, getLegendItems, getLegendLayout, getLegendThemeCfg } from '../../util/legend';\nimport { getName } from '../../util/scale';\nimport { Controller } from './base';\n/**\n * 从配置中获取单个字段的 legend 配置\n * @param legends\n * @param field\n * @returns the option of one legend field\n */\nfunction getLegendOption(legends, field) {\n  if (isBoolean(legends)) {\n    return legends === false ? false : {};\n  }\n  return get(legends, [field], legends);\n}\nfunction getDirection(legendOption) {\n  return get(legendOption, 'position', DIRECTION.BOTTOM);\n}\n/**\n * @ignore\n * legend Controller\n */\nvar Legend = /** @class */function (_super) {\n  __extends(Legend, _super);\n  function Legend(view) {\n    var _this = _super.call(this, view) || this;\n    _this.container = _this.view.getLayer(LAYER.FORE).addGroup();\n    return _this;\n  }\n  Object.defineProperty(Legend.prototype, \"name\", {\n    get: function () {\n      return 'legend';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Legend.prototype.init = function () {};\n  /**\n   * render the legend component by legend options\n   */\n  Legend.prototype.render = function () {\n    // 和 update 逻辑保持一致\n    this.update();\n  };\n  /**\n   * layout legend\n   * 计算出 legend 的 direction 位置 x, y\n   */\n  Legend.prototype.layout = function () {\n    var _this = this;\n    this.layoutBBox = this.view.viewBBox;\n    each(this.components, function (co) {\n      var component = co.component,\n        direction = co.direction;\n      var layout = getLegendLayout(direction);\n      var maxWidthRatio = component.get('maxWidthRatio');\n      var maxHeightRatio = component.get('maxHeightRatio');\n      var maxSize = _this.getCategoryLegendSizeCfg(layout, maxWidthRatio, maxHeightRatio);\n      var maxWidth = component.get('maxWidth');\n      var maxHeight = component.get('maxHeight');\n      // 先更新 maxSize，更新 layoutBBox，以便计算正确的 x y\n      component.update({\n        maxWidth: Math.min(maxSize.maxWidth, maxWidth || 0),\n        maxHeight: Math.min(maxSize.maxHeight, maxHeight || 0)\n      });\n      var padding = component.get('padding');\n      var bboxObject = component.getLayoutBBox(); // 这里只需要他的 width、height 信息做位置调整\n      var bbox = new BBox(bboxObject.x, bboxObject.y, bboxObject.width, bboxObject.height).expand(padding);\n      var _a = __read(directionToPosition(_this.view.viewBBox, bbox, direction), 2),\n        x1 = _a[0],\n        y1 = _a[1];\n      var _b = __read(directionToPosition(_this.layoutBBox, bbox, direction), 2),\n        x2 = _b[0],\n        y2 = _b[1];\n      var x = 0;\n      var y = 0;\n      // 因为 legend x y 要和 coordinateBBox 对齐，所以要做一个简单的判断\n      if (direction.startsWith('top') || direction.startsWith('bottom')) {\n        x = x1;\n        y = y2;\n      } else {\n        x = x2;\n        y = y1;\n      }\n      // 更新位置\n      component.setLocation({\n        x: x + padding[3],\n        y: y + padding[0]\n      });\n      _this.layoutBBox = _this.layoutBBox.cut(bbox, direction);\n    });\n  };\n  /**\n   * legend 的更新逻辑\n   */\n  Legend.prototype.update = function () {\n    var _this = this;\n    this.option = this.view.getOptions().legends;\n    // 已经处理过的 legend\n    var updated = {};\n    var eachLegend = function (geometry, attr, scale) {\n      var id = _this.getId(scale.field);\n      var existCo = _this.getComponentById(id);\n      // 存在则 update\n      if (existCo) {\n        var cfg = void 0;\n        var legendOption = getLegendOption(_this.option, scale.field);\n        // if the legend option is not false, means legend should be created.\n        if (legendOption !== false) {\n          if (get(legendOption, 'custom')) {\n            cfg = _this.getCategoryCfg(geometry, attr, scale, legendOption, true);\n          } else {\n            if (scale.isLinear) {\n              // linear field, create continuous legend\n              cfg = _this.getContinuousCfg(geometry, attr, scale, legendOption);\n            } else if (scale.isCategory) {\n              // category field, create category legend\n              cfg = _this.getCategoryCfg(geometry, attr, scale, legendOption);\n            }\n          }\n        }\n        // 如果 cfg 为空，则不在 updated 标记，那么会在后面逻辑中删除\n        if (cfg) {\n          // omit 掉一些属性，比如 container 等\n          omit(cfg, ['container']);\n          existCo.direction = getDirection(legendOption);\n          existCo.component.update(cfg);\n          // 标记为新的\n          updated[id] = true;\n        }\n      } else {\n        // 不存在则 create\n        var legend = _this.createFieldLegend(geometry, attr, scale);\n        if (legend) {\n          legend.component.init();\n          _this.components.push(legend);\n          // 标记为新的\n          updated[id] = true;\n        }\n      }\n    };\n    // 全局自定义图例\n    if (get(this.option, 'custom')) {\n      var id = 'global-custom';\n      var existCo = this.getComponentById(id);\n      if (existCo) {\n        var customCfg = this.getCategoryCfg(undefined, undefined, undefined, this.option, true);\n        omit(customCfg, ['container']);\n        existCo.component.update(customCfg);\n        updated[id] = true;\n      } else {\n        var component = this.createCustomLegend(undefined, undefined, undefined, this.option);\n        if (component) {\n          component.init();\n          var layer = LAYER.FORE;\n          var direction = getDirection(this.option);\n          this.components.push({\n            id: id,\n            component: component,\n            layer: layer,\n            direction: direction,\n            type: COMPONENT_TYPE.LEGEND,\n            extra: undefined\n          });\n          // 标记为更新\n          updated[id] = true;\n        }\n      }\n    } else {\n      // 遍历处理每一个创建逻辑\n      this.loopLegends(eachLegend);\n    }\n    // 处理完成之后，销毁删除的\n    // 不在处理中的\n    var components = [];\n    each(this.getComponents(), function (co) {\n      if (updated[co.id]) {\n        components.push(co);\n      } else {\n        co.component.destroy();\n      }\n    });\n    // 更新当前已有的 components\n    this.components = components;\n  };\n  Legend.prototype.clear = function () {\n    _super.prototype.clear.call(this);\n    this.container.clear();\n  };\n  Legend.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n    this.container.remove(true);\n  };\n  /**\n   * 递归获取所有的 Geometry\n   */\n  Legend.prototype.getGeometries = function (view) {\n    var _this = this;\n    var geometries = view.geometries;\n    each(view.views, function (v) {\n      geometries = geometries.concat(_this.getGeometries(v));\n    });\n    return geometries;\n  };\n  /**\n   * 遍历 Geometry，处理 legend 逻辑\n   * @param doEach 每个 loop 中的处理方法\n   */\n  Legend.prototype.loopLegends = function (doEach) {\n    var isRootView = this.view.getRootView() === this.view;\n    // 非根 view，不处理 legend\n    if (!isRootView) {\n      return;\n    }\n    // 递归 view 中所有的 Geometry，进行创建 legend\n    var geometries = this.getGeometries(this.view);\n    var looped = {}; // 防止一个字段创建两个 legend\n    each(geometries, function (geometry) {\n      var attributes = geometry.getGroupAttributes();\n      each(attributes, function (attr) {\n        var scale = attr.getScale(attr.type);\n        // 如果在视觉通道上映射常量值，如 size(2) shape('circle') 不创建 legend\n        if (!scale || scale.type === 'identity' || looped[scale.field]) {\n          return;\n        }\n        doEach(geometry, attr, scale);\n        looped[scale.field] = true;\n      });\n    });\n  };\n  /**\n   * 创建一个 legend\n   * @param geometry\n   * @param attr\n   * @param scale\n   */\n  Legend.prototype.createFieldLegend = function (geometry, attr, scale) {\n    var component;\n    var legendOption = getLegendOption(this.option, scale.field);\n    var layer = LAYER.FORE;\n    var direction = getDirection(legendOption);\n    // if the legend option is not false, means legend should be created.\n    if (legendOption !== false) {\n      if (get(legendOption, 'custom')) {\n        component = this.createCustomLegend(geometry, attr, scale, legendOption);\n      } else {\n        if (scale.isLinear) {\n          // linear field, create continuous legend\n          component = this.createContinuousLegend(geometry, attr, scale, legendOption);\n        } else if (scale.isCategory) {\n          // category field, create category legend\n          component = this.createCategoryLegend(geometry, attr, scale, legendOption);\n        }\n      }\n    }\n    if (component) {\n      component.set('field', scale.field);\n      return {\n        id: this.getId(scale.field),\n        component: component,\n        layer: layer,\n        direction: direction,\n        type: COMPONENT_TYPE.LEGEND,\n        extra: {\n          scale: scale\n        }\n      };\n    }\n  };\n  /**\n   * 自定义图例使用 category 图例去渲染\n   * @param geometry\n   * @param attr\n   * @param scale\n   * @param legendOption\n   */\n  Legend.prototype.createCustomLegend = function (geometry, attr, scale, legendOption) {\n    // 直接使用 分类图例渲染\n    var cfg = this.getCategoryCfg(geometry, attr, scale, legendOption, true);\n    return new CategoryLegend(cfg);\n  };\n  /**\n   * 创建连续图例\n   * @param geometry\n   * @param attr\n   * @param scale\n   * @param legendOption\n   */\n  Legend.prototype.createContinuousLegend = function (geometry, attr, scale, legendOption) {\n    var cfg = this.getContinuousCfg(geometry, attr, scale, omit(legendOption, ['value']));\n    return new ContinuousLegend(cfg);\n  };\n  /**\n   * 创建分类图例\n   * @param geometry\n   * @param attr\n   * @param scale\n   * @param legendOption\n   */\n  Legend.prototype.createCategoryLegend = function (geometry, attr, scale, legendOption) {\n    var cfg = this.getCategoryCfg(geometry, attr, scale, legendOption);\n    return new CategoryLegend(cfg);\n  };\n  /**\n   * 获得连续图例的配置\n   * @param geometry\n   * @param attr\n   * @param scale\n   * @param legendOption\n   */\n  Legend.prototype.getContinuousCfg = function (geometry, attr, scale, legendOption) {\n    var ticks = scale.getTicks();\n    var containMin = find(ticks, function (tick) {\n      return tick.value === 0;\n    });\n    var containMax = find(ticks, function (tick) {\n      return tick.value === 1;\n    });\n    var items = ticks.map(function (tick) {\n      var value = tick.value,\n        tickValue = tick.tickValue;\n      var attrValue = attr.mapping(scale.invert(value)).join('');\n      return {\n        value: tickValue,\n        attrValue: attrValue,\n        color: attrValue,\n        scaleValue: value\n      };\n    });\n    if (!containMin) {\n      items.push({\n        value: scale.min,\n        attrValue: attr.mapping(scale.invert(0)).join(''),\n        color: attr.mapping(scale.invert(0)).join(''),\n        scaleValue: 0\n      });\n    }\n    if (!containMax) {\n      items.push({\n        value: scale.max,\n        attrValue: attr.mapping(scale.invert(1)).join(''),\n        color: attr.mapping(scale.invert(1)).join(''),\n        scaleValue: 1\n      });\n    }\n    // 排序\n    items.sort(function (a, b) {\n      return a.value - b.value;\n    });\n    // 跟 attr 相关的配置\n    // size color 区别的配置\n    var attrLegendCfg = {\n      min: head(items).value,\n      max: last(items).value,\n      colors: [],\n      rail: {\n        type: attr.type\n      },\n      track: {}\n    };\n    if (attr.type === 'size') {\n      attrLegendCfg.track = {\n        style: {\n          // size 的选中前景色，对于 color，则直接使用 color 标识\n          // @ts-ignore\n          fill: attr.type === 'size' ? this.view.getTheme().defaultColor : undefined\n        }\n      };\n    }\n    if (attr.type === 'color') {\n      attrLegendCfg.colors = items.map(function (item) {\n        return item.attrValue;\n      });\n    }\n    var container = this.container;\n    // if position is not set, use top as default\n    var direction = getDirection(legendOption);\n    var layout = getLegendLayout(direction);\n    var title = get(legendOption, 'title');\n    if (title) {\n      title = deepMix({\n        text: getName(scale)\n      }, title);\n    }\n    // 基础配置，从当前数据中读到的配置\n    attrLegendCfg.container = container;\n    attrLegendCfg.layout = layout;\n    attrLegendCfg.title = title;\n    attrLegendCfg.animateOption = DEFAULT_ANIMATE_CFG;\n    // @ts-ignore\n    return this.mergeLegendCfg(attrLegendCfg, legendOption, 'continuous');\n  };\n  /**\n   * 获取分类图例的配置项\n   * @param geometry\n   * @param attr\n   * @param scale\n   * @param custom\n   * @param legendOption\n   */\n  Legend.prototype.getCategoryCfg = function (geometry, attr, scale, legendOption, custom) {\n    var container = this.container;\n    // if position is not set, use top as default\n    var direction = get(legendOption, 'position', DIRECTION.BOTTOM);\n    var legendTheme = getLegendThemeCfg(this.view.getTheme(), direction);\n    // the default marker style\n    var themeMarker = get(legendTheme, ['marker']);\n    var userMarker = get(legendOption, 'marker');\n    var layout = getLegendLayout(direction);\n    var themePageNavigator = get(legendTheme, ['pageNavigator']);\n    var userPageNavigator = get(legendOption, 'pageNavigator');\n    var items = custom ? getCustomLegendItems(themeMarker, userMarker, legendOption.items) : getLegendItems(this.view, geometry, attr, themeMarker, userMarker);\n    var title = get(legendOption, 'title');\n    if (title) {\n      title = deepMix({\n        text: scale ? getName(scale) : ''\n      }, title);\n    }\n    var maxWidthRatio = get(legendOption, 'maxWidthRatio');\n    var maxHeightRatio = get(legendOption, 'maxHeightRatio');\n    var baseCfg = this.getCategoryLegendSizeCfg(layout, maxWidthRatio, maxHeightRatio);\n    baseCfg.container = container;\n    baseCfg.layout = layout;\n    baseCfg.items = items;\n    baseCfg.title = title;\n    baseCfg.animateOption = DEFAULT_ANIMATE_CFG;\n    baseCfg.pageNavigator = deepMix({}, themePageNavigator, userPageNavigator);\n    var categoryCfg = this.mergeLegendCfg(baseCfg, legendOption, direction);\n    if (categoryCfg.reversed) {\n      // 图例项需要逆序\n      categoryCfg.items.reverse();\n    }\n    var maxItemWidth = get(categoryCfg, 'maxItemWidth');\n    if (maxItemWidth && maxItemWidth <= 1) {\n      // 转换成像素值\n      categoryCfg.maxItemWidth = this.view.viewBBox.width * maxItemWidth;\n    }\n    return categoryCfg;\n  };\n  /**\n   * get legend config, use option > suggestion > theme\n   * @param baseCfg\n   * @param legendOption\n   * @param direction\n   */\n  Legend.prototype.mergeLegendCfg = function (baseCfg, legendOption, direction) {\n    var position = direction.split('-')[0];\n    var themeObject = getLegendThemeCfg(this.view.getTheme(), position);\n    return deepMix({}, themeObject, baseCfg, legendOption);\n  };\n  /**\n   * 生成 id\n   * @param key\n   */\n  Legend.prototype.getId = function (key) {\n    return \"\".concat(this.name, \"-\").concat(key);\n  };\n  /**\n   * 根据 id 来获取组件\n   * @param id\n   */\n  Legend.prototype.getComponentById = function (id) {\n    return find(this.components, function (co) {\n      return co.id === id;\n    });\n  };\n  Legend.prototype.getCategoryLegendSizeCfg = function (layout, maxWidthRatio, maxHeightRatio) {\n    if (maxWidthRatio === void 0) {\n      maxWidthRatio = COMPONENT_MAX_VIEW_PERCENTAGE;\n    }\n    if (maxHeightRatio === void 0) {\n      maxHeightRatio = COMPONENT_MAX_VIEW_PERCENTAGE;\n    }\n    var _a = this.view.viewBBox,\n      vw = _a.width,\n      vh = _a.height;\n    // 目前 legend 的布局是以 viewBBox 为参照\n    // const { width: cw, height: ch } = this.view.coordinateBBox;\n    return layout === 'vertical' ? {\n      maxWidth: vw * maxWidthRatio,\n      maxHeight: vh\n    } : {\n      maxWidth: vw,\n      maxHeight: vh * maxHeightRatio\n    };\n  };\n  return Legend;\n}(Controller);\nexport default Legend;","map":{"version":3,"mappings":"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","names":["deepMix","each","find","get","head","isBoolean","last","COMPONENT_MAX_VIEW_PERCENTAGE","COMPONENT_TYPE","DIRECTION","LAYER","CategoryLegend","ContinuousLegend","DEFAULT_ANIMATE_CFG","BBox","directionToPosition","omit","getCustomLegendItems","getLegendItems","getLegendLayout","getLegendThemeCfg","getName","Controller","getLegendOption","legends","field","getDirection","legendOption","BOTTOM","__extends","view","_super","_this","container","getLayer","FORE","addGroup","Object","Legend","update","layoutBBox","viewBBox","components","co","direction","layout","maxWidthRatio","component","maxHeightRatio","maxSize","getCategoryLegendSizeCfg","maxWidth","maxHeight","Math","min","padding","bboxObject","getLayoutBBox","bbox","x","y","width","height","expand","x1","y1","x2","y2","startsWith","setLocation","cut","option","getOptions","updated","eachLegend","geometry","attr","scale","id","getId","existCo","getComponentById","cfg","getCategoryCfg","isLinear","getContinuousCfg","isCategory","legend","createFieldLegend","init","push","customCfg","undefined","createCustomLegend","layer","type","LEGEND","extra","loopLegends","getComponents","destroy","clear","remove","geometries","views","v","concat","getGeometries","doEach","isRootView","getRootView","looped","attributes","getGroupAttributes","getScale","createContinuousLegend","createCategoryLegend","set","ticks","getTicks","containMin","tick","value","containMax","items","map","tickValue","attrValue","mapping","invert","join","color","scaleValue","max","sort","a","b","attrLegendCfg","colors","rail","track","style","fill","getTheme","defaultColor","item","title","text","animateOption","mergeLegendCfg","custom","legendTheme","themeMarker","userMarker","themePageNavigator","userPageNavigator","baseCfg","pageNavigator","categoryCfg","reversed","reverse","maxItemWidth","position","split","themeObject","key","name","vw","vh"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/g2/src/chart/controller/legend.ts"],"sourcesContent":["import { deepMix, each, find, get, head, isBoolean, last } from '@antv/util';\nimport { COMPONENT_MAX_VIEW_PERCENTAGE, COMPONENT_TYPE, DIRECTION, LAYER } from '../../constant';\nimport { Attribute, CategoryLegend, ContinuousLegend, GroupComponent, IGroup, Scale, Tick } from '../../dependents';\nimport { ComponentOption, LegendCfg, LegendOption, LooseObject, AllLegendsOptions, Padding } from '../../interface';\nimport { DEFAULT_ANIMATE_CFG } from '../../animate';\nimport Geometry from '../../geometry/base';\nimport { BBox } from '../../util/bbox';\nimport { directionToPosition } from '../../util/direction';\nimport { omit } from '../../util/helper';\nimport { getCustomLegendItems, getLegendItems, getLegendLayout, getLegendThemeCfg } from '../../util/legend';\nimport { getName } from '../../util/scale';\nimport View from '../view';\nimport { Controller } from './base';\n\ntype DoEach = (geometry: Geometry, attr: Attribute, scale: Scale) => void;\n\n/**\n * 从配置中获取单个字段的 legend 配置\n * @param legends\n * @param field\n * @returns the option of one legend field\n */\nfunction getLegendOption(legends: AllLegendsOptions, field: string) {\n  if (isBoolean(legends)) {\n    return legends === false ? false : {};\n  }\n\n  return get(legends, [field], legends);\n}\n\nfunction getDirection(legendOption: any): DIRECTION {\n  return get(legendOption, 'position', DIRECTION.BOTTOM);\n}\n\n/**\n * @ignore\n * legend Controller\n */\nexport default class Legend extends Controller<AllLegendsOptions> {\n  /** the draw group of axis */\n  private container: IGroup;\n  /** 用于多个 legend 布局的 bbox */\n  private layoutBBox: BBox;\n\n  constructor(view: View) {\n    super(view);\n\n    this.container = this.view.getLayer(LAYER.FORE).addGroup();\n  }\n\n  public get name(): string {\n    return 'legend';\n  }\n\n  public init() {}\n\n  /**\n   * render the legend component by legend options\n   */\n  public render() {\n    // 和 update 逻辑保持一致\n    this.update();\n  }\n\n  /**\n   * layout legend\n   * 计算出 legend 的 direction 位置 x, y\n   */\n  public layout() {\n    this.layoutBBox = this.view.viewBBox;\n\n    each(this.components, (co: ComponentOption) => {\n      const { component, direction } = co;\n      const layout = getLegendLayout(direction);\n      const maxWidthRatio = component.get('maxWidthRatio');\n      const maxHeightRatio = component.get('maxHeightRatio');\n\n      const maxSize = this.getCategoryLegendSizeCfg(layout, maxWidthRatio, maxHeightRatio);\n\n      const maxWidth = component.get('maxWidth');\n      const maxHeight = component.get('maxHeight');\n\n      // 先更新 maxSize，更新 layoutBBox，以便计算正确的 x y\n      component.update({\n        maxWidth: Math.min(maxSize.maxWidth, maxWidth || 0),\n        maxHeight: Math.min(maxSize.maxHeight, maxHeight || 0),\n      });\n\n      const padding = component.get('padding') as Padding;\n\n      const bboxObject = component.getLayoutBBox(); // 这里只需要他的 width、height 信息做位置调整\n      const bbox = new BBox(bboxObject.x, bboxObject.y, bboxObject.width, bboxObject.height).expand(padding);\n\n      const [x1, y1] = directionToPosition(this.view.viewBBox, bbox, direction);\n      const [x2, y2] = directionToPosition(this.layoutBBox, bbox, direction);\n\n      let x = 0;\n      let y = 0;\n\n      // 因为 legend x y 要和 coordinateBBox 对齐，所以要做一个简单的判断\n      if (direction.startsWith('top') || direction.startsWith('bottom')) {\n        x = x1;\n        y = y2;\n      } else {\n        x = x2;\n        y = y1;\n      }\n\n      // 更新位置\n      component.setLocation({ x: x + padding[3], y: y + padding[0] });\n\n      this.layoutBBox = this.layoutBBox.cut(bbox, direction);\n    });\n  }\n\n  /**\n   * legend 的更新逻辑\n   */\n  public update() {\n    this.option = this.view.getOptions().legends;\n\n    // 已经处理过的 legend\n    const updated: Record<string, true> = {};\n\n    const eachLegend = (geometry: Geometry, attr: Attribute, scale: Scale) => {\n      const id = this.getId(scale.field);\n\n      const existCo = this.getComponentById(id);\n\n      // 存在则 update\n      if (existCo) {\n        let cfg;\n        const legendOption = getLegendOption(this.option, scale.field);\n\n        // if the legend option is not false, means legend should be created.\n        if (legendOption !== false) {\n          if (get(legendOption, 'custom')) {\n            cfg = this.getCategoryCfg(geometry, attr, scale, legendOption, true);\n          } else {\n            if (scale.isLinear) {\n              // linear field, create continuous legend\n              cfg = this.getContinuousCfg(geometry, attr, scale, legendOption);\n            } else if (scale.isCategory) {\n              // category field, create category legend\n              cfg = this.getCategoryCfg(geometry, attr, scale, legendOption);\n            }\n          }\n        }\n\n        // 如果 cfg 为空，则不在 updated 标记，那么会在后面逻辑中删除\n        if (cfg) {\n          // omit 掉一些属性，比如 container 等\n          omit(cfg, ['container']);\n\n          existCo.direction = getDirection(legendOption);\n\n          existCo.component.update(cfg);\n\n          // 标记为新的\n          updated[id] = true;\n        }\n      } else {\n        // 不存在则 create\n        const legend = this.createFieldLegend(geometry, attr, scale);\n\n        if (legend) {\n          (legend.component as GroupComponent).init();\n          this.components.push(legend);\n\n          // 标记为新的\n          updated[id] = true;\n        }\n      }\n    };\n\n    // 全局自定义图例\n    if (get(this.option, 'custom')) {\n      const id = 'global-custom';\n      const existCo = this.getComponentById(id);\n      if (existCo) {\n        const customCfg = this.getCategoryCfg(undefined, undefined, undefined, this.option, true);\n        omit(customCfg, ['container']);\n        existCo.component.update(customCfg);\n\n        updated[id] = true;\n      } else {\n        const component = this.createCustomLegend(undefined, undefined, undefined, this.option as LegendCfg);\n        if (component) {\n          component.init();\n\n          const layer = LAYER.FORE;\n          const direction = getDirection(this.option);\n\n          this.components.push({\n            id,\n            component,\n            layer,\n            direction,\n            type: COMPONENT_TYPE.LEGEND,\n            extra: undefined,\n          });\n\n          // 标记为更新\n          updated[id] = true;\n        }\n      }\n    } else {\n      // 遍历处理每一个创建逻辑\n      this.loopLegends(eachLegend);\n    }\n\n    // 处理完成之后，销毁删除的\n    // 不在处理中的\n    const components = [];\n    each(this.getComponents(), (co: ComponentOption) => {\n      if (updated[co.id]) {\n        components.push(co);\n      } else {\n        co.component.destroy();\n      }\n    });\n\n    // 更新当前已有的 components\n    this.components = components;\n  }\n\n  public clear() {\n    super.clear();\n    this.container.clear();\n  }\n\n  public destroy() {\n    super.destroy();\n\n    this.container.remove(true);\n  }\n\n  /**\n   * 递归获取所有的 Geometry\n   */\n  private getGeometries(view: View): Geometry[] {\n    let geometries = view.geometries;\n\n    each(view.views, (v: View) => {\n      geometries = geometries.concat(this.getGeometries(v));\n    });\n\n    return geometries;\n  }\n\n  /**\n   * 遍历 Geometry，处理 legend 逻辑\n   * @param doEach 每个 loop 中的处理方法\n   */\n  private loopLegends(doEach: DoEach) {\n    const isRootView = this.view.getRootView() === this.view;\n    // 非根 view，不处理 legend\n    if (!isRootView) {\n      return;\n    }\n\n    // 递归 view 中所有的 Geometry，进行创建 legend\n    const geometries = this.getGeometries(this.view);\n\n    const looped: Record<string, true> = {}; // 防止一个字段创建两个 legend\n\n    each(geometries, (geometry: Geometry) => {\n      const attributes = geometry.getGroupAttributes();\n\n      each(attributes, (attr: Attribute) => {\n        const scale = attr.getScale(attr.type);\n        // 如果在视觉通道上映射常量值，如 size(2) shape('circle') 不创建 legend\n        if (!scale || scale.type === 'identity' || looped[scale.field]) {\n          return;\n        }\n\n        doEach(geometry, attr, scale);\n\n        looped[scale.field] = true;\n      });\n    });\n  }\n\n  /**\n   * 创建一个 legend\n   * @param geometry\n   * @param attr\n   * @param scale\n   */\n  private createFieldLegend(geometry: Geometry, attr: Attribute, scale: Scale): ComponentOption {\n    let component;\n\n    const legendOption = getLegendOption(this.option, scale.field);\n    const layer = LAYER.FORE;\n    const direction = getDirection(legendOption);\n\n    // if the legend option is not false, means legend should be created.\n    if (legendOption !== false) {\n      if (get(legendOption, 'custom')) {\n        component = this.createCustomLegend(geometry, attr, scale, legendOption);\n      } else {\n        if (scale.isLinear) {\n          // linear field, create continuous legend\n          component = this.createContinuousLegend(geometry, attr, scale, legendOption);\n        } else if (scale.isCategory) {\n          // category field, create category legend\n          component = this.createCategoryLegend(geometry, attr, scale, legendOption);\n        }\n      }\n    }\n\n    if (component) {\n      component.set('field', scale.field);\n\n      return {\n        id: this.getId(scale.field),\n        component,\n        layer,\n        direction,\n        type: COMPONENT_TYPE.LEGEND,\n        extra: { scale },\n      };\n    }\n  }\n\n  /**\n   * 自定义图例使用 category 图例去渲染\n   * @param geometry\n   * @param attr\n   * @param scale\n   * @param legendOption\n   */\n  private createCustomLegend(geometry: Geometry, attr: Attribute, scale: Scale, legendOption: LegendCfg) {\n    // 直接使用 分类图例渲染\n    const cfg = this.getCategoryCfg(geometry, attr, scale, legendOption, true);\n    return new CategoryLegend(cfg);\n  }\n\n  /**\n   * 创建连续图例\n   * @param geometry\n   * @param attr\n   * @param scale\n   * @param legendOption\n   */\n  private createContinuousLegend(geometry: Geometry, attr: Attribute, scale: Scale, legendOption: any) {\n    const cfg = this.getContinuousCfg(geometry, attr, scale, omit(legendOption, ['value']));\n    return new ContinuousLegend(cfg);\n  }\n\n  /**\n   * 创建分类图例\n   * @param geometry\n   * @param attr\n   * @param scale\n   * @param legendOption\n   */\n  private createCategoryLegend(geometry: Geometry, attr: Attribute, scale: Scale, legendOption: any) {\n    const cfg = this.getCategoryCfg(geometry, attr, scale, legendOption);\n    return new CategoryLegend(cfg);\n  }\n\n  /**\n   * 获得连续图例的配置\n   * @param geometry\n   * @param attr\n   * @param scale\n   * @param legendOption\n   */\n  private getContinuousCfg(geometry: Geometry, attr: Attribute, scale: Scale, legendOption: any) {\n    const ticks = scale.getTicks();\n\n    const containMin = find(ticks, (tick: Tick) => tick.value === 0);\n    const containMax = find(ticks, (tick: Tick) => tick.value === 1);\n    const items = ticks.map((tick: Tick) => {\n      const { value, tickValue } = tick;\n      const attrValue = attr.mapping(scale.invert(value)).join('');\n\n      return {\n        value: tickValue,\n        attrValue,\n        color: attrValue,\n        scaleValue: value,\n      };\n    });\n\n    if (!containMin) {\n      items.push({\n        value: scale.min,\n        attrValue: attr.mapping(scale.invert(0)).join(''),\n        color: attr.mapping(scale.invert(0)).join(''),\n        scaleValue: 0,\n      });\n    }\n    if (!containMax) {\n      items.push({\n        value: scale.max,\n        attrValue: attr.mapping(scale.invert(1)).join(''),\n        color: attr.mapping(scale.invert(1)).join(''),\n        scaleValue: 1,\n      });\n    }\n\n    // 排序\n    items.sort((a: any, b: any) => a.value - b.value);\n\n    // 跟 attr 相关的配置\n    // size color 区别的配置\n    const attrLegendCfg: LooseObject = {\n      min: head(items).value,\n      max: last(items).value,\n      colors: [],\n      rail: {\n        type: attr.type,\n      },\n      track: {},\n    };\n\n    if (attr.type === 'size') {\n      attrLegendCfg.track = {\n        style: {\n          // size 的选中前景色，对于 color，则直接使用 color 标识\n          // @ts-ignore\n          fill: attr.type === 'size' ? this.view.getTheme().defaultColor : undefined,\n        },\n      };\n    }\n\n    if (attr.type === 'color') {\n      attrLegendCfg.colors = items.map((item) => item.attrValue);\n    }\n\n    const container = this.container;\n    // if position is not set, use top as default\n    const direction = getDirection(legendOption);\n\n    const layout = getLegendLayout(direction);\n\n    let title = get(legendOption, 'title');\n    if (title) {\n      title = deepMix(\n        {\n          text: getName(scale),\n        },\n        title\n      );\n    }\n\n    // 基础配置，从当前数据中读到的配置\n    attrLegendCfg.container = container;\n    attrLegendCfg.layout = layout;\n    attrLegendCfg.title = title;\n    attrLegendCfg.animateOption = DEFAULT_ANIMATE_CFG;\n    // @ts-ignore\n    return this.mergeLegendCfg(attrLegendCfg, legendOption, 'continuous');\n  }\n\n  /**\n   * 获取分类图例的配置项\n   * @param geometry\n   * @param attr\n   * @param scale\n   * @param custom\n   * @param legendOption\n   */\n  private getCategoryCfg(geometry: Geometry, attr: Attribute, scale: Scale, legendOption: any, custom?: boolean) {\n    const container = this.container;\n    // if position is not set, use top as default\n    const direction = get(legendOption, 'position', DIRECTION.BOTTOM);\n\n    const legendTheme = getLegendThemeCfg(this.view.getTheme(), direction);\n\n    // the default marker style\n    const themeMarker = get(legendTheme, ['marker']);\n    const userMarker = get(legendOption, 'marker');\n    const layout = getLegendLayout(direction);\n    const themePageNavigator = get(legendTheme, ['pageNavigator']);\n    const userPageNavigator = get(legendOption, 'pageNavigator');\n\n    const items = custom\n      ? getCustomLegendItems(themeMarker, userMarker, legendOption.items)\n      : getLegendItems(this.view, geometry, attr, themeMarker, userMarker);\n\n    let title = get(legendOption, 'title');\n    if (title) {\n      title = deepMix(\n        {\n          text: scale ? getName(scale) : '',\n        },\n        title\n      );\n    }\n    const maxWidthRatio = get(legendOption, 'maxWidthRatio');\n    const maxHeightRatio = get(legendOption, 'maxHeightRatio');\n\n    const baseCfg: LooseObject = this.getCategoryLegendSizeCfg(layout, maxWidthRatio, maxHeightRatio);\n    baseCfg.container = container;\n    baseCfg.layout = layout;\n    baseCfg.items = items;\n    baseCfg.title = title;\n    baseCfg.animateOption = DEFAULT_ANIMATE_CFG;\n    baseCfg.pageNavigator = deepMix({}, themePageNavigator, userPageNavigator);\n\n    const categoryCfg = this.mergeLegendCfg(baseCfg, legendOption, direction);\n    if (categoryCfg.reversed) {\n      // 图例项需要逆序\n      categoryCfg.items.reverse();\n    }\n\n    const maxItemWidth = get(categoryCfg, 'maxItemWidth');\n    if (maxItemWidth && maxItemWidth <= 1) {\n      // 转换成像素值\n      categoryCfg.maxItemWidth = this.view.viewBBox.width * maxItemWidth;\n    }\n\n    return categoryCfg;\n  }\n\n  /**\n   * get legend config, use option > suggestion > theme\n   * @param baseCfg\n   * @param legendOption\n   * @param direction\n   */\n  private mergeLegendCfg(baseCfg: object, legendOption: LegendOption, direction: DIRECTION) {\n    const position = direction.split('-')[0];\n    const themeObject = getLegendThemeCfg(this.view.getTheme(), position);\n\n    return deepMix({}, themeObject, baseCfg, legendOption);\n  }\n\n  /**\n   * 生成 id\n   * @param key\n   */\n  private getId(key: string): string {\n    return `${this.name}-${key}`;\n  }\n\n  /**\n   * 根据 id 来获取组件\n   * @param id\n   */\n  private getComponentById(id: string): ComponentOption {\n    return find(this.components, (co) => co.id === id);\n  }\n\n  private getCategoryLegendSizeCfg(\n    layout: 'horizontal' | 'vertical',\n    maxWidthRatio = COMPONENT_MAX_VIEW_PERCENTAGE,\n    maxHeightRatio = COMPONENT_MAX_VIEW_PERCENTAGE\n  ) {\n    const { width: vw, height: vh } = this.view.viewBBox;\n    // 目前 legend 的布局是以 viewBBox 为参照\n    // const { width: cw, height: ch } = this.view.coordinateBBox;\n    return layout === 'vertical'\n      ? {\n          maxWidth: vw * maxWidthRatio,\n          maxHeight: vh,\n        }\n      : {\n          maxWidth: vw,\n          maxHeight: vh * maxHeightRatio,\n        };\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}