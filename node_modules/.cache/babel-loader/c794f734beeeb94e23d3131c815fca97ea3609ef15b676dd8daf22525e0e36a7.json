{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { each, isArray } from '@antv/util';\nimport { animation, annotation, interaction, limitInPlot, scale, scrollbar, slider, theme, tooltip } from '../../adaptor/common';\nimport { area, line, point } from '../../adaptor/geometries';\nimport { deepAssign, findGeometry, flow, transformLabel } from '../../utils';\nimport { adjustYMetaByZero } from '../../utils/data';\n/**\n * geometry 配置处理\n * @param params\n */\nfunction geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var data = options.data,\n    color = options.color,\n    lineStyle = options.lineStyle,\n    lineShape = options.lineShape,\n    pointMapping = options.point,\n    areaMapping = options.area,\n    seriesField = options.seriesField;\n  var pointState = pointMapping === null || pointMapping === void 0 ? void 0 : pointMapping.state;\n  var areaState = areaMapping === null || areaMapping === void 0 ? void 0 : areaMapping.state;\n  chart.data(data);\n  // line geometry 处理\n  var primary = deepAssign({}, params, {\n    options: {\n      shapeField: seriesField,\n      line: {\n        color: color,\n        style: lineStyle,\n        shape: lineShape\n      },\n      // 颜色保持一致，因为如果颜色不一致，会导致 tooltip 中元素重复。\n      // 如果存在，才设置，否则为空\n      point: pointMapping && __assign({\n        color: color,\n        shape: 'circle'\n      }, pointMapping),\n      // 面积配置\n      area: areaMapping && __assign({\n        color: color\n      }, areaMapping),\n      // label 不传递给各个 geometry adaptor，由 label adaptor 处理\n      label: undefined\n    }\n  });\n  var second = deepAssign({}, primary, {\n    options: {\n      tooltip: false,\n      state: pointState\n    }\n  });\n  var areaParams = deepAssign({}, primary, {\n    options: {\n      tooltip: false,\n      state: areaState\n    }\n  });\n  line(primary);\n  point(second);\n  area(areaParams);\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\nexport function meta(params) {\n  var _a, _b;\n  var options = params.options;\n  var xAxis = options.xAxis,\n    yAxis = options.yAxis,\n    xField = options.xField,\n    yField = options.yField,\n    data = options.data;\n  return flow(scale((_a = {}, _a[xField] = xAxis, _a[yField] = yAxis, _a), (_b = {}, _b[xField] = {\n    type: 'cat'\n  }, _b[yField] = adjustYMetaByZero(data, yField), _b)))(params);\n}\n/**\n * 坐标系配置. 支持 reflect 镜像处理\n * @param params\n */\nfunction coordinate(params) {\n  var chart = params.chart,\n    options = params.options;\n  var reflect = options.reflect;\n  if (reflect) {\n    var p = reflect;\n    if (!isArray(p)) {\n      p = [p];\n    }\n    var actions = p.map(function (d) {\n      return ['reflect', d];\n    });\n    chart.coordinate({\n      type: 'rect',\n      actions: actions\n    });\n  }\n  return params;\n}\n/**\n * axis 配置\n * @param params\n */\nexport function axis(params) {\n  var chart = params.chart,\n    options = params.options;\n  var xAxis = options.xAxis,\n    yAxis = options.yAxis,\n    xField = options.xField,\n    yField = options.yField;\n  // 为 false 则是不显示轴\n  if (xAxis === false) {\n    chart.axis(xField, false);\n  } else {\n    chart.axis(xField, xAxis);\n  }\n  if (yAxis === false) {\n    chart.axis(yField, false);\n  } else {\n    chart.axis(yField, yAxis);\n  }\n  return params;\n}\n/**\n * legend 配置\n * @param params\n */\nexport function legend(params) {\n  var chart = params.chart,\n    options = params.options;\n  var legend = options.legend,\n    seriesField = options.seriesField;\n  if (legend && seriesField) {\n    chart.legend(seriesField, legend);\n  } else if (legend === false) {\n    chart.legend(false);\n  }\n  return params;\n}\n/**\n * 数据标签\n * @param params\n */\nfunction label(params) {\n  var chart = params.chart,\n    options = params.options;\n  var label = options.label,\n    yField = options.yField;\n  var lineGeometry = findGeometry(chart, 'line');\n  // label 为 false, 空 则不显示 label\n  if (!label) {\n    lineGeometry.label(false);\n  } else {\n    var callback = label.callback,\n      cfg = __rest(label, [\"callback\"]);\n    lineGeometry.label({\n      fields: [yField],\n      callback: callback,\n      cfg: __assign({\n        layout: [{\n          type: 'limit-in-plot'\n        }, {\n          type: 'path-adjust-position'\n        }, {\n          type: 'point-adjust-position'\n        }, {\n          type: 'limit-in-plot',\n          cfg: {\n            action: 'hide'\n          }\n        }]\n      }, transformLabel(cfg))\n    });\n  }\n  return params;\n}\n/**\n * 统一处理 adjust\n * @param params\n */\nexport function adjust(params) {\n  var chart = params.chart,\n    options = params.options;\n  var isStack = options.isStack;\n  if (isStack) {\n    each(chart.geometries, function (g) {\n      g.adjust('stack');\n    });\n  }\n  return params;\n}\n/**\n * 折线图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(geometry, meta, adjust, theme, coordinate, axis, legend, tooltip, label, slider, scrollbar, interaction, animation, annotation(), limitInPlot)(params);\n}","map":{"version":3,"mappings":"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","names":["each","isArray","animation","annotation","interaction","limitInPlot","scale","scrollbar","slider","theme","tooltip","area","line","point","deepAssign","findGeometry","flow","transformLabel","adjustYMetaByZero","geometry","params","options","color","lineStyle","lineShape","pointMapping","areaMapping","seriesField","pointState","state","areaState","chart","data","primary","shapeField","style","shape","label","undefined","second","areaParams","meta","yAxis","xField","yField","_a","xAxis","_b","type","coordinate","reflect","p","actions","map","d","axis","legend","lineGeometry","cfg","fields","callback","layout","action","adjust","isStack","geometries","g","adaptor"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/g2plot/src/plots/line/adaptor.ts"],"sourcesContent":["import { Geometry } from '@antv/g2';\nimport { each, isArray } from '@antv/util';\nimport {\n  animation,\n  annotation,\n  interaction,\n  limitInPlot,\n  scale,\n  scrollbar,\n  slider,\n  theme,\n  tooltip,\n} from '../../adaptor/common';\nimport { area, line, point } from '../../adaptor/geometries';\nimport { Params } from '../../core/adaptor';\nimport { deepAssign, findGeometry, flow, transformLabel } from '../../utils';\nimport { adjustYMetaByZero } from '../../utils/data';\nimport { LineOptions } from './types';\n\n/**\n * geometry 配置处理\n * @param params\n */\nfunction geometry(params: Params<LineOptions>): Params<LineOptions> {\n  const { chart, options } = params;\n  const { data, color, lineStyle, lineShape, point: pointMapping, area: areaMapping, seriesField } = options;\n  const pointState = pointMapping?.state;\n  const areaState = areaMapping?.state;\n\n  chart.data(data);\n\n  // line geometry 处理\n  const primary = deepAssign({}, params, {\n    options: {\n      shapeField: seriesField,\n      line: {\n        color,\n        style: lineStyle,\n        shape: lineShape,\n      },\n      // 颜色保持一致，因为如果颜色不一致，会导致 tooltip 中元素重复。\n      // 如果存在，才设置，否则为空\n      point: pointMapping && {\n        color,\n        shape: 'circle',\n        ...pointMapping,\n      },\n      // 面积配置\n      area: areaMapping && {\n        color,\n        ...areaMapping,\n      },\n      // label 不传递给各个 geometry adaptor，由 label adaptor 处理\n      label: undefined,\n    },\n  });\n  const second = deepAssign({}, primary, { options: { tooltip: false, state: pointState } });\n  const areaParams = deepAssign({}, primary, { options: { tooltip: false, state: areaState } });\n\n  line(primary);\n  point(second);\n  area(areaParams);\n\n  return params;\n}\n\n/**\n * meta 配置\n * @param params\n */\nexport function meta(params: Params<LineOptions>): Params<LineOptions> {\n  const { options } = params;\n  const { xAxis, yAxis, xField, yField, data } = options;\n\n  return flow(\n    scale(\n      {\n        [xField]: xAxis,\n        [yField]: yAxis,\n      },\n      {\n        [xField]: {\n          type: 'cat',\n        },\n        [yField]: adjustYMetaByZero(data, yField),\n      }\n    )\n  )(params);\n}\n\n/**\n * 坐标系配置. 支持 reflect 镜像处理\n * @param params\n */\nfunction coordinate(params: Params<LineOptions>): Params<LineOptions> {\n  const { chart, options } = params;\n  const { reflect } = options;\n  if (reflect) {\n    let p = reflect as any;\n    if (!isArray(p)) {\n      p = [p];\n    }\n    const actions = p.map((d) => ['reflect', d]);\n\n    chart.coordinate({ type: 'rect', actions });\n  }\n\n  return params;\n}\n\n/**\n * axis 配置\n * @param params\n */\nexport function axis(params: Params<LineOptions>): Params<LineOptions> {\n  const { chart, options } = params;\n  const { xAxis, yAxis, xField, yField } = options;\n\n  // 为 false 则是不显示轴\n  if (xAxis === false) {\n    chart.axis(xField, false);\n  } else {\n    chart.axis(xField, xAxis);\n  }\n\n  if (yAxis === false) {\n    chart.axis(yField, false);\n  } else {\n    chart.axis(yField, yAxis);\n  }\n\n  return params;\n}\n\n/**\n * legend 配置\n * @param params\n */\nexport function legend(params: Params<LineOptions>): Params<LineOptions> {\n  const { chart, options } = params;\n  const { legend, seriesField } = options;\n\n  if (legend && seriesField) {\n    chart.legend(seriesField, legend);\n  } else if (legend === false) {\n    chart.legend(false);\n  }\n\n  return params;\n}\n\n/**\n * 数据标签\n * @param params\n */\nfunction label(params: Params<LineOptions>): Params<LineOptions> {\n  const { chart, options } = params;\n  const { label, yField } = options;\n\n  const lineGeometry = findGeometry(chart, 'line');\n\n  // label 为 false, 空 则不显示 label\n  if (!label) {\n    lineGeometry.label(false);\n  } else {\n    const { callback, ...cfg } = label;\n    lineGeometry.label({\n      fields: [yField],\n      callback,\n      cfg: {\n        layout: [\n          { type: 'limit-in-plot' },\n          { type: 'path-adjust-position' },\n          { type: 'point-adjust-position' },\n          { type: 'limit-in-plot', cfg: { action: 'hide' } },\n        ],\n        ...transformLabel(cfg),\n      },\n    });\n  }\n\n  return params;\n}\n\n/**\n * 统一处理 adjust\n * @param params\n */\nexport function adjust(params: Params<Pick<LineOptions, 'isStack'>>): Params<any> {\n  const { chart, options } = params;\n  const { isStack } = options;\n\n  if (isStack) {\n    each(chart.geometries, (g: Geometry) => {\n      g.adjust('stack');\n    });\n  }\n\n  return params;\n}\n\n/**\n * 折线图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<LineOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(\n    geometry,\n    meta,\n    adjust,\n    theme,\n    coordinate,\n    axis,\n    legend,\n    tooltip,\n    label,\n    slider,\n    scrollbar,\n    interaction,\n    animation,\n    annotation(),\n    limitInPlot\n  )(params);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}