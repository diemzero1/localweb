{"ast":null,"code":"import { __assign, __extends, __values } from \"tslib\";\nimport { deepMix, find, get, isEqual, isFunction, mix, isString, isBoolean, flatten, isArray } from '@antv/util';\nimport { Crosshair, HtmlTooltip } from '../../dependents';\nimport { getAngleByPoint, getDistanceToCenter, getCoordinateClipCfg } from '../../util/coordinate';\nimport { polarToCartesian } from '../../util/graphics';\nimport { findItemsFromView } from '../../util/tooltip';\nimport { BBox } from '../../util/bbox';\nimport { Controller } from './base';\nimport Event from '../event';\n// Filter duplicates, use `name`, `color`, `value` and `title` property values as condition\nfunction uniq(items) {\n  var uniqItems = [];\n  var _loop_1 = function (index) {\n    var item = items[index];\n    var result = find(uniqItems, function (subItem) {\n      return subItem.color === item.color && subItem.name === item.name && subItem.value === item.value && subItem.title === item.title;\n    });\n    if (!result) {\n      uniqItems.push(item);\n    }\n  };\n  for (var index = 0; index < items.length; index++) {\n    _loop_1(index);\n  }\n  return uniqItems;\n}\n/** @ignore */\nvar Tooltip = /** @class */function (_super) {\n  __extends(Tooltip, _super);\n  function Tooltip() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.isLocked = false;\n    return _this;\n  }\n  Object.defineProperty(Tooltip.prototype, \"name\", {\n    get: function () {\n      return 'tooltip';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Tooltip.prototype.init = function () {};\n  Tooltip.prototype.isVisible = function () {\n    var option = this.view.getOptions().tooltip;\n    return option !== false;\n  };\n  Tooltip.prototype.render = function () {};\n  /**\n   * Shows tooltip\n   * @param point\n   */\n  Tooltip.prototype.showTooltip = function (point) {\n    this.point = point;\n    if (!this.isVisible()) {\n      // 如果设置 tooltip(false) 则始终不显示\n      return;\n    }\n    var view = this.view;\n    var items = this.getTooltipItems(point);\n    if (!items.length) {\n      // 无内容则不展示，同时 tooltip 需要隐藏\n      this.hideTooltip();\n      return;\n    }\n    var title = this.getTitle(items);\n    var dataPoint = {\n      x: items[0].x,\n      y: items[0].y\n    }; // 数据点位置\n    view.emit('tooltip:show', Event.fromData(view, 'tooltip:show', __assign({\n      items: items,\n      title: title\n    }, point)));\n    var cfg = this.getTooltipCfg();\n    var follow = cfg.follow,\n      showMarkers = cfg.showMarkers,\n      showCrosshairs = cfg.showCrosshairs,\n      showContent = cfg.showContent,\n      marker = cfg.marker;\n    var lastItems = this.items;\n    var lastTitle = this.title;\n    if (!isEqual(lastTitle, title) || !isEqual(lastItems, items)) {\n      // 内容发生变化了更新 tooltip\n      view.emit('tooltip:change', Event.fromData(view, 'tooltip:change', __assign({\n        items: items,\n        title: title\n      }, point)));\n      if (isFunction(showContent) ? showContent(items) : showContent) {\n        // 展示 tooltip 内容框才渲染 tooltip\n        if (!this.tooltip) {\n          // 延迟生成\n          this.renderTooltip();\n        }\n        this.tooltip.update(mix({}, cfg, {\n          items: this.getItemsAfterProcess(items),\n          title: title\n        }, follow ? point : {}));\n        this.tooltip.show();\n      }\n      if (showMarkers) {\n        // 展示 tooltipMarkers，tooltipMarkers 跟随数据\n        this.renderTooltipMarkers(items, marker);\n      }\n    } else {\n      // 内容未发生变化，则更新位置\n      if (this.tooltip && follow) {\n        this.tooltip.update(point);\n        this.tooltip.show(); // tooltip 有可能被隐藏，需要保证显示状态\n      }\n\n      if (this.tooltipMarkersGroup) {\n        this.tooltipMarkersGroup.show();\n      }\n    }\n    this.items = items;\n    this.title = title;\n    if (showCrosshairs) {\n      // 展示 tooltip 辅助线\n      var isCrosshairsFollowCursor = get(cfg, ['crosshairs', 'follow'], false); // 辅助线是否要跟随鼠标\n      this.renderCrosshairs(isCrosshairsFollowCursor ? point : dataPoint, cfg);\n    }\n  };\n  Tooltip.prototype.hideTooltip = function () {\n    var follow = this.getTooltipCfg().follow;\n    if (!follow) {\n      this.point = null;\n      return;\n    }\n    // hide the tooltipMarkers\n    var tooltipMarkersGroup = this.tooltipMarkersGroup;\n    if (tooltipMarkersGroup) {\n      tooltipMarkersGroup.hide();\n    }\n    // hide crosshairs\n    var xCrosshair = this.xCrosshair;\n    var yCrosshair = this.yCrosshair;\n    if (xCrosshair) {\n      xCrosshair.hide();\n    }\n    if (yCrosshair) {\n      yCrosshair.hide();\n    }\n    var tooltip = this.tooltip;\n    if (tooltip) {\n      tooltip.hide();\n    }\n    this.view.emit('tooltip:hide', Event.fromData(this.view, 'tooltip:hide', {}));\n    this.point = null;\n  };\n  /**\n   * lockTooltip\n   */\n  Tooltip.prototype.lockTooltip = function () {\n    this.isLocked = true;\n    if (this.tooltip) {\n      // tooltip contianer 可捕获事件\n      this.tooltip.setCapture(true);\n    }\n  };\n  /**\n   * unlockTooltip\n   */\n  Tooltip.prototype.unlockTooltip = function () {\n    this.isLocked = false;\n    var cfg = this.getTooltipCfg();\n    if (this.tooltip) {\n      // 重置 capture 属性\n      this.tooltip.setCapture(cfg.capture);\n    }\n  };\n  /**\n   * isTooltipLocked\n   */\n  Tooltip.prototype.isTooltipLocked = function () {\n    return this.isLocked;\n  };\n  Tooltip.prototype.clear = function () {\n    var _a = this,\n      tooltip = _a.tooltip,\n      xCrosshair = _a.xCrosshair,\n      yCrosshair = _a.yCrosshair,\n      tooltipMarkersGroup = _a.tooltipMarkersGroup;\n    if (tooltip) {\n      tooltip.hide();\n      tooltip.clear();\n    }\n    if (xCrosshair) {\n      xCrosshair.clear();\n    }\n    if (yCrosshair) {\n      yCrosshair.clear();\n    }\n    if (tooltipMarkersGroup) {\n      tooltipMarkersGroup.clear();\n    }\n    // 如果 customContent 不为空，就重新生成 tooltip\n    if (tooltip === null || tooltip === void 0 ? void 0 : tooltip.get('customContent')) {\n      this.tooltip.destroy();\n      this.tooltip = null;\n    }\n    // title 和 items 需要清空, 否则 tooltip 内容会出现置空的情况\n    // 即：需要走进 !isEqual(lastTitle, title) || !isEqual(lastItems, items) 的逻辑，更新 tooltip 的内容\n    this.title = null;\n    this.items = null;\n  };\n  Tooltip.prototype.destroy = function () {\n    if (this.tooltip) {\n      this.tooltip.destroy();\n    }\n    if (this.xCrosshair) {\n      this.xCrosshair.destroy();\n    }\n    if (this.yCrosshair) {\n      this.yCrosshair.destroy();\n    }\n    if (this.guideGroup) {\n      this.guideGroup.remove(true);\n    }\n    this.reset();\n  };\n  Tooltip.prototype.reset = function () {\n    this.items = null;\n    this.title = null;\n    this.tooltipMarkersGroup = null;\n    this.tooltipCrosshairsGroup = null;\n    this.xCrosshair = null;\n    this.yCrosshair = null;\n    this.tooltip = null;\n    this.guideGroup = null;\n    this.isLocked = false;\n    this.point = null;\n  };\n  Tooltip.prototype.changeVisible = function (visible) {\n    if (this.visible === visible) {\n      return;\n    }\n    var _a = this,\n      tooltip = _a.tooltip,\n      tooltipMarkersGroup = _a.tooltipMarkersGroup,\n      xCrosshair = _a.xCrosshair,\n      yCrosshair = _a.yCrosshair;\n    if (visible) {\n      if (tooltip) {\n        tooltip.show();\n      }\n      if (tooltipMarkersGroup) {\n        tooltipMarkersGroup.show();\n      }\n      if (xCrosshair) {\n        xCrosshair.show();\n      }\n      if (yCrosshair) {\n        yCrosshair.show();\n      }\n    } else {\n      if (tooltip) {\n        tooltip.hide();\n      }\n      if (tooltipMarkersGroup) {\n        tooltipMarkersGroup.hide();\n      }\n      if (xCrosshair) {\n        xCrosshair.hide();\n      }\n      if (yCrosshair) {\n        yCrosshair.hide();\n      }\n    }\n    this.visible = visible;\n  };\n  Tooltip.prototype.getTooltipItems = function (point) {\n    var e_1, _a, e_2, _b, e_3, _c;\n    var items = this.findItemsFromView(this.view, point);\n    if (items.length) {\n      // 三层\n      items = flatten(items);\n      try {\n        for (var items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {\n          var itemArr = items_1_1.value;\n          try {\n            for (var itemArr_1 = (e_2 = void 0, __values(itemArr)), itemArr_1_1 = itemArr_1.next(); !itemArr_1_1.done; itemArr_1_1 = itemArr_1.next()) {\n              var item = itemArr_1_1.value;\n              var _d = item.mappingData,\n                x = _d.x,\n                y = _d.y;\n              item.x = isArray(x) ? x[x.length - 1] : x;\n              item.y = isArray(y) ? y[y.length - 1] : y;\n            }\n          } catch (e_2_1) {\n            e_2 = {\n              error: e_2_1\n            };\n          } finally {\n            try {\n              if (itemArr_1_1 && !itemArr_1_1.done && (_b = itemArr_1.return)) _b.call(itemArr_1);\n            } finally {\n              if (e_2) throw e_2.error;\n            }\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      var shared = this.getTooltipCfg().shared;\n      // shared: false 代表只显示当前拾取到的 shape 的数据，但是一个 view 会有多个 Geometry，所以有可能会拾取到多个 shape\n      if (shared === false && items.length > 1) {\n        var snapItem = items[0];\n        var min = Math.abs(point.y - snapItem[0].y);\n        try {\n          for (var items_2 = __values(items), items_2_1 = items_2.next(); !items_2_1.done; items_2_1 = items_2.next()) {\n            var aItem = items_2_1.value;\n            var yDistance = Math.abs(point.y - aItem[0].y);\n            if (yDistance <= min) {\n              snapItem = aItem;\n              min = yDistance;\n            }\n          }\n        } catch (e_3_1) {\n          e_3 = {\n            error: e_3_1\n          };\n        } finally {\n          try {\n            if (items_2_1 && !items_2_1.done && (_c = items_2.return)) _c.call(items_2);\n          } finally {\n            if (e_3) throw e_3.error;\n          }\n        }\n        items = [snapItem];\n      }\n      return uniq(flatten(items));\n    }\n    return [];\n  };\n  Tooltip.prototype.layout = function () {};\n  Tooltip.prototype.update = function () {\n    if (this.point) {\n      this.showTooltip(this.point);\n    }\n    if (this.tooltip) {\n      // #2279 修复resize之后tooltip越界的问题\n      // 确保tooltip已经创建的情况下\n      var canvas = this.view.getCanvas();\n      // TODO 逍为 tooltip 的区域不应该是 canvas，而应该是整个 特别是在图比较小的时候\n      // 更新 region\n      this.tooltip.set('region', {\n        start: {\n          x: 0,\n          y: 0\n        },\n        end: {\n          x: canvas.get('width'),\n          y: canvas.get('height')\n        }\n      });\n    }\n  };\n  /**\n   * 当前鼠标点是在 enter tooltip 中\n   * @param point\n   */\n  Tooltip.prototype.isCursorEntered = function (point) {\n    // 是可捕获的，并且点在 tooltip dom 上\n    if (this.tooltip) {\n      var el = this.tooltip.getContainer();\n      var capture = this.tooltip.get('capture');\n      if (el && capture) {\n        var _a = el.getBoundingClientRect(),\n          x = _a.x,\n          y = _a.y,\n          width = _a.width,\n          height = _a.height;\n        return new BBox(x, y, width, height).isPointIn(point);\n      }\n    }\n    return false;\n  };\n  // 获取 tooltip 配置，因为用户可能会通过 view.tooltip() 重新配置 tooltip，所以就不做缓存，每次直接读取\n  Tooltip.prototype.getTooltipCfg = function () {\n    var view = this.view;\n    var option = view.getOptions().tooltip;\n    var processOption = this.processCustomContent(option);\n    var theme = view.getTheme();\n    var defaultCfg = get(theme, ['components', 'tooltip'], {});\n    var enterable = get(processOption, 'enterable', defaultCfg.enterable);\n    return deepMix({}, defaultCfg, processOption, {\n      capture: enterable || this.isLocked ? true : false\n    });\n  };\n  // process customContent\n  Tooltip.prototype.processCustomContent = function (option) {\n    if (isBoolean(option) || !get(option, 'customContent')) {\n      return option;\n    }\n    var currentCustomContent = option.customContent;\n    var customContent = function (title, items) {\n      var content = currentCustomContent(title, items) || '';\n      return isString(content) ? '<div class=\"g2-tooltip\">' + content + '</div>' : content;\n    };\n    return __assign(__assign({}, option), {\n      customContent: customContent\n    });\n  };\n  Tooltip.prototype.getTitle = function (items) {\n    var title = items[0].title || items[0].name;\n    this.title = title;\n    return title;\n  };\n  Tooltip.prototype.renderTooltip = function () {\n    var canvas = this.view.getCanvas();\n    var region = {\n      start: {\n        x: 0,\n        y: 0\n      },\n      end: {\n        x: canvas.get('width'),\n        y: canvas.get('height')\n      }\n    };\n    var cfg = this.getTooltipCfg();\n    var tooltip = new HtmlTooltip(__assign(__assign({\n      parent: canvas.get('el').parentNode,\n      region: region\n    }, cfg), {\n      visible: false,\n      crosshairs: null\n    }));\n    tooltip.init();\n    this.tooltip = tooltip;\n  };\n  Tooltip.prototype.renderTooltipMarkers = function (items, marker) {\n    var e_4, _a;\n    var tooltipMarkersGroup = this.getTooltipMarkersGroup();\n    var rootView = this.view.getRootView();\n    var limitInPlot = rootView.limitInPlot;\n    try {\n      for (var items_3 = __values(items), items_3_1 = items_3.next(); !items_3_1.done; items_3_1 = items_3.next()) {\n        var item = items_3_1.value;\n        var x = item.x,\n          y = item.y;\n        // 有裁剪就剪切\n        if (limitInPlot || (tooltipMarkersGroup === null || tooltipMarkersGroup === void 0 ? void 0 : tooltipMarkersGroup.getClip())) {\n          var _b = getCoordinateClipCfg(rootView.getCoordinate()),\n            type = _b.type,\n            attrs_1 = _b.attrs;\n          tooltipMarkersGroup === null || tooltipMarkersGroup === void 0 ? void 0 : tooltipMarkersGroup.setClip({\n            type: type,\n            attrs: attrs_1\n          });\n        } else {\n          // 清除已有的 clip\n          tooltipMarkersGroup === null || tooltipMarkersGroup === void 0 ? void 0 : tooltipMarkersGroup.setClip(undefined);\n        }\n        var theme = this.view.getTheme();\n        var markerDefaultCfg = get(theme, ['components', 'tooltip', 'marker'], {});\n        var attrs = __assign(__assign({\n          fill: item.color,\n          symbol: 'circle',\n          shadowColor: item.color\n        }, isFunction(marker) ? __assign(__assign({}, markerDefaultCfg), marker(item)) : marker), {\n          x: x,\n          y: y\n        });\n        tooltipMarkersGroup.addShape('marker', {\n          attrs: attrs\n        });\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (items_3_1 && !items_3_1.done && (_a = items_3.return)) _a.call(items_3);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n  };\n  Tooltip.prototype.renderCrosshairs = function (point, cfg) {\n    var crosshairsType = get(cfg, ['crosshairs', 'type'], 'x'); // 默认展示 x 轴上的辅助线\n    if (crosshairsType === 'x') {\n      if (this.yCrosshair) {\n        this.yCrosshair.hide();\n      }\n      this.renderXCrosshairs(point, cfg);\n    } else if (crosshairsType === 'y') {\n      if (this.xCrosshair) {\n        this.xCrosshair.hide();\n      }\n      this.renderYCrosshairs(point, cfg);\n    } else if (crosshairsType === 'xy') {\n      this.renderXCrosshairs(point, cfg);\n      this.renderYCrosshairs(point, cfg);\n    }\n  };\n  // 渲染 x 轴上的 tooltip 辅助线\n  Tooltip.prototype.renderXCrosshairs = function (point, tooltipCfg) {\n    var coordinate = this.getViewWithGeometry(this.view).getCoordinate();\n    var start;\n    var end;\n    if (coordinate.isRect) {\n      if (coordinate.isTransposed) {\n        start = {\n          x: coordinate.start.x,\n          y: point.y\n        };\n        end = {\n          x: coordinate.end.x,\n          y: point.y\n        };\n      } else {\n        start = {\n          x: point.x,\n          y: coordinate.end.y\n        };\n        end = {\n          x: point.x,\n          y: coordinate.start.y\n        };\n      }\n    } else {\n      // 极坐标下 x 轴上的 crosshairs 表现为半径\n      var angle = getAngleByPoint(coordinate, point);\n      var center = coordinate.getCenter();\n      var radius = coordinate.getRadius();\n      end = polarToCartesian(center.x, center.y, radius, angle);\n      start = center;\n    }\n    var cfg = deepMix({\n      start: start,\n      end: end,\n      container: this.getTooltipCrosshairsGroup()\n    }, get(tooltipCfg, 'crosshairs', {}), this.getCrosshairsText('x', point, tooltipCfg));\n    delete cfg.type; // 与 Crosshairs 组件的 type 冲突故删除\n    var xCrosshair = this.xCrosshair;\n    if (xCrosshair) {\n      xCrosshair.update(cfg);\n    } else {\n      xCrosshair = new Crosshair.Line(cfg);\n      xCrosshair.init();\n    }\n    xCrosshair.render();\n    xCrosshair.show();\n    this.xCrosshair = xCrosshair;\n  };\n  // 渲染 y 轴上的辅助线\n  Tooltip.prototype.renderYCrosshairs = function (point, tooltipCfg) {\n    var coordinate = this.getViewWithGeometry(this.view).getCoordinate();\n    var cfg;\n    var type;\n    if (coordinate.isRect) {\n      var start = void 0;\n      var end = void 0;\n      if (coordinate.isTransposed) {\n        start = {\n          x: point.x,\n          y: coordinate.end.y\n        };\n        end = {\n          x: point.x,\n          y: coordinate.start.y\n        };\n      } else {\n        start = {\n          x: coordinate.start.x,\n          y: point.y\n        };\n        end = {\n          x: coordinate.end.x,\n          y: point.y\n        };\n      }\n      cfg = {\n        start: start,\n        end: end\n      };\n      type = 'Line';\n    } else {\n      // 极坐标下 y 轴上的 crosshairs 表现为圆弧\n      cfg = {\n        center: coordinate.getCenter(),\n        // @ts-ignore\n        radius: getDistanceToCenter(coordinate, point),\n        startAngle: coordinate.startAngle,\n        endAngle: coordinate.endAngle\n      };\n      type = 'Circle';\n    }\n    cfg = deepMix({\n      container: this.getTooltipCrosshairsGroup()\n    }, cfg, get(tooltipCfg, 'crosshairs', {}), this.getCrosshairsText('y', point, tooltipCfg));\n    delete cfg.type; // 与 Crosshairs 组件的 type 冲突故删除\n    var yCrosshair = this.yCrosshair;\n    if (yCrosshair) {\n      // 如果坐标系发生直角坐标系与极坐标的切换操作\n      if (coordinate.isRect && yCrosshair.get('type') === 'circle' || !coordinate.isRect && yCrosshair.get('type') === 'line') {\n        yCrosshair = new Crosshair[type](cfg);\n        yCrosshair.init();\n      } else {\n        yCrosshair.update(cfg);\n      }\n    } else {\n      yCrosshair = new Crosshair[type](cfg);\n      yCrosshair.init();\n    }\n    yCrosshair.render();\n    yCrosshair.show();\n    this.yCrosshair = yCrosshair;\n  };\n  Tooltip.prototype.getCrosshairsText = function (type, point, tooltipCfg) {\n    var textCfg = get(tooltipCfg, ['crosshairs', 'text']);\n    var follow = get(tooltipCfg, ['crosshairs', 'follow']);\n    var items = this.items;\n    if (textCfg) {\n      var view = this.getViewWithGeometry(this.view);\n      // 需要展示文本\n      var firstItem = items[0];\n      var xScale = view.getXScale();\n      var yScale = view.getYScales()[0];\n      var xValue = void 0;\n      var yValue = void 0;\n      if (follow) {\n        // 如果需要跟随鼠标移动，就需要将当前鼠标坐标点转换为对应的数值\n        var invertPoint = this.view.getCoordinate().invert(point);\n        xValue = xScale.invert(invertPoint.x); // 转换为原始值\n        yValue = yScale.invert(invertPoint.y); // 转换为原始值\n      } else {\n        xValue = firstItem.data[xScale.field];\n        yValue = firstItem.data[yScale.field];\n      }\n      var content = type === 'x' ? xValue : yValue;\n      if (isFunction(textCfg)) {\n        textCfg = textCfg(type, content, items, point);\n      } else {\n        textCfg.content = content;\n      }\n      return {\n        text: textCfg\n      };\n    }\n  };\n  // 获取存储 tooltipMarkers 和 crosshairs 的容器\n  Tooltip.prototype.getGuideGroup = function () {\n    if (!this.guideGroup) {\n      var foregroundGroup = this.view.foregroundGroup;\n      this.guideGroup = foregroundGroup.addGroup({\n        name: 'tooltipGuide',\n        capture: false\n      });\n    }\n    return this.guideGroup;\n  };\n  // 获取 tooltipMarkers 存储的容器\n  Tooltip.prototype.getTooltipMarkersGroup = function () {\n    var tooltipMarkersGroup = this.tooltipMarkersGroup;\n    if (tooltipMarkersGroup && !tooltipMarkersGroup.destroyed) {\n      tooltipMarkersGroup.clear();\n      tooltipMarkersGroup.show();\n    } else {\n      tooltipMarkersGroup = this.getGuideGroup().addGroup({\n        name: 'tooltipMarkersGroup'\n      });\n      tooltipMarkersGroup.toFront();\n      this.tooltipMarkersGroup = tooltipMarkersGroup;\n    }\n    return tooltipMarkersGroup;\n  };\n  // 获取 tooltip crosshairs 存储的容器\n  Tooltip.prototype.getTooltipCrosshairsGroup = function () {\n    var tooltipCrosshairsGroup = this.tooltipCrosshairsGroup;\n    if (!tooltipCrosshairsGroup) {\n      tooltipCrosshairsGroup = this.getGuideGroup().addGroup({\n        name: 'tooltipCrosshairsGroup',\n        capture: false\n      });\n      tooltipCrosshairsGroup.toBack();\n      this.tooltipCrosshairsGroup = tooltipCrosshairsGroup;\n    }\n    return tooltipCrosshairsGroup;\n  };\n  Tooltip.prototype.findItemsFromView = function (view, point) {\n    var e_5, _a;\n    if (view.getOptions().tooltip === false) {\n      // 如果 view 关闭了 tooltip\n      return [];\n    }\n    var tooltipCfg = this.getTooltipCfg();\n    var result = findItemsFromView(view, point, tooltipCfg);\n    try {\n      // 递归查找，并合并结果\n      for (var _b = __values(view.views), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var childView = _c.value;\n        result = result.concat(this.findItemsFromView(childView, point));\n      }\n    } catch (e_5_1) {\n      e_5 = {\n        error: e_5_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_5) throw e_5.error;\n      }\n    }\n    return result;\n  };\n  // FIXME: hack 方法\n  // 因为 tooltip 的交互是挂载在 Chart 上，所以当chart 上没有绘制 Geometry 的时候，就查找不到数据，并且绘图区域同子 View 的区域不同\n  Tooltip.prototype.getViewWithGeometry = function (view) {\n    var _this = this;\n    if (view.geometries.length) {\n      return view;\n    }\n    return find(view.views, function (childView) {\n      return _this.getViewWithGeometry(childView);\n    });\n  };\n  /**\n   * 根据用户配置的 items 配置，来进行用户自定义的处理，并返回最终的 items\n   * 默认不做任何处理\n   */\n  Tooltip.prototype.getItemsAfterProcess = function (originalItems) {\n    var customItems = this.getTooltipCfg().customItems;\n    var fn = customItems ? customItems : function (v) {\n      return v;\n    };\n    return fn(originalItems);\n  };\n  return Tooltip;\n}(Controller);\nexport default Tooltip;","map":{"version":3,"mappings":"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","names":["deepMix","find","get","isEqual","isFunction","mix","isString","isBoolean","flatten","isArray","Crosshair","HtmlTooltip","getAngleByPoint","getDistanceToCenter","getCoordinateClipCfg","polarToCartesian","findItemsFromView","BBox","Controller","Event","uniq","items","uniqItems","index","item","result","subItem","color","name","value","title","push","length","__extends","_this","Object","Tooltip","option","view","getOptions","tooltip","point","isVisible","getTooltipItems","hideTooltip","getTitle","dataPoint","x","y","emit","fromData","cfg","getTooltipCfg","showMarkers","showCrosshairs","showContent","marker","lastItems","lastTitle","renderTooltip","update","getItemsAfterProcess","follow","show","renderTooltipMarkers","tooltipMarkersGroup","isCrosshairsFollowCursor","renderCrosshairs","hide","xCrosshair","yCrosshair","isLocked","setCapture","capture","clear","destroy","guideGroup","remove","reset","tooltipCrosshairsGroup","visible","itemArr","mappingData","shared","snapItem","min","Math","abs","aItem","yDistance","showTooltip","canvas","getCanvas","set","start","end","el","getContainer","getBoundingClientRect","width","height","isPointIn","processOption","processCustomContent","theme","getTheme","defaultCfg","enterable","currentCustomContent","customContent","content","region","parent","parentNode","crosshairs","init","getTooltipMarkersGroup","rootView","getRootView","limitInPlot","getClip","getCoordinate","type","attrs_1","setClip","attrs","undefined","markerDefaultCfg","fill","symbol","shadowColor","__assign","addShape","crosshairsType","renderXCrosshairs","renderYCrosshairs","tooltipCfg","coordinate","getViewWithGeometry","isRect","isTransposed","angle","center","getCenter","radius","getRadius","container","getTooltipCrosshairsGroup","getCrosshairsText","Line","render","startAngle","endAngle","textCfg","firstItem","xScale","getXScale","yScale","getYScales","xValue","yValue","invertPoint","invert","data","field","text","foregroundGroup","addGroup","destroyed","getGuideGroup","toFront","toBack","views","childView","concat","geometries","originalItems","fn","customItems","v"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/g2/src/chart/controller/tooltip.ts"],"sourcesContent":["import { deepMix, find, get, isEqual, isFunction, mix, isString, isBoolean, flatten, isArray } from '@antv/util';\nimport { Crosshair, HtmlTooltip, IGroup } from '../../dependents';\nimport { Point, TooltipItem, TooltipOption } from '../../interface';\nimport { getAngleByPoint, getDistanceToCenter, getCoordinateClipCfg } from '../../util/coordinate';\nimport { polarToCartesian } from '../../util/graphics';\nimport { findItemsFromView } from '../../util/tooltip';\nimport { BBox } from '../../util/bbox';\nimport { Controller } from './base';\nimport Event from '../event';\nimport View from '../view';\n\n// Filter duplicates, use `name`, `color`, `value` and `title` property values as condition\nfunction uniq(items) {\n  const uniqItems = [];\n  for (let index = 0; index < items.length; index++) {\n    const item = items[index];\n    const result = find(uniqItems, (subItem) => {\n      return (\n        subItem.color === item.color &&\n        subItem.name === item.name &&\n        subItem.value === item.value &&\n        subItem.title === item.title\n      );\n    });\n    if (!result) {\n      uniqItems.push(item);\n    }\n  }\n  return uniqItems;\n}\n\n/** @ignore */\nexport default class Tooltip extends Controller<TooltipOption> {\n  private tooltip;\n  private tooltipMarkersGroup: IGroup;\n  private tooltipCrosshairsGroup: IGroup;\n  private xCrosshair;\n  private yCrosshair;\n  private guideGroup: IGroup;\n\n  private isLocked: boolean = false;\n  private items;\n  private title: string;\n  private point: Point;\n\n  public get name(): string {\n    return 'tooltip';\n  }\n\n  public init() { }\n\n  private isVisible() {\n    const option = this.view.getOptions().tooltip;\n    return option !== false;\n  }\n\n  public render() { }\n\n  /**\n   * Shows tooltip\n   * @param point\n   */\n  public showTooltip(point: Point) {\n    this.point = point;\n    if (!this.isVisible()) {\n      // 如果设置 tooltip(false) 则始终不显示\n      return;\n    }\n    const view = this.view;\n    const items = this.getTooltipItems(point);\n    if (!items.length) {\n      // 无内容则不展示，同时 tooltip 需要隐藏\n      this.hideTooltip();\n      return;\n    }\n    const title = this.getTitle(items);\n    const dataPoint = {\n      x: items[0].x,\n      y: items[0].y,\n    }; // 数据点位置\n\n    view.emit(\n      'tooltip:show',\n      Event.fromData(view, 'tooltip:show', {\n        items,\n        title,\n        ...point,\n      })\n    );\n\n    const cfg = this.getTooltipCfg();\n    const { follow, showMarkers, showCrosshairs, showContent, marker } = cfg;\n    const lastItems = this.items;\n    const lastTitle = this.title;\n    if (!isEqual(lastTitle, title) || !isEqual(lastItems, items)) {\n      // 内容发生变化了更新 tooltip\n      view.emit(\n        'tooltip:change',\n        Event.fromData(view, 'tooltip:change', {\n          items,\n          title,\n          ...point,\n        })\n      );\n\n      if (isFunction(showContent) ? showContent(items) : showContent) {\n        // 展示 tooltip 内容框才渲染 tooltip\n        if (!this.tooltip) {\n          // 延迟生成\n          this.renderTooltip();\n        }\n        this.tooltip.update(\n          mix(\n            {},\n            cfg,\n            {\n              items: this.getItemsAfterProcess(items),\n              title,\n            },\n            follow ? point : {}\n          )\n        );\n        this.tooltip.show();\n      }\n\n      if (showMarkers) {\n        // 展示 tooltipMarkers，tooltipMarkers 跟随数据\n        this.renderTooltipMarkers(items, marker);\n      }\n    } else {\n      // 内容未发生变化，则更新位置\n      if (this.tooltip && follow) {\n        this.tooltip.update(point);\n        this.tooltip.show(); // tooltip 有可能被隐藏，需要保证显示状态\n      }\n\n      if (this.tooltipMarkersGroup) {\n        this.tooltipMarkersGroup.show();\n      }\n    }\n\n    this.items = items;\n    this.title = title;\n\n    if (showCrosshairs) {\n      // 展示 tooltip 辅助线\n      const isCrosshairsFollowCursor = get(cfg, ['crosshairs', 'follow'], false); // 辅助线是否要跟随鼠标\n      this.renderCrosshairs(isCrosshairsFollowCursor ? point : dataPoint, cfg);\n    }\n  }\n\n  public hideTooltip() {\n    const { follow } = this.getTooltipCfg();\n    if (!follow) {\n      this.point = null;\n      return;\n    }\n    // hide the tooltipMarkers\n    const tooltipMarkersGroup = this.tooltipMarkersGroup;\n    if (tooltipMarkersGroup) {\n      tooltipMarkersGroup.hide();\n    }\n\n    // hide crosshairs\n    const xCrosshair = this.xCrosshair;\n    const yCrosshair = this.yCrosshair;\n    if (xCrosshair) {\n      xCrosshair.hide();\n    }\n    if (yCrosshair) {\n      yCrosshair.hide();\n    }\n\n    const tooltip = this.tooltip;\n    if (tooltip) {\n      tooltip.hide();\n    }\n\n    this.view.emit('tooltip:hide', Event.fromData(this.view, 'tooltip:hide', {}));\n\n    this.point = null;\n  }\n\n  /**\n   * lockTooltip\n   */\n  public lockTooltip() {\n    this.isLocked = true;\n    if (this.tooltip) {\n      // tooltip contianer 可捕获事件\n      this.tooltip.setCapture(true);\n    }\n  }\n\n  /**\n   * unlockTooltip\n   */\n  public unlockTooltip() {\n    this.isLocked = false;\n    const cfg = this.getTooltipCfg();\n    if (this.tooltip) {\n      // 重置 capture 属性\n      this.tooltip.setCapture(cfg.capture);\n    }\n  }\n\n  /**\n   * isTooltipLocked\n   */\n  public isTooltipLocked() {\n    return this.isLocked;\n  }\n\n  public clear() {\n    const { tooltip, xCrosshair, yCrosshair, tooltipMarkersGroup } = this;\n    if (tooltip) {\n      tooltip.hide();\n      tooltip.clear();\n    }\n\n    if (xCrosshair) {\n      xCrosshair.clear();\n    }\n\n    if (yCrosshair) {\n      yCrosshair.clear();\n    }\n\n    if (tooltipMarkersGroup) {\n      tooltipMarkersGroup.clear();\n    }\n\n    // 如果 customContent 不为空，就重新生成 tooltip\n    if (tooltip?.get('customContent')) {\n      this.tooltip.destroy();\n      this.tooltip = null;\n    }\n\n    // title 和 items 需要清空, 否则 tooltip 内容会出现置空的情况\n    // 即：需要走进 !isEqual(lastTitle, title) || !isEqual(lastItems, items) 的逻辑，更新 tooltip 的内容\n    this.title = null;\n    this.items = null;\n  }\n\n  public destroy() {\n    if (this.tooltip) {\n      this.tooltip.destroy();\n    }\n    if (this.xCrosshair) {\n      this.xCrosshair.destroy();\n    }\n    if (this.yCrosshair) {\n      this.yCrosshair.destroy();\n    }\n\n    if (this.guideGroup) {\n      this.guideGroup.remove(true);\n    }\n\n    this.reset();\n  }\n\n  public reset() {\n    this.items = null;\n    this.title = null;\n    this.tooltipMarkersGroup = null;\n    this.tooltipCrosshairsGroup = null;\n    this.xCrosshair = null;\n    this.yCrosshair = null;\n    this.tooltip = null;\n    this.guideGroup = null;\n    this.isLocked = false;\n    this.point = null;\n  }\n\n  public changeVisible(visible: boolean) {\n    if (this.visible === visible) {\n      return;\n    }\n    const { tooltip, tooltipMarkersGroup, xCrosshair, yCrosshair } = this;\n    if (visible) {\n      if (tooltip) {\n        tooltip.show();\n      }\n      if (tooltipMarkersGroup) {\n        tooltipMarkersGroup.show();\n      }\n      if (xCrosshair) {\n        xCrosshair.show();\n      }\n      if (yCrosshair) {\n        yCrosshair.show();\n      }\n    } else {\n      if (tooltip) {\n        tooltip.hide();\n      }\n      if (tooltipMarkersGroup) {\n        tooltipMarkersGroup.hide();\n      }\n      if (xCrosshair) {\n        xCrosshair.hide();\n      }\n      if (yCrosshair) {\n        yCrosshair.hide();\n      }\n    }\n    this.visible = visible;\n  }\n\n  public getTooltipItems(point: Point) {\n    let items = this.findItemsFromView(this.view, point);\n    if (items.length) {\n      // 三层\n      items = flatten(items);\n      for (const itemArr of items) {\n        for (const item of itemArr) {\n          const { x, y } = item.mappingData;\n          item.x = isArray(x) ? x[x.length - 1] : x;\n          item.y = isArray(y) ? y[y.length - 1] : y;\n        }\n      }\n\n      const { shared } = this.getTooltipCfg();\n      // shared: false 代表只显示当前拾取到的 shape 的数据，但是一个 view 会有多个 Geometry，所以有可能会拾取到多个 shape\n      if (shared === false && items.length > 1) {\n        let snapItem = items[0];\n        let min = Math.abs(point.y - snapItem[0].y);\n        for (const aItem of items) {\n          const yDistance = Math.abs(point.y - aItem[0].y);\n          if (yDistance <= min) {\n            snapItem = aItem;\n            min = yDistance;\n          }\n        }\n        items = [snapItem];\n      }\n\n      return uniq(flatten(items));\n    }\n\n    return [];\n  }\n\n  public layout() { }\n\n  public update() {\n    if (this.point) {\n      this.showTooltip(this.point);\n    }\n\n    if (this.tooltip) {\n      // #2279 修复resize之后tooltip越界的问题\n      // 确保tooltip已经创建的情况下\n      const canvas = this.view.getCanvas();\n      // TODO 逍为 tooltip 的区域不应该是 canvas，而应该是整个 特别是在图比较小的时候\n      // 更新 region\n      this.tooltip.set('region', {\n        start: { x: 0, y: 0 },\n        end: { x: canvas.get('width'), y: canvas.get('height') },\n      });\n    }\n  }\n\n  /**\n   * 当前鼠标点是在 enter tooltip 中\n   * @param point\n   */\n  public isCursorEntered(point: Point) {\n    // 是可捕获的，并且点在 tooltip dom 上\n    if (this.tooltip) {\n      const el: HTMLElement = this.tooltip.getContainer();\n      const capture = this.tooltip.get('capture');\n\n      if (el && capture) {\n        const { x, y, width, height } = el.getBoundingClientRect();\n        return new BBox(x, y, width, height).isPointIn(point);\n      }\n    }\n\n    return false;\n  }\n\n  // 获取 tooltip 配置，因为用户可能会通过 view.tooltip() 重新配置 tooltip，所以就不做缓存，每次直接读取\n  public getTooltipCfg() {\n    const view = this.view;\n    const option = view.getOptions().tooltip;\n    const processOption = this.processCustomContent(option);\n    const theme = view.getTheme();\n    const defaultCfg = get(theme, ['components', 'tooltip'], {});\n    const enterable = get(processOption, 'enterable', defaultCfg.enterable);\n    return deepMix({}, defaultCfg, processOption, {\n      capture: enterable || this.isLocked ? true : false,\n    });\n  }\n\n  // process customContent\n  protected processCustomContent(option: TooltipOption) {\n    if (isBoolean(option) || !get(option, 'customContent')) {\n      return option;\n    }\n    const currentCustomContent = option.customContent;\n    const customContent = (title: string, items: any[]) => {\n      const content = currentCustomContent(title, items) || '';\n      return isString(content) ? '<div class=\"g2-tooltip\">' + content + '</div>' : content;\n    };\n    return {\n      ...option,\n      customContent,\n    };\n  }\n\n  private getTitle(items) {\n    const title = items[0].title || items[0].name;\n    this.title = title;\n\n    return title;\n  }\n\n  private renderTooltip() {\n    const canvas = this.view.getCanvas();\n    const region = {\n      start: { x: 0, y: 0 },\n      end: { x: canvas.get('width'), y: canvas.get('height') },\n    };\n\n    const cfg = this.getTooltipCfg();\n    const tooltip = new HtmlTooltip({\n      parent: canvas.get('el').parentNode,\n      region,\n      ...cfg,\n      visible: false,\n      crosshairs: null,\n    });\n\n    tooltip.init();\n    this.tooltip = tooltip;\n  }\n\n  private renderTooltipMarkers(items, marker) {\n    const tooltipMarkersGroup = this.getTooltipMarkersGroup();\n    const rootView = this.view.getRootView();\n    const { limitInPlot } = rootView;\n    for (const item of items) {\n      const { x, y } = item;\n\n      // 有裁剪就剪切\n      if (limitInPlot || tooltipMarkersGroup?.getClip()) {\n        const { type, attrs } = getCoordinateClipCfg(rootView.getCoordinate());\n        tooltipMarkersGroup?.setClip({\n          type,\n          attrs,\n        });\n      } else {\n        // 清除已有的 clip\n        tooltipMarkersGroup?.setClip(undefined);\n      }\n\n      const theme = this.view.getTheme();\n      const markerDefaultCfg = get(theme, ['components', 'tooltip', 'marker'], {});\n\n      const attrs = {\n        fill: item.color,\n        symbol: 'circle',\n        shadowColor: item.color,\n        ...(isFunction(marker) ? { ...markerDefaultCfg, ...marker(item) } : marker),\n        x,\n        y,\n      };\n\n      tooltipMarkersGroup.addShape('marker', {\n        attrs,\n      });\n    }\n  }\n\n  private renderCrosshairs(point: Point, cfg) {\n    const crosshairsType = get(cfg, ['crosshairs', 'type'], 'x'); // 默认展示 x 轴上的辅助线\n    if (crosshairsType === 'x') {\n      if (this.yCrosshair) {\n        this.yCrosshair.hide();\n      }\n      this.renderXCrosshairs(point, cfg);\n    } else if (crosshairsType === 'y') {\n      if (this.xCrosshair) {\n        this.xCrosshair.hide();\n      }\n      this.renderYCrosshairs(point, cfg);\n    } else if (crosshairsType === 'xy') {\n      this.renderXCrosshairs(point, cfg);\n      this.renderYCrosshairs(point, cfg);\n    }\n  }\n\n  // 渲染 x 轴上的 tooltip 辅助线\n  private renderXCrosshairs(point: Point, tooltipCfg) {\n    const coordinate = this.getViewWithGeometry(this.view).getCoordinate();\n    let start;\n    let end;\n    if (coordinate.isRect) {\n      if (coordinate.isTransposed) {\n        start = {\n          x: coordinate.start.x,\n          y: point.y,\n        };\n        end = {\n          x: coordinate.end.x,\n          y: point.y,\n        };\n      } else {\n        start = {\n          x: point.x,\n          y: coordinate.end.y,\n        };\n        end = {\n          x: point.x,\n          y: coordinate.start.y,\n        };\n      }\n    } else {\n      // 极坐标下 x 轴上的 crosshairs 表现为半径\n      const angle = getAngleByPoint(coordinate, point);\n      const center = coordinate.getCenter();\n      const radius = coordinate.getRadius();\n      end = polarToCartesian(center.x, center.y, radius, angle);\n      start = center;\n    }\n\n    const cfg = deepMix(\n      {\n        start,\n        end,\n        container: this.getTooltipCrosshairsGroup(),\n      },\n      get(tooltipCfg, 'crosshairs', {}),\n      this.getCrosshairsText('x', point, tooltipCfg)\n    );\n    delete cfg.type; // 与 Crosshairs 组件的 type 冲突故删除\n\n    let xCrosshair = this.xCrosshair;\n    if (xCrosshair) {\n      xCrosshair.update(cfg);\n    } else {\n      xCrosshair = new Crosshair.Line(cfg);\n      xCrosshair.init();\n    }\n    xCrosshair.render();\n    xCrosshair.show();\n    this.xCrosshair = xCrosshair;\n  }\n\n  // 渲染 y 轴上的辅助线\n  private renderYCrosshairs(point: Point, tooltipCfg) {\n    const coordinate = this.getViewWithGeometry(this.view).getCoordinate();\n    let cfg;\n    let type;\n    if (coordinate.isRect) {\n      let start;\n      let end;\n      if (coordinate.isTransposed) {\n        start = {\n          x: point.x,\n          y: coordinate.end.y,\n        };\n        end = {\n          x: point.x,\n          y: coordinate.start.y,\n        };\n      } else {\n        start = {\n          x: coordinate.start.x,\n          y: point.y,\n        };\n        end = {\n          x: coordinate.end.x,\n          y: point.y,\n        };\n      }\n      cfg = {\n        start,\n        end,\n      };\n      type = 'Line';\n    } else {\n      // 极坐标下 y 轴上的 crosshairs 表现为圆弧\n      cfg = {\n        center: coordinate.getCenter(),\n        // @ts-ignore\n        radius: getDistanceToCenter(coordinate, point),\n        startAngle: coordinate.startAngle,\n        endAngle: coordinate.endAngle,\n      };\n      type = 'Circle';\n    }\n\n    cfg = deepMix(\n      {\n        container: this.getTooltipCrosshairsGroup(),\n      },\n      cfg,\n      get(tooltipCfg, 'crosshairs', {}),\n      this.getCrosshairsText('y', point, tooltipCfg)\n    );\n    delete cfg.type; // 与 Crosshairs 组件的 type 冲突故删除\n\n    let yCrosshair = this.yCrosshair;\n    if (yCrosshair) {\n      // 如果坐标系发生直角坐标系与极坐标的切换操作\n      if (\n        (coordinate.isRect && yCrosshair.get('type') === 'circle') ||\n        (!coordinate.isRect && yCrosshair.get('type') === 'line')\n      ) {\n        yCrosshair = new Crosshair[type](cfg);\n        yCrosshair.init();\n      } else {\n        yCrosshair.update(cfg);\n      }\n    } else {\n      yCrosshair = new Crosshair[type](cfg);\n      yCrosshair.init();\n    }\n    yCrosshair.render();\n    yCrosshair.show();\n    this.yCrosshair = yCrosshair;\n  }\n\n  private getCrosshairsText(type, point: Point, tooltipCfg) {\n    let textCfg = get(tooltipCfg, ['crosshairs', 'text']);\n    const follow = get(tooltipCfg, ['crosshairs', 'follow']);\n    const items = this.items;\n\n    if (textCfg) {\n      const view = this.getViewWithGeometry(this.view);\n      // 需要展示文本\n      const firstItem = items[0];\n      const xScale = view.getXScale();\n      const yScale = view.getYScales()[0];\n      let xValue;\n      let yValue;\n      if (follow) {\n        // 如果需要跟随鼠标移动，就需要将当前鼠标坐标点转换为对应的数值\n        const invertPoint = this.view.getCoordinate().invert(point);\n        xValue = xScale.invert(invertPoint.x); // 转换为原始值\n        yValue = yScale.invert(invertPoint.y); // 转换为原始值\n      } else {\n        xValue = firstItem.data[xScale.field];\n        yValue = firstItem.data[yScale.field];\n      }\n\n      const content = type === 'x' ? xValue : yValue;\n      if (isFunction(textCfg)) {\n        textCfg = textCfg(type, content, items, point);\n      } else {\n        textCfg.content = content;\n      }\n\n      return {\n        text: textCfg,\n      };\n    }\n  }\n\n  // 获取存储 tooltipMarkers 和 crosshairs 的容器\n  private getGuideGroup() {\n    if (!this.guideGroup) {\n      const foregroundGroup = this.view.foregroundGroup;\n      this.guideGroup = foregroundGroup.addGroup({\n        name: 'tooltipGuide',\n        capture: false,\n      });\n    }\n\n    return this.guideGroup;\n  }\n\n  // 获取 tooltipMarkers 存储的容器\n  private getTooltipMarkersGroup() {\n    let tooltipMarkersGroup = this.tooltipMarkersGroup;\n    if (tooltipMarkersGroup && !tooltipMarkersGroup.destroyed) {\n      tooltipMarkersGroup.clear();\n      tooltipMarkersGroup.show();\n    } else {\n      tooltipMarkersGroup = this.getGuideGroup().addGroup({\n        name: 'tooltipMarkersGroup',\n      });\n      tooltipMarkersGroup.toFront();\n      this.tooltipMarkersGroup = tooltipMarkersGroup;\n    }\n    return tooltipMarkersGroup;\n  }\n\n  // 获取 tooltip crosshairs 存储的容器\n  private getTooltipCrosshairsGroup() {\n    let tooltipCrosshairsGroup = this.tooltipCrosshairsGroup;\n    if (!tooltipCrosshairsGroup) {\n      tooltipCrosshairsGroup = this.getGuideGroup().addGroup({\n        name: 'tooltipCrosshairsGroup',\n        capture: false,\n      });\n      tooltipCrosshairsGroup.toBack();\n      this.tooltipCrosshairsGroup = tooltipCrosshairsGroup;\n    }\n    return tooltipCrosshairsGroup;\n  }\n\n  private findItemsFromView(view: View, point: Point) {\n    if (view.getOptions().tooltip === false) {\n      // 如果 view 关闭了 tooltip\n      return [];\n    }\n\n    const tooltipCfg = this.getTooltipCfg();\n    let result = findItemsFromView(view, point, tooltipCfg);\n    // 递归查找，并合并结果\n    for (const childView of view.views) {\n      result = result.concat(this.findItemsFromView(childView, point));\n    }\n\n    return result;\n  }\n\n  // FIXME: hack 方法\n  // 因为 tooltip 的交互是挂载在 Chart 上，所以当chart 上没有绘制 Geometry 的时候，就查找不到数据，并且绘图区域同子 View 的区域不同\n  private getViewWithGeometry(view) {\n    if (view.geometries.length) {\n      return view;\n    }\n\n    return find(view.views, (childView) => this.getViewWithGeometry(childView));\n  }\n\n  /**\n   * 根据用户配置的 items 配置，来进行用户自定义的处理，并返回最终的 items\n   * 默认不做任何处理\n   */\n  private getItemsAfterProcess(originalItems: TooltipItem[]): TooltipItem[] {\n    const { customItems } = this.getTooltipCfg();\n    const fn = customItems ? customItems : (v) => v;\n\n    return fn(originalItems);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}