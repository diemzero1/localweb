{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { debounce, each, isString } from '@antv/util';\nimport { GROUP_Z_INDEX, VIEW_LIFE_CIRCLE } from '../constant';\nimport { getEngine } from '../engine';\nimport { createDom, getChartSize, removeDom, modifyCSS } from '../util/dom';\nimport View from './view';\n/**\n * Chart 类，是使用 G2 进行绘图的入口。\n */\nvar Chart = /** @class */function (_super) {\n  __extends(Chart, _super);\n  // @ts-ignore\n  function Chart(props) {\n    var _this = this;\n    var container = props.container,\n      width = props.width,\n      height = props.height,\n      _a = props.autoFit,\n      autoFit = _a === void 0 ? false : _a,\n      padding = props.padding,\n      appendPadding = props.appendPadding,\n      _b = props.renderer,\n      renderer = _b === void 0 ? 'canvas' : _b,\n      pixelRatio = props.pixelRatio,\n      _c = props.localRefresh,\n      localRefresh = _c === void 0 ? true : _c,\n      _d = props.visible,\n      visible = _d === void 0 ? true : _d,\n      _e = props.supportCSSTransform,\n      supportCSSTransform = _e === void 0 ? false : _e,\n      _f = props.defaultInteractions,\n      defaultInteractions = _f === void 0 ? ['tooltip', 'legend-filter', 'legend-active', 'continuous-filter', 'ellipsis-text', 'axis-description'] : _f,\n      options = props.options,\n      limitInPlot = props.limitInPlot,\n      theme = props.theme,\n      syncViewPadding = props.syncViewPadding;\n    var ele = isString(container) ? document.getElementById(container) : container;\n    // 生成内部正式绘制的 div 元素\n    var wrapperElement = createDom('<div style=\"position:relative;\"></div>');\n    ele.appendChild(wrapperElement);\n    // if autoFit, use the container size, to avoid the graph render twice.\n    var size = getChartSize(ele, autoFit, width, height);\n    var G = getEngine(renderer);\n    var canvas = new G.Canvas(__assign({\n      container: wrapperElement,\n      pixelRatio: pixelRatio,\n      localRefresh: localRefresh,\n      supportCSSTransform: supportCSSTransform\n    }, size));\n    // 调用 view 的创建\n    _this = _super.call(this, {\n      parent: null,\n      canvas: canvas,\n      // create 3 group layers for views.\n      backgroundGroup: canvas.addGroup({\n        zIndex: GROUP_Z_INDEX.BG\n      }),\n      middleGroup: canvas.addGroup({\n        zIndex: GROUP_Z_INDEX.MID\n      }),\n      foregroundGroup: canvas.addGroup({\n        zIndex: GROUP_Z_INDEX.FORE\n      }),\n      padding: padding,\n      appendPadding: appendPadding,\n      visible: visible,\n      options: options,\n      limitInPlot: limitInPlot,\n      theme: theme,\n      syncViewPadding: syncViewPadding\n    }) || this;\n    /**\n     * when container size changed, change chart size props, and re-render.\n     */\n    _this.onResize = debounce(function () {\n      _this.forceFit();\n    }, 300);\n    _this.ele = ele;\n    _this.canvas = canvas;\n    _this.width = size.width;\n    _this.height = size.height;\n    _this.autoFit = autoFit;\n    _this.localRefresh = localRefresh;\n    _this.renderer = renderer;\n    _this.wrapperElement = wrapperElement;\n    // 自适应大小\n    _this.updateCanvasStyle();\n    _this.bindAutoFit();\n    _this.initDefaultInteractions(defaultInteractions);\n    return _this;\n  }\n  Chart.prototype.initDefaultInteractions = function (interactions) {\n    var _this = this;\n    each(interactions, function (interaction) {\n      _this.interaction(interaction);\n    });\n  };\n  /**\n   * 设置 WAI-ARIA 无障碍标签。如何根据图形语法自动生成 arial 内容？\n   * @param ariaOption\n   */\n  Chart.prototype.aria = function (ariaOption) {\n    var ATTR = 'aria-label';\n    if (ariaOption === false) {\n      this.ele.removeAttribute(ATTR);\n    } else {\n      this.ele.setAttribute(ATTR, ariaOption.label);\n    }\n  };\n  /**\n   * 改变图表大小，同时重新渲染。\n   * @param width 图表宽度\n   * @param height 图表高度\n   * @returns\n   */\n  Chart.prototype.changeSize = function (width, height) {\n    // 如果宽高一致，那么 changeSize 不执行任何操作\n    if (this.width === width && this.height === height) {\n      return this;\n    }\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_SIZE);\n    this.width = width;\n    this.height = height;\n    this.canvas.changeSize(width, height);\n    // 重新渲染\n    this.render(true);\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_SIZE);\n    return this;\n  };\n  /**\n   * 清空图表，同时清除掉 aria 配置\n   */\n  Chart.prototype.clear = function () {\n    _super.prototype.clear.call(this);\n    this.aria(false);\n  };\n  /**\n   * 销毁图表，同时解绑事件，销毁创建的 G.Canvas 实例。\n   * @returns void\n   */\n  Chart.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n    this.unbindAutoFit();\n    this.canvas.destroy();\n    removeDom(this.wrapperElement);\n    this.wrapperElement = null;\n  };\n  /**\n   * 显示或隐藏图表\n   * @param visible 是否可见，true 表示显示，false 表示隐藏\n   * @returns\n   */\n  Chart.prototype.changeVisible = function (visible) {\n    _super.prototype.changeVisible.call(this, visible); // 需要更新 visible 变量\n    this.wrapperElement.style.display = visible ? '' : 'none';\n    return this;\n  };\n  /**\n   * 自动根据容器大小 resize 画布\n   */\n  Chart.prototype.forceFit = function () {\n    // skip if already destroyed\n    if (!this.destroyed) {\n      // 注意第二参数用 true，意思是即时 autoFit = false，forceFit() 调用之后一样是适配容器\n      var _a = getChartSize(this.ele, true, this.width, this.height),\n        width = _a.width,\n        height = _a.height;\n      this.changeSize(width, height);\n    }\n  };\n  Chart.prototype.updateCanvasStyle = function () {\n    modifyCSS(this.canvas.get('el'), {\n      display: 'inline-block',\n      verticalAlign: 'middle'\n    });\n  };\n  Chart.prototype.bindAutoFit = function () {\n    if (this.autoFit) {\n      window.addEventListener('resize', this.onResize);\n    }\n  };\n  Chart.prototype.unbindAutoFit = function () {\n    if (this.autoFit) {\n      window.removeEventListener('resize', this.onResize);\n    }\n  };\n  return Chart;\n}(View);\nexport default Chart;","map":{"version":3,"mappings":"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","names":["debounce","each","isString","GROUP_Z_INDEX","VIEW_LIFE_CIRCLE","getEngine","createDom","getChartSize","removeDom","modifyCSS","View","__extends","props","width","height","_a","autoFit","padding","appendPadding","_b","renderer","pixelRatio","_c","localRefresh","_d","visible","_e","supportCSSTransform","_f","defaultInteractions","options","limitInPlot","theme","syncViewPadding","ele","container","document","getElementById","wrapperElement","appendChild","size","G","canvas","Canvas","_super","parent","backgroundGroup","addGroup","zIndex","BG","middleGroup","MID","foregroundGroup","FORE","_this","forceFit","updateCanvasStyle","bindAutoFit","initDefaultInteractions","Chart","interactions","interaction","ariaOption","ATTR","removeAttribute","setAttribute","label","emit","BEFORE_CHANGE_SIZE","changeSize","render","AFTER_CHANGE_SIZE","clear","aria","destroy","unbindAutoFit","changeVisible","style","display","destroyed","get","verticalAlign","window","addEventListener","onResize","removeEventListener"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/g2/src/chart/chart.ts"],"sourcesContent":["import { debounce, each, isString } from '@antv/util';\nimport { ChartCfg } from '../interface';\nimport { GROUP_Z_INDEX, VIEW_LIFE_CIRCLE } from '../constant';\nimport { getEngine } from '../engine';\nimport { createDom, getChartSize, removeDom, modifyCSS } from '../util/dom';\nimport View from './view';\nimport { AriaOption } from '../interface';\n\n/**\n * Chart 类，是使用 G2 进行绘图的入口。\n */\nexport default class Chart extends View {\n  /** Chart 的 DOM 容器 */\n  public ele: HTMLElement;\n\n  /** 图表宽度 */\n  public width: number;\n  /** 图表高度 */\n  public height: number;\n  /** 是否开启局部刷新 */\n  public localRefresh: boolean;\n  /** 是否自适应 DOM 容器宽高，默认为 false，需要用户手动指定宽高 */\n  public autoFit: boolean;\n  /** 图表渲染引擎 */\n  public renderer: 'canvas' | 'svg';\n\n  private wrapperElement: HTMLElement;\n\n  // @ts-ignore\n  constructor(props: ChartCfg) {\n    const {\n      container,\n      width,\n      height,\n      autoFit = false,\n      padding,\n      appendPadding,\n      renderer = 'canvas',\n      pixelRatio,\n      localRefresh = true,\n      visible = true,\n      supportCSSTransform = false,\n      defaultInteractions = ['tooltip', 'legend-filter', 'legend-active', 'continuous-filter', 'ellipsis-text', 'axis-description'],\n      options,\n      limitInPlot,\n      theme,\n      syncViewPadding,\n    } = props;\n\n    const ele: HTMLElement = isString(container) ? document.getElementById(container) : container;\n\n    // 生成内部正式绘制的 div 元素\n    const wrapperElement = createDom('<div style=\"position:relative;\"></div>');\n    ele.appendChild(wrapperElement);\n\n    // if autoFit, use the container size, to avoid the graph render twice.\n    const size = getChartSize(ele, autoFit, width, height);\n\n    const G = getEngine(renderer);\n\n    const canvas = new G.Canvas({\n      container: wrapperElement,\n      pixelRatio,\n      localRefresh,\n      supportCSSTransform,\n      ...size,\n    });\n\n    // 调用 view 的创建\n    super({\n      parent: null,\n      canvas,\n      // create 3 group layers for views.\n      backgroundGroup: canvas.addGroup({ zIndex: GROUP_Z_INDEX.BG }),\n      middleGroup: canvas.addGroup({ zIndex: GROUP_Z_INDEX.MID }),\n      foregroundGroup: canvas.addGroup({ zIndex: GROUP_Z_INDEX.FORE }),\n      padding,\n      appendPadding,\n      visible,\n      options,\n      limitInPlot,\n      theme,\n      syncViewPadding,\n    });\n\n    this.ele = ele;\n    this.canvas = canvas;\n    this.width = size.width;\n    this.height = size.height;\n    this.autoFit = autoFit;\n    this.localRefresh = localRefresh;\n    this.renderer = renderer;\n    this.wrapperElement = wrapperElement;\n\n    // 自适应大小\n    this.updateCanvasStyle();\n    this.bindAutoFit();\n    this.initDefaultInteractions(defaultInteractions);\n  }\n\n  private initDefaultInteractions(interactions) {\n    each(interactions, (interaction) => {\n      this.interaction(interaction);\n    });\n  }\n\n  /**\n   * 设置 WAI-ARIA 无障碍标签。如何根据图形语法自动生成 arial 内容？\n   * @param ariaOption\n   */\n  public aria(ariaOption: AriaOption) {\n    const ATTR = 'aria-label';\n    if (ariaOption === false) {\n      this.ele.removeAttribute(ATTR);\n    } else {\n      this.ele.setAttribute(ATTR, ariaOption.label);\n    }\n  }\n\n  /**\n   * 改变图表大小，同时重新渲染。\n   * @param width 图表宽度\n   * @param height 图表高度\n   * @returns\n   */\n  public changeSize(width: number, height: number) {\n    // 如果宽高一致，那么 changeSize 不执行任何操作\n    if (this.width === width && this.height === height) {\n      return this;\n    }\n\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_SIZE);\n\n    this.width = width;\n    this.height = height;\n    this.canvas.changeSize(width, height);\n\n    // 重新渲染\n    this.render(true);\n\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_SIZE);\n\n    return this;\n  }\n\n  /**\n   * 清空图表，同时清除掉 aria 配置\n   */\n  public clear() {\n    super.clear();\n\n    this.aria(false);\n  }\n\n  /**\n   * 销毁图表，同时解绑事件，销毁创建的 G.Canvas 实例。\n   * @returns void\n   */\n  public destroy() {\n    super.destroy();\n\n    this.unbindAutoFit();\n    this.canvas.destroy();\n\n    removeDom(this.wrapperElement);\n    this.wrapperElement = null;\n  }\n\n  /**\n   * 显示或隐藏图表\n   * @param visible 是否可见，true 表示显示，false 表示隐藏\n   * @returns\n   */\n  public changeVisible(visible: boolean) {\n    super.changeVisible(visible); // 需要更新 visible 变量\n    this.wrapperElement.style.display = visible ? '' : 'none';\n\n    return this;\n  }\n\n  /**\n   * 自动根据容器大小 resize 画布\n   */\n  public forceFit() {\n    // skip if already destroyed\n    if (!this.destroyed) {\n      // 注意第二参数用 true，意思是即时 autoFit = false，forceFit() 调用之后一样是适配容器\n      const { width, height } = getChartSize(this.ele, true, this.width, this.height);\n      this.changeSize(width, height);\n    }\n  }\n\n  private updateCanvasStyle() {\n    modifyCSS(this.canvas.get('el'), {\n      display: 'inline-block',\n      verticalAlign: 'middle',\n    });\n  }\n\n  private bindAutoFit() {\n    if (this.autoFit) {\n      window.addEventListener('resize', this.onResize);\n    }\n  }\n\n  private unbindAutoFit() {\n    if (this.autoFit) {\n      window.removeEventListener('resize', this.onResize);\n    }\n  }\n\n  /**\n   * when container size changed, change chart size props, and re-render.\n   */\n  private onResize = debounce(() => {\n    this.forceFit();\n  }, 300);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}