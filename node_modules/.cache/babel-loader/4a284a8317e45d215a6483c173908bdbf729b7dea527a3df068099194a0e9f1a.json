{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { filter, get, isNumber } from '@antv/util';\nimport { LEVEL, log } from './invariant';\nimport { pick } from './pick';\n/**\n * 查看数据是否是全负数、或者全正数\n * @param data\n * @param field\n */\nexport function adjustYMetaByZero(data, field) {\n  if (!data) return {};\n  // 过滤出数字数据\n  var numberData = data.filter(function (datum) {\n    var v = get(datum, [field]);\n    return isNumber(v) && !isNaN(v);\n  });\n  var gtZero = numberData.every(function (datum) {\n    return get(datum, [field]) >= 0;\n  });\n  var ltZero = numberData.every(function (datum) {\n    return get(datum, [field]) <= 0;\n  });\n  // 目前是增量更新，对 { min: 0, max: undefined } 进行 update({ max: 0 }) 会得到 { min: 0, max: 0 }\n  if (gtZero) {\n    return {\n      min: 0\n    };\n  }\n  if (ltZero) {\n    return {\n      max: 0\n    };\n  }\n  return {};\n}\n/**\n * 转换数据格式为带有节点与边的数据格式\n * @param data\n * @param sourceField\n * @param targetField\n * @param weightField\n * @param rawFields 存放一些原数据\n */\nexport function transformDataToNodeLinkData(data, sourceField, targetField, weightField, rawFields) {\n  if (rawFields === void 0) {\n    rawFields = [];\n  }\n  if (!Array.isArray(data)) {\n    return {\n      nodes: [],\n      links: []\n    };\n  }\n  //   const nodes = [];\n  var links = [];\n  // 先使用对象方式存储\n  var nodesMap = {};\n  var nodesIndex = -1;\n  // 数组变换成 chord layout 的数据结构\n  data.forEach(function (datum) {\n    var source = datum[sourceField];\n    var target = datum[targetField];\n    var weight = datum[weightField];\n    var rawData = pick(datum, rawFields);\n    // source node\n    if (!nodesMap[source]) {\n      nodesMap[source] = __assign({\n        id: ++nodesIndex,\n        name: source\n      }, rawData);\n    }\n    if (!nodesMap[target]) {\n      nodesMap[target] = __assign({\n        id: ++nodesIndex,\n        name: target\n      }, rawData);\n    }\n    // links\n    links.push(__assign({\n      source: nodesMap[source].id,\n      target: nodesMap[target].id,\n      // sourceName: source,\n      // targetName: target,\n      value: weight\n    }, rawData));\n  });\n  return {\n    // 需要按照 id 的顺序\n    nodes: Object.values(nodesMap).sort(function (a, b) {\n      return a.id - b.id;\n    }),\n    links: links\n  };\n}\n/**\n * 处理不合法的数据(过滤 非数值型 和 NaN，保留 null)\n * @param data\n * @param angleField\n */\nexport function processIllegalData(data, field) {\n  var processData = filter(data, function (d) {\n    var v = d[field];\n    return v === null || typeof v === 'number' && !isNaN(v);\n  });\n  // 打印异常数据情况\n  log(LEVEL.WARN, processData.length === data.length, 'illegal data existed in chart data.');\n  return processData;\n}","map":{"version":3,"mappings":"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","names":["filter","get","isNumber","LEVEL","log","pick","adjustYMetaByZero","data","field","numberData","datum","v","isNaN","gtZero","every","ltZero","min","max","transformDataToNodeLinkData","sourceField","targetField","weightField","rawFields","Array","isArray","nodes","links","nodesMap","nodesIndex","forEach","source","target","weight","rawData","id","name","push","value","Object","values","sort","a","b","processIllegalData","processData","d","WARN","length"],"sources":["/home/iam/Documents/network/node_modules/@antv/g2plot/src/utils/data.ts"],"sourcesContent":["import { filter, get, isNumber } from '@antv/util';\nimport { Data, Datum, Meta, Options } from '../types';\nimport { Node, NodeLinkData } from '../types/relation-data';\nimport { LEVEL, log } from './invariant';\nimport { pick } from './pick';\n\n/**\n * 查看数据是否是全负数、或者全正数\n * @param data\n * @param field\n */\nexport function adjustYMetaByZero(data: Data, field: string): Meta {\n  if (!data) return {};\n  // 过滤出数字数据\n  const numberData = data.filter((datum: Datum) => {\n    const v = get(datum, [field]);\n    return isNumber(v) && !isNaN(v);\n  });\n\n  const gtZero = numberData.every((datum: Datum) => get(datum, [field]) >= 0);\n  const ltZero = numberData.every((datum: Datum) => get(datum, [field]) <= 0);\n\n  // 目前是增量更新，对 { min: 0, max: undefined } 进行 update({ max: 0 }) 会得到 { min: 0, max: 0 }\n  if (gtZero) {\n    return { min: 0 };\n  }\n  if (ltZero) {\n    return { max: 0 };\n  }\n  return {};\n}\n\n/**\n * 转换数据格式为带有节点与边的数据格式\n * @param data\n * @param sourceField\n * @param targetField\n * @param weightField\n * @param rawFields 存放一些原数据\n */\nexport function transformDataToNodeLinkData(\n  data: Data,\n  sourceField: string,\n  targetField: string,\n  weightField: string,\n  rawFields: string[] = []\n): NodeLinkData {\n  if (!Array.isArray(data)) {\n    return {\n      nodes: [],\n      links: [],\n    };\n  }\n\n  //   const nodes = [];\n  const links = [];\n  // 先使用对象方式存储\n  const nodesMap: Record<string, Node> = {};\n  let nodesIndex = -1;\n  // 数组变换成 chord layout 的数据结构\n  data.forEach((datum: Datum) => {\n    const source = datum[sourceField];\n    const target = datum[targetField];\n    const weight = datum[weightField];\n\n    const rawData = pick(datum, rawFields);\n\n    // source node\n    if (!nodesMap[source]) {\n      nodesMap[source] = {\n        id: ++nodesIndex,\n        name: source,\n        ...rawData,\n      };\n    }\n    if (!nodesMap[target]) {\n      nodesMap[target] = {\n        id: ++nodesIndex,\n        name: target,\n        ...rawData,\n      };\n    }\n    // links\n    links.push({\n      source: nodesMap[source].id,\n      target: nodesMap[target].id,\n      // sourceName: source,\n      // targetName: target,\n      value: weight,\n      ...rawData,\n    });\n  });\n  return {\n    // 需要按照 id 的顺序\n    nodes: Object.values(nodesMap).sort((a, b) => a.id - b.id),\n    links,\n  };\n}\n\n/**\n * 处理不合法的数据(过滤 非数值型 和 NaN，保留 null)\n * @param data\n * @param angleField\n */\nexport function processIllegalData(data: Options['data'], field: string) {\n  const processData = filter(data, (d) => {\n    const v = d[field];\n    return v === null || (typeof v === 'number' && !isNaN(v));\n  });\n\n  // 打印异常数据情况\n  log(LEVEL.WARN, processData.length === data.length, 'illegal data existed in chart data.');\n\n  return processData;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}