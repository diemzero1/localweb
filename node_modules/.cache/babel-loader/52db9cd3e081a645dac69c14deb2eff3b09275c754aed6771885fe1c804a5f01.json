{"ast":null,"code":"import { __assign, __extends, __values } from \"tslib\";\n/**\n * Create By Bruce Too\n * On 2020-02-10\n */\nimport { assign, deepMix, each, get } from '@antv/util';\nimport { DIRECTION, VIEW_LIFE_CIRCLE } from '../constant';\nimport { getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n/**\n * @ignore\n * Tree Facet\n */\nvar Tree = /** @class */function (_super) {\n  __extends(Tree, _super);\n  function Tree() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.afterChartRender = function () {\n      if (_this.facets && _this.cfg.line) {\n        _this.container.clear();\n        _this.drawLines(_this.facets);\n      }\n    };\n    return _this;\n  }\n  Tree.prototype.afterEachView = function (view, facet) {\n    this.processAxis(view, facet);\n  };\n  Tree.prototype.beforeEachView = function (view, facet) {};\n  Tree.prototype.init = function () {\n    _super.prototype.init.call(this);\n    this.view.on(VIEW_LIFE_CIRCLE.AFTER_RENDER, this.afterChartRender);\n  };\n  Tree.prototype.getDefaultCfg = function () {\n    return deepMix({}, _super.prototype.getDefaultCfg.call(this), {\n      type: 'tree',\n      line: {\n        style: {\n          lineWidth: 1,\n          stroke: '#ddd'\n        },\n        smooth: false\n      },\n      showTitle: true,\n      title: _super.prototype.getDefaultTitleCfg.call(this)\n    });\n  };\n  Tree.prototype.generateFacets = function (data) {\n    var fields = this.cfg.fields;\n    if (!fields.length) {\n      throw new Error('Please specify for the fields for rootFacet!');\n    }\n    var rst = [];\n    var rootFacet = {\n      type: this.cfg.type,\n      data: data,\n      region: null,\n      rowValuesLength: this.getRows(),\n      columnValuesLength: 1,\n      rowIndex: 0,\n      columnIndex: 0,\n      rowField: '',\n      columnField: '',\n      rowValue: '',\n      columnValue: ''\n    };\n    rst.push(rootFacet);\n    rootFacet.children = this.getChildFacets(data, 1, rst);\n    this.setRegion(rst);\n    return rst;\n  };\n  Tree.prototype.setRegion = function (facets) {\n    var _this = this;\n    this.forceColIndex(facets);\n    facets.forEach(function (facet) {\n      // @ts-ignore 允许调整\n      facet.region = _this.getRegion(facet.rowValuesLength, facet.columnValuesLength, facet.columnIndex, facet.rowIndex);\n    });\n  };\n  Tree.prototype.getRegion = function (rows, cols, xIndex, yIndex) {\n    var xWidth = 1 / cols; // x轴方向的每个分面的偏移\n    var yWidth = 1 / rows; // y轴方向的每个分面的偏移\n    var start = {\n      x: xWidth * xIndex,\n      y: yWidth * yIndex\n    };\n    var end = {\n      x: start.x + xWidth,\n      y: start.y + yWidth * 2 / 3 // 预留1/3的空隙，方便添加连接线\n    };\n\n    return {\n      start: start,\n      end: end\n    };\n  };\n  Tree.prototype.forceColIndex = function (facets) {\n    var e_1, _a;\n    var _this = this;\n    var leafs = [];\n    var index = 0;\n    facets.forEach(function (facet) {\n      if (_this.isLeaf(facet)) {\n        leafs.push(facet);\n        // @ts-ignore 允许调整\n        facet.columnIndex = index;\n        index++;\n      }\n    });\n    leafs.forEach(function (facet) {\n      // @ts-ignore\n      facet.columnValuesLength = leafs.length;\n    });\n    var maxLevel = this.cfg.fields.length;\n    for (var i = maxLevel - 1; i >= 0; i--) {\n      var levelFacets = this.getFacetsByLevel(facets, i);\n      try {\n        // var yIndex = maxLevel - i;\n        for (var levelFacets_1 = (e_1 = void 0, __values(levelFacets)), levelFacets_1_1 = levelFacets_1.next(); !levelFacets_1_1.done; levelFacets_1_1 = levelFacets_1.next()) {\n          var facet = levelFacets_1_1.value;\n          if (!this.isLeaf(facet)) {\n            facet.originColIndex = facet.columnIndex;\n            // @ts-ignore\n            facet.columnIndex = this.getRegionIndex(facet.children);\n            // @ts-ignore\n            facet.columnValuesLength = leafs.length;\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (levelFacets_1_1 && !levelFacets_1_1.done && (_a = levelFacets_1.return)) _a.call(levelFacets_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n  };\n  // get facet use level\n  Tree.prototype.getFacetsByLevel = function (facets, level) {\n    var rst = [];\n    facets.forEach(function (facet) {\n      if (facet.rowIndex === level) {\n        rst.push(facet);\n      }\n    });\n    return rst;\n  };\n  // if the facet has children , make it's column index in the middle of it's children\n  Tree.prototype.getRegionIndex = function (children) {\n    var first = children[0];\n    var last = children[children.length - 1];\n    return (last.columnIndex - first.columnIndex) / 2 + first.columnIndex;\n  };\n  // is  a leaf without children\n  Tree.prototype.isLeaf = function (facet) {\n    return !facet.children || !facet.children.length;\n  };\n  Tree.prototype.getRows = function () {\n    return this.cfg.fields.length + 1;\n  };\n  // get child\n  Tree.prototype.getChildFacets = function (data, level, arr) {\n    var _this = this;\n    // [ 'grade', 'class' ]\n    var fields = this.cfg.fields;\n    var length = fields.length;\n    if (length < level) {\n      return;\n    }\n    var rst = [];\n    // get fist level except root node\n    var field = fields[level - 1];\n    // get field value\n    var values = this.getFieldValues(data, field);\n    values.forEach(function (value, index) {\n      var conditions = [{\n        field: field,\n        value: value,\n        values: values\n      }];\n      var subData = data.filter(_this.getFacetDataFilter(conditions));\n      if (subData.length) {\n        var facet = {\n          type: _this.cfg.type,\n          data: subData,\n          region: null,\n          columnValue: value,\n          rowValue: '',\n          columnField: field,\n          rowField: '',\n          columnIndex: index,\n          rowValuesLength: _this.getRows(),\n          columnValuesLength: 1,\n          rowIndex: level,\n          children: _this.getChildFacets(subData, level + 1, arr)\n        };\n        rst.push(facet);\n        arr.push(facet);\n      }\n    });\n    return rst;\n  };\n  Tree.prototype.render = function () {\n    _super.prototype.render.call(this);\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  };\n  Tree.prototype.renderTitle = function () {\n    var _this = this;\n    each(this.facets, function (facet) {\n      var columnValue = facet.columnValue,\n        view = facet.view;\n      var formatter = get(_this.cfg.title, 'formatter');\n      var config = deepMix({\n        position: ['50%', '0%'],\n        content: formatter ? formatter(columnValue) : columnValue\n      }, getFactTitleConfig(DIRECTION.TOP), _this.cfg.title);\n      view.annotation().text(config);\n    });\n  };\n  Tree.prototype.drawLines = function (facets) {\n    var _this = this;\n    facets.forEach(function (facet) {\n      if (!_this.isLeaf(facet)) {\n        var children = facet.children;\n        _this.addFacetLines(facet, children);\n      }\n    });\n  };\n  // add lines with it's children\n  Tree.prototype.addFacetLines = function (facet, children) {\n    var _this = this;\n    var view = facet.view;\n    var region = view.coordinateBBox;\n    // top, right, bottom, left\n    var start = {\n      x: region.x + region.width / 2,\n      y: region.y + region.height\n    };\n    children.forEach(function (subFacet) {\n      var subRegion = subFacet.view.coordinateBBox;\n      var end = {\n        x: subRegion.bl.x + (subRegion.tr.x - subRegion.bl.x) / 2,\n        y: subRegion.tr.y\n      };\n      var middle1 = {\n        x: start.x,\n        y: start.y + (end.y - start.y) / 2\n      };\n      var middle2 = {\n        x: end.x,\n        y: middle1.y\n      };\n      _this.drawLine([start, middle1, middle2, end]);\n    });\n  };\n  Tree.prototype.getPath = function (points) {\n    var path = [];\n    var smooth = this.cfg.line.smooth;\n    if (smooth) {\n      path.push(['M', points[0].x, points[0].y]);\n      path.push(['C', points[1].x, points[1].y, points[2].x, points[2].y, points[3].x, points[3].y]);\n    } else {\n      points.forEach(function (point, index) {\n        if (index === 0) {\n          path.push(['M', point.x, point.y]);\n        } else {\n          path.push(['L', point.x, point.y]);\n        }\n      });\n    }\n    return path;\n  };\n  // draw line width points\n  Tree.prototype.drawLine = function (points) {\n    var path = this.getPath(points);\n    var line = this.cfg.line.style;\n    this.container.addShape('path', {\n      attrs: assign({\n        // @ts-ignore\n        path: path\n      }, line)\n    });\n  };\n  Tree.prototype.getXAxisOption = function (x, axes, option, facet) {\n    if (facet.rowIndex !== facet.rowValuesLength - 1) {\n      return __assign(__assign({}, option), {\n        title: null,\n        label: null\n      });\n    }\n    return option;\n  };\n  Tree.prototype.getYAxisOption = function (y, axes, option, facet) {\n    if (facet.originColIndex !== 0 && facet.columnIndex !== 0) {\n      return __assign(__assign({}, option), {\n        title: null,\n        label: null\n      });\n    }\n    return option;\n  };\n  return Tree;\n}(Facet);\nexport default Tree;","map":{"version":3,"mappings":"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","names":["assign","deepMix","each","get","DIRECTION","VIEW_LIFE_CIRCLE","getFactTitleConfig","Facet","__extends","_this","facets","cfg","line","container","clear","drawLines","Tree","view","facet","processAxis","_super","init","on","AFTER_RENDER","afterChartRender","getDefaultCfg","type","style","lineWidth","stroke","smooth","showTitle","title","getDefaultTitleCfg","data","fields","length","Error","rst","rootFacet","region","rowValuesLength","getRows","columnValuesLength","rowIndex","columnIndex","rowField","columnField","rowValue","columnValue","push","children","getChildFacets","setRegion","forceColIndex","forEach","getRegion","rows","cols","xIndex","yIndex","xWidth","yWidth","start","x","y","end","leafs","index","isLeaf","maxLevel","i","levelFacets","getFacetsByLevel","originColIndex","getRegionIndex","level","first","last","arr","field","values","getFieldValues","value","conditions","subData","filter","getFacetDataFilter","render","renderTitle","formatter","config","position","content","TOP","annotation","text","addFacetLines","coordinateBBox","width","height","subFacet","subRegion","bl","tr","middle1","middle2","drawLine","points","path","point","getPath","addShape","attrs","axes","option","label"],"sources":["/home/iam/Documents/network/node_modules/@antv/g2/src/facet/tree.ts"],"sourcesContent":["/**\n * Create By Bruce Too\n * On 2020-02-10\n */\nimport { assign, deepMix, each, get } from '@antv/util';\nimport View from '../chart/view';\nimport { DIRECTION, VIEW_LIFE_CIRCLE } from '../constant';\nimport { AxisCfg, Condition, Datum, TreeCfg, TreeData } from '../interface';\nimport { getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n\n/**\n * @ignore\n * Tree Facet\n */\nexport default class Tree extends Facet<TreeCfg, TreeData> {\n  protected afterEachView(view: View, facet: TreeData) {\n    this.processAxis(view, facet);\n  }\n\n  protected beforeEachView(view: View, facet: TreeData) {}\n\n  public init() {\n    super.init();\n    this.view.on(VIEW_LIFE_CIRCLE.AFTER_RENDER, this.afterChartRender);\n  }\n\n  protected getDefaultCfg() {\n    return deepMix({}, super.getDefaultCfg(), {\n      type: 'tree',\n      line: {\n        style: {\n          lineWidth: 1,\n          stroke: '#ddd',\n        },\n        smooth: false,\n      },\n      showTitle: true,\n      title: super.getDefaultTitleCfg(),\n    });\n  }\n\n  protected generateFacets(data: Datum[]): TreeData[] {\n    const fields = this.cfg.fields;\n    if (!fields.length) {\n      throw new Error('Please specify for the fields for rootFacet!');\n    }\n    const rst = [];\n    const rootFacet: TreeData = {\n      type: this.cfg.type,\n      data,\n      region: null,\n      rowValuesLength: this.getRows(),\n      columnValuesLength: 1,\n      rowIndex: 0,\n      columnIndex: 0,\n      rowField: '',\n      columnField: '',\n      rowValue: '',\n      columnValue: '',\n    };\n    rst.push(rootFacet);\n    rootFacet.children = this.getChildFacets(data, 1, rst);\n    this.setRegion(rst);\n    return rst;\n  }\n\n  private setRegion(facets: TreeData[]) {\n    this.forceColIndex(facets);\n    facets.forEach((facet) => {\n      // @ts-ignore 允许调整\n      facet.region = this.getRegion(facet.rowValuesLength, facet.columnValuesLength, facet.columnIndex, facet.rowIndex);\n    });\n  }\n\n  protected getRegion(rows: number, cols: number, xIndex: number, yIndex: number) {\n    const xWidth = 1 / cols; // x轴方向的每个分面的偏移\n    const yWidth = 1 / rows; // y轴方向的每个分面的偏移\n\n    const start = {\n      x: xWidth * xIndex,\n      y: yWidth * yIndex,\n    };\n\n    const end = {\n      x: start.x + xWidth,\n      y: start.y + (yWidth * 2) / 3, // 预留1/3的空隙，方便添加连接线\n    };\n    return {\n      start,\n      end,\n    };\n  }\n\n  private forceColIndex(facets: TreeData[]) {\n    const leafs: TreeData[] = [];\n    let index = 0;\n    facets.forEach((facet) => {\n      if (this.isLeaf(facet)) {\n        leafs.push(facet);\n        // @ts-ignore 允许调整\n        facet.columnIndex = index;\n        index++;\n      }\n    });\n\n    leafs.forEach((facet) => {\n      // @ts-ignore\n      facet.columnValuesLength = leafs.length;\n    });\n    const maxLevel = this.cfg.fields.length;\n    for (let i = maxLevel - 1; i >= 0; i--) {\n      const levelFacets = this.getFacetsByLevel(facets, i);\n      // var yIndex = maxLevel - i;\n      for (const facet of levelFacets) {\n        if (!this.isLeaf(facet)) {\n          facet.originColIndex = facet.columnIndex;\n          // @ts-ignore\n          facet.columnIndex = this.getRegionIndex(facet.children);\n          // @ts-ignore\n          facet.columnValuesLength = leafs.length;\n        }\n      }\n    }\n  }\n\n  // get facet use level\n  private getFacetsByLevel(facets: TreeData[], level: number) {\n    const rst: TreeData[] = [];\n    facets.forEach((facet) => {\n      if (facet.rowIndex === level) {\n        rst.push(facet);\n      }\n    });\n    return rst;\n  }\n\n  // if the facet has children , make it's column index in the middle of it's children\n  private getRegionIndex(children: TreeData[]) {\n    const first = children[0];\n    const last = children[children.length - 1];\n    return (last.columnIndex - first.columnIndex) / 2 + first.columnIndex;\n  }\n\n  // is  a leaf without children\n  private isLeaf(facet: TreeData) {\n    return !facet.children || !facet.children.length;\n  }\n\n  private getRows() {\n    return this.cfg.fields.length + 1;\n  }\n\n  // get child\n  private getChildFacets(data: Datum[], level: number, arr: TreeData[]) {\n    // [ 'grade', 'class' ]\n    const fields = this.cfg.fields;\n    const length = fields.length;\n    if (length < level) {\n      return;\n    }\n    const rst = [];\n    // get fist level except root node\n    const field = fields[level - 1];\n    // get field value\n    const values = this.getFieldValues(data, field);\n    values.forEach((value, index) => {\n      const conditions = [{ field, value, values } as Condition];\n      const subData = data.filter(this.getFacetDataFilter(conditions));\n      if (subData.length) {\n        const facet: TreeData = {\n          type: this.cfg.type,\n          data: subData,\n          region: null,\n          columnValue: value,\n          rowValue: '',\n          columnField: field,\n          rowField: '',\n          columnIndex: index,\n          rowValuesLength: this.getRows(),\n          columnValuesLength: 1,\n          rowIndex: level,\n          children: this.getChildFacets(subData, level + 1, arr),\n        };\n        rst.push(facet);\n        arr.push(facet);\n      }\n    });\n    return rst;\n  }\n\n  public render() {\n    super.render();\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  }\n\n  private afterChartRender = () => {\n    if (this.facets && this.cfg.line) {\n      this.container.clear();\n      this.drawLines(this.facets);\n    }\n  };\n\n  private renderTitle() {\n    each(this.facets, (facet: TreeData) => {\n      const { columnValue, view } = facet;\n      const formatter = get(this.cfg.title, 'formatter');\n\n      const config = deepMix(\n        {\n          position: ['50%', '0%'] as [string, string],\n          content: formatter ? formatter(columnValue) : columnValue,\n        },\n        getFactTitleConfig(DIRECTION.TOP),\n        this.cfg.title\n      );\n\n      view.annotation().text(config);\n    });\n  }\n\n  private drawLines(facets: TreeData[]) {\n    facets.forEach((facet) => {\n      if (!this.isLeaf(facet)) {\n        const children = facet.children;\n        this.addFacetLines(facet, children);\n      }\n    });\n  }\n\n  // add lines with it's children\n  private addFacetLines(facet: TreeData, children: TreeData[]) {\n    const view = facet.view;\n    const region = view.coordinateBBox;\n    // top, right, bottom, left\n    const start = {\n      x: region.x + region.width / 2,\n      y: region.y + region.height,\n    };\n\n    children.forEach((subFacet) => {\n      const subRegion = subFacet.view.coordinateBBox;\n      const end = {\n        x: subRegion.bl.x + (subRegion.tr.x - subRegion.bl.x) / 2,\n        y: subRegion.tr.y,\n      };\n\n      const middle1 = {\n        x: start.x,\n        y: start.y + (end.y - start.y) / 2,\n      };\n      const middle2 = {\n        x: end.x,\n        y: middle1.y,\n      };\n      this.drawLine([start, middle1, middle2, end]);\n    });\n  }\n\n  private getPath(points) {\n    const path = [];\n    const smooth = this.cfg.line.smooth;\n    if (smooth) {\n      path.push(['M', points[0].x, points[0].y]);\n      path.push(['C', points[1].x, points[1].y, points[2].x, points[2].y, points[3].x, points[3].y]);\n    } else {\n      points.forEach((point, index) => {\n        if (index === 0) {\n          path.push(['M', point.x, point.y]);\n        } else {\n          path.push(['L', point.x, point.y]);\n        }\n      });\n    }\n\n    return path;\n  }\n\n  // draw line width points\n  private drawLine(points) {\n    const path = this.getPath(points);\n    const line = this.cfg.line.style;\n    this.container.addShape('path', {\n      attrs: assign(\n        {\n          // @ts-ignore\n          path,\n        },\n        line\n      ),\n    });\n  }\n\n  protected getXAxisOption(x: string, axes: any, option: AxisCfg, facet: TreeData): object {\n    if (facet.rowIndex !== facet.rowValuesLength - 1) {\n      return {\n        ...option,\n        title: null,\n        label: null,\n      };\n    }\n    return option;\n  }\n\n  protected getYAxisOption(y: string, axes: any, option: AxisCfg, facet: TreeData): object {\n    if (facet.originColIndex !== 0 && facet.columnIndex !== 0) {\n      return {\n        ...option,\n        title: null,\n        label: null,\n      };\n    }\n    return option;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}