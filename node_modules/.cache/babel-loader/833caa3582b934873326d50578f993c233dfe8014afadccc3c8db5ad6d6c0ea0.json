{"ast":null,"code":"var _jsxFileName = \"/home/iam/Documents/LocalWeb-master/src/components/antd/network/wireless/wireless.tsx\",\n  _s = $RefreshSig$();\nimport { Button, Input, Select, message, Form, Card } from 'antd';\nimport React, { useRef } from 'react';\nimport ubusApi from 'service/api/ubus-api';\nimport { useTranslation } from \"react-i18next\";\nimport \"../../../../translations/i18n\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Wireless = props => {\n  _s();\n  const {\n    t\n  } = useTranslation();\n  let pattern = /^[a-zA-Z0-9_.]+$/;\n  const [status, setDisabled] = React.useState(\"\");\n  const [checked, setChecked] = React.useState(\"\");\n  const [encryption, setEncryption] = React.useState([]);\n  const [pwd, setPWD] = React.useState(null);\n  const optionStatusGuest = useRef([{\n    label: \"Enable\",\n    value: \"false\"\n  }, {\n    label: \"Disable\",\n    value: \"true\"\n  }]).current;\n  const optionGuestEncryption = useRef([{\n    label: \"None\",\n    value: \"none\"\n  }, {\n    label: \"PSK2\",\n    value: \"psk2\"\n  }, {\n    label: \"PSK\",\n    value: \"psk\"\n  }]).current;\n  const [form] = Form.useForm();\n  const formItemLayout = {\n    labelCol: {\n      xs: {\n        span: 24\n      },\n      sm: {\n        span: 4\n      }\n    },\n    wrapperCol: {\n      xs: {\n        span: 24\n      },\n      sm: {\n        span: 16\n      }\n    }\n  };\n  const formItemLayoutWithOutLabel = {\n    wrapperCol: {\n      xs: {\n        span: 24,\n        offset: 0\n      },\n      sm: {\n        span: 20,\n        offset: 4\n      }\n    }\n  };\n  const optionUnit = useRef([{\n    label: \"Kbit\",\n    value: \"kbit\"\n  }, {\n    label: \"Mbit\",\n    value: \"mbit\"\n  }]).current;\n  const refreshData = async () => {\n    const result = await ubusApi.show_network_wireless();\n    const result1 = await ubusApi.show_mesh_config();\n    const {\n      disabled,\n      encryption,\n      ssid,\n      key\n    } = result.values;\n    const {\n      enabled_mode\n    } = result1;\n    if (enabled_mode === \"controller\" || enabled_mode === \"agent\") {\n      setChecked(\"enable\");\n    } else {\n      setChecked(\"disable\");\n    }\n    if (disabled === \"0\") {\n      setDisabled(\"false\");\n    } else {\n      setDisabled(\"true\");\n    }\n    if (disabled === \"0\") {\n      form.setFieldsValue({\n        disabled: \"false\",\n        ssid: ssid,\n        encryption: encryption,\n        key: key,\n        checklimit: true\n      });\n    } else {\n      form.setFieldsValue({\n        disabled: \"true\",\n        ssid: ssid,\n        encryption: encryption,\n        key: key,\n        checklimit: true\n      });\n    }\n  };\n  React.useEffect(() => {\n    refreshData();\n  }, []);\n  const handleSubmit = async values => {\n    message.info(t('Please_wait_for_configuration'));\n    if (values.checklimit === true) {\n      const result = await ubusApi.config_network_wireless(values.disabled, values.ssid, values.encryption, values.key);\n    } else {\n      const result = await ubusApi.config_network_wireless(values.disabled, values.ssid, values.encryption, values.key);\n    }\n    const key = 'updatable';\n    message.loading({\n      content: t('loading'),\n      key\n    });\n    setTimeout(() => {\n      message.success({\n        content: t('success'),\n        key,\n        duration: 2\n      });\n    }, 1000);\n    setTimeout(() => {\n      window.location.reload();\n    }, 1500);\n  };\n  const [value, setValue] = React.useState('');\n  const handleChange = value => setValue(value);\n  const [value1, setValue1] = React.useState('');\n  const handleChange1 = value => setValue1(value);\n  const handleChangeStatus = value => setDisabled(value);\n  const [loading, setLoading] = React.useState(true);\n  setTimeout(() => {\n    setLoading(false);\n  }, 1000);\n  if (status == \"false\") {\n    if (checked == \"disable\") {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          labelCol: {\n            span: 6\n          },\n          wrapperCol: {\n            span: 16\n          },\n          form: form,\n          onFinish: handleSubmit,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            loading: loading,\n            children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n              name: \"disabled\",\n              label: t(\"status\"),\n              rules: [{\n                required: true,\n                message: String(t(\"error_fill\"))\n              }],\n              children: /*#__PURE__*/_jsxDEV(Select, {\n                options: optionStatusGuest,\n                onChange: handleChangeStatus\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n              name: \"ssid\",\n              label: t(\"ssid_name\"),\n              rules: [{\n                required: true,\n                message: String(t(\"error_fill\"))\n              }, {\n                validator: (_, value) => pattern.test(value) ? Promise.resolve() : Promise.reject(t('White_space_and_special_characters_are_not_valid'))\n              }],\n              children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n              name: \"encryption\",\n              label: t(\"encryption_type\"),\n              rules: [{\n                required: true,\n                message: String(t(\"error_fill\"))\n              }],\n              children: /*#__PURE__*/_jsxDEV(Select, {\n                defaultValue: \"Select Encryption\",\n                options: optionGuestEncryption,\n                onChange: handleChange1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n              noStyle: true,\n              shouldUpdate: (prevValues, currentValues) => prevValues.gender !== currentValues.gender,\n              children: _ref => {\n                let {\n                  getFieldValue\n                } = _ref;\n                return getFieldValue('encryption') != \"none\" ? /*#__PURE__*/_jsxDEV(Form.Item, {\n                  name: \"key\",\n                  label: t(\"wpa_passphrase\"),\n                  rules: [{\n                    required: true,\n                    min: 8,\n                    message: String(t(\"Password_must_be_minimum_8_characters\"))\n                  }],\n                  children: /*#__PURE__*/_jsxDEV(Input.Password, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 177,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 174,\n                  columnNumber: 45\n                }, this) : null;\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n              ...formItemLayoutWithOutLabel,\n              wrapperCol: {\n                offset: 6,\n                span: 16\n              },\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                type: \"primary\",\n                htmlType: \"submit\",\n                children: t(\"submit\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this)\n      }, void 0, false);\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          labelCol: {\n            span: 6\n          },\n          wrapperCol: {\n            span: 16\n          },\n          form: form,\n          onFinish: handleSubmit,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            loading: loading,\n            children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n              name: \"disabled\",\n              label: t(\"status\"),\n              rules: [{\n                required: true,\n                message: String(t(\"error_fill\"))\n              }],\n              children: /*#__PURE__*/_jsxDEV(Select, {\n                options: optionStatusGuest,\n                onChange: handleChangeStatus,\n                disabled: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n              name: \"ssid\",\n              label: t(\"ssid_name\"),\n              rules: [{\n                required: true,\n                message: String(t(\"error_fill\"))\n              }, {\n                validator: (_, value) => pattern.test(value) ? Promise.resolve() : Promise.reject('White space and special characters are not valid')\n              }],\n              children: /*#__PURE__*/_jsxDEV(Input, {\n                disabled: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n              name: \"encryption\",\n              label: t(\"encryption_type\"),\n              rules: [{\n                required: true,\n                message: String(t(\"error_fill\"))\n              }],\n              children: /*#__PURE__*/_jsxDEV(Select, {\n                defaultValue: \"Select Encryption\",\n                options: optionGuestEncryption,\n                onChange: handleChange1,\n                disabled: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n              noStyle: true,\n              shouldUpdate: (prevValues, currentValues) => prevValues.gender !== currentValues.gender,\n              children: _ref2 => {\n                let {\n                  getFieldValue\n                } = _ref2;\n                return getFieldValue('encryption') != \"none\" ? /*#__PURE__*/_jsxDEV(Form.Item, {\n                  name: \"key\",\n                  label: t(\"wpa_passphrase\"),\n                  rules: [{\n                    required: true,\n                    min: 8,\n                    message: \"Password must be minimum 8 characters\"\n                  }],\n                  children: /*#__PURE__*/_jsxDEV(Input.Password, {\n                    disabled: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 247,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 244,\n                  columnNumber: 45\n                }, this) : null;\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n              ...formItemLayoutWithOutLabel,\n              wrapperCol: {\n                offset: 6,\n                span: 16\n              },\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                type: \"primary\",\n                htmlType: \"submit\",\n                children: t(\"submit\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 21\n        }, this)\n      }, void 0, false);\n    }\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        labelCol: {\n          span: 6\n        },\n        wrapperCol: {\n          span: 16\n        },\n        form: form,\n        onFinish: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"disabled\",\n          label: t(\"status\"),\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            options: optionStatusGuest,\n            onChange: handleChangeStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          ...formItemLayoutWithOutLabel,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            htmlType: \"submit\",\n            children: t(\"submit\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n};\n_s(Wireless, \"5bcaxmukN0naroeQXVQ6R0h+tek=\", false, function () {\n  return [useTranslation, Form.useForm];\n});\n_c = Wireless;\nvar _c;\n$RefreshReg$(_c, \"Wireless\");","map":{"version":3,"names":["Button","Input","Select","message","Form","Card","React","useRef","ubusApi","useTranslation","Wireless","props","t","pattern","status","setDisabled","useState","checked","setChecked","encryption","setEncryption","pwd","setPWD","optionStatusGuest","label","value","current","optionGuestEncryption","form","useForm","formItemLayout","labelCol","xs","span","sm","wrapperCol","formItemLayoutWithOutLabel","offset","optionUnit","refreshData","result","show_network_wireless","result1","show_mesh_config","disabled","ssid","key","values","enabled_mode","setFieldsValue","checklimit","useEffect","handleSubmit","info","config_network_wireless","loading","content","setTimeout","success","duration","window","location","reload","setValue","handleChange","value1","setValue1","handleChange1","handleChangeStatus","setLoading","required","String","validator","_","test","Promise","resolve","reject","prevValues","currentValues","gender","getFieldValue","min"],"sources":["/home/iam/Documents/LocalWeb-master/src/components/antd/network/wireless/wireless.tsx"],"sourcesContent":["import { Button, Col, Row, Space, Table, Typography, Modal, Input, Select, message, Form, Checkbox, Switch, Card } from 'antd'\nimport React, { useState, useRef } from 'react';\nimport ubusApi from 'service/api/ubus-api';\nimport { useTranslation } from \"react-i18next\";\nimport \"../../../../translations/i18n\";\n\nexport const Wireless = (props: any) => {\n    const { t } = useTranslation();\n    let pattern = /^[a-zA-Z0-9_.]+$/\n    const [status, setDisabled] = React.useState(\"\")\n    const [checked, setChecked] = React.useState(\"\")\n    const [encryption, setEncryption] = React.useState([])\n    const [pwd, setPWD] = React.useState(null)\n\n    const optionStatusGuest = useRef([\n        {\n            label: \"Enable\",\n            value: \"false\"\n        },\n        {\n            label: \"Disable\",\n            value: \"true\"\n        },\n    ]).current;\n\n    const optionGuestEncryption = useRef([\n        {\n            label: \"None\",\n            value: \"none\"\n        },\n        {\n            label: \"PSK2\",\n            value: \"psk2\"\n        },\n        {\n            label: \"PSK\",\n            value: \"psk\"\n        },\n    ]).current;\n\n    const [form] = Form.useForm()\n\n    const formItemLayout = {\n        labelCol: {\n            xs: { span: 24 },\n            sm: { span: 4 },\n        },\n        wrapperCol: {\n            xs: { span: 24 },\n            sm: { span: 16 },\n        },\n    }\n\n    const formItemLayoutWithOutLabel = {\n        wrapperCol: {\n            xs: { span: 24, offset: 0 },\n            sm: { span: 20, offset: 4 },\n        },\n    }\n\n    const optionUnit = useRef([\n        {\n            label: \"Kbit\",\n            value: \"kbit\"\n        },\n        {\n            label: \"Mbit\",\n            value: \"mbit\"\n        },\n    ]).current;\n\n    const refreshData = async () => {\n        const result = await ubusApi.show_network_wireless()\n        const result1 = await ubusApi.show_mesh_config()\n        const { disabled, encryption, ssid, key } = result.values\n        const { enabled_mode } = result1\n        if(enabled_mode === \"controller\" || enabled_mode === \"agent\"){\n            setChecked(\"enable\")\n        }\n        else{\n            setChecked(\"disable\")\n        }\n\n        if (disabled === \"0\") {\n            setDisabled(\"false\")\n        } else {\n            setDisabled(\"true\")\n        }\n\n        if (disabled === \"0\") {\n            form.setFieldsValue({ disabled: \"false\", ssid: ssid, encryption: encryption, key: key, checklimit: true })\n        } else {\n            form.setFieldsValue({ disabled: \"true\", ssid: ssid, encryption: encryption, key: key, checklimit: true })\n        }\n    }\n\n    React.useEffect(() => {\n        refreshData()\n    }, [])\n\n    const handleSubmit = async (values: any) => {\n        message.info(t('Please_wait_for_configuration'))\n        if (values.checklimit === true) {\n            const result = await ubusApi.config_network_wireless(values.disabled, values.ssid, values.encryption, values.key)\n        } else {\n            const result = await ubusApi.config_network_wireless(values.disabled, values.ssid, values.encryption, values.key)\n        }\n        const key = 'updatable';\n        message.loading({ content: t('loading'), key });\n        setTimeout(() => {\n            message.success({ content: t('success'), key, duration: 2 });\n        }, 1000);\n        setTimeout(() => {\n            window.location.reload()\n        }, 1500);\n    }\n\n    const [value, setValue] = React.useState('')\n    const handleChange = (value: any) => setValue(value)\n    const [value1, setValue1] = React.useState('')\n    const handleChange1 = (value: any) => setValue1(value)\n    const handleChangeStatus = (value: any) => setDisabled(value)\n    const [loading, setLoading] = React.useState(true)\n    setTimeout(() => {\n        setLoading(false)\n    }, 1000);\n    if (status == \"false\") {\n        if(checked == \"disable\"){\n            return (\n                <>\n                    <Form\n                        labelCol={{ span: 6 }}\n                        wrapperCol={{ span: 16 }}\n                        form={form} \n                        onFinish={handleSubmit}>\n                        <Card loading={loading}>\n                            <Form.Item name=\"disabled\"\n                                label={t(\"status\")} rules={[{ required: true, message:  String(t(\"error_fill\")) }]}\n                            >\n                                <Select\n                                    options={optionStatusGuest}\n                                    onChange={handleChangeStatus}\n                                />\n                            </Form.Item>\n                            <Form.Item name=\"ssid\"\n                                label={t(\"ssid_name\")}\n                                rules={[\n                                    { required: true, message:  String(t(\"error_fill\")) },\n                                    {\n                                        validator: (_, value) =>\n                                            pattern.test(value) ? Promise.resolve() : Promise.reject(t('White_space_and_special_characters_are_not_valid'))\n                                    }\n                                ]}\n                            >\n                                <Input></Input>\n                            </Form.Item>\n                            <Form.Item name=\"encryption\"\n                                label={t(\"encryption_type\")} rules={[{ required: true, message:  String(t(\"error_fill\")) }]}\n                            >\n                                <Select\n                                    defaultValue=\"Select Encryption\"\n                                    options={optionGuestEncryption}\n                                    onChange={handleChange1}\n                                />\n                            </Form.Item>\n                            <Form.Item\n                                noStyle\n                                shouldUpdate={(prevValues, currentValues) => prevValues.gender !== currentValues.gender}\n                            >\n                                {\n                                    ({ getFieldValue }) =>\n                                        getFieldValue('encryption') !=\n                                            \"none\" ? (\n                                            <Form.Item name=\"key\"\n                                                label={t(\"wpa_passphrase\")} rules={[{ required: true, min: 8, message: String(t(\"Password_must_be_minimum_8_characters\")) }]}\n                                            >\n                                                <Input.Password></Input.Password>\n                                            </Form.Item>\n                                        ) : null}\n                            </Form.Item>\n\n                            <Form.Item {...formItemLayoutWithOutLabel} wrapperCol={{ offset: 6, span: 16 }}>\n                                <Button\n                                    type='primary'\n                                    htmlType=\"submit\"\n                                >\n                                    {t(\"submit\")}\n                                </Button>\n                            </Form.Item>\n                        </Card>\n                    </Form>\n                </>\n            )\n        }\n        else{\n\n            return (\n                <>\n                    <Form\n                        labelCol={{ span: 6 }}\n                        wrapperCol={{ span: 16 }}\n                        form={form} \n                        onFinish={handleSubmit}>\n                        <Card loading={loading}>\n                            <Form.Item name=\"disabled\"\n                                label={t(\"status\")} rules={[{ required: true, message:  String(t(\"error_fill\")) }]}\n                            >\n                                <Select\n                                    options={optionStatusGuest}\n                                    onChange={handleChangeStatus}\n                                    disabled\n                                />\n                            </Form.Item>\n                            <Form.Item name=\"ssid\"\n                                label={t(\"ssid_name\")}\n                                rules={[\n                                    { required: true, message:  String(t(\"error_fill\")) },\n                                    {\n                                        validator: (_, value) =>\n                                            pattern.test(value) ? Promise.resolve() : Promise.reject('White space and special characters are not valid')\n                                    }\n                                ]}\n                            >\n                                <Input disabled></Input>\n                            </Form.Item>\n                            <Form.Item name=\"encryption\"\n                                label={t(\"encryption_type\")} rules={[{ required: true, message:  String(t(\"error_fill\")) }]}\n                            >\n                                <Select\n                                    defaultValue=\"Select Encryption\"\n                                    options={optionGuestEncryption}\n                                    onChange={handleChange1}\n                                    disabled\n                                />\n                            </Form.Item>\n                            <Form.Item\n                                noStyle\n                                shouldUpdate={(prevValues, currentValues) => prevValues.gender !== currentValues.gender}\n                            >\n                                {\n                                    ({ getFieldValue }) =>\n                                        getFieldValue('encryption') !=\n                                            \"none\" ? (\n                                            <Form.Item name=\"key\"\n                                                label={t(\"wpa_passphrase\")} rules={[{ required: true, min: 8, message: \"Password must be minimum 8 characters\" }]}\n                                            >\n                                                <Input.Password disabled ></Input.Password>\n                                            </Form.Item>\n                                        ) : null}\n                            </Form.Item>\n\n                            <Form.Item {...formItemLayoutWithOutLabel} wrapperCol={{ offset: 6, span: 16 }}>\n                                <Button\n                                    type='primary'\n                                    htmlType=\"submit\"\n                                >\n                                    {t(\"submit\")}\n                                </Button>\n                            </Form.Item>\n                        </Card>\n                    </Form>\n                </>\n            )\n        }\n    } \n    else {\n        return (\n            <>\n                <Form\n                    labelCol={{ span: 6 }}\n                    wrapperCol={{ span: 16 }}\n                    form={form} \n                    onFinish={handleSubmit}>\n                    <Form.Item name=\"disabled\"\n                        label={t(\"status\")}\n                    >\n                        <Select\n                            options={optionStatusGuest}\n                            onChange={handleChangeStatus}\n                        />\n                    </Form.Item>\n\n                    <Form.Item {...formItemLayoutWithOutLabel}>\n                        <Button\n                            type='primary'\n                            htmlType=\"submit\"\n                        >\n                            {t(\"submit\")}\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </>)\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}