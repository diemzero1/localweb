{"ast":null,"code":"import { __assign, __read, __spreadArray, __values } from \"tslib\";\nimport { contains, filter, find, isArray, isEmpty, isFunction, isNil, isNumberEqual, isObject, memoize, get, values } from '@antv/util';\nimport { FIELD_ORIGIN, GROUP_ATTRS } from '../constant';\nimport { getName, inferScaleType } from './scale';\nfunction snapEqual(v1, v2, scale) {\n  var value1 = scale.translate(v1);\n  var value2 = scale.translate(v2);\n  return isNumberEqual(value1, value2);\n}\nfunction getXValueByPoint(point, geometry) {\n  var coordinate = geometry.coordinate;\n  var xScale = geometry.getXScale();\n  var range = xScale.range;\n  var rangeMax = range[range.length - 1];\n  var rangeMin = range[0];\n  var invertPoint = coordinate.invert(point);\n  var xValue = invertPoint.x;\n  if (coordinate.isPolar && xValue > (1 + rangeMax) / 2) {\n    xValue = rangeMin; // 极坐标下，scale 的 range 被做过特殊处理\n  }\n\n  return xScale.translate(xScale.invert(xValue));\n}\nfunction filterYValue(data, point, geometry) {\n  var coordinate = geometry.coordinate;\n  var yScale = geometry.getYScale();\n  var yField = yScale.field;\n  var invertPoint = coordinate.invert(point);\n  var yValue = yScale.invert(invertPoint.y);\n  var result = find(data, function (obj) {\n    var originData = obj[FIELD_ORIGIN];\n    return originData[yField][0] <= yValue && originData[yField][1] >= yValue;\n  });\n  return result || data[data.length - 1];\n}\nvar getXDistance = memoize(function (scale) {\n  if (scale.isCategory) {\n    return 1;\n  }\n  var scaleValues = scale.values; // values 是无序的\n  var length = scaleValues.length;\n  var min = scale.translate(scaleValues[0]);\n  var max = min;\n  for (var index = 0; index < length; index++) {\n    var value = scaleValues[index];\n    // 时间类型需要 translate\n    var numericValue = scale.translate(value);\n    if (numericValue < min) {\n      min = numericValue;\n    }\n    if (numericValue > max) {\n      max = numericValue;\n    }\n  }\n  return (max - min) / (length - 1);\n});\n/**\n * 获得 tooltip 的 title\n * @param originData\n * @param geometry\n * @param title\n */\nfunction getTooltipTitle(originData, geometry, title) {\n  var positionAttr = geometry.getAttribute('position');\n  var fields = positionAttr.getFields();\n  var scales = geometry.scales;\n  var titleField = isFunction(title) || !title ? fields[0] : title;\n  var titleScale = scales[titleField];\n  // 如果创建了该字段对应的 scale，则通过 scale.getText() 方式取值，因为用户可能对数据进行了格式化\n  // 如果没有对应的 scale，则从原始数据中取值，如果原始数据中仍不存在，则直接放回 title 值\n  var tooltipTitle = titleScale ? titleScale.getText(originData[titleField]) : originData[titleField] || titleField;\n  return isFunction(title) ? title(tooltipTitle, originData) : tooltipTitle;\n}\nfunction getAttributesForLegend(geometry) {\n  var attributes = values(geometry.attributes);\n  return filter(attributes, function (attribute) {\n    return contains(GROUP_ATTRS, attribute.type);\n  });\n}\nfunction getTooltipValueScale(geometry) {\n  var e_1, _a;\n  var attributes = getAttributesForLegend(geometry);\n  var scale;\n  try {\n    for (var attributes_1 = __values(attributes), attributes_1_1 = attributes_1.next(); !attributes_1_1.done; attributes_1_1 = attributes_1.next()) {\n      var attribute = attributes_1_1.value;\n      var tmpScale = attribute.getScale(attribute.type);\n      if (tmpScale && tmpScale.isLinear) {\n        var tmpScaleDef = get(geometry.scaleDefs, tmpScale.field);\n        var inferedScaleType = inferScaleType(tmpScale, tmpScaleDef, attribute.type, geometry.type);\n        if (inferedScaleType !== 'cat') {\n          // 如果指定字段是非 position 的，同时是连续的\n          scale = tmpScale;\n          break;\n        }\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (attributes_1_1 && !attributes_1_1.done && (_a = attributes_1.return)) _a.call(attributes_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  var xScale = geometry.getXScale();\n  var yScale = geometry.getYScale();\n  return scale || yScale || xScale;\n}\nfunction getTooltipValue(originData, valueScale) {\n  var field = valueScale.field;\n  var value = originData[field];\n  if (isArray(value)) {\n    var texts = value.map(function (eachValue) {\n      return valueScale.getText(eachValue);\n    });\n    return texts.join('-');\n  }\n  return valueScale.getText(value);\n}\n// 根据原始数据获取 tooltip item 中 name 值\nfunction getTooltipName(originData, geometry) {\n  var nameScale;\n  var groupScales = geometry.getGroupScales();\n  if (groupScales.length) {\n    // 如果存在分组类型，取第一个分组类型\n    nameScale = groupScales[0];\n  }\n  if (nameScale) {\n    var field = nameScale.field;\n    return nameScale.getText(originData[field]);\n  }\n  var valueScale = getTooltipValueScale(geometry);\n  return getName(valueScale);\n}\n/**\n * @ignore\n * Finds data from geometry by point\n * @param point canvas point\n * @param data an item of geometry.dataArray\n * @param geometry\n * @returns\n */\nexport function findDataByPoint(point, data, geometry) {\n  if (data.length === 0) {\n    return null;\n  }\n  var geometryType = geometry.type;\n  var xScale = geometry.getXScale();\n  var yScale = geometry.getYScale();\n  var xField = xScale.field;\n  var yField = yScale.field;\n  var rst = null;\n  // 热力图采用最小逼近策略查找 point 击中的数据\n  if (geometryType === 'heatmap' || geometryType === 'point') {\n    // 将 point 画布坐标转换为原始数据值\n    var coordinate = geometry.coordinate;\n    var invertPoint = coordinate.invert(point); // 转换成归一化的数据\n    var x = xScale.invert(invertPoint.x); // 转换为原始值\n    var y = yScale.invert(invertPoint.y); // 转换为原始值\n    var min = Infinity;\n    for (var index = 0; index < data.length; index++) {\n      var obj = data[index];\n      var originData = obj[FIELD_ORIGIN];\n      var range = Math.pow(originData[xField] - x, 2) + Math.pow(originData[yField] - y, 2);\n      if (range < min) {\n        min = range;\n        rst = obj;\n      }\n    }\n    return rst;\n  }\n  // 其他 Geometry 类型按照 x 字段数据进行查找\n  var first = data[0];\n  var last = data[data.length - 1];\n  var xValue = getXValueByPoint(point, geometry);\n  var firstXValue = first[FIELD_ORIGIN][xField];\n  var firstYValue = first[FIELD_ORIGIN][yField];\n  var lastXValue = last[FIELD_ORIGIN][xField];\n  var isYArray = yScale.isLinear && isArray(firstYValue); // 考虑 x 维度相同，y 是数组区间的情况\n  // 如果 x 的值是数组\n  if (isArray(firstXValue)) {\n    for (var index = 0; index < data.length; index++) {\n      var record = data[index];\n      var originData = record[FIELD_ORIGIN];\n      // xValue 在 originData[xField] 的数值区间内\n      if (xScale.translate(originData[xField][0]) <= xValue && xScale.translate(originData[xField][1]) >= xValue) {\n        if (isYArray) {\n          // 层叠直方图场景，x 和 y 都是数组区间\n          if (!isArray(rst)) {\n            rst = [];\n          }\n          rst.push(record);\n        } else {\n          rst = record;\n          break;\n        }\n      }\n    }\n    if (isArray(rst)) {\n      rst = filterYValue(rst, point, geometry);\n    }\n  } else {\n    var next = void 0;\n    if (!xScale.isLinear && xScale.type !== 'timeCat') {\n      // x 轴对应的数据为非线性以及非时间类型的数据采用遍历查找\n      for (var index = 0; index < data.length; index++) {\n        var record = data[index];\n        var originData = record[FIELD_ORIGIN];\n        if (snapEqual(originData[xField], xValue, xScale)) {\n          if (isYArray) {\n            if (!isArray(rst)) {\n              rst = [];\n            }\n            rst.push(record);\n          } else {\n            rst = record;\n            break;\n          }\n        } else if (xScale.translate(originData[xField]) <= xValue) {\n          last = record;\n          next = data[index + 1];\n        }\n      }\n      if (isArray(rst)) {\n        rst = filterYValue(rst, point, geometry);\n      }\n    } else {\n      // x 轴对应的数据为线性以及时间类型，进行二分查找，性能更好\n      if ((xValue > xScale.translate(lastXValue) || xValue < xScale.translate(firstXValue)) && (xValue > xScale.max || xValue < xScale.min)) {\n        // 不在数据范围内\n        return null;\n      }\n      var firstIdx = 0;\n      var lastIdx = data.length - 1;\n      var middleIdx = void 0;\n      while (firstIdx <= lastIdx) {\n        middleIdx = Math.floor((firstIdx + lastIdx) / 2);\n        var item = data[middleIdx][FIELD_ORIGIN][xField];\n        if (snapEqual(item, xValue, xScale)) {\n          return data[middleIdx];\n        }\n        if (xScale.translate(item) <= xScale.translate(xValue)) {\n          firstIdx = middleIdx + 1;\n          last = data[middleIdx];\n          next = data[middleIdx + 1];\n        } else {\n          if (lastIdx === 0) {\n            last = data[0];\n          }\n          lastIdx = middleIdx - 1;\n        }\n      }\n    }\n    if (last && next) {\n      // 计算最逼近的\n      if (Math.abs(xScale.translate(last[FIELD_ORIGIN][xField]) - xValue) > Math.abs(xScale.translate(next[FIELD_ORIGIN][xField]) - xValue)) {\n        last = next;\n      }\n    }\n  }\n  var distance = getXDistance(geometry.getXScale()); // 每个分类间的平均间距\n  if (!rst && Math.abs(xScale.translate(last[FIELD_ORIGIN][xField]) - xValue) <= distance / 2) {\n    rst = last;\n  }\n  return rst;\n}\n/**\n * @ignore\n * Gets tooltip items\n * @param data\n * @param geometry\n * @param [title]\n * @returns\n */\nexport function getTooltipItems(data, geometry, title, showNil) {\n  var e_2, _a;\n  if (title === void 0) {\n    title = '';\n  }\n  if (showNil === void 0) {\n    showNil = false;\n  }\n  var originData = data[FIELD_ORIGIN];\n  var tooltipTitle = getTooltipTitle(originData, geometry, title);\n  var tooltipOption = geometry.tooltipOption;\n  var defaultColor = geometry.theme.defaultColor;\n  var items = [];\n  var name;\n  var value;\n  function addItem(itemName, itemValue) {\n    if (showNil || !isNil(itemValue) && itemValue !== '') {\n      // 值为 null的时候，忽视\n      var item = {\n        title: tooltipTitle,\n        data: originData,\n        mappingData: data,\n        name: itemName,\n        value: itemValue,\n        color: data.color || defaultColor,\n        marker: true\n      };\n      items.push(item);\n    }\n  }\n  if (isObject(tooltipOption)) {\n    var fields = tooltipOption.fields,\n      callback = tooltipOption.callback;\n    if (callback) {\n      // 用户定义了回调函数\n      var callbackParams = fields.map(function (field) {\n        return data[FIELD_ORIGIN][field];\n      });\n      var cfg = callback.apply(void 0, __spreadArray([], __read(callbackParams), false));\n      var itemCfg = __assign({\n        data: data[FIELD_ORIGIN],\n        mappingData: data,\n        title: tooltipTitle,\n        color: data.color || defaultColor,\n        marker: true\n      }, cfg);\n      items.push(itemCfg);\n    } else {\n      var scales = geometry.scales;\n      try {\n        for (var fields_1 = __values(fields), fields_1_1 = fields_1.next(); !fields_1_1.done; fields_1_1 = fields_1.next()) {\n          var field = fields_1_1.value;\n          if (!isNil(originData[field])) {\n            // 字段数据为null, undefined 时不显示\n            var scale = scales[field];\n            name = getName(scale);\n            value = scale.getText(originData[field]);\n            addItem(name, value);\n          }\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (fields_1_1 && !fields_1_1.done && (_a = fields_1.return)) _a.call(fields_1);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    }\n  } else {\n    var valueScale = getTooltipValueScale(geometry);\n    // 字段数据为null ,undefined时不显示\n    value = getTooltipValue(originData, valueScale);\n    name = getTooltipName(originData, geometry);\n    addItem(name, value);\n  }\n  return items;\n}\nfunction getTooltipItemsByFindData(geometry, point, title, tooltipCfg) {\n  var e_3, _a;\n  var showNil = tooltipCfg.showNil;\n  var result = [];\n  var dataArray = geometry.dataArray;\n  if (!isEmpty(dataArray)) {\n    geometry.sort(dataArray); // 先进行排序，便于 tooltip 查找\n    try {\n      for (var dataArray_1 = __values(dataArray), dataArray_1_1 = dataArray_1.next(); !dataArray_1_1.done; dataArray_1_1 = dataArray_1.next()) {\n        var data = dataArray_1_1.value;\n        var record = findDataByPoint(point, data, geometry);\n        if (record) {\n          var elementId = geometry.getElementId(record);\n          var element = geometry.elementsMap[elementId];\n          if (geometry.type === 'heatmap' || element.visible) {\n            // Heatmap 没有 Element\n            // 如果图形元素隐藏了，怎不再 tooltip 上展示相关数据\n            var items = getTooltipItems(record, geometry, title, showNil);\n            if (items.length) {\n              result.push(items);\n            }\n          }\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (dataArray_1_1 && !dataArray_1_1.done && (_a = dataArray_1.return)) _a.call(dataArray_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n  }\n  return result;\n}\nfunction getTooltipItemsByHitShape(geometry, point, title, tooltipCfg) {\n  var showNil = tooltipCfg.showNil;\n  var result = [];\n  var container = geometry.container;\n  var shape = container.getShape(point.x, point.y);\n  if (shape && shape.get('visible') && shape.get('origin')) {\n    var mappingData = shape.get('origin').mappingData;\n    var items = getTooltipItems(mappingData, geometry, title, showNil);\n    if (items.length) {\n      result.push(items);\n    }\n  }\n  return result;\n}\n/**\n * 不进行递归查找\n */\nexport function findItemsFromView(view, point, tooltipCfg) {\n  var e_4, _a;\n  var result = [];\n  // 先从 view 本身查找\n  var geometries = view.geometries;\n  var shared = tooltipCfg.shared,\n    title = tooltipCfg.title,\n    reversed = tooltipCfg.reversed;\n  try {\n    for (var geometries_1 = __values(geometries), geometries_1_1 = geometries_1.next(); !geometries_1_1.done; geometries_1_1 = geometries_1.next()) {\n      var geometry = geometries_1_1.value;\n      if (geometry.visible && geometry.tooltipOption !== false) {\n        // geometry 可见同时未关闭 tooltip\n        var geometryType = geometry.type;\n        var tooltipItems = void 0;\n        if (['point', 'edge', 'polygon'].includes(geometryType)) {\n          // 始终通过图形拾取\n          tooltipItems = getTooltipItemsByHitShape(geometry, point, title, tooltipCfg);\n        } else if (['area', 'line', 'path', 'heatmap'].includes(geometryType)) {\n          // 如果是 'area', 'line', 'path'，始终通过数据查找方法查找 tooltip\n          tooltipItems = getTooltipItemsByFindData(geometry, point, title, tooltipCfg);\n        } else {\n          if (shared !== false) {\n            tooltipItems = getTooltipItemsByFindData(geometry, point, title, tooltipCfg);\n          } else {\n            tooltipItems = getTooltipItemsByHitShape(geometry, point, title, tooltipCfg);\n          }\n        }\n        if (tooltipItems.length) {\n          if (reversed) {\n            tooltipItems.reverse();\n          }\n          // geometry 有可能会有多个 item，因为用户可以设置 geometry.tooltip('x*y*z')\n          result.push(tooltipItems);\n        }\n      }\n    }\n  } catch (e_4_1) {\n    e_4 = {\n      error: e_4_1\n    };\n  } finally {\n    try {\n      if (geometries_1_1 && !geometries_1_1.done && (_a = geometries_1.return)) _a.call(geometries_1);\n    } finally {\n      if (e_4) throw e_4.error;\n    }\n  }\n  return result;\n}\nexport function findItemsFromViewRecurisive(view, point, tooltipCfg) {\n  var e_5, _a;\n  var result = findItemsFromView(view, point, tooltipCfg);\n  try {\n    // 递归查找，并合并结果\n    for (var _b = __values(view.views), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var childView = _c.value;\n      result = result.concat(findItemsFromView(childView, point, tooltipCfg));\n    }\n  } catch (e_5_1) {\n    e_5 = {\n      error: e_5_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_5) throw e_5.error;\n    }\n  }\n  return result;\n}","map":{"version":3,"mappings":"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","names":["contains","filter","find","isArray","isEmpty","isFunction","isNil","isNumberEqual","isObject","memoize","get","values","FIELD_ORIGIN","GROUP_ATTRS","getName","inferScaleType","snapEqual","v1","v2","scale","value1","translate","value2","getXValueByPoint","point","geometry","coordinate","xScale","getXScale","range","rangeMax","length","rangeMin","invertPoint","invert","xValue","x","isPolar","filterYValue","data","yScale","getYScale","yField","field","yValue","y","result","obj","originData","getXDistance","isCategory","scaleValues","min","max","index","value","numericValue","getTooltipTitle","title","positionAttr","getAttribute","fields","getFields","scales","titleField","titleScale","tooltipTitle","getText","getAttributesForLegend","attributes","attribute","type","getTooltipValueScale","tmpScale","getScale","isLinear","tmpScaleDef","scaleDefs","inferedScaleType","getTooltipValue","valueScale","texts","map","eachValue","join","getTooltipName","nameScale","groupScales","getGroupScales","findDataByPoint","geometryType","xField","rst","Infinity","Math","first","last","firstXValue","firstYValue","lastXValue","isYArray","record","push","next","firstIdx","lastIdx","middleIdx","floor","item","abs","distance","getTooltipItems","showNil","tooltipOption","theme","items","name","addItem","itemName","itemValue","mappingData","color","defaultColor","marker","callback","callbackParams","cfg","itemCfg","getTooltipItemsByFindData","tooltipCfg","dataArray","sort","elementId","getElementId","element","elementsMap","visible","getTooltipItemsByHitShape","container","shape","getShape","findItemsFromView","view","geometries","reversed","tooltipItems","includes","shared","reverse","findItemsFromViewRecurisive","views","childView","concat"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/g2/src/util/tooltip.ts"],"sourcesContent":["import {\n  contains,\n  filter,\n  find,\n  isArray,\n  isEmpty,\n  isFunction,\n  isNil,\n  isNumberEqual,\n  isObject,\n  memoize,\n  get,\n  values,\n} from '@antv/util';\nimport { View } from '../chart';\nimport { FIELD_ORIGIN, GROUP_ATTRS } from '../constant';\nimport { Attribute, Scale } from '../dependents';\nimport Geometry from '../geometry/base';\nimport { Data, Datum, MappingDatum, Point, TooltipCfg, TooltipTitle } from '../interface';\nimport { getName, inferScaleType } from './scale';\n\nfunction snapEqual(v1: any, v2: any, scale: Scale) {\n  const value1 = scale.translate(v1);\n  const value2 = scale.translate(v2);\n\n  return isNumberEqual(value1, value2);\n}\n\nfunction getXValueByPoint(point: Point, geometry: Geometry): number {\n  const coordinate = geometry.coordinate;\n  const xScale = geometry.getXScale();\n  const range = xScale.range;\n  const rangeMax = range[range.length - 1];\n  const rangeMin = range[0];\n\n  const invertPoint = coordinate.invert(point);\n\n  let xValue = invertPoint.x;\n  if (coordinate.isPolar && xValue > (1 + rangeMax) / 2) {\n    xValue = rangeMin; // 极坐标下，scale 的 range 被做过特殊处理\n  }\n  return xScale.translate(xScale.invert(xValue));\n}\n\nfunction filterYValue(data: Data, point: Point, geometry: Geometry) {\n  const coordinate = geometry.coordinate;\n  const yScale = geometry.getYScale();\n  const yField = yScale.field;\n  const invertPoint = coordinate.invert(point);\n  const yValue = yScale.invert(invertPoint.y);\n\n  const result = find(data, (obj: Datum) => {\n    const originData = obj[FIELD_ORIGIN];\n    return originData[yField][0] <= yValue && originData[yField][1] >= yValue;\n  });\n  return result || data[data.length - 1];\n}\n\nconst getXDistance = memoize((scale: Scale) => {\n  if (scale.isCategory) {\n    return 1;\n  }\n  const scaleValues = scale.values; // values 是无序的\n  const length = scaleValues.length;\n  let min = scale.translate(scaleValues[0]);\n  let max = min;\n\n  for (let index = 0; index < length; index++) {\n    const value = scaleValues[index];\n    // 时间类型需要 translate\n    const numericValue = scale.translate(value);\n    if (numericValue < min) {\n      min = numericValue;\n    }\n    if (numericValue > max) {\n      max = numericValue;\n    }\n  }\n  return (max - min) / (length - 1);\n});\n\n/**\n * 获得 tooltip 的 title\n * @param originData\n * @param geometry\n * @param title\n */\nfunction getTooltipTitle(originData: Datum, geometry: Geometry, title: TooltipTitle): string {\n  const positionAttr = geometry.getAttribute('position');\n  const fields = positionAttr.getFields();\n  const scales = geometry.scales;\n\n  const titleField = isFunction(title) || !title ? fields[0] : title;\n  const titleScale = scales[titleField];\n\n  // 如果创建了该字段对应的 scale，则通过 scale.getText() 方式取值，因为用户可能对数据进行了格式化\n  // 如果没有对应的 scale，则从原始数据中取值，如果原始数据中仍不存在，则直接放回 title 值\n  const tooltipTitle = titleScale ? titleScale.getText(originData[titleField]) : originData[titleField] || titleField;\n\n  return isFunction(title) ? title(tooltipTitle, originData) : tooltipTitle;\n}\n\nfunction getAttributesForLegend(geometry: Geometry) {\n  const attributes = values(geometry.attributes);\n  return filter(attributes, (attribute: Attribute) => contains(GROUP_ATTRS, attribute.type));\n}\n\nfunction getTooltipValueScale(geometry: Geometry) {\n  const attributes = getAttributesForLegend(geometry);\n  let scale;\n  for (const attribute of attributes) {\n    const tmpScale = attribute.getScale(attribute.type);\n    if (tmpScale && tmpScale.isLinear) {\n      const tmpScaleDef = get(geometry.scaleDefs, tmpScale.field);\n      const inferedScaleType = inferScaleType(tmpScale, tmpScaleDef, attribute.type, geometry.type);\n      if (inferedScaleType !== 'cat') {\n        // 如果指定字段是非 position 的，同时是连续的\n        scale = tmpScale;\n        break;\n      }\n    }\n  }\n\n  const xScale = geometry.getXScale();\n  const yScale = geometry.getYScale();\n\n  return scale || yScale || xScale;\n}\n\nfunction getTooltipValue(originData: Datum, valueScale: Scale) {\n  const field = valueScale.field;\n  const value = originData[field];\n\n  if (isArray(value)) {\n    const texts = value.map((eachValue) => {\n      return valueScale.getText(eachValue);\n    });\n    return texts.join('-');\n  }\n  return valueScale.getText(value);\n}\n\n// 根据原始数据获取 tooltip item 中 name 值\nfunction getTooltipName(originData: Datum, geometry: Geometry) {\n  let nameScale: Scale;\n  const groupScales = geometry.getGroupScales();\n  if (groupScales.length) {\n    // 如果存在分组类型，取第一个分组类型\n    nameScale = groupScales[0];\n  }\n  if (nameScale) {\n    const field = nameScale.field;\n    return nameScale.getText(originData[field]);\n  }\n\n  const valueScale = getTooltipValueScale(geometry);\n  return getName(valueScale);\n}\n\n/**\n * @ignore\n * Finds data from geometry by point\n * @param point canvas point\n * @param data an item of geometry.dataArray\n * @param geometry\n * @returns\n */\nexport function findDataByPoint(point: Point, data: MappingDatum[], geometry: Geometry) {\n  if (data.length === 0) {\n    return null;\n  }\n\n  const geometryType = geometry.type;\n  const xScale = geometry.getXScale();\n  const yScale = geometry.getYScale();\n\n  const xField = xScale.field;\n  const yField = yScale.field;\n\n  let rst = null;\n\n  // 热力图采用最小逼近策略查找 point 击中的数据\n  if (geometryType === 'heatmap' || geometryType === 'point') {\n    // 将 point 画布坐标转换为原始数据值\n    const coordinate = geometry.coordinate;\n    const invertPoint = coordinate.invert(point); // 转换成归一化的数据\n    const x = xScale.invert(invertPoint.x); // 转换为原始值\n    const y = yScale.invert(invertPoint.y); // 转换为原始值\n\n    let min = Infinity;\n    for (let index = 0; index < data.length; index++) {\n      const obj = data[index];\n      const originData = obj[FIELD_ORIGIN];\n      const range = (originData[xField] - x) ** 2 + (originData[yField] - y) ** 2;\n      if (range < min) {\n        min = range;\n        rst = obj;\n      }\n    }\n\n    return rst;\n  }\n\n  // 其他 Geometry 类型按照 x 字段数据进行查找\n  const first = data[0];\n  let last = data[data.length - 1];\n  const xValue = getXValueByPoint(point, geometry);\n  const firstXValue = first[FIELD_ORIGIN][xField];\n  const firstYValue = first[FIELD_ORIGIN][yField];\n  const lastXValue = last[FIELD_ORIGIN][xField];\n  const isYArray = yScale.isLinear && isArray(firstYValue); // 考虑 x 维度相同，y 是数组区间的情况\n\n  // 如果 x 的值是数组\n  if (isArray(firstXValue)) {\n    for (let index = 0; index < data.length; index++) {\n      const record = data[index];\n      const originData = record[FIELD_ORIGIN];\n      // xValue 在 originData[xField] 的数值区间内\n      if (xScale.translate(originData[xField][0]) <= xValue && xScale.translate(originData[xField][1]) >= xValue) {\n        if (isYArray) {\n          // 层叠直方图场景，x 和 y 都是数组区间\n          if (!isArray(rst)) {\n            rst = [];\n          }\n          rst.push(record);\n        } else {\n          rst = record;\n          break;\n        }\n      }\n    }\n    if (isArray(rst)) {\n      rst = filterYValue(rst, point, geometry);\n    }\n  } else {\n    let next;\n    if (!xScale.isLinear && xScale.type !== 'timeCat') {\n      // x 轴对应的数据为非线性以及非时间类型的数据采用遍历查找\n      for (let index = 0; index < data.length; index++) {\n        const record = data[index];\n        const originData = record[FIELD_ORIGIN];\n        if (snapEqual(originData[xField], xValue, xScale)) {\n          if (isYArray) {\n            if (!isArray(rst)) {\n              rst = [];\n            }\n            rst.push(record);\n          } else {\n            rst = record;\n            break;\n          }\n        } else if (xScale.translate(originData[xField]) <= xValue) {\n          last = record;\n          next = data[index + 1];\n        }\n      }\n\n      if (isArray(rst)) {\n        rst = filterYValue(rst, point, geometry);\n      }\n    } else {\n      // x 轴对应的数据为线性以及时间类型，进行二分查找，性能更好\n      if (\n        (xValue > xScale.translate(lastXValue) || xValue < xScale.translate(firstXValue)) &&\n        (xValue > xScale.max || xValue < xScale.min)\n      ) {\n        // 不在数据范围内\n        return null;\n      }\n\n      let firstIdx = 0;\n      let lastIdx = data.length - 1;\n      let middleIdx;\n      while (firstIdx <= lastIdx) {\n        middleIdx = Math.floor((firstIdx + lastIdx) / 2);\n        const item = data[middleIdx][FIELD_ORIGIN][xField];\n        if (snapEqual(item, xValue, xScale)) {\n          return data[middleIdx];\n        }\n\n        if (xScale.translate(item) <= xScale.translate(xValue)) {\n          firstIdx = middleIdx + 1;\n          last = data[middleIdx];\n          next = data[middleIdx + 1];\n        } else {\n          if (lastIdx === 0) {\n            last = data[0];\n          }\n          lastIdx = middleIdx - 1;\n        }\n      }\n    }\n\n    if (last && next) {\n      // 计算最逼近的\n      if (\n        Math.abs(xScale.translate(last[FIELD_ORIGIN][xField]) - xValue) >\n        Math.abs(xScale.translate(next[FIELD_ORIGIN][xField]) - xValue)\n      ) {\n        last = next;\n      }\n    }\n  }\n\n  const distance = getXDistance(geometry.getXScale()); // 每个分类间的平均间距\n  if (!rst && Math.abs(xScale.translate(last[FIELD_ORIGIN][xField]) - xValue) <= distance / 2) {\n    rst = last;\n  }\n\n  return rst;\n}\n\n/**\n * @ignore\n * Gets tooltip items\n * @param data\n * @param geometry\n * @param [title]\n * @returns\n */\nexport function getTooltipItems(\n  data: MappingDatum,\n  geometry: Geometry,\n  title: TooltipTitle = '',\n  showNil: boolean = false\n) {\n  const originData = data[FIELD_ORIGIN];\n  const tooltipTitle = getTooltipTitle(originData, geometry, title);\n  const tooltipOption = geometry.tooltipOption;\n  const { defaultColor } = geometry.theme;\n  const items = [];\n  let name;\n  let value;\n\n  function addItem(itemName, itemValue) {\n    if (showNil || (!isNil(itemValue) && itemValue !== '')) {\n      // 值为 null的时候，忽视\n      const item = {\n        title: tooltipTitle,\n        data: originData, // 原始数据\n        mappingData: data, // 映射后的数据\n        name: itemName,\n        value: itemValue,\n        color: data.color || defaultColor,\n        marker: true,\n      };\n\n      items.push(item);\n    }\n  }\n\n  if (isObject(tooltipOption)) {\n    const { fields, callback } = tooltipOption;\n    if (callback) {\n      // 用户定义了回调函数\n      const callbackParams = fields.map((field: string) => {\n        return data[FIELD_ORIGIN][field];\n      });\n      const cfg = callback(...callbackParams);\n      const itemCfg = {\n        data: data[FIELD_ORIGIN], // 原始数据\n        mappingData: data, // 映射后的数据\n        title: tooltipTitle,\n        color: data.color || defaultColor,\n        marker: true, // 默认展示 marker\n        ...cfg,\n      };\n\n      items.push(itemCfg);\n    } else {\n      const scales = geometry.scales;\n      for (const field of fields) {\n        if (!isNil(originData[field])) {\n          // 字段数据为null, undefined 时不显示\n          const scale = scales[field];\n          name = getName(scale);\n          value = scale.getText(originData[field]);\n          addItem(name, value);\n        }\n      }\n    }\n  } else {\n    const valueScale = getTooltipValueScale(geometry);\n    // 字段数据为null ,undefined时不显示\n    value = getTooltipValue(originData, valueScale);\n    name = getTooltipName(originData, geometry);\n    addItem(name, value);\n  }\n  return items;\n}\n\nfunction getTooltipItemsByFindData(geometry: Geometry, point, title, tooltipCfg: TooltipCfg) {\n  const { showNil } = tooltipCfg;\n  const result = [];\n  const dataArray = geometry.dataArray;\n  if (!isEmpty(dataArray)) {\n    geometry.sort(dataArray); // 先进行排序，便于 tooltip 查找\n    for (const data of dataArray) {\n      const record = findDataByPoint(point, data, geometry);\n      if (record) {\n        const elementId = geometry.getElementId(record);\n        const element = geometry.elementsMap[elementId];\n        if (geometry.type === 'heatmap' || element.visible) {\n          // Heatmap 没有 Element\n          // 如果图形元素隐藏了，怎不再 tooltip 上展示相关数据\n          const items = getTooltipItems(record, geometry, title, showNil);\n          if (items.length) {\n            result.push(items);\n          }\n        }\n      }\n    }\n  }\n\n  return result;\n}\n\nfunction getTooltipItemsByHitShape(geometry, point, title, tooltipCfg: TooltipCfg) {\n  const { showNil } = tooltipCfg;\n  const result = [];\n  const container = geometry.container;\n  const shape = container.getShape(point.x, point.y);\n  if (shape && shape.get('visible') && shape.get('origin')) {\n    const mappingData = shape.get('origin').mappingData;\n    const items = getTooltipItems(mappingData, geometry, title, showNil);\n    if (items.length) {\n      result.push(items);\n    }\n  }\n\n  return result;\n}\n\n/**\n * 不进行递归查找\n */\nexport function findItemsFromView(view: View, point: Point, tooltipCfg: TooltipCfg) {\n  const result = [];\n  // 先从 view 本身查找\n  const geometries = view.geometries;\n  const { shared, title, reversed } = tooltipCfg;\n  for (const geometry of geometries) {\n    if (geometry.visible && geometry.tooltipOption !== false) {\n      // geometry 可见同时未关闭 tooltip\n      const geometryType = geometry.type;\n      let tooltipItems;\n      if (['point', 'edge', 'polygon'].includes(geometryType)) {\n        // 始终通过图形拾取\n        tooltipItems = getTooltipItemsByHitShape(geometry, point, title, tooltipCfg);\n      } else if (['area', 'line', 'path', 'heatmap'].includes(geometryType)) {\n        // 如果是 'area', 'line', 'path'，始终通过数据查找方法查找 tooltip\n        tooltipItems = getTooltipItemsByFindData(geometry, point, title, tooltipCfg);\n      } else {\n        if (shared !== false) {\n          tooltipItems = getTooltipItemsByFindData(geometry, point, title, tooltipCfg);\n        } else {\n          tooltipItems = getTooltipItemsByHitShape(geometry, point, title, tooltipCfg);\n        }\n      }\n      if (tooltipItems.length) {\n        if (reversed) {\n          tooltipItems.reverse();\n        }\n        // geometry 有可能会有多个 item，因为用户可以设置 geometry.tooltip('x*y*z')\n        result.push(tooltipItems);\n      }\n    }\n  }\n\n  return result;\n}\n\nexport function findItemsFromViewRecurisive(view: View, point: Point, tooltipCfg: TooltipCfg) {\n  let result = findItemsFromView(view, point, tooltipCfg);\n\n  // 递归查找，并合并结果\n  for (const childView of view.views) {\n    result = result.concat(findItemsFromView(childView, point, tooltipCfg));\n  }\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}