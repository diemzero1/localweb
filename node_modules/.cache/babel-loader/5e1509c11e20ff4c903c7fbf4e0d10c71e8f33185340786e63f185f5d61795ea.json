{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { get, isArray, isNumber } from '@antv/util';\nimport { regressionExp, regressionLinear, regressionLoess, regressionLog, regressionPoly, regressionPow, regressionQuad } from 'd3-regression';\nimport { getSplinePath } from '../../utils';\nvar REGRESSION_MAP = {\n  exp: regressionExp,\n  linear: regressionLinear,\n  loess: regressionLoess,\n  log: regressionLog,\n  poly: regressionPoly,\n  pow: regressionPow,\n  quad: regressionQuad\n};\n/**\n * 获取四象限默认配置\n * @param {number} xBaseline\n * @param {number} yBaseline\n */\nexport function getQuadrantDefaultConfig(xBaseline, yBaseline) {\n  // 文本便宜距离\n  var textOffset = 10;\n  // 四象限默认样式\n  var defaultConfig = {\n    regionStyle: [{\n      position: {\n        start: [xBaseline, 'max'],\n        end: ['max', yBaseline]\n      },\n      style: {\n        fill: '#d8d0c0',\n        opacity: 0.4\n      }\n    }, {\n      position: {\n        start: ['min', 'max'],\n        end: [xBaseline, yBaseline]\n      },\n      style: {\n        fill: '#a3dda1',\n        opacity: 0.4\n      }\n    }, {\n      position: {\n        start: ['min', yBaseline],\n        end: [xBaseline, 'min']\n      },\n      style: {\n        fill: '#d8d0c0',\n        opacity: 0.4\n      }\n    }, {\n      position: {\n        start: [xBaseline, yBaseline],\n        end: ['max', 'min']\n      },\n      style: {\n        fill: '#a3dda1',\n        opacity: 0.4\n      }\n    }],\n    lineStyle: {\n      stroke: '#9ba29a',\n      lineWidth: 1\n    },\n    labelStyle: [{\n      position: ['max', yBaseline],\n      offsetX: -textOffset,\n      offsetY: -textOffset,\n      style: {\n        textAlign: 'right',\n        textBaseline: 'bottom',\n        fontSize: 14,\n        fill: '#ccc'\n      }\n    }, {\n      position: ['min', yBaseline],\n      offsetX: textOffset,\n      offsetY: -textOffset,\n      style: {\n        textAlign: 'left',\n        textBaseline: 'bottom',\n        fontSize: 14,\n        fill: '#ccc'\n      }\n    }, {\n      position: ['min', yBaseline],\n      offsetX: textOffset,\n      offsetY: textOffset,\n      style: {\n        textAlign: 'left',\n        textBaseline: 'top',\n        fontSize: 14,\n        fill: '#ccc'\n      }\n    }, {\n      position: ['max', yBaseline],\n      offsetX: -textOffset,\n      offsetY: textOffset,\n      style: {\n        textAlign: 'right',\n        textBaseline: 'top',\n        fontSize: 14,\n        fill: '#ccc'\n      }\n    }]\n  };\n  return defaultConfig;\n}\nvar splinePath = function splinePath(data, config) {\n  var view = config.view,\n    _a = config.options,\n    xField = _a.xField,\n    yField = _a.yField;\n  var xScaleView = view.getScaleByField(xField);\n  var yScaleView = view.getScaleByField(yField);\n  var pathData = data.map(function (d) {\n    return view.getCoordinate().convert({\n      x: xScaleView.scale(d[0]),\n      y: yScaleView.scale(d[1])\n    });\n  });\n  return getSplinePath(pathData, false);\n};\nexport var getPath = function getPath(config) {\n  var options = config.options;\n  var xField = options.xField,\n    yField = options.yField,\n    data = options.data,\n    regressionLine = options.regressionLine;\n  var _a = regressionLine.type,\n    type = _a === void 0 ? 'linear' : _a,\n    algorithm = regressionLine.algorithm;\n  var pathData;\n  if (algorithm) {\n    pathData = isArray(algorithm) ? algorithm : algorithm(data);\n  } else {\n    var reg = REGRESSION_MAP[type]().x(function (d) {\n      return d[xField];\n    }).y(function (d) {\n      return d[yField];\n    });\n    pathData = reg(data);\n  }\n  return splinePath(pathData, config);\n};\n/**\n * 调整散点图 meta: { min, max } ① data.length === 1 ② 所有数据 y 值相等 ③ 所有数据 x 值相等\n * @param options\n * @returns\n */\nexport var getMeta = function getMeta(options) {\n  var _a;\n  var _b = options.meta,\n    meta = _b === void 0 ? {} : _b,\n    xField = options.xField,\n    yField = options.yField,\n    data = options.data;\n  var xFieldValue = data[0][xField];\n  var yFieldValue = data[0][yField];\n  var xIsPositiveNumber = xFieldValue > 0;\n  var yIsPositiveNumber = yFieldValue > 0;\n  /**\n   * 获得对应字段的 min max scale 配置\n   */\n  function getMetaMinMax(field, axis) {\n    var fieldMeta = get(meta, [field]);\n    function getCustomValue(type) {\n      return get(fieldMeta, type);\n    }\n    var range = {};\n    if (axis === 'x') {\n      if (isNumber(xFieldValue)) {\n        if (!isNumber(getCustomValue('min'))) {\n          range['min'] = xIsPositiveNumber ? 0 : xFieldValue * 2;\n        }\n        if (!isNumber(getCustomValue('max'))) {\n          range['max'] = xIsPositiveNumber ? xFieldValue * 2 : 0;\n        }\n      }\n      return range;\n    }\n    if (isNumber(yFieldValue)) {\n      if (!isNumber(getCustomValue('min'))) {\n        range['min'] = yIsPositiveNumber ? 0 : yFieldValue * 2;\n      }\n      if (!isNumber(getCustomValue('max'))) {\n        range['max'] = yIsPositiveNumber ? yFieldValue * 2 : 0;\n      }\n    }\n    return range;\n  }\n  return __assign(__assign({}, meta), (_a = {}, _a[xField] = __assign(__assign({}, meta[xField]), getMetaMinMax(xField, 'x')), _a[yField] = __assign(__assign({}, meta[yField]), getMetaMinMax(yField, 'y')), _a));\n};","map":{"version":3,"mappings":";AACA,SAASA,GAAG,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,YAAY;AACnD,SACEC,aAAa,EACbC,gBAAgB,EAChBC,eAAe,EACfC,aAAa,EACbC,cAAc,EACdC,aAAa,EACbC,cAAc,QACT,eAAe;AACtB,SAASC,aAAa,QAAQ,aAAa;AAG3C,IAAMC,cAAc,GAAG;EACrBC,GAAG,EAAET,aAAa;EAClBU,MAAM,EAAET,gBAAgB;EACxBU,KAAK,EAAET,eAAe;EACtBU,GAAG,EAAET,aAAa;EAClBU,IAAI,EAAET,cAAc;EACpBU,GAAG,EAAET,aAAa;EAClBU,IAAI,EAAET;CACP;AAOD;;;;;AAKA,OAAM,SAAUU,wBAAwB,CAACC,SAAiB,EAAEC,SAAiB;EAC3E;EACA,IAAMC,UAAU,GAAG,EAAE;EACrB;EACA,IAAMC,aAAa,GAA2B;IAC5CC,WAAW,EAAE,CACX;MACEC,QAAQ,EAAE;QACRC,KAAK,EAAE,CAACN,SAAS,EAAE,KAAK,CAAC;QACzBO,GAAG,EAAE,CAAC,KAAK,EAAEN,SAAS;OACvB;MACDO,KAAK,EAAE;QACLC,IAAI,EAAE,SAAS;QACfC,OAAO,EAAE;;KAEZ,EACD;MACEL,QAAQ,EAAE;QACRC,KAAK,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;QACrBC,GAAG,EAAE,CAACP,SAAS,EAAEC,SAAS;OAC3B;MACDO,KAAK,EAAE;QACLC,IAAI,EAAE,SAAS;QACfC,OAAO,EAAE;;KAEZ,EACD;MACEL,QAAQ,EAAE;QACRC,KAAK,EAAE,CAAC,KAAK,EAAEL,SAAS,CAAC;QACzBM,GAAG,EAAE,CAACP,SAAS,EAAE,KAAK;OACvB;MACDQ,KAAK,EAAE;QACLC,IAAI,EAAE,SAAS;QACfC,OAAO,EAAE;;KAEZ,EACD;MACEL,QAAQ,EAAE;QACRC,KAAK,EAAE,CAACN,SAAS,EAAEC,SAAS,CAAC;QAC7BM,GAAG,EAAE,CAAC,KAAK,EAAE,KAAK;OACnB;MACDC,KAAK,EAAE;QACLC,IAAI,EAAE,SAAS;QACfC,OAAO,EAAE;;KAEZ,CACF;IACDC,SAAS,EAAE;MACTC,MAAM,EAAE,SAAS;MACjBC,SAAS,EAAE;KACZ;IACDC,UAAU,EAAE,CACV;MACET,QAAQ,EAAE,CAAC,KAAK,EAAEJ,SAAS,CAAC;MAC5Bc,OAAO,EAAE,CAACb,UAAU;MACpBc,OAAO,EAAE,CAACd,UAAU;MACpBM,KAAK,EAAE;QACLS,SAAS,EAAE,OAAO;QAClBC,YAAY,EAAE,QAAQ;QACtBC,QAAQ,EAAE,EAAE;QACZV,IAAI,EAAE;;KAET,EACD;MACEJ,QAAQ,EAAE,CAAC,KAAK,EAAEJ,SAAS,CAAC;MAC5Bc,OAAO,EAAEb,UAAU;MACnBc,OAAO,EAAE,CAACd,UAAU;MACpBM,KAAK,EAAE;QACLS,SAAS,EAAE,MAAM;QACjBC,YAAY,EAAE,QAAQ;QACtBC,QAAQ,EAAE,EAAE;QACZV,IAAI,EAAE;;KAET,EACD;MACEJ,QAAQ,EAAE,CAAC,KAAK,EAAEJ,SAAS,CAAC;MAC5Bc,OAAO,EAAEb,UAAU;MACnBc,OAAO,EAAEd,UAAU;MACnBM,KAAK,EAAE;QACLS,SAAS,EAAE,MAAM;QACjBC,YAAY,EAAE,KAAK;QACnBC,QAAQ,EAAE,EAAE;QACZV,IAAI,EAAE;;KAET,EACD;MACEJ,QAAQ,EAAE,CAAC,KAAK,EAAEJ,SAAS,CAAC;MAC5Bc,OAAO,EAAE,CAACb,UAAU;MACpBc,OAAO,EAAEd,UAAU;MACnBM,KAAK,EAAE;QACLS,SAAS,EAAE,OAAO;QAClBC,YAAY,EAAE,KAAK;QACnBC,QAAQ,EAAE,EAAE;QACZV,IAAI,EAAE;;KAET;GAEJ;EACD,OAAON,aAAa;AACtB;AAEA,IAAMiB,UAAU,GAAG,SAAbA,UAAU,CAAIC,IAAgB,EAAEC,MAAqB;EAEvD,QAAI,GAEFA,MAAM,KAFJ;IACJC,KACED,MAAM,QADmB;IAAhBE,MAAM;IAAEC,MAAM,YAAE;EAE7B,IAAMC,UAAU,GAAGC,IAAI,CAACC,eAAe,CAACJ,MAAM,CAAC;EAC/C,IAAMK,UAAU,GAAGF,IAAI,CAACC,eAAe,CAACH,MAAM,CAAC;EAC/C,IAAMK,QAAQ,GAAGT,IAAI,CAACU,GAAG,CAAC,UAACC,CAAmB;IAC5C,WAAI,CAACC,aAAa,EAAE,CAACC,OAAO,CAAC;MAAEC,CAAC,EAAET,UAAU,CAACU,KAAK,CAACJ,CAAC,CAAC,CAAC,CAAC,CAAC;MAAEK,CAAC,EAAER,UAAU,CAACO,KAAK,CAACJ,CAAC,CAAC,CAAC,CAAC;IAAC,CAAE,CAAC;EAAtF,CAAsF,CACvF;EACD,OAAO1C,aAAa,CAACwC,QAAQ,EAAE,KAAK,CAAC;AACvC,CAAC;AAED,OAAO,IAAMQ,OAAO,GAAG,SAAVA,OAAO,CAAIhB,MAAqB;EACnC,WAAO,GAAKA,MAAM,QAAX;EACP,UAAM,GAAmCiB,OAAO,OAA1C;IAAEd,MAAM,GAA2Bc,OAAO,OAAlC;IAAElB,IAAI,GAAqBkB,OAAO,KAA5B;IAAEC,cAAc,GAAKD,OAAO,eAAZ;EACpC,SAA+BC,cAAc,KAA9B;IAAfC,IAAI,mBAAG,QAAQ;IAAEC,SAAS,GAAKF,cAAc,UAAnB;EAClC,IAAIV,QAAiC;EACrC,IAAIY,SAAS,EAAE;IACbZ,QAAQ,GAAGjD,OAAO,CAAC6D,SAAS,CAAC,GAAGA,SAAS,GAAGA,SAAS,CAACrB,IAAI,CAAC;GAC5D,MAAM;IACL,IAAMsB,GAAG,GAAGpD,cAAc,CAACkD,IAAI,CAAC,EAAE,CAC/BN,CAAC,CAAC,UAACH,CAAC;MAAK,QAAC,CAACR,MAAM,CAAC;IAAT,CAAS,CAAC,CACnBa,CAAC,CAAC,UAACL,CAAC;MAAK,QAAC,CAACP,MAAM,CAAC;IAAT,CAAS,CAAC;IACtBK,QAAQ,GAAGa,GAAG,CAACtB,IAAI,CAAC;;EAEtB,OAAOD,UAAU,CAACU,QAAQ,EAAER,MAAM,CAAC;AACrC,CAAC;AAED;;;;;AAKA,OAAO,IAAMsB,OAAO,GAAG,SAAVA,OAAO,CAClBL,OAAoE;;EAE5D,SAAoCA,OAAO,KAAlC;IAATM,IAAI,mBAAG,EAAE;IAAErB,MAAM,GAAmBe,OAAO,OAA1B;IAAEd,MAAM,GAAWc,OAAO,OAAlB;IAAElB,IAAI,GAAKkB,OAAO,KAAZ;EACvC,IAAMO,WAAW,GAAGzB,IAAI,CAAC,CAAC,CAAC,CAACG,MAAM,CAAC;EACnC,IAAMuB,WAAW,GAAG1B,IAAI,CAAC,CAAC,CAAC,CAACI,MAAM,CAAC;EACnC,IAAMuB,iBAAiB,GAAGF,WAAW,GAAG,CAAC;EACzC,IAAMG,iBAAiB,GAAGF,WAAW,GAAG,CAAC;EAEzC;;;EAGA,SAASG,aAAa,CAACC,KAAa,EAAEC,IAAe;IACnD,IAAMC,SAAS,GAAGzE,GAAG,CAACiE,IAAI,EAAE,CAACM,KAAK,CAAC,CAAC;IAEpC,SAASG,cAAc,CAACb,IAAmB;MACzC,OAAO7D,GAAG,CAACyE,SAAS,EAAEZ,IAAI,CAAC;IAC7B;IAEA,IAAMc,KAAK,GAAG,EAAE;IAEhB,IAAIH,IAAI,KAAK,GAAG,EAAE;MAChB,IAAItE,QAAQ,CAACgE,WAAW,CAAC,EAAE;QACzB,IAAI,CAAChE,QAAQ,CAACwE,cAAc,CAAC,KAAK,CAAC,CAAC,EAAE;UACpCC,KAAK,CAAC,KAAK,CAAC,GAAGP,iBAAiB,GAAG,CAAC,GAAGF,WAAW,GAAG,CAAC;;QAGxD,IAAI,CAAChE,QAAQ,CAACwE,cAAc,CAAC,KAAK,CAAC,CAAC,EAAE;UACpCC,KAAK,CAAC,KAAK,CAAC,GAAGP,iBAAiB,GAAGF,WAAW,GAAG,CAAC,GAAG,CAAC;;;MAI1D,OAAOS,KAAK;;IAGd,IAAIzE,QAAQ,CAACiE,WAAW,CAAC,EAAE;MACzB,IAAI,CAACjE,QAAQ,CAACwE,cAAc,CAAC,KAAK,CAAC,CAAC,EAAE;QACpCC,KAAK,CAAC,KAAK,CAAC,GAAGN,iBAAiB,GAAG,CAAC,GAAGF,WAAW,GAAG,CAAC;;MAGxD,IAAI,CAACjE,QAAQ,CAACwE,cAAc,CAAC,KAAK,CAAC,CAAC,EAAE;QACpCC,KAAK,CAAC,KAAK,CAAC,GAAGN,iBAAiB,GAAGF,WAAW,GAAG,CAAC,GAAG,CAAC;;;IAI1D,OAAOQ,KAAK;EACd;EAEA,6BACKV,IAAI,gBACNrB,MAAM,0BACFqB,IAAI,CAACrB,MAAM,CAAC,GACZ0B,aAAa,CAAC1B,MAAM,EAAE,GAAG,CAAC,MAE9BC,MAAM,0BACFoB,IAAI,CAACpB,MAAM,CAAC,GACZyB,aAAa,CAACzB,MAAM,EAAE,GAAG,CAAC;AAGnC,CAAC","names":["get","isArray","isNumber","regressionExp","regressionLinear","regressionLoess","regressionLog","regressionPoly","regressionPow","regressionQuad","getSplinePath","REGRESSION_MAP","exp","linear","loess","log","poly","pow","quad","getQuadrantDefaultConfig","xBaseline","yBaseline","textOffset","defaultConfig","regionStyle","position","start","end","style","fill","opacity","lineStyle","stroke","lineWidth","labelStyle","offsetX","offsetY","textAlign","textBaseline","fontSize","splinePath","data","config","_a","xField","yField","xScaleView","view","getScaleByField","yScaleView","pathData","map","d","getCoordinate","convert","x","scale","y","getPath","options","regressionLine","type","algorithm","reg","getMeta","meta","xFieldValue","yFieldValue","xIsPositiveNumber","yIsPositiveNumber","getMetaMinMax","field","axis","fieldMeta","getCustomValue","range"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/g2plot/src/plots/scatter/util.ts"],"sourcesContent":["import { View } from '@antv/g2';\nimport { get, isArray, isNumber } from '@antv/util';\nimport {\n  regressionExp,\n  regressionLinear,\n  regressionLoess,\n  regressionLog,\n  regressionPoly,\n  regressionPow,\n  regressionQuad,\n} from 'd3-regression';\nimport { getSplinePath } from '../../utils';\nimport { ScatterOptions } from './types';\n\nconst REGRESSION_MAP = {\n  exp: regressionExp,\n  linear: regressionLinear,\n  loess: regressionLoess,\n  log: regressionLog,\n  poly: regressionPoly,\n  pow: regressionPow,\n  quad: regressionQuad,\n};\n\ntype RenderOptions = {\n  view: View;\n  options: ScatterOptions;\n};\n\n/**\n * 获取四象限默认配置\n * @param {number} xBaseline\n * @param {number} yBaseline\n */\nexport function getQuadrantDefaultConfig(xBaseline: number, yBaseline: number) {\n  // 文本便宜距离\n  const textOffset = 10;\n  // 四象限默认样式\n  const defaultConfig: { [key: string]: any } = {\n    regionStyle: [\n      {\n        position: {\n          start: [xBaseline, 'max'],\n          end: ['max', yBaseline],\n        },\n        style: {\n          fill: '#d8d0c0',\n          opacity: 0.4,\n        },\n      },\n      {\n        position: {\n          start: ['min', 'max'],\n          end: [xBaseline, yBaseline],\n        },\n        style: {\n          fill: '#a3dda1',\n          opacity: 0.4,\n        },\n      },\n      {\n        position: {\n          start: ['min', yBaseline],\n          end: [xBaseline, 'min'],\n        },\n        style: {\n          fill: '#d8d0c0',\n          opacity: 0.4,\n        },\n      },\n      {\n        position: {\n          start: [xBaseline, yBaseline],\n          end: ['max', 'min'],\n        },\n        style: {\n          fill: '#a3dda1',\n          opacity: 0.4,\n        },\n      },\n    ],\n    lineStyle: {\n      stroke: '#9ba29a',\n      lineWidth: 1,\n    },\n    labelStyle: [\n      {\n        position: ['max', yBaseline],\n        offsetX: -textOffset,\n        offsetY: -textOffset,\n        style: {\n          textAlign: 'right',\n          textBaseline: 'bottom',\n          fontSize: 14,\n          fill: '#ccc',\n        },\n      },\n      {\n        position: ['min', yBaseline],\n        offsetX: textOffset,\n        offsetY: -textOffset,\n        style: {\n          textAlign: 'left',\n          textBaseline: 'bottom',\n          fontSize: 14,\n          fill: '#ccc',\n        },\n      },\n      {\n        position: ['min', yBaseline],\n        offsetX: textOffset,\n        offsetY: textOffset,\n        style: {\n          textAlign: 'left',\n          textBaseline: 'top',\n          fontSize: 14,\n          fill: '#ccc',\n        },\n      },\n      {\n        position: ['max', yBaseline],\n        offsetX: -textOffset,\n        offsetY: textOffset,\n        style: {\n          textAlign: 'right',\n          textBaseline: 'top',\n          fontSize: 14,\n          fill: '#ccc',\n        },\n      },\n    ],\n  };\n  return defaultConfig;\n}\n\nconst splinePath = (data: number[][], config: RenderOptions) => {\n  const {\n    view,\n    options: { xField, yField },\n  } = config;\n  const xScaleView = view.getScaleByField(xField);\n  const yScaleView = view.getScaleByField(yField);\n  const pathData = data.map((d: [number, number]) =>\n    view.getCoordinate().convert({ x: xScaleView.scale(d[0]), y: yScaleView.scale(d[1]) })\n  );\n  return getSplinePath(pathData, false);\n};\n\nexport const getPath = (config: RenderOptions) => {\n  const { options } = config;\n  const { xField, yField, data, regressionLine } = options;\n  const { type = 'linear', algorithm } = regressionLine;\n  let pathData: Array<[number, number]>;\n  if (algorithm) {\n    pathData = isArray(algorithm) ? algorithm : algorithm(data);\n  } else {\n    const reg = REGRESSION_MAP[type]()\n      .x((d) => d[xField])\n      .y((d) => d[yField]);\n    pathData = reg(data);\n  }\n  return splinePath(pathData, config);\n};\n\n/**\n * 调整散点图 meta: { min, max } ① data.length === 1 ② 所有数据 y 值相等 ③ 所有数据 x 值相等\n * @param options\n * @returns\n */\nexport const getMeta = (\n  options: Pick<ScatterOptions, 'meta' | 'xField' | 'yField' | 'data'>\n): ScatterOptions['meta'] => {\n  const { meta = {}, xField, yField, data } = options;\n  const xFieldValue = data[0][xField];\n  const yFieldValue = data[0][yField];\n  const xIsPositiveNumber = xFieldValue > 0;\n  const yIsPositiveNumber = yFieldValue > 0;\n\n  /**\n   * 获得对应字段的 min max scale 配置\n   */\n  function getMetaMinMax(field: string, axis: 'x' | 'y') {\n    const fieldMeta = get(meta, [field]);\n\n    function getCustomValue(type: 'min' | 'max') {\n      return get(fieldMeta, type);\n    }\n\n    const range = {};\n\n    if (axis === 'x') {\n      if (isNumber(xFieldValue)) {\n        if (!isNumber(getCustomValue('min'))) {\n          range['min'] = xIsPositiveNumber ? 0 : xFieldValue * 2;\n        }\n\n        if (!isNumber(getCustomValue('max'))) {\n          range['max'] = xIsPositiveNumber ? xFieldValue * 2 : 0;\n        }\n      }\n\n      return range;\n    }\n\n    if (isNumber(yFieldValue)) {\n      if (!isNumber(getCustomValue('min'))) {\n        range['min'] = yIsPositiveNumber ? 0 : yFieldValue * 2;\n      }\n\n      if (!isNumber(getCustomValue('max'))) {\n        range['max'] = yIsPositiveNumber ? yFieldValue * 2 : 0;\n      }\n    }\n\n    return range;\n  }\n\n  return {\n    ...meta,\n    [xField]: {\n      ...meta[xField],\n      ...getMetaMinMax(xField, 'x'),\n    },\n    [yField]: {\n      ...meta[yField],\n      ...getMetaMinMax(yField, 'y'),\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}