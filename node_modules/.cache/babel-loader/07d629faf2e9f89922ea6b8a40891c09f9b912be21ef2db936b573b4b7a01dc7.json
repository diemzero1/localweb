{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { each, omit } from '@antv/util';\nimport { animation, annotation, interaction, limitInPlot, pattern, slider, theme, tooltip, transformations } from '../../adaptor/common';\nimport { area, line, point } from '../../adaptor/geometries';\nimport { deepAssign, findGeometry, flow, transformLabel } from '../../utils';\nimport { getDataWhetherPercentage } from '../../utils/transform/percent';\nimport { axis, legend, meta } from '../line/adaptor';\nexport { meta };\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var data = options.data,\n    areaStyle = options.areaStyle,\n    color = options.color,\n    pointMapping = options.point,\n    lineMapping = options.line,\n    isPercent = options.isPercent,\n    xField = options.xField,\n    yField = options.yField,\n    tooltip = options.tooltip,\n    seriesField = options.seriesField,\n    startOnZero = options.startOnZero;\n  var pointState = pointMapping === null || pointMapping === void 0 ? void 0 : pointMapping.state;\n  var chartData = getDataWhetherPercentage(data, yField, xField, yField, isPercent);\n  chart.data(chartData);\n  // 百分比堆积图，默认会给一个 % 格式化逻辑, 用户可自定义\n  var tooltipOptions = isPercent ? __assign({\n    formatter: function formatter(datum) {\n      return {\n        name: datum[seriesField] || datum[xField],\n        value: (Number(datum[yField]) * 100).toFixed(2) + '%'\n      };\n    }\n  }, tooltip) : tooltip;\n  var primary = deepAssign({}, params, {\n    options: {\n      area: {\n        color: color,\n        style: areaStyle\n      },\n      point: pointMapping && __assign({\n        color: color\n      }, pointMapping),\n      tooltip: tooltipOptions,\n      // label 不传递给各个 geometry adaptor，由 label adaptor 处理\n      label: undefined,\n      args: {\n        startOnZero: startOnZero\n      }\n    }\n  });\n  // 线默认 2px (折线不能复用面积图的 state，因为 fill 和 stroke 不匹配)\n  var lineParams = {\n    chart: chart,\n    options: deepAssign({\n      line: {\n        size: 2\n      }\n    }, omit(options, ['state']), {\n      // 颜色保持一致，因为如果颜色不一致，会导致 tooltip 中元素重复。\n      // 如果存在，才设置，否则为空\n      line: lineMapping && __assign({\n        color: color\n      }, lineMapping),\n      sizeField: seriesField,\n      state: lineMapping === null || lineMapping === void 0 ? void 0 : lineMapping.state,\n      tooltip: false,\n      // label 不传递给各个 geometry adaptor，由 label adaptor 处理\n      label: undefined,\n      args: {\n        startOnZero: startOnZero\n      }\n    })\n  };\n  var pointParams = deepAssign({}, primary, {\n    options: {\n      tooltip: false,\n      state: pointState\n    }\n  });\n  // area geometry 处理\n  area(primary);\n  line(lineParams);\n  point(pointParams);\n  return params;\n}\n/**\n * 数据标签\n * @param params\n */\nfunction label(params) {\n  var chart = params.chart,\n    options = params.options;\n  var label = options.label,\n    yField = options.yField;\n  var areaGeometry = findGeometry(chart, 'area');\n  // label 为 false, 空 则不显示 label\n  if (!label) {\n    areaGeometry.label(false);\n  } else {\n    var callback = label.callback,\n      cfg = __rest(label, [\"callback\"]);\n    areaGeometry.label({\n      fields: [yField],\n      callback: callback,\n      cfg: __assign({\n        layout: [{\n          type: 'limit-in-plot'\n        }, {\n          type: 'path-adjust-position'\n        }, {\n          type: 'point-adjust-position'\n        }, {\n          type: 'limit-in-plot',\n          cfg: {\n            action: 'hide'\n          }\n        }]\n      }, transformLabel(cfg))\n    });\n  }\n  return params;\n}\n/**\n * 处理 adjust\n * @param params\n */\nfunction adjust(params) {\n  var chart = params.chart,\n    options = params.options;\n  var isStack = options.isStack,\n    isPercent = options.isPercent,\n    seriesField = options.seriesField;\n  if ((isPercent || isStack) && seriesField) {\n    each(chart.geometries, function (g) {\n      g.adjust('stack');\n    });\n  }\n  return params;\n}\n/**\n * 折线图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(theme, pattern('areaStyle'), transformations('rect'), geometry, meta, adjust, axis, legend, tooltip, label, slider, annotation(), interaction, animation, limitInPlot)(params);\n}","map":{"version":3,"mappings":"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","names":["each","omit","animation","annotation","interaction","limitInPlot","pattern","slider","theme","tooltip","transformations","area","line","point","deepAssign","findGeometry","flow","transformLabel","getDataWhetherPercentage","axis","legend","meta","geometry","params","options","areaStyle","color","pointMapping","lineMapping","isPercent","xField","yField","seriesField","startOnZero","pointState","state","chartData","data","chart","tooltipOptions","__assign","formatter","datum","name","value","Number","toFixed","primary","style","label","undefined","args","lineParams","size","sizeField","pointParams","areaGeometry","cfg","fields","callback","layout","type","action","adjust","isStack","geometries","g","adaptor"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/g2plot/src/plots/area/adaptor.ts"],"sourcesContent":["import { Geometry } from '@antv/g2';\nimport { each, omit } from '@antv/util';\nimport {\n  animation,\n  annotation,\n  interaction,\n  limitInPlot,\n  pattern,\n  slider,\n  theme,\n  tooltip,\n  transformations,\n} from '../../adaptor/common';\nimport { area, line, point } from '../../adaptor/geometries';\nimport { Params } from '../../core/adaptor';\nimport { Datum } from '../../types';\nimport { deepAssign, findGeometry, flow, transformLabel } from '../../utils';\nimport { getDataWhetherPercentage } from '../../utils/transform/percent';\nimport { axis, legend, meta } from '../line/adaptor';\nimport { AreaOptions } from './types';\n\nexport { meta };\n\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params: Params<AreaOptions>): Params<AreaOptions> {\n  const { chart, options } = params;\n  const {\n    data,\n    areaStyle,\n    color,\n    point: pointMapping,\n    line: lineMapping,\n    isPercent,\n    xField,\n    yField,\n    tooltip,\n    seriesField,\n    startOnZero,\n  } = options;\n  const pointState = pointMapping?.state;\n\n  const chartData = getDataWhetherPercentage(data, yField, xField, yField, isPercent);\n  chart.data(chartData);\n  // 百分比堆积图，默认会给一个 % 格式化逻辑, 用户可自定义\n  const tooltipOptions = isPercent\n    ? {\n        formatter: (datum: Datum) => ({\n          name: datum[seriesField] || datum[xField],\n          value: (Number(datum[yField]) * 100).toFixed(2) + '%',\n        }),\n        ...tooltip,\n      }\n    : tooltip;\n  const primary = deepAssign({}, params, {\n    options: {\n      area: { color, style: areaStyle },\n      point: pointMapping && {\n        color,\n        ...pointMapping,\n      },\n      tooltip: tooltipOptions,\n      // label 不传递给各个 geometry adaptor，由 label adaptor 处理\n      label: undefined,\n      args: {\n        startOnZero,\n      },\n    },\n  });\n  // 线默认 2px (折线不能复用面积图的 state，因为 fill 和 stroke 不匹配)\n  const lineParams = {\n    chart,\n    options: deepAssign({ line: { size: 2 } }, omit(options as any, ['state']), {\n      // 颜色保持一致，因为如果颜色不一致，会导致 tooltip 中元素重复。\n      // 如果存在，才设置，否则为空\n      line: lineMapping && {\n        color,\n        ...lineMapping,\n      },\n      sizeField: seriesField,\n      state: lineMapping?.state,\n      tooltip: false,\n      // label 不传递给各个 geometry adaptor，由 label adaptor 处理\n      label: undefined,\n      args: {\n        startOnZero,\n      },\n    }),\n  };\n  const pointParams = deepAssign({}, primary, { options: { tooltip: false, state: pointState } });\n\n  // area geometry 处理\n  area(primary);\n  line(lineParams);\n  point(pointParams);\n\n  return params;\n}\n\n/**\n * 数据标签\n * @param params\n */\nfunction label(params: Params<AreaOptions>): Params<AreaOptions> {\n  const { chart, options } = params;\n  const { label, yField } = options;\n\n  const areaGeometry = findGeometry(chart, 'area');\n\n  // label 为 false, 空 则不显示 label\n  if (!label) {\n    areaGeometry.label(false);\n  } else {\n    const { callback, ...cfg } = label;\n    areaGeometry.label({\n      fields: [yField],\n      callback,\n      cfg: {\n        layout: [\n          { type: 'limit-in-plot' },\n          { type: 'path-adjust-position' },\n          { type: 'point-adjust-position' },\n          { type: 'limit-in-plot', cfg: { action: 'hide' } },\n        ],\n        ...transformLabel(cfg),\n      },\n    });\n  }\n\n  return params;\n}\n\n/**\n * 处理 adjust\n * @param params\n */\nfunction adjust(params: Params<AreaOptions>): Params<AreaOptions> {\n  const { chart, options } = params;\n  const { isStack, isPercent, seriesField } = options;\n  if ((isPercent || isStack) && seriesField) {\n    each(chart.geometries, (g: Geometry) => {\n      g.adjust('stack');\n    });\n  }\n\n  return params;\n}\n\n/**\n * 折线图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<AreaOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(\n    theme,\n    pattern('areaStyle'),\n    transformations('rect'),\n    geometry,\n    meta,\n    adjust,\n    axis,\n    legend,\n    tooltip,\n    label,\n    slider,\n    annotation(),\n    interaction,\n    animation,\n    limitInPlot\n  )(params);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}