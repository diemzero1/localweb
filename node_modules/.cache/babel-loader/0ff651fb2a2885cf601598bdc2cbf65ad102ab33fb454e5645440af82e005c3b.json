{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each, some } from '@antv/util';\nimport ListState from './list-state';\nvar STATUS_UNCHECKED = 'unchecked';\nvar STATUS_CHECKED = 'checked';\n/**\n * checked Action\n * 提供三个对外方法\n * 1. toggle 切换状态\n * 2. checked 选中\n * 3. reset 清除重置\n */\nvar ListChecked = /** @class */function (_super) {\n  __extends(ListChecked, _super);\n  function ListChecked() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.stateName = STATUS_CHECKED;\n    return _this;\n  }\n  // 单个 item 设置状态\n  ListChecked.prototype.setItemState = function (list, item, enable) {\n    this.setCheckedBy(list, function (el) {\n      return el === item;\n    }, enable);\n  };\n  // 根据条件设置 checked\n  ListChecked.prototype.setCheckedBy = function (list, callback, enable) {\n    var items = list.getItems();\n    if (enable) {\n      // 设置 checked 时，保留之前已经 checked 的项\n      each(items, function (item) {\n        if (callback(item)) {\n          if (list.hasState(item, STATUS_UNCHECKED)) {\n            list.setItemState(item, STATUS_UNCHECKED, false);\n          }\n          list.setItemState(item, STATUS_CHECKED, true);\n        } else if (!list.hasState(item, STATUS_CHECKED)) {\n          list.setItemState(item, STATUS_UNCHECKED, true);\n        }\n      });\n    }\n  };\n  /**\n   * 切换状态.\n   * 1. 当全部选中的时候 或者 当前 item 未选中时，进行激活操作\n   * 2. 否则，重置\n   * @override\n   */\n  ListChecked.prototype.toggle = function () {\n    var triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo && triggerInfo.item) {\n      var list_1 = triggerInfo.list,\n        item = triggerInfo.item;\n      // 不知道 🤷‍♀️ 只认 unchecked status\n      var allChecked = !some(list_1.getItems(), function (t) {\n        return list_1.hasState(t, STATUS_UNCHECKED);\n      });\n      //\n      if (allChecked || list_1.hasState(item, STATUS_UNCHECKED)) {\n        this.setItemState(list_1, item, true);\n      } else {\n        this.reset();\n      }\n    }\n  };\n  /**\n   * checked 图例项\n   */\n  ListChecked.prototype.checked = function () {\n    this.setState();\n  };\n  /**\n   * 重置，需要全部清理 checked 和 unchecked\n   */\n  ListChecked.prototype.reset = function () {\n    var components = this.getAllowComponents();\n    each(components, function (component) {\n      component.clearItemsState(STATUS_CHECKED);\n      component.clearItemsState(STATUS_UNCHECKED);\n    });\n  };\n  return ListChecked;\n}(ListState);\nexport default ListChecked;","map":{"version":3,"mappings":";AAAA,SAASA,IAAI,EAAEC,IAAI,QAAQ,YAAY;AAEvC,OAAOC,SAAS,MAAM,cAAc;AAEpC,IAAMC,gBAAgB,GAAG,WAAW;AACpC,IAAMC,cAAc,GAAG,SAAS;AAGhC;;;;;;;AAOA;EAA0BC;EAA1B;IAAA;IACYC,eAAS,GAAWF,cAAc;;EAiE9C;EA/DE;EACUG,kCAAY,GAAtB,UAAuBC,IAAW,EAAEC,IAAc,EAAEC,MAAe;IACjE,IAAI,CAACC,YAAY,CAACH,IAAI,EAAE,UAACI,EAAE;MAAK,SAAE,KAAKH,IAAI;IAAX,CAAW,EAAEC,MAAM,CAAC;EACtD,CAAC;EAED;EACQH,kCAAY,GAApB,UAAqBC,IAAW,EAAEK,QAAuB,EAAEH,MAAe;IACxE,IAAMI,KAAK,GAAGN,IAAI,CAACO,QAAQ,EAAE;IAC7B,IAAIL,MAAM,EAAE;MACV;MACAV,IAAI,CAACc,KAAK,EAAE,UAACL,IAAI;QACf,IAAII,QAAQ,CAACJ,IAAI,CAAC,EAAE;UAClB,IAAID,IAAI,CAACQ,QAAQ,CAACP,IAAI,EAAEN,gBAAgB,CAAC,EAAE;YACzCK,IAAI,CAACS,YAAY,CAACR,IAAI,EAAEN,gBAAgB,EAAE,KAAK,CAAC;;UAElDK,IAAI,CAACS,YAAY,CAACR,IAAI,EAAEL,cAAc,EAAE,IAAI,CAAC;SAC9C,MAAM,IAAI,CAACI,IAAI,CAACQ,QAAQ,CAACP,IAAI,EAAEL,cAAc,CAAC,EAAE;UAC/CI,IAAI,CAACS,YAAY,CAACR,IAAI,EAAEN,gBAAgB,EAAE,IAAI,CAAC;;MAEnD,CAAC,CAAC;;EAEN,CAAC;EAED;;;;;;EAMOI,4BAAM,GAAb;IACE,IAAMW,WAAW,GAAG,IAAI,CAACC,kBAAkB,EAAE;IAC7C,IAAID,WAAW,IAAIA,WAAW,CAACT,IAAI,EAAE;MAC3B,UAAI,GAAWS,WAAW,KAAtB;QAAET,IAAI,GAAKS,WAAW,KAAhB;MAElB;MACA,IAAME,UAAU,GAAG,CAACnB,IAAI,CAACoB,MAAI,CAACN,QAAQ,EAAE,EAAE,UAACO,CAAC;QAAK,aAAI,CAACN,QAAQ,CAACM,CAAC,EAAEnB,gBAAgB,CAAC;MAAlC,CAAkC,CAAC;MAEpF;MACA,IAAIiB,UAAU,IAAIC,MAAI,CAACL,QAAQ,CAACP,IAAI,EAAEN,gBAAgB,CAAC,EAAE;QACvD,IAAI,CAACc,YAAY,CAACI,MAAI,EAAEZ,IAAI,EAAE,IAAI,CAAC;OACpC,MAAM;QACL,IAAI,CAACc,KAAK,EAAE;;;EAGlB,CAAC;EAED;;;EAGOhB,6BAAO,GAAd;IACE,IAAI,CAACiB,QAAQ,EAAE;EACjB,CAAC;EAED;;;EAGOjB,2BAAK,GAAZ;IACE,IAAMkB,UAAU,GAAG,IAAI,CAACC,kBAAkB,EAAE;IAC5C1B,IAAI,CAACyB,UAAU,EAAE,UAACE,SAAS;MACzBA,SAAS,CAACC,eAAe,CAACxB,cAAc,CAAC;MACzCuB,SAAS,CAACC,eAAe,CAACzB,gBAAgB,CAAC;IAC7C,CAAC,CAAC;EACJ,CAAC;EACH,kBAAC;AAAD,CAAC,CAlEyBD,SAAS;AAoEnC,eAAeK,WAAW","names":["each","some","ListState","STATUS_UNCHECKED","STATUS_CHECKED","__extends","_this","ListChecked","list","item","enable","setCheckedBy","el","callback","items","getItems","hasState","setItemState","triggerInfo","getTriggerListInfo","allChecked","list_1","t","reset","setState","components","getAllowComponents","component","clearItemsState"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/g2/src/interaction/action/component/list-checked.ts"],"sourcesContent":["import { each, some } from '@antv/util';\nimport { IList, ListItem } from '../../../dependents';\nimport ListState from './list-state';\n\nconst STATUS_UNCHECKED = 'unchecked';\nconst STATUS_CHECKED = 'checked';\ntype MatchCallback = (item: ListItem) => boolean;\n\n/**\n * checked Action\n * 提供三个对外方法\n * 1. toggle 切换状态\n * 2. checked 选中\n * 3. reset 清除重置\n */\nclass ListChecked extends ListState {\n  protected stateName: string = STATUS_CHECKED;\n\n  // 单个 item 设置状态\n  protected setItemState(list: IList, item: ListItem, enable: boolean) {\n    this.setCheckedBy(list, (el) => el === item, enable);\n  }\n\n  // 根据条件设置 checked\n  private setCheckedBy(list: IList, callback: MatchCallback, enable: boolean) {\n    const items = list.getItems();\n    if (enable) {\n      // 设置 checked 时，保留之前已经 checked 的项\n      each(items, (item) => {\n        if (callback(item)) {\n          if (list.hasState(item, STATUS_UNCHECKED)) {\n            list.setItemState(item, STATUS_UNCHECKED, false);\n          }\n          list.setItemState(item, STATUS_CHECKED, true);\n        } else if (!list.hasState(item, STATUS_CHECKED)) {\n          list.setItemState(item, STATUS_UNCHECKED, true);\n        }\n      });\n    }\n  }\n\n  /**\n   * 切换状态.\n   * 1. 当全部选中的时候 或者 当前 item 未选中时，进行激活操作\n   * 2. 否则，重置\n   * @override\n   */\n  public toggle() {\n    const triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo && triggerInfo.item) {\n      const { list, item } = triggerInfo;\n\n      // 不知道 🤷‍♀️ 只认 unchecked status\n      const allChecked = !some(list.getItems(), (t) => list.hasState(t, STATUS_UNCHECKED));\n\n      //\n      if (allChecked || list.hasState(item, STATUS_UNCHECKED)) {\n        this.setItemState(list, item, true);\n      } else {\n        this.reset();\n      }\n    }\n  }\n\n  /**\n   * checked 图例项\n   */\n  public checked() {\n    this.setState();\n  }\n\n  /**\n   * 重置，需要全部清理 checked 和 unchecked\n   */\n  public reset() {\n    const components = this.getAllowComponents();\n    each(components, (component) => {\n      component.clearItemsState(STATUS_CHECKED);\n      component.clearItemsState(STATUS_UNCHECKED);\n    });\n  }\n}\n\nexport default ListChecked;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}