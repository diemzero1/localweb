{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as _ from '@antv/util';\nimport Adjust from './adjust';\nvar Cache = _.Cache;\nvar Stack = /** @class */function (_super) {\n  __extends(Stack, _super);\n  function Stack(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    var _a = cfg.adjustNames,\n      adjustNames = _a === void 0 ? ['y'] : _a,\n      _b = cfg.height,\n      height = _b === void 0 ? NaN : _b,\n      _c = cfg.size,\n      size = _c === void 0 ? 10 : _c,\n      _d = cfg.reverseOrder,\n      reverseOrder = _d === void 0 ? false : _d;\n    _this.adjustNames = adjustNames;\n    _this.height = height;\n    _this.size = size;\n    _this.reverseOrder = reverseOrder;\n    return _this;\n  }\n  /**\n   * 方法入参是经过数据分组、数据数字化之后的二维数组\n   * @param groupDataArray 分组之后的数据\n   */\n  Stack.prototype.process = function (groupDataArray) {\n    var _a = this,\n      yField = _a.yField,\n      reverseOrder = _a.reverseOrder;\n    // 如果有指定 y 字段，那么按照 y 字段来 stack\n    // 否则，按照高度均分\n    var d = yField ? this.processStack(groupDataArray) : this.processOneDimStack(groupDataArray);\n    return reverseOrder ? this.reverse(d) : d;\n  };\n  Stack.prototype.reverse = function (groupedDataArray) {\n    return groupedDataArray.slice(0).reverse();\n  };\n  Stack.prototype.processStack = function (groupDataArray) {\n    var _a = this,\n      xField = _a.xField,\n      yField = _a.yField,\n      reverseOrder = _a.reverseOrder;\n    // 层叠顺序翻转\n    var groupedDataArray = reverseOrder ? this.reverse(groupDataArray) : groupDataArray;\n    // 用来缓存，正数和负数的堆叠问题\n    var positive = new Cache();\n    var negative = new Cache();\n    return groupedDataArray.map(function (dataArray) {\n      return dataArray.map(function (data) {\n        var _a;\n        var x = _.get(data, xField, 0);\n        var y = _.get(data, [yField]);\n        var xKey = x.toString();\n        // todo 是否应该取 _origin？因为 y 可能取到的值不正确，比如先 symmetric，再 stack！\n        y = _.isArray(y) ? y[1] : y;\n        if (!_.isNil(y)) {\n          var cache = y >= 0 ? positive : negative;\n          if (!cache.has(xKey)) {\n            cache.set(xKey, 0);\n          }\n          var xValue = cache.get(xKey);\n          var newXValue = y + xValue;\n          // 存起来\n          cache.set(xKey, newXValue);\n          return __assign(__assign({}, data), (_a = {}, _a[yField] = [xValue, newXValue], _a));\n        }\n        // 没有修改，则直接返回\n        return data;\n      });\n    });\n  };\n  Stack.prototype.processOneDimStack = function (groupDataArray) {\n    var _this = this;\n    var _a = this,\n      xField = _a.xField,\n      height = _a.height,\n      reverseOrder = _a.reverseOrder;\n    var yField = 'y';\n    // 如果层叠的顺序翻转\n    var groupedDataArray = reverseOrder ? this.reverse(groupDataArray) : groupDataArray;\n    // 缓存累加数据\n    var cache = new Cache();\n    return groupedDataArray.map(function (dataArray) {\n      return dataArray.map(function (data) {\n        var _a;\n        var size = _this.size;\n        var xValue = data[xField];\n        // todo 没有看到这个 stack 计算原理\n        var stackHeight = size * 2 / height;\n        if (!cache.has(xValue)) {\n          cache.set(xValue, stackHeight / 2); // 初始值大小\n        }\n\n        var stackValue = cache.get(xValue);\n        // 增加一层 stackHeight\n        cache.set(xValue, stackValue + stackHeight);\n        return __assign(__assign({}, data), (_a = {}, _a[yField] = stackValue, _a));\n      });\n    });\n  };\n  return Stack;\n}(Adjust);\nexport default Stack;","map":{"version":3,"mappings":"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","names":["_","Adjust","Cache","__extends","cfg","_super","adjustNames","_b","height","NaN","_c","size","_d","reverseOrder","_this","Stack","groupDataArray","yField","d","processStack","processOneDimStack","reverse","groupedDataArray","slice","xField","positive","negative","map","dataArray","data","x","get","y","xKey","toString","isArray","isNil","cache","has","set","xValue","newXValue","stackHeight","stackValue"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/adjust/src/adjusts/stack.ts"],"sourcesContent":["import * as _ from '@antv/util';\nimport { Data, StackCfg } from '../interface';\nimport Adjust from './adjust';\n\nconst Cache = _.Cache;\n\nexport default class Stack extends Adjust {\n  constructor(cfg: StackCfg) {\n    super(cfg);\n\n    const { adjustNames = ['y'], height = NaN, size = 10, reverseOrder = false } = cfg;\n    this.adjustNames = adjustNames;\n    this.height = height;\n    this.size = size;\n    this.reverseOrder = reverseOrder;\n  }\n\n  /**\n   * 方法入参是经过数据分组、数据数字化之后的二维数组\n   * @param groupDataArray 分组之后的数据\n   */\n  public process(groupDataArray: Data[][]): Data[][] {\n    const { yField, reverseOrder } = this;\n\n    // 如果有指定 y 字段，那么按照 y 字段来 stack\n    // 否则，按照高度均分\n    const d = yField ? this.processStack(groupDataArray) : this.processOneDimStack(groupDataArray);\n\n    return reverseOrder ? this.reverse(d) : d;\n  }\n\n  private reverse(groupedDataArray: Data[][]): Data[][] {\n    return groupedDataArray.slice(0).reverse();\n  }\n\n  private processStack(groupDataArray: Data[][]): Data[][] {\n    const { xField, yField, reverseOrder } = this;\n\n    // 层叠顺序翻转\n    const groupedDataArray = reverseOrder ? this.reverse(groupDataArray) : groupDataArray;\n\n    // 用来缓存，正数和负数的堆叠问题\n    const positive = new Cache<number>();\n    const negative = new Cache<number>();\n\n    return groupedDataArray.map((dataArray) => {\n      return dataArray.map((data) => {\n        const x: number = _.get(data, xField, 0);\n        let y: number = _.get(data, [yField]);\n\n        const xKey = x.toString();\n\n        // todo 是否应该取 _origin？因为 y 可能取到的值不正确，比如先 symmetric，再 stack！\n        y = _.isArray(y) ? y[1] : y;\n\n        if (!_.isNil(y)) {\n          const cache = y >= 0 ? positive : negative;\n\n          if (!cache.has(xKey)) {\n            cache.set(xKey, 0);\n          }\n          const xValue = cache.get(xKey) as number;\n          const newXValue = y + xValue;\n\n          // 存起来\n          cache.set(xKey, newXValue);\n\n          return {\n            ...data,\n            // 叠加成数组，覆盖之前的数据\n            [yField]: [xValue, newXValue],\n          };\n        }\n\n        // 没有修改，则直接返回\n        return data;\n      });\n    });\n  }\n\n  private processOneDimStack(groupDataArray: Data[][]): Data[][] {\n    const { xField, height, reverseOrder } = this;\n    const yField = 'y';\n\n    // 如果层叠的顺序翻转\n    const groupedDataArray = reverseOrder ? this.reverse(groupDataArray) : groupDataArray;\n\n    // 缓存累加数据\n    const cache = new Cache<number>();\n\n    return groupedDataArray.map((dataArray): Data[] => {\n      return dataArray.map(\n        (data): Data => {\n          const { size } = this;\n          const xValue: string = data[xField];\n\n          // todo 没有看到这个 stack 计算原理\n          const stackHeight = (size * 2) / height;\n\n          if (!cache.has(xValue)) {\n            cache.set(xValue, stackHeight / 2); // 初始值大小\n          }\n\n          const stackValue = cache.get(xValue) as number;\n          // 增加一层 stackHeight\n          cache.set(xValue, stackValue + stackHeight);\n\n          return {\n            ...data,\n            [yField]: stackValue,\n          };\n        }\n      );\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}