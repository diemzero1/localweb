{"ast":null,"code":"import { justify } from './align';\nimport { constant, maxValueBy, minValueBy, sumBy } from './helper';\nfunction ascendingSourceBreadth(a, b) {\n  return ascendingBreadth(a.source, b.source) || a.index - b.index;\n}\nfunction ascendingTargetBreadth(a, b) {\n  return ascendingBreadth(a.target, b.target) || a.index - b.index;\n}\nfunction ascendingBreadth(a, b) {\n  return a.y0 - b.y0;\n}\nfunction value(d) {\n  return d.value;\n}\nfunction defaultId(d) {\n  return d.index;\n}\nfunction defaultNodes(graph) {\n  return graph.nodes;\n}\nfunction defaultLinks(graph) {\n  return graph.links;\n}\nfunction find(nodeById, id) {\n  var node = nodeById.get(id);\n  if (!node) throw new Error('missing: ' + id);\n  return node;\n}\nfunction computeLinkBreadths(_a) {\n  var nodes = _a.nodes;\n  for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {\n    var node = nodes_1[_i];\n    var y0 = node.y0;\n    var y1 = y0;\n    for (var _b = 0, _c = node.sourceLinks; _b < _c.length; _b++) {\n      var link = _c[_b];\n      link.y0 = y0 + link.width / 2;\n      y0 += link.width;\n    }\n    for (var _d = 0, _e = node.targetLinks; _d < _e.length; _d++) {\n      var link = _e[_d];\n      link.y1 = y1 + link.width / 2;\n      y1 += link.width;\n    }\n  }\n}\nexport function Sankey() {\n  var x0 = 0,\n    y0 = 0,\n    x1 = 1,\n    y1 = 1; // extent\n  var dx = 24; // nodeWidth\n  var dy = 8,\n    py; // nodePadding\n  var id = defaultId;\n  var align = justify;\n  var depth;\n  var sort;\n  var linkSort;\n  var nodes = defaultNodes;\n  var links = defaultLinks;\n  var iterations = 6;\n  function sankey(arg) {\n    var graph = {\n      nodes: nodes(arg),\n      links: links(arg)\n    };\n    computeNodeLinks(graph);\n    computeNodeValues(graph);\n    computeNodeDepths(graph);\n    computeNodeHeights(graph);\n    computeNodeBreadths(graph);\n    computeLinkBreadths(graph);\n    return graph;\n  }\n  sankey.update = function (graph) {\n    computeLinkBreadths(graph);\n    return graph;\n  };\n  sankey.nodeId = function (_) {\n    return arguments.length ? (id = typeof _ === 'function' ? _ : constant(_), sankey) : id;\n  };\n  sankey.nodeAlign = function (_) {\n    return arguments.length ? (align = typeof _ === 'function' ? _ : constant(_), sankey) : align;\n  };\n  sankey.nodeDepth = function (_) {\n    return arguments.length ? (depth = typeof _ === 'function' ? _ : _, sankey) : depth;\n  };\n  sankey.nodeSort = function (_) {\n    return arguments.length ? (sort = _, sankey) : sort;\n  };\n  sankey.nodeWidth = function (_) {\n    return arguments.length ? (dx = +_, sankey) : dx;\n  };\n  sankey.nodePadding = function (_) {\n    return arguments.length ? (dy = py = +_, sankey) : dy;\n  };\n  sankey.nodes = function (_) {\n    return arguments.length ? (nodes = typeof _ === 'function' ? _ : constant(_), sankey) : nodes;\n  };\n  sankey.links = function (_) {\n    return arguments.length ? (links = typeof _ === 'function' ? _ : constant(_), sankey) : links;\n  };\n  sankey.linkSort = function (_) {\n    return arguments.length ? (linkSort = _, sankey) : linkSort;\n  };\n  sankey.size = function (_) {\n    return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], sankey) : [x1 - x0, y1 - y0];\n  };\n  sankey.extent = function (_) {\n    return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], sankey) : [[x0, y0], [x1, y1]];\n  };\n  sankey.iterations = function (_) {\n    return arguments.length ? (iterations = +_, sankey) : iterations;\n  };\n  function computeNodeLinks(_a) {\n    var nodes = _a.nodes,\n      links = _a.links;\n    nodes.forEach(function (node, idx) {\n      node.index = idx;\n      node.sourceLinks = [];\n      node.targetLinks = [];\n    });\n    var nodeById = new Map(nodes.map(function (d) {\n      return [id(d), d];\n    }));\n    links.forEach(function (link, idx) {\n      link.index = idx;\n      var source = link.source,\n        target = link.target;\n      if (typeof source !== 'object') source = link.source = find(nodeById, source);\n      if (typeof target !== 'object') target = link.target = find(nodeById, target);\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    });\n    if (linkSort != null) {\n      for (var _i = 0, nodes_2 = nodes; _i < nodes_2.length; _i++) {\n        var _b = nodes_2[_i],\n          sourceLinks = _b.sourceLinks,\n          targetLinks = _b.targetLinks;\n        sourceLinks.sort(linkSort);\n        targetLinks.sort(linkSort);\n      }\n    }\n  }\n  function computeNodeValues(_a) {\n    var nodes = _a.nodes;\n    for (var _i = 0, nodes_3 = nodes; _i < nodes_3.length; _i++) {\n      var node = nodes_3[_i];\n      node.value = node.fixedValue === undefined ? Math.max(sumBy(node.sourceLinks, value), sumBy(node.targetLinks, value)) : node.fixedValue;\n    }\n  }\n  function computeNodeDepths(_a) {\n    var nodes = _a.nodes;\n    var n = nodes.length;\n    var current = new Set(nodes);\n    var next = new Set();\n    var x = 0;\n    while (current.size) {\n      current.forEach(function (node) {\n        node.depth = x;\n        for (var _i = 0, _a = node.sourceLinks; _i < _a.length; _i++) {\n          var target = _a[_i].target;\n          next.add(target);\n        }\n      });\n      if (++x > n) throw new Error('circular link');\n      current = next;\n      next = new Set();\n    }\n    // 如果配置了 depth，则设置自定义 depth\n    if (depth) {\n      var maxDepth = Math.max(maxValueBy(nodes, function (d) {\n        return d.depth;\n      }) + 1, 0);\n      var node = void 0;\n      for (var i = 0; i < nodes.length; i++) {\n        node = nodes[i];\n        node.depth = depth.call(null, node, maxDepth);\n      }\n    }\n  }\n  function computeNodeHeights(_a) {\n    var nodes = _a.nodes;\n    var n = nodes.length;\n    var current = new Set(nodes);\n    var next = new Set();\n    var x = 0;\n    while (current.size) {\n      current.forEach(function (node) {\n        node.height = x;\n        for (var _i = 0, _a = node.targetLinks; _i < _a.length; _i++) {\n          var source = _a[_i].source;\n          next.add(source);\n        }\n      });\n      if (++x > n) throw new Error('circular link');\n      current = next;\n      next = new Set();\n    }\n  }\n  function computeNodeLayers(_a) {\n    var nodes = _a.nodes;\n    var x = Math.max(maxValueBy(nodes, function (d) {\n      return d.depth;\n    }) + 1, 0);\n    var kx = (x1 - x0 - dx) / (x - 1);\n    var columns = new Array(x).fill(0).map(function () {\n      return [];\n    });\n    for (var _i = 0, nodes_4 = nodes; _i < nodes_4.length; _i++) {\n      var node = nodes_4[_i];\n      var i = Math.max(0, Math.min(x - 1, Math.floor(align.call(null, node, x))));\n      node.layer = i;\n      node.x0 = x0 + i * kx;\n      node.x1 = node.x0 + dx;\n      if (columns[i]) columns[i].push(node);else columns[i] = [node];\n    }\n    if (sort) for (var _b = 0, columns_1 = columns; _b < columns_1.length; _b++) {\n      var column = columns_1[_b];\n      column.sort(sort);\n    }\n    return columns;\n  }\n  function initializeNodeBreadths(columns) {\n    var ky = minValueBy(columns, function (c) {\n      return (y1 - y0 - (c.length - 1) * py) / sumBy(c, value);\n    });\n    for (var _i = 0, columns_2 = columns; _i < columns_2.length; _i++) {\n      var nodes_6 = columns_2[_i];\n      var y = y0;\n      for (var _a = 0, nodes_5 = nodes_6; _a < nodes_5.length; _a++) {\n        var node = nodes_5[_a];\n        node.y0 = y;\n        node.y1 = y + node.value * ky;\n        y = node.y1 + py;\n        for (var _b = 0, _c = node.sourceLinks; _b < _c.length; _b++) {\n          var link = _c[_b];\n          link.width = link.value * ky;\n        }\n      }\n      y = (y1 - y + py) / (nodes_6.length + 1);\n      for (var i = 0; i < nodes_6.length; ++i) {\n        var node = nodes_6[i];\n        node.y0 += y * (i + 1);\n        node.y1 += y * (i + 1);\n      }\n      reorderLinks(nodes_6);\n    }\n  }\n  function computeNodeBreadths(graph) {\n    var columns = computeNodeLayers(graph);\n    py = Math.min(dy, (y1 - y0) / (maxValueBy(columns, function (c) {\n      return c.length;\n    }) - 1));\n    initializeNodeBreadths(columns);\n    for (var i = 0; i < iterations; ++i) {\n      var alpha = Math.pow(0.99, i);\n      var beta = Math.max(1 - alpha, (i + 1) / iterations);\n      relaxRightToLeft(columns, alpha, beta);\n      relaxLeftToRight(columns, alpha, beta);\n    }\n  }\n  // Reposition each node based on its incoming (target) links.\n  function relaxLeftToRight(columns, alpha, beta) {\n    for (var i = 1, n = columns.length; i < n; ++i) {\n      var column = columns[i];\n      for (var _i = 0, column_1 = column; _i < column_1.length; _i++) {\n        var target = column_1[_i];\n        var y = 0;\n        var w = 0;\n        for (var _a = 0, _b = target.targetLinks; _a < _b.length; _a++) {\n          var _c = _b[_a],\n            source = _c.source,\n            value_1 = _c.value;\n          var v = value_1 * (target.layer - source.layer);\n          y += targetTop(source, target) * v;\n          w += v;\n        }\n        if (!(w > 0)) continue;\n        var dy_1 = (y / w - target.y0) * alpha;\n        target.y0 += dy_1;\n        target.y1 += dy_1;\n        reorderNodeLinks(target);\n      }\n      if (sort === undefined) column.sort(ascendingBreadth);\n      if (column.length) resolveCollisions(column, beta);\n    }\n  }\n  // Reposition each node based on its outgoing (source) links.\n  function relaxRightToLeft(columns, alpha, beta) {\n    for (var n = columns.length, i = n - 2; i >= 0; --i) {\n      var column = columns[i];\n      for (var _i = 0, column_2 = column; _i < column_2.length; _i++) {\n        var source = column_2[_i];\n        var y = 0;\n        var w = 0;\n        for (var _a = 0, _b = source.sourceLinks; _a < _b.length; _a++) {\n          var _c = _b[_a],\n            target = _c.target,\n            value_2 = _c.value;\n          var v = value_2 * (target.layer - source.layer);\n          y += sourceTop(source, target) * v;\n          w += v;\n        }\n        if (!(w > 0)) continue;\n        var dy_2 = (y / w - source.y0) * alpha;\n        source.y0 += dy_2;\n        source.y1 += dy_2;\n        reorderNodeLinks(source);\n      }\n      if (sort === undefined) column.sort(ascendingBreadth);\n      if (column.length) resolveCollisions(column, beta);\n    }\n  }\n  function resolveCollisions(nodes, alpha) {\n    var i = nodes.length >> 1;\n    var subject = nodes[i];\n    resolveCollisionsBottomToTop(nodes, subject.y0 - py, i - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, subject.y1 + py, i + 1, alpha);\n    resolveCollisionsBottomToTop(nodes, y1, nodes.length - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, y0, 0, alpha);\n  }\n  // Push any overlapping nodes down.\n  function resolveCollisionsTopToBottom(nodes, y, i, alpha) {\n    for (; i < nodes.length; ++i) {\n      var node = nodes[i];\n      var dy_3 = (y - node.y0) * alpha;\n      if (dy_3 > 1e-6) node.y0 += dy_3, node.y1 += dy_3;\n      y = node.y1 + py;\n    }\n  }\n  // Push any overlapping nodes up.\n  function resolveCollisionsBottomToTop(nodes, y, i, alpha) {\n    for (; i >= 0; --i) {\n      var node = nodes[i];\n      var dy_4 = (node.y1 - y) * alpha;\n      if (dy_4 > 1e-6) node.y0 -= dy_4, node.y1 -= dy_4;\n      y = node.y0 - py;\n    }\n  }\n  function reorderNodeLinks(_a) {\n    var sourceLinks = _a.sourceLinks,\n      targetLinks = _a.targetLinks;\n    if (linkSort === undefined) {\n      for (var _i = 0, targetLinks_1 = targetLinks; _i < targetLinks_1.length; _i++) {\n        var sourceLinks_2 = targetLinks_1[_i].source.sourceLinks;\n        sourceLinks_2.sort(ascendingTargetBreadth);\n      }\n      for (var _b = 0, sourceLinks_1 = sourceLinks; _b < sourceLinks_1.length; _b++) {\n        var targetLinks_2 = sourceLinks_1[_b].target.targetLinks;\n        targetLinks_2.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n  function reorderLinks(nodes) {\n    if (linkSort === undefined) {\n      for (var _i = 0, nodes_7 = nodes; _i < nodes_7.length; _i++) {\n        var _a = nodes_7[_i],\n          sourceLinks = _a.sourceLinks,\n          targetLinks = _a.targetLinks;\n        sourceLinks.sort(ascendingTargetBreadth);\n        targetLinks.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n  // Returns the target.y0 that would produce an ideal link from source to target.\n  function targetTop(source, target) {\n    var y = source.y0 - (source.sourceLinks.length - 1) * py / 2;\n    for (var _i = 0, _a = source.sourceLinks; _i < _a.length; _i++) {\n      var _b = _a[_i],\n        node = _b.target,\n        width = _b.width;\n      if (node === target) break;\n      y += width + py;\n    }\n    for (var _c = 0, _d = target.targetLinks; _c < _d.length; _c++) {\n      var _e = _d[_c],\n        node = _e.source,\n        width = _e.width;\n      if (node === source) break;\n      y -= width;\n    }\n    return y;\n  }\n  // Returns the source.y0 that would produce an ideal link from source to target.\n  function sourceTop(source, target) {\n    var y = target.y0 - (target.targetLinks.length - 1) * py / 2;\n    for (var _i = 0, _a = target.targetLinks; _i < _a.length; _i++) {\n      var _b = _a[_i],\n        node = _b.source,\n        width = _b.width;\n      if (node === source) break;\n      y += width + py;\n    }\n    for (var _c = 0, _d = source.sourceLinks; _c < _d.length; _c++) {\n      var _e = _d[_c],\n        node = _e.target,\n        width = _e.width;\n      if (node === target) break;\n      y -= width;\n    }\n    return y;\n  }\n  return sankey;\n}","map":{"version":3,"mappings":"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","names":["justify","constant","maxValueBy","minValueBy","sumBy","ascendingSourceBreadth","a","b","ascendingBreadth","source","index","ascendingTargetBreadth","target","y0","value","d","defaultId","defaultNodes","graph","nodes","defaultLinks","links","find","nodeById","id","node","get","Error","computeLinkBreadths","_a","nodes_1","_i","y1","_c","sourceLinks","_b","link","width","_e","targetLinks","_d","Sankey","x0","x1","dx","dy","py","align","depth","sort","linkSort","iterations","sankey","arg","computeNodeLinks","computeNodeValues","computeNodeDepths","computeNodeHeights","computeNodeBreadths","update","nodeId","_","arguments","length","nodeAlign","nodeDepth","nodeSort","nodeWidth","nodePadding","size","extent","forEach","idx","Map","map","push","nodes_2","nodes_3","fixedValue","undefined","Math","max","n","current","Set","next","x","add","maxDepth","i","call","height","computeNodeLayers","kx","columns","Array","fill","nodes_4","min","floor","layer","columns_1","column","initializeNodeBreadths","ky","c","columns_2","nodes_6","y","nodes_5","reorderLinks","alpha","pow","beta","relaxRightToLeft","relaxLeftToRight","column_1","w","value_1","v","targetTop","dy_1","reorderNodeLinks","resolveCollisions","column_2","value_2","sourceTop","dy_2","subject","resolveCollisionsBottomToTop","resolveCollisionsTopToBottom","dy_3","dy_4","targetLinks_1","sourceLinks_2","sourceLinks_1","targetLinks_2","nodes_7"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/g2plot/src/plots/sankey/sankey/sankey.ts"],"sourcesContent":["import { justify } from './align';\nimport { constant, maxValueBy, minValueBy, sumBy } from './helper';\n\nfunction ascendingSourceBreadth(a, b) {\n  return ascendingBreadth(a.source, b.source) || a.index - b.index;\n}\n\nfunction ascendingTargetBreadth(a, b) {\n  return ascendingBreadth(a.target, b.target) || a.index - b.index;\n}\n\nfunction ascendingBreadth(a, b) {\n  return a.y0 - b.y0;\n}\n\nfunction value(d) {\n  return d.value;\n}\n\nfunction defaultId(d) {\n  return d.index;\n}\n\nfunction defaultNodes(graph) {\n  return graph.nodes;\n}\n\nfunction defaultLinks(graph) {\n  return graph.links;\n}\n\nfunction find(nodeById, id) {\n  const node = nodeById.get(id);\n  if (!node) throw new Error('missing: ' + id);\n  return node;\n}\n\nfunction computeLinkBreadths({ nodes }) {\n  for (const node of nodes) {\n    let y0 = node.y0;\n    let y1 = y0;\n    for (const link of node.sourceLinks) {\n      link.y0 = y0 + link.width / 2;\n      y0 += link.width;\n    }\n    for (const link of node.targetLinks) {\n      link.y1 = y1 + link.width / 2;\n      y1 += link.width;\n    }\n  }\n}\n\nexport function Sankey() {\n  let x0 = 0,\n    y0 = 0,\n    x1 = 1,\n    y1 = 1; // extent\n  let dx = 24; // nodeWidth\n  let dy = 8,\n    py; // nodePadding\n  let id = defaultId;\n  let align = justify;\n  let depth;\n  let sort;\n  let linkSort;\n  let nodes = defaultNodes;\n  let links = defaultLinks;\n  let iterations = 6;\n\n  function sankey(arg) {\n    const graph = {\n      nodes: nodes(arg),\n      links: links(arg),\n    };\n    computeNodeLinks(graph);\n    computeNodeValues(graph);\n    computeNodeDepths(graph);\n    computeNodeHeights(graph);\n    computeNodeBreadths(graph);\n    computeLinkBreadths(graph);\n    return graph;\n  }\n\n  sankey.update = function (graph) {\n    computeLinkBreadths(graph);\n    return graph;\n  };\n\n  sankey.nodeId = function (_) {\n    return arguments.length ? ((id = typeof _ === 'function' ? _ : constant(_)), sankey) : id;\n  };\n\n  sankey.nodeAlign = function (_) {\n    return arguments.length ? ((align = typeof _ === 'function' ? _ : constant(_)), sankey) : align;\n  };\n\n  sankey.nodeDepth = function (_) {\n    return arguments.length ? ((depth = typeof _ === 'function' ? _ : _), sankey) : depth;\n  };\n\n  sankey.nodeSort = function (_) {\n    return arguments.length ? ((sort = _), sankey) : sort;\n  };\n\n  sankey.nodeWidth = function (_) {\n    return arguments.length ? ((dx = +_), sankey) : dx;\n  };\n\n  sankey.nodePadding = function (_) {\n    return arguments.length ? ((dy = py = +_), sankey) : dy;\n  };\n\n  sankey.nodes = function (_) {\n    return arguments.length ? ((nodes = typeof _ === 'function' ? _ : constant(_)), sankey) : nodes;\n  };\n\n  sankey.links = function (_) {\n    return arguments.length ? ((links = typeof _ === 'function' ? _ : constant(_)), sankey) : links;\n  };\n\n  sankey.linkSort = function (_) {\n    return arguments.length ? ((linkSort = _), sankey) : linkSort;\n  };\n\n  sankey.size = function (_) {\n    return arguments.length ? ((x0 = y0 = 0), (x1 = +_[0]), (y1 = +_[1]), sankey) : [x1 - x0, y1 - y0];\n  };\n\n  sankey.extent = function (_) {\n    return arguments.length\n      ? ((x0 = +_[0][0]), (x1 = +_[1][0]), (y0 = +_[0][1]), (y1 = +_[1][1]), sankey)\n      : [\n          [x0, y0],\n          [x1, y1],\n        ];\n  };\n\n  sankey.iterations = function (_) {\n    return arguments.length ? ((iterations = +_), sankey) : iterations;\n  };\n\n  function computeNodeLinks({ nodes, links }) {\n    nodes.forEach((node, idx) => {\n      node.index = idx;\n      node.sourceLinks = [];\n      node.targetLinks = [];\n    });\n\n    const nodeById = new Map(nodes.map((d) => [id(d), d]));\n\n    links.forEach((link, idx) => {\n      link.index = idx;\n      let { source, target } = link;\n      if (typeof source !== 'object') source = link.source = find(nodeById, source);\n      if (typeof target !== 'object') target = link.target = find(nodeById, target);\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    });\n\n    if (linkSort != null) {\n      for (const { sourceLinks, targetLinks } of nodes) {\n        sourceLinks.sort(linkSort);\n        targetLinks.sort(linkSort);\n      }\n    }\n  }\n\n  function computeNodeValues({ nodes }) {\n    for (const node of nodes) {\n      node.value =\n        node.fixedValue === undefined\n          ? Math.max(sumBy(node.sourceLinks, value), sumBy(node.targetLinks, value))\n          : node.fixedValue;\n    }\n  }\n\n  function computeNodeDepths({ nodes }) {\n    const n = nodes.length;\n    let current = new Set<any>(nodes);\n    let next = new Set();\n    let x = 0;\n    while (current.size) {\n      current.forEach((node) => {\n        node.depth = x;\n        for (const { target } of node.sourceLinks) {\n          next.add(target);\n        }\n      });\n      if (++x > n) throw new Error('circular link');\n      current = next;\n      next = new Set();\n    }\n\n    // 如果配置了 depth，则设置自定义 depth\n    if (depth) {\n      const maxDepth = Math.max(maxValueBy(nodes, (d: any) => d.depth) + 1, 0);\n\n      let node;\n      for (let i = 0; i < nodes.length; i++) {\n        node = nodes[i];\n        node.depth = depth.call(null, node, maxDepth);\n      }\n    }\n  }\n\n  function computeNodeHeights({ nodes }) {\n    const n = nodes.length;\n    let current = new Set<any>(nodes);\n    let next = new Set();\n    let x = 0;\n    while (current.size) {\n      current.forEach((node) => {\n        node.height = x;\n        for (const { source } of node.targetLinks) {\n          next.add(source);\n        }\n      });\n      if (++x > n) throw new Error('circular link');\n      current = next;\n      next = new Set();\n    }\n  }\n\n  function computeNodeLayers({ nodes }) {\n    const x = Math.max(maxValueBy(nodes, (d: any) => d.depth) + 1, 0);\n    const kx = (x1 - x0 - dx) / (x - 1);\n    const columns = new Array(x).fill(0).map(() => []);\n    for (const node of nodes) {\n      const i = Math.max(0, Math.min(x - 1, Math.floor(align.call(null, node, x))));\n      node.layer = i;\n      node.x0 = x0 + i * kx;\n      node.x1 = node.x0 + dx;\n      if (columns[i]) columns[i].push(node);\n      else columns[i] = [node];\n    }\n    if (sort)\n      for (const column of columns) {\n        column.sort(sort);\n      }\n    return columns;\n  }\n\n  function initializeNodeBreadths(columns) {\n    const ky = minValueBy(columns, (c: any[]) => (y1 - y0 - (c.length - 1) * py) / sumBy(c, value)) as any as number;\n    for (const nodes of columns) {\n      let y = y0;\n      for (const node of nodes) {\n        node.y0 = y;\n        node.y1 = y + node.value * ky;\n        y = node.y1 + py;\n        for (const link of node.sourceLinks) {\n          link.width = link.value * ky;\n        }\n      }\n      y = (y1 - y + py) / (nodes.length + 1);\n      for (let i = 0; i < nodes.length; ++i) {\n        const node = nodes[i];\n        node.y0 += y * (i + 1);\n        node.y1 += y * (i + 1);\n      }\n      reorderLinks(nodes);\n    }\n  }\n\n  function computeNodeBreadths(graph) {\n    const columns = computeNodeLayers(graph);\n    py = Math.min(dy, (y1 - y0) / ((maxValueBy(columns, (c: any[]) => c.length) as any as number) - 1));\n    initializeNodeBreadths(columns);\n    for (let i = 0; i < iterations; ++i) {\n      const alpha = Math.pow(0.99, i);\n      const beta = Math.max(1 - alpha, (i + 1) / iterations);\n      relaxRightToLeft(columns, alpha, beta);\n      relaxLeftToRight(columns, alpha, beta);\n    }\n  }\n\n  // Reposition each node based on its incoming (target) links.\n  function relaxLeftToRight(columns, alpha, beta) {\n    for (let i = 1, n = columns.length; i < n; ++i) {\n      const column = columns[i];\n      for (const target of column) {\n        let y = 0;\n        let w = 0;\n        for (const { source, value } of target.targetLinks) {\n          const v = value * (target.layer - source.layer);\n          y += targetTop(source, target) * v;\n          w += v;\n        }\n        if (!(w > 0)) continue;\n        const dy = (y / w - target.y0) * alpha;\n        target.y0 += dy;\n        target.y1 += dy;\n        reorderNodeLinks(target);\n      }\n      if (sort === undefined) column.sort(ascendingBreadth);\n      if (column.length) resolveCollisions(column, beta);\n    }\n  }\n\n  // Reposition each node based on its outgoing (source) links.\n  function relaxRightToLeft(columns, alpha, beta) {\n    for (let n = columns.length, i = n - 2; i >= 0; --i) {\n      const column = columns[i];\n      for (const source of column) {\n        let y = 0;\n        let w = 0;\n        for (const { target, value } of source.sourceLinks) {\n          const v = value * (target.layer - source.layer);\n          y += sourceTop(source, target) * v;\n          w += v;\n        }\n        if (!(w > 0)) continue;\n        const dy = (y / w - source.y0) * alpha;\n        source.y0 += dy;\n        source.y1 += dy;\n        reorderNodeLinks(source);\n      }\n      if (sort === undefined) column.sort(ascendingBreadth);\n      if (column.length) resolveCollisions(column, beta);\n    }\n  }\n\n  function resolveCollisions(nodes, alpha) {\n    const i = nodes.length >> 1;\n    const subject = nodes[i];\n    resolveCollisionsBottomToTop(nodes, subject.y0 - py, i - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, subject.y1 + py, i + 1, alpha);\n    resolveCollisionsBottomToTop(nodes, y1, nodes.length - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, y0, 0, alpha);\n  }\n\n  // Push any overlapping nodes down.\n  function resolveCollisionsTopToBottom(nodes, y, i, alpha) {\n    for (; i < nodes.length; ++i) {\n      const node = nodes[i];\n      const dy = (y - node.y0) * alpha;\n      if (dy > 1e-6) (node.y0 += dy), (node.y1 += dy);\n      y = node.y1 + py;\n    }\n  }\n\n  // Push any overlapping nodes up.\n  function resolveCollisionsBottomToTop(nodes, y, i, alpha) {\n    for (; i >= 0; --i) {\n      const node = nodes[i];\n      const dy = (node.y1 - y) * alpha;\n      if (dy > 1e-6) (node.y0 -= dy), (node.y1 -= dy);\n      y = node.y0 - py;\n    }\n  }\n\n  function reorderNodeLinks({ sourceLinks, targetLinks }) {\n    if (linkSort === undefined) {\n      for (const {\n        source: { sourceLinks },\n      } of targetLinks) {\n        sourceLinks.sort(ascendingTargetBreadth);\n      }\n      for (const {\n        target: { targetLinks },\n      } of sourceLinks) {\n        targetLinks.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n\n  function reorderLinks(nodes) {\n    if (linkSort === undefined) {\n      for (const { sourceLinks, targetLinks } of nodes) {\n        sourceLinks.sort(ascendingTargetBreadth);\n        targetLinks.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n\n  // Returns the target.y0 that would produce an ideal link from source to target.\n  function targetTop(source, target) {\n    let y = source.y0 - ((source.sourceLinks.length - 1) * py) / 2;\n    for (const { target: node, width } of source.sourceLinks) {\n      if (node === target) break;\n      y += width + py;\n    }\n    for (const { source: node, width } of target.targetLinks) {\n      if (node === source) break;\n      y -= width;\n    }\n    return y;\n  }\n\n  // Returns the source.y0 that would produce an ideal link from source to target.\n  function sourceTop(source, target) {\n    let y = target.y0 - ((target.targetLinks.length - 1) * py) / 2;\n    for (const { source: node, width } of target.targetLinks) {\n      if (node === source) break;\n      y += width + py;\n    }\n    for (const { target: node, width } of source.sourceLinks) {\n      if (node === target) break;\n      y -= width;\n    }\n    return y;\n  }\n\n  return sankey;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}