{"ast":null,"code":"import { __values } from \"tslib\";\nimport { registerShape } from '../base';\nimport { getStyle } from '../util/get-style';\nregisterShape('point', 'image', {\n  draw: function (cfg, container) {\n    var e_1, _a;\n    var size = getStyle(cfg, false, false, 'r').r;\n    var points = this.parsePoints(cfg.points);\n    var pointPosition = points[0];\n    if (cfg.isStack) {\n      pointPosition = points[1];\n    } else if (points.length > 1) {\n      var group = container.addGroup();\n      try {\n        for (var points_1 = __values(points), points_1_1 = points_1.next(); !points_1_1.done; points_1_1 = points_1.next()) {\n          var point = points_1_1.value;\n          group.addShape('image', {\n            attrs: {\n              x: point.x - size / 2,\n              y: point.y - size,\n              width: size,\n              height: size,\n              img: cfg.shape[1]\n            }\n          });\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (points_1_1 && !points_1_1.done && (_a = points_1.return)) _a.call(points_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      return group;\n    }\n    return container.addShape('image', {\n      attrs: {\n        x: pointPosition.x - size / 2,\n        y: pointPosition.y - size,\n        width: size,\n        height: size,\n        img: cfg.shape[1]\n      }\n    });\n  },\n  getMarker: function (markerCfg) {\n    var color = markerCfg.color;\n    return {\n      symbol: 'circle',\n      style: {\n        r: 4.5,\n        fill: color\n      }\n    };\n  }\n});","map":{"version":3,"mappings":";AAGA,SAASA,aAAa,QAAQ,SAAS;AACvC,SAASC,QAAQ,QAAQ,mBAAmB;AAE5CD,aAAa,CAAC,OAAO,EAAE,OAAO,EAAE;EAC9BE,IAAI,YAACC,GAAc,EAAEC,SAAiB;;IAC5B,IAAGC,IAAI,GAAKJ,QAAQ,CAACE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,EAArC;IACf,IAAMG,MAAM,GAAG,IAAI,CAACC,WAAW,CAACJ,GAAG,CAACG,MAAM,CAAC;IAC3C,IAAIE,aAAa,GAAGF,MAAM,CAAC,CAAC,CAAC;IAC7B,IAAIH,GAAG,CAACM,OAAO,EAAE;MACfD,aAAa,GAAGF,MAAM,CAAC,CAAC,CAAC;KAC1B,MAAM,IAAIA,MAAM,CAACI,MAAM,GAAG,CAAC,EAAE;MAC5B,IAAMC,KAAK,GAAGP,SAAS,CAACQ,QAAQ,EAAE;;QAClC,KAAoB,8BAAM,iFAAE;UAAvB,IAAMC,KAAK;UACdF,KAAK,CAACG,QAAQ,CAAC,OAAO,EAAE;YACtBC,KAAK,EAAE;cACLC,CAAC,EAAGH,KAAK,CAACG,CAAY,GAAGX,IAAI,GAAG,CAAC;cACjCY,CAAC,EAAGJ,KAAK,CAACI,CAAY,GAAGZ,IAAI;cAC7Ba,KAAK,EAAEb,IAAI;cACXc,MAAM,EAAEd,IAAI;cACZe,GAAG,EAAEjB,GAAG,CAACkB,KAAK,CAAC,CAAC;;WAEnB,CAAC;;;;;;;;;;;;;MAGJ,OAAOV,KAAK;;IAGd,OAAOP,SAAS,CAACU,QAAQ,CAAC,OAAO,EAAE;MACjCC,KAAK,EAAE;QACLC,CAAC,EAAGR,aAAa,CAACQ,CAAY,GAAGX,IAAI,GAAG,CAAC;QACzCY,CAAC,EAAGT,aAAa,CAACS,CAAY,GAAGZ,IAAI;QACrCa,KAAK,EAAEb,IAAI;QACXc,MAAM,EAAEd,IAAI;QACZe,GAAG,EAAEjB,GAAG,CAACkB,KAAK,CAAC,CAAC;;KAEnB,CAAC;EACJ,CAAC;EACDC,SAAS,YAACC,SAAyB;IACzB,SAAK,GAAKA,SAAS,MAAd;IACb,OAAO;MACLC,MAAM,EAAE,QAAQ;MAChBC,KAAK,EAAE;QACLC,CAAC,EAAE,GAAG;QACNC,IAAI,EAAEC;;KAET;EACH;CACD,CAAC","names":["registerShape","getStyle","draw","cfg","container","size","points","parsePoints","pointPosition","isStack","length","group","addGroup","point","addShape","attrs","x","y","width","height","img","shape","getMarker","markerCfg","symbol","style","r","fill","color"],"sources":["/home/iam/Documents/network/node_modules/@antv/g2/src/geometry/shape/point/image.ts"],"sourcesContent":["import { IGroup } from '../../../dependents';\nimport { ShapeInfo, ShapeMarkerCfg } from '../../../interface';\n\nimport { registerShape } from '../base';\nimport { getStyle } from '../util/get-style';\n\nregisterShape('point', 'image', {\n  draw(cfg: ShapeInfo, container: IGroup) {\n    const { r: size } = getStyle(cfg, false, false, 'r');\n    const points = this.parsePoints(cfg.points);\n    let pointPosition = points[0];\n    if (cfg.isStack) {\n      pointPosition = points[1];\n    } else if (points.length > 1) {\n      const group = container.addGroup();\n      for (const point of points) {\n        group.addShape('image', {\n          attrs: {\n            x: (point.x as number) - size / 2,\n            y: (point.y as number) - size,\n            width: size,\n            height: size,\n            img: cfg.shape[1],\n          },\n        });\n      }\n\n      return group;\n    }\n\n    return container.addShape('image', {\n      attrs: {\n        x: (pointPosition.x as number) - size / 2,\n        y: (pointPosition.y as number) - size,\n        width: size,\n        height: size,\n        img: cfg.shape[1],\n      },\n    });\n  },\n  getMarker(markerCfg: ShapeMarkerCfg) {\n    const { color } = markerCfg;\n    return {\n      symbol: 'circle',\n      style: {\n        r: 4.5,\n        fill: color,\n      },\n    };\n  },\n});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}