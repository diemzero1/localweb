{"ast":null,"code":"import { filter, isArray, isString } from '@antv/util';\n/** export 一些字段常量 */\n/** 在同层级，同一父节点下的节点索引顺序 */\nexport var NODE_INDEX_FIELD = 'nodeIndex';\n/** child 节点数量 */\nexport var CHILD_NODE_COUNT = 'childNodeCount';\n/** 节点的祖先节点 */\nexport var NODE_ANCESTORS_FIELD = 'nodeAncestor';\nvar INVALID_FIELD_ERR_MSG = 'Invalid field: it must be a string!';\nexport function getField(options, defaultField) {\n  var field = options.field,\n    fields = options.fields;\n  if (isString(field)) {\n    return field;\n  }\n  if (isArray(field)) {\n    console.warn(INVALID_FIELD_ERR_MSG);\n    return field[0];\n  }\n  console.warn(INVALID_FIELD_ERR_MSG + \" will try to get fields instead.\");\n  if (isString(fields)) {\n    return fields;\n  }\n  if (isArray(fields) && fields.length) {\n    return fields[0];\n  }\n  if (defaultField) {\n    return defaultField;\n  }\n  throw new TypeError(INVALID_FIELD_ERR_MSG);\n}\nexport function getAllNodes(root) {\n  var nodes = [];\n  if (root && root.each) {\n    var parent_1;\n    var index_1;\n    // d3-hierarchy: Invokes the specified function for node and each descendant in **breadth-first order**\n    root.each(function (node) {\n      var _a, _b;\n      if (node.parent !== parent_1) {\n        parent_1 = node.parent;\n        index_1 = 0;\n      } else {\n        index_1 += 1;\n      }\n      var ancestors = filter((((_a = node.ancestors) === null || _a === void 0 ? void 0 : _a.call(node)) || []).map(function (d) {\n        return nodes.find(function (n) {\n          return n.name === d.name;\n        }) || d;\n      }), function (_a) {\n        var depth = _a.depth;\n        return depth > 0 && depth < node.depth;\n      });\n      node[NODE_ANCESTORS_FIELD] = ancestors;\n      node[CHILD_NODE_COUNT] = ((_b = node.children) === null || _b === void 0 ? void 0 : _b.length) || 0;\n      node[NODE_INDEX_FIELD] = index_1;\n      nodes.push(node);\n    });\n  } else if (root && root.eachNode) {\n    // @antv/hierarchy\n    root.eachNode(function (node) {\n      nodes.push(node);\n    });\n  }\n  return nodes;\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAM,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,YAAY;AAEtD;AACA;AACA,OAAO,IAAMC,gBAAgB,GAAG,WAAW;AAC3C;AACA,OAAO,IAAMC,gBAAgB,GAAG,gBAAgB;AAChD;AACA,OAAO,IAAMC,oBAAoB,GAAG,cAAc;AAElD,IAAMC,qBAAqB,GAAG,qCAAqC;AAOnE,OAAM,SAAUC,QAAQ,CAACC,OAAgB,EAAEC,YAAqB;EACtD,SAAK,GAAaD,OAAO,MAApB;IAAEE,MAAM,GAAKF,OAAO,OAAZ;EACrB,IAAIN,QAAQ,CAACS,KAAK,CAAC,EAAE;IACnB,OAAOA,KAAK;;EAEd,IAAIV,OAAO,CAACU,KAAK,CAAC,EAAE;IAClBC,OAAO,CAACC,IAAI,CAACP,qBAAqB,CAAC;IACnC,OAAOK,KAAK,CAAC,CAAC,CAAC;;EAEjBC,OAAO,CAACC,IAAI,CAAIP,qBAAqB,qCAAkC,CAAC;EACxE,IAAIJ,QAAQ,CAACQ,MAAM,CAAC,EAAE;IACpB,OAAOA,MAAM;;EAEf,IAAIT,OAAO,CAACS,MAAM,CAAC,IAAIA,MAAM,CAACI,MAAM,EAAE;IACpC,OAAOJ,MAAM,CAAC,CAAC,CAAC;;EAElB,IAAID,YAAY,EAAE;IAChB,OAAOA,YAAY;;EAErB,MAAM,IAAIM,SAAS,CAACT,qBAAqB,CAAC;AAC5C;AAEA,OAAM,SAAUU,WAAW,CAACC,IAAS;EACnC,IAAMC,KAAK,GAAU,EAAE;EACvB,IAAID,IAAI,IAAIA,IAAI,CAACE,IAAI,EAAE;IACrB,IAAIC,QAAM;IACV,IAAIC,OAAK;IACT;IACAJ,IAAI,CAACE,IAAI,CAAC,UAACG,IAAS;;MAClB,IAAIA,IAAI,CAACC,MAAM,KAAKH,QAAM,EAAE;QAC1BA,QAAM,GAAGE,IAAI,CAACC,MAAM;QACpBF,OAAK,GAAG,CAAC;OACV,MAAM;QACLA,OAAK,IAAI,CAAC;;MAEZ,IAAMG,SAAS,GAAGxB,MAAM,CACtB,CAAC,WAAI,CAACwB,SAAS,+CAAdF,IAAI,MAAkB,EAAE,EAAEG,GAAG,CAAC,UAACC,CAAM;QAAK,YAAK,CAACC,IAAI,CAAC,UAACC,CAAC;UAAK,QAAC,CAACC,IAAI,KAAKH,CAAC,CAACG,IAAI;QAAjB,CAAiB,CAAC,IAAIH,CAAC;MAAzC,CAAyC,CAAC,EACrF,UAACI,EAAS;YAAPC,KAAK;QAAO,YAAK,GAAG,CAAC,IAAIA,KAAK,GAAGT,IAAI,CAACS,KAAK;MAA/B,CAA+B,CAC/C;MAEDT,IAAI,CAACjB,oBAAoB,CAAC,GAAGmB,SAAS;MACtCF,IAAI,CAAClB,gBAAgB,CAAC,GAAG,WAAI,CAAC4B,QAAQ,0CAAElB,MAAM,KAAI,CAAC;MACnDQ,IAAI,CAACnB,gBAAgB,CAAC,GAAGkB,OAAK;MAE9BH,KAAK,CAACe,IAAI,CAACX,IAAI,CAAC;IAClB,CAAC,CAAC;GACH,MAAM,IAAIL,IAAI,IAAIA,IAAI,CAACiB,QAAQ,EAAE;IAChC;IACAjB,IAAI,CAACiB,QAAQ,CAAC,UAACZ,IAAS;MACtBJ,KAAK,CAACe,IAAI,CAACX,IAAI,CAAC;IAClB,CAAC,CAAC;;EAEJ,OAAOJ,KAAK;AACd","names":["filter","isArray","isString","NODE_INDEX_FIELD","CHILD_NODE_COUNT","NODE_ANCESTORS_FIELD","INVALID_FIELD_ERR_MSG","getField","options","defaultField","fields","field","console","warn","length","TypeError","getAllNodes","root","nodes","each","parent_1","index_1","node","parent","ancestors","map","d","find","n","name","_a","depth","children","push","eachNode"],"sources":["/home/iam/Documents/network/node_modules/@antv/g2plot/src/utils/hierarchy/util.ts"],"sourcesContent":["import { filter, isArray, isString } from '@antv/util';\n\n/** export 一些字段常量 */\n/** 在同层级，同一父节点下的节点索引顺序 */\nexport const NODE_INDEX_FIELD = 'nodeIndex';\n/** child 节点数量 */\nexport const CHILD_NODE_COUNT = 'childNodeCount';\n/** 节点的祖先节点 */\nexport const NODE_ANCESTORS_FIELD = 'nodeAncestor';\n\nconst INVALID_FIELD_ERR_MSG = 'Invalid field: it must be a string!';\n\ninterface Options {\n  field?: string | string[];\n  fields?: string | string[];\n}\n\nexport function getField(options: Options, defaultField?: string): string {\n  const { field, fields } = options;\n  if (isString(field)) {\n    return field;\n  }\n  if (isArray(field)) {\n    console.warn(INVALID_FIELD_ERR_MSG);\n    return field[0];\n  }\n  console.warn(`${INVALID_FIELD_ERR_MSG} will try to get fields instead.`);\n  if (isString(fields)) {\n    return fields;\n  }\n  if (isArray(fields) && fields.length) {\n    return fields[0];\n  }\n  if (defaultField) {\n    return defaultField;\n  }\n  throw new TypeError(INVALID_FIELD_ERR_MSG);\n}\n\nexport function getAllNodes(root: any) {\n  const nodes: any[] = [];\n  if (root && root.each) {\n    let parent;\n    let index;\n    // d3-hierarchy: Invokes the specified function for node and each descendant in **breadth-first order**\n    root.each((node: any) => {\n      if (node.parent !== parent) {\n        parent = node.parent;\n        index = 0;\n      } else {\n        index += 1;\n      }\n      const ancestors = filter(\n        (node.ancestors?.() || []).map((d: any) => nodes.find((n) => n.name === d.name) || d),\n        ({ depth }) => depth > 0 && depth < node.depth\n      );\n\n      node[NODE_ANCESTORS_FIELD] = ancestors;\n      node[CHILD_NODE_COUNT] = node.children?.length || 0;\n      node[NODE_INDEX_FIELD] = index;\n\n      nodes.push(node);\n    });\n  } else if (root && root.eachNode) {\n    // @antv/hierarchy\n    root.eachNode((node: any) => {\n      nodes.push(node);\n    });\n  }\n  return nodes;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}