{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport { interaction, state, theme } from '../../adaptor/common';\nimport { edge, polygon } from '../../adaptor/geometries';\nimport { addViewAnimation, flow, getAllGeometriesRecursively, pick, transformDataToNodeLinkData } from '../../utils';\nimport { chordLayout } from '../../utils/transform/chord';\nimport { EDGE_COLOR_FIELD, NODE_COLOR_FIELD, X_FIELD, Y_FIELD } from './constant';\nfunction transformData(params) {\n  // 将弦图数据放到ext中，nodeGeometry edgeGeometry使用\n  var options = params.options;\n  var data = options.data,\n    sourceField = options.sourceField,\n    targetField = options.targetField,\n    weightField = options.weightField,\n    nodePaddingRatio = options.nodePaddingRatio,\n    nodeWidthRatio = options.nodeWidthRatio,\n    _a = options.rawFields,\n    rawFields = _a === void 0 ? [] : _a;\n  // 将数据转换为node link格式\n  var chordLayoutInputData = transformDataToNodeLinkData(data, sourceField, targetField, weightField);\n  var _b = chordLayout({\n      weight: true,\n      nodePaddingRatio: nodePaddingRatio,\n      nodeWidthRatio: nodeWidthRatio\n    }, chordLayoutInputData),\n    nodes = _b.nodes,\n    links = _b.links;\n  // 1. 生成绘制node使用数据\n  var nodesData = nodes.map(function (node) {\n    return __assign(__assign({}, pick(node, __spreadArrays(['id', 'x', 'y', 'name'], rawFields))), {\n      isNode: true\n    });\n  });\n  // 2. 生成 edge 使用数据 （同桑基图）\n  var edgesData = links.map(function (link) {\n    return __assign(__assign({\n      source: link.source.name,\n      target: link.target.name,\n      name: link.source.name || link.target.name\n    }, pick(link, __spreadArrays(['x', 'y', 'value'], rawFields))), {\n      isNode: false\n    });\n  });\n  return __assign(__assign({}, params), {\n    ext: __assign(__assign({}, params.ext), {\n      // 将chordData放到ext中，方便下面的geometry使用\n      chordData: {\n        nodesData: nodesData,\n        edgesData: edgesData\n      }\n    })\n  });\n}\n/**\n * scale配置\n * @param params 参数\n */\nfunction scale(params) {\n  var _a;\n  var chart = params.chart;\n  chart.scale((_a = {\n    x: {\n      sync: true,\n      nice: true\n    },\n    y: {\n      sync: true,\n      nice: true,\n      max: 1\n    }\n  }, _a[NODE_COLOR_FIELD] = {\n    sync: 'color'\n  }, _a[EDGE_COLOR_FIELD] = {\n    sync: 'color'\n  }, _a));\n  return params;\n}\n/**\n * axis配置\n * @param params 参数\n */\nfunction axis(params) {\n  var chart = params.chart;\n  chart.axis(false);\n  return params;\n}\n/**\n * legend配置\n * @param params 参数\n */\nfunction legend(params) {\n  var chart = params.chart;\n  chart.legend(false);\n  return params;\n}\n/**\n * tooltip配置\n * @param params 参数\n */\nfunction tooltip(params) {\n  var chart = params.chart,\n    options = params.options;\n  var tooltip = options.tooltip;\n  chart.tooltip(tooltip);\n  return params;\n}\n/**\n * coordinate配置\n * @param params 参数\n */\nfunction coordinate(params) {\n  var chart = params.chart;\n  chart.coordinate('polar').reflect('y');\n  return params;\n}\n/**\n * nodeGeometry配置\n * @param params 参数\n */\nfunction nodeGeometry(params) {\n  // node view\n  var chart = params.chart,\n    options = params.options;\n  var nodesData = params.ext.chordData.nodesData;\n  var nodeStyle = options.nodeStyle,\n    label = options.label,\n    tooltip = options.tooltip;\n  var nodeView = chart.createView();\n  nodeView.data(nodesData);\n  // 面\n  polygon({\n    chart: nodeView,\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: NODE_COLOR_FIELD,\n      polygon: {\n        style: nodeStyle\n      },\n      label: label,\n      tooltip: tooltip\n    }\n  });\n  return params;\n}\n/**\n * edgeGeometry配置\n * @param params 参数\n */\nfunction edgeGeometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var edgesData = params.ext.chordData.edgesData;\n  var edgeStyle = options.edgeStyle,\n    tooltip = options.tooltip;\n  var edgeView = chart.createView();\n  edgeView.data(edgesData);\n  // edge\n  var edgeOptions = {\n    xField: X_FIELD,\n    yField: Y_FIELD,\n    seriesField: EDGE_COLOR_FIELD,\n    edge: {\n      style: edgeStyle,\n      shape: 'arc'\n    },\n    tooltip: tooltip\n  };\n  edge({\n    chart: edgeView,\n    options: edgeOptions\n  });\n  return params;\n}\nfunction animation(params) {\n  var chart = params.chart,\n    options = params.options;\n  var animation = options.animation;\n  addViewAnimation(chart, animation, getAllGeometriesRecursively(chart));\n  return params;\n}\n/**\n * 弦图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(theme, transformData, coordinate, scale, axis, legend, tooltip, edgeGeometry, nodeGeometry, interaction, state, animation)(params);\n}","map":{"version":3,"mappings":"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","names":["interaction","state","theme","edge","polygon","addViewAnimation","flow","getAllGeometriesRecursively","pick","transformDataToNodeLinkData","chordLayout","EDGE_COLOR_FIELD","NODE_COLOR_FIELD","X_FIELD","Y_FIELD","transformData","params","options","sourceField","targetField","weightField","nodePaddingRatio","nodeWidthRatio","_a","rawFields","chordLayoutInputData","data","weight","nodes","links","nodesData","map","node","isNode","edgesData","link","source","name","target","ext","chordData","scale","chart","x","sync","nice","y","max","axis","legend","tooltip","coordinate","reflect","nodeGeometry","label","nodeView","createView","xField","yField","seriesField","style","nodeStyle","edgeGeometry","edgeView","edgeOptions","edgeStyle","shape","animation","adaptor"],"sources":["/home/iam/Documents/network/node_modules/@antv/g2plot/src/plots/chord/adaptor.ts"],"sourcesContent":["import { interaction, state, theme } from '../../adaptor/common';\nimport { edge, polygon } from '../../adaptor/geometries';\nimport { Params } from '../../core/adaptor';\nimport { addViewAnimation, flow, getAllGeometriesRecursively, pick, transformDataToNodeLinkData } from '../../utils';\nimport { chordLayout } from '../../utils/transform/chord';\nimport { EDGE_COLOR_FIELD, NODE_COLOR_FIELD, X_FIELD, Y_FIELD } from './constant';\nimport { ChordOptions } from './types';\n\nfunction transformData(params: Params<ChordOptions>): Params<ChordOptions> {\n  // 将弦图数据放到ext中，nodeGeometry edgeGeometry使用\n\n  const { options } = params;\n  const { data, sourceField, targetField, weightField, nodePaddingRatio, nodeWidthRatio, rawFields = [] } = options;\n\n  // 将数据转换为node link格式\n  const chordLayoutInputData = transformDataToNodeLinkData(data, sourceField, targetField, weightField);\n\n  const { nodes, links } = chordLayout({ weight: true, nodePaddingRatio, nodeWidthRatio }, chordLayoutInputData);\n\n  // 1. 生成绘制node使用数据\n  const nodesData = nodes.map((node) => {\n    return {\n      ...pick(node, ['id', 'x', 'y', 'name', ...rawFields]),\n      isNode: true,\n    };\n  });\n\n  // 2. 生成 edge 使用数据 （同桑基图）\n  const edgesData = links.map((link) => {\n    return {\n      source: link.source.name,\n      target: link.target.name,\n      name: link.source.name || link.target.name,\n      ...pick(link, ['x', 'y', 'value', ...rawFields]),\n      isNode: false,\n    };\n  });\n\n  return {\n    ...params,\n    ext: {\n      ...params.ext,\n      // 将chordData放到ext中，方便下面的geometry使用\n      chordData: { nodesData, edgesData },\n    },\n  };\n}\n\n/**\n * scale配置\n * @param params 参数\n */\nfunction scale(params: Params<ChordOptions>): Params<ChordOptions> {\n  const { chart } = params;\n  chart.scale({\n    x: { sync: true, nice: true },\n    y: { sync: true, nice: true, max: 1 },\n    [NODE_COLOR_FIELD]: { sync: 'color' },\n    [EDGE_COLOR_FIELD]: { sync: 'color' },\n  });\n  return params;\n}\n\n/**\n * axis配置\n * @param params 参数\n */\nfunction axis(params: Params<ChordOptions>): Params<ChordOptions> {\n  const { chart } = params;\n  chart.axis(false);\n  return params;\n}\n\n/**\n * legend配置\n * @param params 参数\n */\nfunction legend(params: Params<ChordOptions>): Params<ChordOptions> {\n  const { chart } = params;\n  chart.legend(false);\n  return params;\n}\n\n/**\n * tooltip配置\n * @param params 参数\n */\nfunction tooltip(params: Params<ChordOptions>): Params<ChordOptions> {\n  const { chart, options } = params;\n  const { tooltip } = options;\n\n  chart.tooltip(tooltip);\n  return params;\n}\n\n/**\n * coordinate配置\n * @param params 参数\n */\nfunction coordinate(params: Params<ChordOptions>): Params<ChordOptions> {\n  const { chart } = params;\n  chart.coordinate('polar').reflect('y');\n  return params;\n}\n\n/**\n * nodeGeometry配置\n * @param params 参数\n */\nfunction nodeGeometry(params: Params<ChordOptions>): Params<ChordOptions> {\n  // node view\n  const { chart, options } = params;\n  const { nodesData } = params.ext.chordData;\n  const { nodeStyle, label, tooltip } = options;\n\n  const nodeView = chart.createView();\n  nodeView.data(nodesData);\n\n  // 面\n  polygon({\n    chart: nodeView,\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: NODE_COLOR_FIELD,\n      polygon: {\n        style: nodeStyle,\n      },\n      label,\n      tooltip,\n    },\n  });\n  return params;\n}\n\n/**\n * edgeGeometry配置\n * @param params 参数\n */\nfunction edgeGeometry(params: Params<ChordOptions>): Params<ChordOptions> {\n  const { chart, options } = params;\n  const { edgesData } = params.ext.chordData;\n  const { edgeStyle, tooltip } = options;\n\n  const edgeView = chart.createView();\n  edgeView.data(edgesData);\n\n  // edge\n  const edgeOptions = {\n    xField: X_FIELD,\n    yField: Y_FIELD,\n    seriesField: EDGE_COLOR_FIELD,\n    edge: {\n      style: edgeStyle,\n      shape: 'arc',\n    },\n    tooltip,\n  };\n  edge({\n    chart: edgeView,\n    options: edgeOptions,\n  });\n  return params;\n}\n\nfunction animation(params: Params<ChordOptions>): Params<ChordOptions> {\n  const { chart, options } = params;\n  const { animation } = options;\n\n  addViewAnimation(chart, animation, getAllGeometriesRecursively(chart));\n\n  return params;\n}\n\n/**\n * 弦图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<ChordOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(\n    theme,\n    transformData,\n    coordinate,\n    scale,\n    axis,\n    legend,\n    tooltip,\n    edgeGeometry,\n    nodeGeometry,\n    interaction,\n    state,\n    animation\n  )(params);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}