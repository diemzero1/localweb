{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport { difference, each, isNil, keys, mix, pick } from '@antv/util';\nimport { propagationDelegate } from '../util/event';\nimport { applyMatrix2BBox, getMatrixByTranslate } from '../util/matrix';\nimport { getBBoxWithClip, updateClip } from '../util/util';\nimport Component from './component';\nvar STATUS_UPDATE = 'update_status';\nvar COPY_PROPERTIES = ['visible', 'tip', 'delegateObject']; // 更新对象时需要复制的属性\nvar COPY_PROPERTIES_EXCLUDES = ['container', 'group', 'shapesMap', 'isRegister', 'isUpdating', 'destroyed']; // 更新子组件时排除的属性\nvar GroupComponent = /** @class */function (_super) {\n  __extends(GroupComponent, _super);\n  function GroupComponent() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  GroupComponent.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    return __assign(__assign({}, cfg), {\n      container: null,\n      /**\n       * @private\n       * 缓存图形的 Map\n       */\n      shapesMap: {},\n      group: null,\n      capture: true,\n      /**\n       * @private 组件或者图形是否允许注册\n       * @type {false}\n       */\n      isRegister: false,\n      /**\n       * @private 是否正在更新\n       * @type {false}\n       */\n      isUpdating: false,\n      /**\n       * @private\n       * 是否初始状态，一旦 render，update 后，这个状态就变成 false, clear 后恢复\n       */\n      isInit: true\n    });\n  };\n  GroupComponent.prototype.remove = function () {\n    this.clear();\n    var group = this.get('group');\n    group.remove();\n  };\n  GroupComponent.prototype.clear = function () {\n    var group = this.get('group');\n    group.clear();\n    this.set('shapesMap', {});\n    this.clearOffScreenCache();\n    this.set('isInit', true);\n  };\n  GroupComponent.prototype.getChildComponentById = function (id) {\n    var group = this.getElementById(id);\n    var inst = group && group.get('component');\n    return inst;\n  };\n  GroupComponent.prototype.getElementById = function (id) {\n    return this.get('shapesMap')[id];\n  };\n  GroupComponent.prototype.getElementByLocalId = function (localId) {\n    var id = this.getElementId(localId);\n    return this.getElementById(id);\n  };\n  GroupComponent.prototype.getElementsByName = function (name) {\n    var rst = [];\n    each(this.get('shapesMap'), function (elem) {\n      if (elem.get('name') === name) {\n        rst.push(elem);\n      }\n    });\n    return rst;\n  };\n  GroupComponent.prototype.getContainer = function () {\n    return this.get('container');\n  };\n  GroupComponent.prototype.updateInner = function (cfg) {\n    // this.updateInner();\n    // this.set('isUpdating', false);\n    this.offScreenRender();\n    if (this.get('updateAutoRender')) {\n      this.render();\n    }\n  };\n  GroupComponent.prototype.render = function () {\n    var offScreenGroup = this.get('offScreenGroup');\n    if (!offScreenGroup) {\n      offScreenGroup = this.offScreenRender();\n    }\n    var group = this.get('group');\n    this.updateElements(offScreenGroup, group);\n    this.deleteElements();\n    this.applyOffset();\n    if (!this.get('eventInitted')) {\n      this.initEvent();\n      this.set('eventInitted', true);\n    }\n    this.set('isInit', false);\n  };\n  GroupComponent.prototype.show = function () {\n    var group = this.get('group');\n    group.show();\n    this.set('visible', true);\n  };\n  GroupComponent.prototype.hide = function () {\n    var group = this.get('group');\n    group.hide();\n    this.set('visible', false);\n  };\n  GroupComponent.prototype.setCapture = function (capture) {\n    var group = this.get('group');\n    group.set('capture', capture);\n    this.set('capture', capture);\n  };\n  GroupComponent.prototype.destroy = function () {\n    this.removeEvent();\n    this.remove();\n    _super.prototype.destroy.call(this);\n  };\n  GroupComponent.prototype.getBBox = function () {\n    return this.get('group').getCanvasBBox();\n  };\n  GroupComponent.prototype.getLayoutBBox = function () {\n    var group = this.get('group');\n    // 防止被 clear 了，offScreenBBox 不存在\n    var bbox = this.getInnerLayoutBBox();\n    var matrix = group.getTotalMatrix();\n    if (matrix) {\n      bbox = applyMatrix2BBox(matrix, bbox);\n    }\n    return bbox; // 默认返回 getBBox，不同的组件内部单独实现\n  };\n  // 复写 on, off, emit 透传到 group\n  GroupComponent.prototype.on = function (evt, callback, once) {\n    var group = this.get('group');\n    group.on(evt, callback, once);\n    return this;\n  };\n  GroupComponent.prototype.off = function (evt, callback) {\n    var group = this.get('group');\n    group && group.off(evt, callback);\n    return this;\n  };\n  GroupComponent.prototype.emit = function (eventName, eventObject) {\n    var group = this.get('group');\n    group.emit(eventName, eventObject);\n  };\n  GroupComponent.prototype.init = function () {\n    _super.prototype.init.call(this);\n    if (!this.get('group')) {\n      this.initGroup();\n    }\n    this.offScreenRender(); // 绘制离屏 group\n  };\n  // 获取组件内部布局占的包围盒\n  GroupComponent.prototype.getInnerLayoutBBox = function () {\n    return this.get('offScreenBBox') || this.get('group').getBBox();\n  };\n  // 抛出委托对象\n  GroupComponent.prototype.delegateEmit = function (eventName, eventObject) {\n    var group = this.get('group');\n    eventObject.target = group;\n    group.emit(eventName, eventObject);\n    propagationDelegate(group, eventName, eventObject);\n  };\n  // 创建离屏的 group ,不添加在 canvas 中\n  GroupComponent.prototype.createOffScreenGroup = function () {\n    var group = this.get('group');\n    var GroupClass = group.getGroupBase(); // 获取分组的构造函数\n    var newGroup = new GroupClass({\n      delegateObject: this.getDelegateObject()\n    });\n    return newGroup;\n  };\n  // 应用 offset\n  GroupComponent.prototype.applyOffset = function () {\n    var offsetX = this.get('offsetX');\n    var offsetY = this.get('offsetY');\n    this.moveElementTo(this.get('group'), {\n      x: offsetX,\n      y: offsetY\n    });\n  };\n  GroupComponent.prototype.initGroup = function () {\n    var container = this.get('container');\n    this.set('group', container.addGroup({\n      id: this.get('id'),\n      name: this.get('name'),\n      capture: this.get('capture'),\n      visible: this.get('visible'),\n      isComponent: true,\n      component: this,\n      delegateObject: this.getDelegateObject()\n    }));\n  };\n  // 离屏渲染\n  GroupComponent.prototype.offScreenRender = function () {\n    this.clearOffScreenCache();\n    var offScreenGroup = this.createOffScreenGroup();\n    this.renderInner(offScreenGroup);\n    this.set('offScreenGroup', offScreenGroup);\n    // 包含包围盒的 bbox\n    this.set('offScreenBBox', getBBoxWithClip(offScreenGroup));\n    return offScreenGroup;\n  };\n  /**\n   * @protected\n   * 在组件上添加分组，主要解决 isReigeter 的问题\n   * @param {IGroup} parent 父元素\n   * @param {object} cfg    分组的配置项\n   */\n  GroupComponent.prototype.addGroup = function (parent, cfg) {\n    this.appendDelegateObject(parent, cfg);\n    var group = parent.addGroup(cfg);\n    if (this.get('isRegister')) {\n      this.registerElement(group);\n    }\n    return group;\n  };\n  /**\n   * @protected\n   * 在组件上添加图形，主要解决 isReigeter 的问题\n   * @param {IGroup} parent 父元素\n   * @param {object} cfg    分组的配置项\n   */\n  GroupComponent.prototype.addShape = function (parent, cfg) {\n    this.appendDelegateObject(parent, cfg);\n    var shape = parent.addShape(cfg);\n    if (this.get('isRegister')) {\n      this.registerElement(shape);\n    }\n    return shape;\n  };\n  /**\n   * 在组件上添加子组件\n   *\n   * @param parent 父元素\n   * @param cfg 子组件配置项\n   */\n  GroupComponent.prototype.addComponent = function (parent, cfg) {\n    var id = cfg.id,\n      Ctor = cfg.component,\n      restCfg = __rest(cfg, [\"id\", \"component\"]);\n    // @ts-ignore\n    var inst = new Ctor(__assign(__assign({}, restCfg), {\n      id: id,\n      container: parent,\n      updateAutoRender: this.get('updateAutoRender')\n    }));\n    inst.init();\n    inst.render();\n    if (this.get('isRegister')) {\n      this.registerElement(inst.get('group'));\n    }\n    return inst;\n  };\n  GroupComponent.prototype.initEvent = function () {};\n  GroupComponent.prototype.removeEvent = function () {\n    var group = this.get('group');\n    group.off();\n  };\n  GroupComponent.prototype.getElementId = function (localId) {\n    var id = this.get('id'); // 组件的 Id\n    var name = this.get('name'); // 组件的名称\n    return id + \"-\" + name + \"-\" + localId;\n  };\n  GroupComponent.prototype.registerElement = function (element) {\n    var id = element.get('id');\n    this.get('shapesMap')[id] = element;\n  };\n  GroupComponent.prototype.unregisterElement = function (element) {\n    var id = element.get('id');\n    delete this.get('shapesMap')[id];\n  };\n  // 移动元素\n  GroupComponent.prototype.moveElementTo = function (element, point) {\n    var matrix = getMatrixByTranslate(point);\n    element.attr('matrix', matrix);\n  };\n  /**\n   * 图形元素新出现时的动画，默认图形从透明度 0 到当前透明度\n   * @protected\n   * @param {string} elmentName 图形元素名称\n   * @param {IElement} newElement  新的图形元素\n   * @param {object} animateCfg 动画的配置项\n   */\n  GroupComponent.prototype.addAnimation = function (elmentName, newElement, animateCfg) {\n    // 缓存透明度\n    var originOpacity = newElement.attr('opacity');\n    if (isNil(originOpacity)) {\n      originOpacity = 1;\n    }\n    newElement.attr('opacity', 0);\n    newElement.animate({\n      opacity: originOpacity\n    }, animateCfg);\n  };\n  /**\n   * 图形元素新出现时的动画，默认图形从透明度 0 到当前透明度\n   * @protected\n   * @param {string} elmentName 图形元素名称\n   * @param {IElement} originElement 要删除的图形元素\n   * @param {object} animateCfg 动画的配置项\n   */\n  GroupComponent.prototype.removeAnimation = function (elementName, originElement, animateCfg) {\n    originElement.animate({\n      opacity: 0\n    }, animateCfg);\n  };\n  /**\n   * 图形元素的更新动画\n   * @param {string} elmentName 图形元素名称\n   * @param {IElement} originElement 现有的图形元素\n   * @param {object} newAttrs  新的图形元素\n   * @param {object} animateCfg 动画的配置项\n   */\n  GroupComponent.prototype.updateAnimation = function (elementName, originElement, newAttrs, animateCfg) {\n    originElement.animate(newAttrs, animateCfg);\n  };\n  // 更新组件的图形\n  GroupComponent.prototype.updateElements = function (newGroup, originGroup) {\n    var _this = this;\n    var animate = this.get('animate');\n    var animateOption = this.get('animateOption');\n    var children = newGroup.getChildren().slice(0); // 创建一个新数组，防止添加到 originGroup 时， children 变动\n    var preElement; // 前面已经匹配到的图形元素，用于\n    each(children, function (element) {\n      var elementId = element.get('id');\n      var originElement = _this.getElementById(elementId);\n      var elementName = element.get('name');\n      if (originElement) {\n        if (element.get('isComponent')) {\n          // 嵌套子组件更新\n          var childComponent = element.get('component');\n          var origChildComponent = originElement.get('component');\n          var newCfg = pick(childComponent.cfg, difference(keys(childComponent.cfg), COPY_PROPERTIES_EXCLUDES));\n          origChildComponent.update(newCfg);\n          originElement.set(STATUS_UPDATE, 'update');\n        } else {\n          var replaceAttrs = _this.getReplaceAttrs(originElement, element);\n          // 更新\n          if (animate && animateOption.update) {\n            // 没有动画\n            _this.updateAnimation(elementName, originElement, replaceAttrs, animateOption.update);\n          } else {\n            // originElement.attrs = replaceAttrs; // 直接替换\n            originElement.attr(replaceAttrs);\n          }\n          // 如果是分组，则继续执行\n          if (element.isGroup()) {\n            _this.updateElements(element, originElement);\n          }\n          // 复制属性\n          each(COPY_PROPERTIES, function (name) {\n            originElement.set(name, element.get(name));\n          });\n          updateClip(originElement, element);\n          preElement = originElement;\n          // 执行完更新后设置状态位为更新\n          originElement.set(STATUS_UPDATE, 'update');\n        }\n      } else {\n        // 没有对应的图形，则插入当前图形\n        originGroup.add(element); // 应该在 group 加个 insertAt 的方法\n        var siblings = originGroup.getChildren(); // 兄弟节点\n        siblings.splice(siblings.length - 1, 1); // 先从数组中移除，然后放到合适的位置\n        if (preElement) {\n          // 前面已经有更新的图形或者插入的图形，则在这个图形后面插入\n          var index = siblings.indexOf(preElement);\n          siblings.splice(index + 1, 0, element); // 在已经更新的图形元素后面插入\n        } else {\n          siblings.unshift(element);\n        }\n        _this.registerElement(element); // 注册节点\n        element.set(STATUS_UPDATE, 'add'); // 执行完更新后设置状态位为添加\n        if (element.get('isComponent')) {\n          // 直接新增子组件container属性，实例不变\n          var childComponent = element.get('component');\n          childComponent.set('container', originGroup);\n        } else if (element.isGroup()) {\n          // 如果元素是新增加的元素，则遍历注册所有的子节点\n          _this.registerNewGroup(element);\n        }\n        preElement = element;\n        if (animate) {\n          var animateCfg = _this.get('isInit') ? animateOption.appear : animateOption.enter;\n          if (animateCfg) {\n            _this.addAnimation(elementName, element, animateCfg);\n          }\n        }\n      }\n    });\n  };\n  GroupComponent.prototype.clearUpdateStatus = function (group) {\n    var children = group.getChildren();\n    each(children, function (el) {\n      el.set(STATUS_UPDATE, null); // 清理掉更新状态\n    });\n  };\n  // 清理离屏缓存\n  GroupComponent.prototype.clearOffScreenCache = function () {\n    var offScreenGroup = this.get('offScreenGroup');\n    if (offScreenGroup) {\n      // 销毁原先的离线 Group\n      offScreenGroup.destroy();\n    }\n    this.set('offScreenGroup', null);\n    this.set('offScreenBBox', null);\n  };\n  // private updateInner() {\n  //   const group = this.get('group');\n  //   const newGroup = this.createOffScreenGroup();\n  //   this.renderInner(newGroup);\n  //   this.applyOffset();\n  //   this.updateElements(newGroup, group);\n  //   this.deleteElements();\n  //   newGroup.destroy(); // 销毁虚拟分组\n  // }\n  // 获取发生委托时的对象，在事件中抛出\n  GroupComponent.prototype.getDelegateObject = function () {\n    var _a;\n    var name = this.get('name');\n    var delegateObject = (_a = {}, _a[name] = this, _a.component = this, _a);\n    return delegateObject;\n  };\n  // 附加委托信息，用于事件\n  GroupComponent.prototype.appendDelegateObject = function (parent, cfg) {\n    var parentObject = parent.get('delegateObject');\n    if (!cfg.delegateObject) {\n      cfg.delegateObject = {};\n    }\n    mix(cfg.delegateObject, parentObject); // 将父元素上的委托信息复制到自身\n  };\n  // 获取需要替换的属性，如果原先图形元素存在，而新图形不存在，则设置 undefined\n  GroupComponent.prototype.getReplaceAttrs = function (originElement, newElement) {\n    var originAttrs = originElement.attr();\n    var newAttrs = newElement.attr();\n    each(originAttrs, function (v, k) {\n      if (newAttrs[k] === undefined) {\n        newAttrs[k] = undefined;\n      }\n    });\n    return newAttrs;\n  };\n  GroupComponent.prototype.registerNewGroup = function (group) {\n    var _this = this;\n    var children = group.getChildren();\n    each(children, function (element) {\n      _this.registerElement(element); // 注册节点\n      element.set(STATUS_UPDATE, 'add'); // 执行完更新后设置状态位为添加\n      if (element.isGroup()) {\n        _this.registerNewGroup(element);\n      }\n    });\n  };\n  // 移除多余的元素\n  GroupComponent.prototype.deleteElements = function () {\n    var _this = this;\n    var shapesMap = this.get('shapesMap');\n    var deleteArray = [];\n    // 遍历获取需要删除的图形元素\n    each(shapesMap, function (element, id) {\n      if (!element.get(STATUS_UPDATE) || element.destroyed) {\n        deleteArray.push([id, element]);\n      } else {\n        element.set(STATUS_UPDATE, null); // 清理掉更新状态\n      }\n    });\n\n    var animate = this.get('animate');\n    var animateOption = this.get('animateOption');\n    // 删除图形元素\n    each(deleteArray, function (item) {\n      var id = item[0],\n        element = item[1];\n      if (!element.destroyed) {\n        var elementName = element.get('name');\n        if (animate && animateOption.leave) {\n          // 需要动画结束时移除图形\n          var callbackAnimCfg = mix({\n            callback: function callback() {\n              _this.removeElement(element);\n            }\n          }, animateOption.leave);\n          _this.removeAnimation(elementName, element, callbackAnimCfg);\n        } else {\n          _this.removeElement(element);\n        }\n      }\n      delete shapesMap[id]; // 从缓存中移除\n    });\n  };\n\n  GroupComponent.prototype.removeElement = function (element) {\n    if (element.get('isGroup')) {\n      var component = element.get('component');\n      if (component) {\n        component.destroy();\n      }\n    }\n    element.remove();\n  };\n  return GroupComponent;\n}(Component);\nexport default GroupComponent;","map":{"version":3,"mappings":"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","names":["difference","each","isNil","keys","mix","pick","propagationDelegate","applyMatrix2BBox","getMatrixByTranslate","getBBoxWithClip","updateClip","Component","STATUS_UPDATE","COPY_PROPERTIES","COPY_PROPERTIES_EXCLUDES","__extends","GroupComponent","cfg","_super","getDefaultCfg","container","shapesMap","group","capture","isRegister","isUpdating","isInit","clear","get","remove","set","clearOffScreenCache","id","getElementById","inst","localId","getElementId","name","rst","elem","push","offScreenRender","render","offScreenGroup","updateElements","deleteElements","applyOffset","initEvent","show","hide","removeEvent","destroy","getCanvasBBox","bbox","getInnerLayoutBBox","matrix","getTotalMatrix","evt","callback","once","on","off","eventName","eventObject","emit","init","initGroup","getBBox","target","GroupClass","getGroupBase","newGroup","delegateObject","getDelegateObject","offsetX","offsetY","moveElementTo","x","y","addGroup","visible","isComponent","component","createOffScreenGroup","renderInner","parent","appendDelegateObject","registerElement","shape","addShape","Ctor","restCfg","updateAutoRender","element","point","attr","elmentName","newElement","animateCfg","originOpacity","animate","opacity","elementName","originElement","newAttrs","originGroup","animateOption","children","getChildren","slice","preElement","elementId","_this","childComponent","origChildComponent","newCfg","update","replaceAttrs","getReplaceAttrs","updateAnimation","isGroup","add","siblings","splice","length","index","indexOf","unshift","registerNewGroup","appear","enter","addAnimation","el","_a","parentObject","originAttrs","v","k","undefined","deleteArray","destroyed","item","leave","callbackAnimCfg","removeElement","removeAnimation"],"sources":["/home/iam/Documents/LocalWeb-master/node_modules/@antv/component/src/abstract/group-component.ts"],"sourcesContent":["/**\n * @fileoverview 使用 G.Group 的组件\n * @author dxq613@gmail.com\n */\nimport { IElement, IGroup, IShape } from '@antv/g-base';\nimport { difference, each, isNil, keys, mix, pick } from '@antv/util';\nimport { BBox, GroupComponentCfg, LooseObject, Point } from '../types';\nimport { propagationDelegate } from '../util/event';\nimport { applyMatrix2BBox, getMatrixByTranslate } from '../util/matrix';\nimport { getBBoxWithClip, updateClip } from '../util/util';\nimport Component from './component';\ntype Callback = (evt: object) => void;\n\nconst STATUS_UPDATE = 'update_status';\nconst COPY_PROPERTIES = ['visible', 'tip', 'delegateObject']; // 更新对象时需要复制的属性\nconst COPY_PROPERTIES_EXCLUDES = ['container', 'group', 'shapesMap', 'isRegister', 'isUpdating', 'destroyed']; // 更新子组件时排除的属性\n\nexport type GroupComponentCtor<\n  C extends GroupComponentCfg = GroupComponentCfg,\n  T extends GroupComponent = GroupComponent\n> = new (cfg: C) => T;\n\nabstract class GroupComponent<T extends GroupComponentCfg = GroupComponentCfg> extends Component<T> {\n  public getDefaultCfg() {\n    const cfg = super.getDefaultCfg();\n    return {\n      ...cfg,\n      container: null,\n      /**\n       * @private\n       * 缓存图形的 Map\n       */\n      shapesMap: {},\n      group: null,\n      capture: true,\n      /**\n       * @private 组件或者图形是否允许注册\n       * @type {false}\n       */\n      isRegister: false,\n      /**\n       * @private 是否正在更新\n       * @type {false}\n       */\n      isUpdating: false,\n      /**\n       * @private\n       * 是否初始状态，一旦 render，update 后，这个状态就变成 false, clear 后恢复\n       */\n      isInit: true,\n    };\n  }\n\n  public remove() {\n    this.clear();\n    const group = this.get('group');\n    group.remove();\n  }\n\n  public clear() {\n    const group = this.get('group');\n    group.clear();\n    this.set('shapesMap', {});\n    this.clearOffScreenCache();\n    this.set('isInit', true);\n  }\n\n  public getChildComponentById(id: string) {\n    const group = this.getElementById(id);\n    const inst = group && group.get('component');\n    return inst;\n  }\n\n  public getElementById(id: string) {\n    return this.get('shapesMap')[id];\n  }\n\n  public getElementByLocalId(localId) {\n    const id = this.getElementId(localId);\n    return this.getElementById(id);\n  }\n\n  public getElementsByName(name: string) {\n    const rst = [];\n    each(this.get('shapesMap'), (elem) => {\n      if (elem.get('name') === name) {\n        rst.push(elem);\n      }\n    });\n\n    return rst;\n  }\n\n  public getContainer(): IGroup {\n    return this.get('container') as IGroup;\n  }\n\n  public updateInner(cfg: Partial<T>) {\n    // this.updateInner();\n    // this.set('isUpdating', false);\n    this.offScreenRender();\n    if (this.get('updateAutoRender')) {\n      this.render();\n    }\n  }\n\n  public render() {\n    let offScreenGroup = this.get('offScreenGroup');\n    if (!offScreenGroup) {\n      offScreenGroup = this.offScreenRender();\n    }\n    const group = this.get('group');\n    this.updateElements(offScreenGroup, group);\n    this.deleteElements();\n    this.applyOffset();\n    if (!this.get('eventInitted')) {\n      this.initEvent();\n      this.set('eventInitted', true);\n    }\n    this.set('isInit', false);\n  }\n\n  public show() {\n    const group = this.get('group');\n    group.show();\n    this.set('visible', true);\n  }\n\n  public hide() {\n    const group = this.get('group');\n    group.hide();\n    this.set('visible', false);\n  }\n\n  public setCapture(capture) {\n    const group = this.get('group');\n    group.set('capture', capture);\n    this.set('capture', capture);\n  }\n\n  public destroy() {\n    this.removeEvent();\n    this.remove();\n    super.destroy();\n  }\n\n  public getBBox(): BBox {\n    return this.get('group').getCanvasBBox();\n  }\n\n  public getLayoutBBox(): BBox {\n    const group = this.get('group');\n    // 防止被 clear 了，offScreenBBox 不存在\n    let bbox = this.getInnerLayoutBBox();\n    const matrix = group.getTotalMatrix();\n    if (matrix) {\n      bbox = applyMatrix2BBox(matrix, bbox);\n    }\n    return bbox; // 默认返回 getBBox，不同的组件内部单独实现\n  }\n\n  // 复写 on, off, emit 透传到 group\n  public on(evt: string, callback: Callback, once?: boolean): this {\n    const group = this.get('group');\n    group.on(evt, callback, once);\n    return this;\n  }\n\n  public off(evt?: string, callback?: Callback): this {\n    const group = this.get('group');\n    group && group.off(evt, callback);\n    return this;\n  }\n\n  public emit(eventName: string, eventObject: LooseObject) {\n    const group = this.get('group');\n    group.emit(eventName, eventObject);\n  }\n\n  public init() {\n    super.init();\n    if (!this.get('group')) {\n      this.initGroup();\n    }\n    this.offScreenRender(); // 绘制离屏 group\n  }\n\n  // 获取组件内部布局占的包围盒\n  protected getInnerLayoutBBox() {\n    return this.get('offScreenBBox') || this.get('group').getBBox();\n  }\n\n  // 抛出委托对象\n  protected delegateEmit(eventName: string, eventObject: LooseObject) {\n    const group = this.get('group');\n    eventObject.target = group;\n    group.emit(eventName, eventObject);\n    propagationDelegate(group, eventName, eventObject);\n  }\n  // 创建离屏的 group ,不添加在 canvas 中\n  protected createOffScreenGroup() {\n    const group = this.get('group');\n    const GroupClass = group.getGroupBase(); // 获取分组的构造函数\n    const newGroup = new GroupClass({\n      delegateObject: this.getDelegateObject(), // 生成委托事件触发时附加的对象\n    });\n    return newGroup;\n  }\n\n  // 应用 offset\n  protected applyOffset() {\n    const offsetX = this.get('offsetX');\n    const offsetY = this.get('offsetY');\n    this.moveElementTo(this.get('group'), {\n      x: offsetX,\n      y: offsetY,\n    });\n  }\n\n  protected initGroup() {\n    const container = this.get('container');\n    this.set(\n      'group',\n      container.addGroup({\n        id: this.get('id'),\n        name: this.get('name'),\n        capture: this.get('capture'),\n        visible: this.get('visible'),\n        isComponent: true,\n        component: this,\n        delegateObject: this.getDelegateObject(),\n      })\n    );\n  }\n\n  // 离屏渲染\n  protected offScreenRender() {\n    this.clearOffScreenCache();\n    const offScreenGroup = this.createOffScreenGroup();\n\n    this.renderInner(offScreenGroup);\n    this.set('offScreenGroup', offScreenGroup);\n    // 包含包围盒的 bbox\n    this.set('offScreenBBox', getBBoxWithClip(offScreenGroup));\n    return offScreenGroup;\n  }\n\n  /**\n   * @protected\n   * 在组件上添加分组，主要解决 isReigeter 的问题\n   * @param {IGroup} parent 父元素\n   * @param {object} cfg    分组的配置项\n   */\n  protected addGroup(parent: IGroup, cfg) {\n    this.appendDelegateObject(parent, cfg);\n    const group = parent.addGroup(cfg);\n    if (this.get('isRegister')) {\n      this.registerElement(group);\n    }\n    return group;\n  }\n\n  /**\n   * @protected\n   * 在组件上添加图形，主要解决 isReigeter 的问题\n   * @param {IGroup} parent 父元素\n   * @param {object} cfg    分组的配置项\n   */\n  protected addShape(parent: IGroup, cfg) {\n    this.appendDelegateObject(parent, cfg);\n    const shape = parent.addShape(cfg);\n    if (this.get('isRegister')) {\n      this.registerElement(shape);\n    }\n    return shape;\n  }\n\n  /**\n   * 在组件上添加子组件\n   *\n   * @param parent 父元素\n   * @param cfg 子组件配置项\n   */\n  protected addComponent<C extends GroupComponentCfg = GroupComponentCfg, CT extends GroupComponent = GroupComponent>(\n    parent: IGroup,\n    cfg: Omit<C, 'container'> & { component: GroupComponentCtor<C, CT> }\n  ) {\n    const { id, component: Ctor, ...restCfg } = cfg;\n    // @ts-ignore\n    const inst: CT = new Ctor({\n      ...restCfg,\n      id,\n      container: parent,\n      updateAutoRender: this.get('updateAutoRender'),\n    });\n    inst.init();\n    inst.render();\n\n    if (this.get('isRegister')) {\n      this.registerElement(inst.get('group'));\n    }\n\n    return inst;\n  }\n\n  protected initEvent() {}\n\n  protected removeEvent() {\n    const group = this.get('group');\n    group.off();\n  }\n\n  protected getElementId(localId: string) {\n    const id = this.get('id'); // 组件的 Id\n    const name = this.get('name'); // 组件的名称\n    return `${id}-${name}-${localId}`;\n  }\n\n  protected registerElement(element) {\n    const id = element.get('id');\n    this.get('shapesMap')[id] = element;\n  }\n\n  protected unregisterElement(element) {\n    const id = element.get('id');\n    delete this.get('shapesMap')[id];\n  }\n\n  // 移动元素\n  protected moveElementTo(element: IElement, point: Point) {\n    const matrix = getMatrixByTranslate(point);\n    element.attr('matrix', matrix);\n  }\n\n  /**\n   * 内部的渲染\n   * @param {IGroup} group 图形分组\n   */\n  protected abstract renderInner(group: IGroup);\n\n  /**\n   * 图形元素新出现时的动画，默认图形从透明度 0 到当前透明度\n   * @protected\n   * @param {string} elmentName 图形元素名称\n   * @param {IElement} newElement  新的图形元素\n   * @param {object} animateCfg 动画的配置项\n   */\n  protected addAnimation(elmentName, newElement, animateCfg) {\n    // 缓存透明度\n    let originOpacity = newElement.attr('opacity');\n    if (isNil(originOpacity)) {\n      originOpacity = 1;\n    }\n    newElement.attr('opacity', 0);\n    newElement.animate({ opacity: originOpacity }, animateCfg);\n  }\n\n  /**\n   * 图形元素新出现时的动画，默认图形从透明度 0 到当前透明度\n   * @protected\n   * @param {string} elmentName 图形元素名称\n   * @param {IElement} originElement 要删除的图形元素\n   * @param {object} animateCfg 动画的配置项\n   */\n  protected removeAnimation(elementName, originElement, animateCfg) {\n    originElement.animate({ opacity: 0 }, animateCfg);\n  }\n\n  /**\n   * 图形元素的更新动画\n   * @param {string} elmentName 图形元素名称\n   * @param {IElement} originElement 现有的图形元素\n   * @param {object} newAttrs  新的图形元素\n   * @param {object} animateCfg 动画的配置项\n   */\n  protected updateAnimation(elementName, originElement, newAttrs, animateCfg) {\n    originElement.animate(newAttrs, animateCfg);\n  }\n\n  // 更新组件的图形\n  protected updateElements(newGroup, originGroup) {\n    const animate = this.get('animate');\n    const animateOption = this.get('animateOption');\n    const children = newGroup.getChildren().slice(0); // 创建一个新数组，防止添加到 originGroup 时， children 变动\n    let preElement; // 前面已经匹配到的图形元素，用于\n    each(children, (element) => {\n      const elementId = element.get('id');\n      const originElement = this.getElementById(elementId);\n      const elementName = element.get('name');\n      if (originElement) {\n        if (element.get('isComponent')) {\n          // 嵌套子组件更新\n          const childComponent = element.get('component');\n          const origChildComponent: GroupComponent<any> = originElement.get('component');\n          const newCfg = pick(childComponent.cfg, difference(keys(childComponent.cfg), COPY_PROPERTIES_EXCLUDES));\n          origChildComponent.update(newCfg);\n          originElement.set(STATUS_UPDATE, 'update');\n        } else {\n          const replaceAttrs = this.getReplaceAttrs(originElement, element);\n          // 更新\n          if (animate && animateOption.update) {\n            // 没有动画\n            this.updateAnimation(elementName, originElement, replaceAttrs, animateOption.update);\n          } else {\n            // originElement.attrs = replaceAttrs; // 直接替换\n            originElement.attr(replaceAttrs);\n          }\n          // 如果是分组，则继续执行\n          if (element.isGroup()) {\n            this.updateElements(element, originElement);\n          }\n          // 复制属性\n          each(COPY_PROPERTIES, (name) => {\n            originElement.set(name, element.get(name));\n          });\n          updateClip(originElement, element);\n\n          preElement = originElement;\n          // 执行完更新后设置状态位为更新\n          originElement.set(STATUS_UPDATE, 'update');\n        }\n      } else {\n        // 没有对应的图形，则插入当前图形\n        originGroup.add(element); // 应该在 group 加个 insertAt 的方法\n        const siblings = originGroup.getChildren(); // 兄弟节点\n        siblings.splice(siblings.length - 1, 1); // 先从数组中移除，然后放到合适的位置\n        if (preElement) {\n          // 前面已经有更新的图形或者插入的图形，则在这个图形后面插入\n          const index = siblings.indexOf(preElement);\n          siblings.splice(index + 1, 0, element); // 在已经更新的图形元素后面插入\n        } else {\n          siblings.unshift(element);\n        }\n        this.registerElement(element); // 注册节点\n        element.set(STATUS_UPDATE, 'add'); // 执行完更新后设置状态位为添加\n        if (element.get('isComponent')) {\n          // 直接新增子组件container属性，实例不变\n          const childComponent = element.get('component');\n          childComponent.set('container', originGroup);\n        } else if (element.isGroup()) {\n          // 如果元素是新增加的元素，则遍历注册所有的子节点\n          this.registerNewGroup(element);\n        }\n        preElement = element;\n        if (animate) {\n          const animateCfg = this.get('isInit') ? animateOption.appear : animateOption.enter;\n          if (animateCfg) {\n            this.addAnimation(elementName, element, animateCfg);\n          }\n        }\n      }\n    });\n  }\n\n  protected clearUpdateStatus(group: IGroup) {\n    const children = group.getChildren();\n    each(children, (el) => {\n      el.set(STATUS_UPDATE, null); // 清理掉更新状态\n    });\n  }\n\n  // 清理离屏缓存\n  private clearOffScreenCache() {\n    const offScreenGroup = this.get('offScreenGroup');\n    if (offScreenGroup) {\n      // 销毁原先的离线 Group\n      offScreenGroup.destroy();\n    }\n    this.set('offScreenGroup', null);\n    this.set('offScreenBBox', null);\n  }\n\n  // private updateInner() {\n  //   const group = this.get('group');\n  //   const newGroup = this.createOffScreenGroup();\n  //   this.renderInner(newGroup);\n  //   this.applyOffset();\n  //   this.updateElements(newGroup, group);\n  //   this.deleteElements();\n  //   newGroup.destroy(); // 销毁虚拟分组\n  // }\n\n  // 获取发生委托时的对象，在事件中抛出\n  private getDelegateObject() {\n    const name = this.get('name');\n    const delegateObject = {\n      [name]: this,\n      component: this,\n    };\n    return delegateObject;\n  }\n\n  // 附加委托信息，用于事件\n  private appendDelegateObject(parent: IGroup, cfg) {\n    const parentObject = parent.get('delegateObject');\n    if (!cfg.delegateObject) {\n      cfg.delegateObject = {};\n    }\n    mix(cfg.delegateObject, parentObject); // 将父元素上的委托信息复制到自身\n  }\n\n  // 获取需要替换的属性，如果原先图形元素存在，而新图形不存在，则设置 undefined\n  private getReplaceAttrs(originElement: IElement, newElement: IElement) {\n    const originAttrs = originElement.attr();\n    const newAttrs = newElement.attr();\n    each(originAttrs, (v, k) => {\n      if (newAttrs[k] === undefined) {\n        newAttrs[k] = undefined;\n      }\n    });\n    return newAttrs;\n  }\n\n  private registerNewGroup(group) {\n    const children = group.getChildren();\n    each(children, (element) => {\n      this.registerElement(element); // 注册节点\n      element.set(STATUS_UPDATE, 'add'); // 执行完更新后设置状态位为添加\n      if (element.isGroup()) {\n        this.registerNewGroup(element);\n      }\n    });\n  }\n\n  // 移除多余的元素\n  private deleteElements() {\n    const shapesMap = this.get('shapesMap');\n    const deleteArray = [];\n    // 遍历获取需要删除的图形元素\n    each(shapesMap, (element, id) => {\n      if (!element.get(STATUS_UPDATE) || element.destroyed) {\n        deleteArray.push([id, element]);\n      } else {\n        element.set(STATUS_UPDATE, null); // 清理掉更新状态\n      }\n    });\n    const animate = this.get('animate');\n    const animateOption = this.get('animateOption');\n    // 删除图形元素\n    each(deleteArray, (item) => {\n      const [id, element] = item;\n      if (!element.destroyed) {\n        const elementName = element.get('name');\n        if (animate && animateOption.leave) {\n          // 需要动画结束时移除图形\n          const callbackAnimCfg = mix(\n            {\n              callback: () => {\n                this.removeElement(element);\n              },\n            },\n            animateOption.leave\n          );\n          this.removeAnimation(elementName, element, callbackAnimCfg);\n        } else {\n          this.removeElement(element);\n        }\n      }\n      delete shapesMap[id]; // 从缓存中移除\n    });\n  }\n\n  private removeElement(element: IShape | IGroup) {\n    if (element.get('isGroup')) {\n      const component = element.get('component');\n      if (component) {\n        component.destroy();\n      }\n    }\n    element.remove();\n  }\n}\n\nexport default GroupComponent;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}