{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { getTheme } from '@antv/g2';\nimport { each, find, isObject, map } from '@antv/util';\nimport { deepAssign } from '../utils';\nimport { conversionTagFormatter } from '../utils/conversion';\nfunction getConversionTagOptionsWithDefaults(options, horizontal) {\n  return deepAssign({\n    size: horizontal ? 32 : 80,\n    spacing: horizontal ? 8 : 12,\n    offset: horizontal ? 32 : 0,\n    arrow: options.arrow !== false && {\n      headSize: 12,\n      style: {\n        fill: 'rgba(0, 0, 0, 0.05)'\n      }\n    },\n    text: options.text !== false && {\n      style: {\n        fontSize: 12,\n        fill: 'rgba(0, 0, 0, 0.85)',\n        textAlign: 'center',\n        textBaseline: 'middle'\n      },\n      formatter: conversionTagFormatter\n    }\n  }, options);\n}\nfunction parsePoints(coordinate, element) {\n  // @ts-ignore\n  return map(element.getModel().points, function (point) {\n    return coordinate.convertPoint(point);\n  });\n}\nfunction renderArrowTag(config, elemPrev, elemNext) {\n  var view = config.view,\n    geometry = config.geometry,\n    group = config.group,\n    options = config.options,\n    horizontal = config.horizontal;\n  var offset = options.offset,\n    size = options.size,\n    arrow = options.arrow;\n  var coordinate = view.getCoordinate();\n  var pointPrev = parsePoints(coordinate, elemPrev)[3];\n  var pointNext = parsePoints(coordinate, elemNext)[0];\n  var totalHeight = pointNext.y - pointPrev.y;\n  var totalWidth = pointNext.x - pointPrev.x;\n  if (typeof arrow === 'boolean') {\n    return;\n  }\n  var headSize = arrow.headSize;\n  var spacing = options.spacing;\n  var points;\n  if (horizontal) {\n    if ((totalWidth - headSize) / 2 < spacing) {\n      // 当柱间距不足容纳箭头尖与间隔时，画三角并挤占间隔\n      spacing = Math.max(1, (totalWidth - headSize) / 2);\n      points = [[pointPrev.x + spacing, pointPrev.y - offset], [pointPrev.x + spacing, pointPrev.y - offset - size], [pointNext.x - spacing, pointNext.y - offset - size / 2]];\n    } else {\n      // 当柱间距足够时，画完整图形并留出间隔。\n      points = [[pointPrev.x + spacing, pointPrev.y - offset], [pointPrev.x + spacing, pointPrev.y - offset - size], [pointNext.x - spacing - headSize, pointNext.y - offset - size], [pointNext.x - spacing, pointNext.y - offset - size / 2], [pointNext.x - spacing - headSize, pointNext.y - offset]];\n    }\n  } else {\n    if ((totalHeight - headSize) / 2 < spacing) {\n      // 当柱间距不足容纳箭头尖与间隔时，画三角并挤占间隔\n      spacing = Math.max(1, (totalHeight - headSize) / 2);\n      points = [[pointPrev.x + offset, pointPrev.y + spacing], [pointPrev.x + offset + size, pointPrev.y + spacing], [pointNext.x + offset + size / 2, pointNext.y - spacing]];\n    } else {\n      // 当柱间距足够时，画完整图形并留出间隔。\n      points = [[pointPrev.x + offset, pointPrev.y + spacing], [pointPrev.x + offset + size, pointPrev.y + spacing], [pointNext.x + offset + size, pointNext.y - spacing - headSize], [pointNext.x + offset + size / 2, pointNext.y - spacing], [pointNext.x + offset, pointNext.y - spacing - headSize]];\n    }\n  }\n  group.addShape('polygon', {\n    id: view.id + \"-conversion-tag-arrow-\" + geometry.getElementId(elemPrev.getModel().mappingData),\n    name: 'conversion-tag-arrow',\n    origin: {\n      element: elemPrev,\n      nextElement: elemNext\n    },\n    attrs: __assign(__assign({}, arrow.style || {}), {\n      points: points\n    })\n  });\n}\nfunction renderTextTag(config, elemPrev, elemNext) {\n  var _a, _b, _c;\n  var view = config.view,\n    geometry = config.geometry,\n    group = config.group,\n    options = config.options,\n    field = config.field,\n    horizontal = config.horizontal;\n  var offset = options.offset,\n    size = options.size;\n  if (typeof options.text === 'boolean') {\n    return;\n  }\n  var coordinate = view.getCoordinate();\n  var text = ((_a = options.text) === null || _a === void 0 ? void 0 : _a.formatter) && ((_b = options.text) === null || _b === void 0 ? void 0 : _b.formatter(elemPrev.getData()[field], elemNext.getData()[field]));\n  var pointPrev = parsePoints(coordinate, elemPrev)[horizontal ? 3 : 0];\n  var pointNext = parsePoints(coordinate, elemNext)[horizontal ? 0 : 3];\n  var textShape = group.addShape('text', {\n    id: view.id + \"-conversion-tag-text-\" + geometry.getElementId(elemPrev.getModel().mappingData),\n    name: 'conversion-tag-text',\n    origin: {\n      element: elemPrev,\n      nextElement: elemNext\n    },\n    attrs: __assign(__assign({}, ((_c = options.text) === null || _c === void 0 ? void 0 : _c.style) || {}), {\n      text: text,\n      x: horizontal ? (pointPrev.x + pointNext.x) / 2 : pointPrev.x + offset + size / 2,\n      y: horizontal ? pointPrev.y - offset - size / 2 : (pointPrev.y + pointNext.y) / 2\n    })\n  });\n  if (horizontal) {\n    var totalWidth = pointNext.x - pointPrev.x;\n    var textWidth = textShape.getBBox().width;\n    if (textWidth > totalWidth) {\n      var cWidth = textWidth / text.length;\n      var cEnd = Math.max(1, Math.ceil(totalWidth / cWidth) - 1);\n      var textAdjusted = text.slice(0, cEnd) + \"...\";\n      textShape.attr('text', textAdjusted);\n    }\n  }\n}\nfunction renderTag(options, elemPrev, elemNext) {\n  renderArrowTag(options, elemPrev, elemNext);\n  renderTextTag(options, elemPrev, elemNext);\n}\n/**\n * 返回支持转化率组件的 adaptor，适用于柱形图/条形图\n * @param field 用户转化率计算的字段\n * @param horizontal 是否水平方向的转化率\n * @param disabled 是否禁用\n */\nexport function conversionTag(field, horizontal, disabled) {\n  if (horizontal === void 0) {\n    horizontal = true;\n  }\n  if (disabled === void 0) {\n    disabled = false;\n  }\n  return function (params) {\n    var options = params.options,\n      chart = params.chart;\n    var conversionTag = options.conversionTag,\n      theme = options.theme;\n    if (conversionTag && !disabled) {\n      // 有转化率组件时，柱子宽度占比自动为 1/3\n      chart.theme(deepAssign({}, isObject(theme) ? theme : getTheme(theme), {\n        columnWidthRatio: 1 / 3\n      }));\n      // 使用  shape annotation 绘制转化率组件\n      chart.annotation().shape({\n        render: function render(container, view) {\n          var group = container.addGroup({\n            id: chart.id + \"-conversion-tag-group\",\n            name: 'conversion-tag-group'\n          });\n          var interval = find(chart.geometries, function (geom) {\n            return geom.type === 'interval';\n          });\n          var config = {\n            view: view,\n            geometry: interval,\n            group: group,\n            field: field,\n            horizontal: horizontal,\n            options: getConversionTagOptionsWithDefaults(conversionTag, horizontal)\n          };\n          var elements = interval.elements;\n          each(elements, function (elem, idx) {\n            if (idx > 0) {\n              renderTag(config, elements[idx - 1], elem);\n            }\n          });\n        }\n      });\n    }\n    return params;\n  };\n}","map":{"version":3,"mappings":"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","names":["getTheme","each","find","isObject","map","deepAssign","conversionTagFormatter","getConversionTagOptionsWithDefaults","options","horizontal","size","spacing","offset","arrow","headSize","style","fill","text","fontSize","textAlign","textBaseline","formatter","parsePoints","coordinate","element","getModel","points","point","convertPoint","renderArrowTag","config","elemPrev","elemNext","geometry","group","view","getCoordinate","pointPrev","pointNext","totalHeight","y","totalWidth","x","Math","max","addShape","id","getElementId","mappingData","name","origin","nextElement","attrs","renderTextTag","field","getData","textShape","textWidth","getBBox","cWidth","length","cEnd","ceil","textAdjusted","slice","attr","renderTag","conversionTag","disabled","params","chart","theme","columnWidthRatio","annotation","shape","render","container","addGroup","interval","geometries","geom","type","elements","elem","idx"],"sources":["/home/iam/Documents/network/node_modules/@antv/g2plot/src/adaptor/conversion-tag.ts"],"sourcesContent":["import { Coordinate, Element, Geometry, getTheme, IGroup, ShapeAttrs, View } from '@antv/g2';\nimport { each, find, isObject, map } from '@antv/util';\nimport { Params } from '../core/adaptor';\nimport { Options } from '../types';\nimport { deepAssign } from '../utils';\nimport { conversionTagFormatter } from '../utils/conversion';\n\n/** 转化率组件配置选项 */\nexport interface ConversionTagOptions {\n  /** tag 高度 */\n  size?: number;\n  /** tag 对柱子间距 */\n  spacing?: number;\n  /** tag 距离轴线距离 */\n  offset?: number;\n  /** 箭头形状配置 */\n  arrow?:\n    | {\n        /** 箭头宽度 */\n        headSize?: number;\n        /** 箭头样式 */\n        style?: ShapeAttrs;\n      }\n    | false;\n  /** 文本配置 */\n  text?:\n    | {\n        /** 文字大小 */\n        size?: number;\n        /** 文字样式 */\n        style?: ShapeAttrs;\n        /** 文本格式化 */\n        formatter?: (prev: number, next: number) => string;\n      }\n    | false;\n}\n\nexport interface OptionWithConversionTag {\n  conversionTag?: ConversionTagOptions | false;\n}\n\n/** 控制转化率组件绘制的选项 */\ntype TagRenderConfig = {\n  /** 所在的 View */\n  view: View;\n  /** 所属的 geometry */\n  geometry: Geometry;\n  /** 转化率组件的 group */\n  group: IGroup;\n  /** 转化率配置 */\n  options: ConversionTagOptions;\n  /** 用于转化率计算的字段 */\n  field: string;\n  /** 水平/垂直 */\n  horizontal: boolean;\n};\n\nfunction getConversionTagOptionsWithDefaults(options: ConversionTagOptions, horizontal: boolean): ConversionTagOptions {\n  return deepAssign(\n    {\n      size: horizontal ? 32 : 80,\n      spacing: horizontal ? 8 : 12,\n      offset: horizontal ? 32 : 0,\n      arrow: options.arrow !== false && {\n        headSize: 12,\n        style: {\n          fill: 'rgba(0, 0, 0, 0.05)',\n        },\n      },\n      text: options.text !== false && {\n        style: {\n          fontSize: 12,\n          fill: 'rgba(0, 0, 0, 0.85)',\n          textAlign: 'center',\n          textBaseline: 'middle',\n        },\n        formatter: conversionTagFormatter,\n      },\n    },\n    options\n  );\n}\n\nfunction parsePoints(coordinate: Coordinate, element: Element): { x: number; y: number }[] {\n  // @ts-ignore\n  return map(element.getModel().points, (point) => coordinate.convertPoint(point));\n}\n\nfunction renderArrowTag(config: TagRenderConfig, elemPrev: Element, elemNext: Element): void {\n  const { view, geometry, group, options, horizontal } = config;\n  const { offset, size, arrow } = options;\n  const coordinate = view.getCoordinate();\n  const pointPrev = parsePoints(coordinate, elemPrev)[3];\n  const pointNext = parsePoints(coordinate, elemNext)[0];\n  const totalHeight = pointNext.y - pointPrev.y;\n  const totalWidth = pointNext.x - pointPrev.x;\n\n  if (typeof arrow === 'boolean') {\n    return;\n  }\n  const { headSize } = arrow;\n  let spacing = options.spacing;\n  let points;\n\n  if (horizontal) {\n    if ((totalWidth - headSize) / 2 < spacing) {\n      // 当柱间距不足容纳箭头尖与间隔时，画三角并挤占间隔\n      spacing = Math.max(1, (totalWidth - headSize) / 2);\n      points = [\n        [pointPrev.x + spacing, pointPrev.y - offset],\n        [pointPrev.x + spacing, pointPrev.y - offset - size],\n        [pointNext.x - spacing, pointNext.y - offset - size / 2],\n      ];\n    } else {\n      // 当柱间距足够时，画完整图形并留出间隔。\n      points = [\n        [pointPrev.x + spacing, pointPrev.y - offset],\n        [pointPrev.x + spacing, pointPrev.y - offset - size],\n        [pointNext.x - spacing - headSize, pointNext.y - offset - size],\n        [pointNext.x - spacing, pointNext.y - offset - size / 2],\n        [pointNext.x - spacing - headSize, pointNext.y - offset],\n      ];\n    }\n  } else {\n    if ((totalHeight - headSize) / 2 < spacing) {\n      // 当柱间距不足容纳箭头尖与间隔时，画三角并挤占间隔\n      spacing = Math.max(1, (totalHeight - headSize) / 2);\n      points = [\n        [pointPrev.x + offset, pointPrev.y + spacing],\n        [pointPrev.x + offset + size, pointPrev.y + spacing],\n        [pointNext.x + offset + size / 2, pointNext.y - spacing],\n      ];\n    } else {\n      // 当柱间距足够时，画完整图形并留出间隔。\n      points = [\n        [pointPrev.x + offset, pointPrev.y + spacing],\n        [pointPrev.x + offset + size, pointPrev.y + spacing],\n        [pointNext.x + offset + size, pointNext.y - spacing - headSize],\n        [pointNext.x + offset + size / 2, pointNext.y - spacing],\n        [pointNext.x + offset, pointNext.y - spacing - headSize],\n      ];\n    }\n  }\n\n  group.addShape('polygon', {\n    id: `${view.id}-conversion-tag-arrow-${geometry.getElementId(elemPrev.getModel().mappingData)}`,\n    name: 'conversion-tag-arrow',\n    origin: {\n      element: elemPrev,\n      nextElement: elemNext,\n    },\n    attrs: {\n      ...(arrow.style || {}),\n      points,\n    },\n  });\n}\n\nfunction renderTextTag(config: TagRenderConfig, elemPrev: Element, elemNext: Element): void {\n  const { view, geometry, group, options, field, horizontal } = config;\n  const { offset, size } = options;\n  if (typeof options.text === 'boolean') {\n    return;\n  }\n  const coordinate = view.getCoordinate();\n  const text = options.text?.formatter && options.text?.formatter(elemPrev.getData()[field], elemNext.getData()[field]);\n\n  const pointPrev = parsePoints(coordinate, elemPrev)[horizontal ? 3 : 0];\n  const pointNext = parsePoints(coordinate, elemNext)[horizontal ? 0 : 3];\n\n  const textShape = group.addShape('text', {\n    id: `${view.id}-conversion-tag-text-${geometry.getElementId(elemPrev.getModel().mappingData)}`,\n    name: 'conversion-tag-text',\n    origin: {\n      element: elemPrev,\n      nextElement: elemNext,\n    },\n    attrs: {\n      ...(options.text?.style || {}),\n      text,\n      x: horizontal ? (pointPrev.x + pointNext.x) / 2 : pointPrev.x + offset + size / 2,\n      y: horizontal ? pointPrev.y - offset - size / 2 : (pointPrev.y + pointNext.y) / 2,\n    },\n  });\n\n  if (horizontal) {\n    const totalWidth = pointNext.x - pointPrev.x;\n    const { width: textWidth } = textShape.getBBox();\n    if (textWidth > totalWidth) {\n      const cWidth = textWidth / text.length;\n      const cEnd = Math.max(1, Math.ceil(totalWidth / cWidth) - 1);\n      const textAdjusted = `${text.slice(0, cEnd)}...`;\n      textShape.attr('text', textAdjusted);\n    }\n  }\n}\n\nfunction renderTag(options: TagRenderConfig, elemPrev: Element, elemNext: Element): void {\n  renderArrowTag(options, elemPrev, elemNext);\n  renderTextTag(options, elemPrev, elemNext);\n}\n\n/**\n * 返回支持转化率组件的 adaptor，适用于柱形图/条形图\n * @param field 用户转化率计算的字段\n * @param horizontal 是否水平方向的转化率\n * @param disabled 是否禁用\n */\nexport function conversionTag<O extends OptionWithConversionTag & Options>(\n  field: string,\n  horizontal = true,\n  disabled = false\n) {\n  return function (params: Params<O>): Params<O> {\n    const { options, chart } = params;\n    const { conversionTag, theme } = options;\n\n    if (conversionTag && !disabled) {\n      // 有转化率组件时，柱子宽度占比自动为 1/3\n      chart.theme(\n        deepAssign({}, isObject(theme) ? theme : getTheme(theme), {\n          columnWidthRatio: 1 / 3,\n        })\n      );\n      // 使用  shape annotation 绘制转化率组件\n      chart.annotation().shape({\n        render: (container, view) => {\n          const group = container.addGroup({\n            id: `${chart.id}-conversion-tag-group`,\n            name: 'conversion-tag-group',\n          });\n          const interval = find(chart.geometries, (geom: Geometry) => geom.type === 'interval');\n          const config: TagRenderConfig = {\n            view,\n            geometry: interval,\n            group,\n            field,\n            horizontal,\n            options: getConversionTagOptionsWithDefaults(conversionTag, horizontal),\n          };\n          const elements = interval.elements;\n          each(elements, (elem: Element, idx: number) => {\n            if (idx > 0) {\n              renderTag(config, elements[idx - 1], elem);\n            }\n          });\n        },\n      });\n    }\n\n    return params;\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}