{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { addEventListener } from '@antv/dom-util';\nimport { clamp, deepMix, get, noop } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nvar DEFAULT_STYLE = {\n  trackColor: 'rgba(0,0,0,0)',\n  thumbColor: 'rgba(0,0,0,0.15)',\n  size: 8,\n  lineCap: 'round'\n};\nexport var DEFAULT_THEME = {\n  // 默认样式\n  default: DEFAULT_STYLE,\n  // 鼠标 hover 的样式\n  hover: {\n    thumbColor: 'rgba(0,0,0,0.2)'\n  }\n};\nvar Scrollbar = /** @class */function (_super) {\n  __extends(Scrollbar, _super);\n  function Scrollbar() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.clearEvents = noop;\n    _this.onStartEvent = function (isMobile) {\n      return function (e) {\n        _this.isMobile = isMobile;\n        e.originalEvent.preventDefault();\n        var clientX = isMobile ? get(e.originalEvent, 'touches.0.clientX') : e.clientX;\n        var clientY = isMobile ? get(e.originalEvent, 'touches.0.clientY') : e.clientY;\n        // 将开始的点记录下来\n        _this.startPos = _this.cfg.isHorizontal ? clientX : clientY;\n        _this.bindLaterEvent();\n      };\n    };\n    _this.bindLaterEvent = function () {\n      var containerDOM = _this.getContainerDOM();\n      var events = [];\n      if (_this.isMobile) {\n        events = [addEventListener(containerDOM, 'touchmove', _this.onMouseMove), addEventListener(containerDOM, 'touchend', _this.onMouseUp), addEventListener(containerDOM, 'touchcancel', _this.onMouseUp)];\n      } else {\n        events = [addEventListener(containerDOM, 'mousemove', _this.onMouseMove), addEventListener(containerDOM, 'mouseup', _this.onMouseUp),\n        // 为了保证划出 canvas containerDom 时还没触发 mouseup\n        addEventListener(containerDOM, 'mouseleave', _this.onMouseUp)];\n      }\n      _this.clearEvents = function () {\n        events.forEach(function (e) {\n          e.remove();\n        });\n      };\n    };\n    // 拖拽滑块的事件回调\n    // 这里是 dom 原生事件，绑定在 dom 元素上的\n    _this.onMouseMove = function (e) {\n      var _a = _this.cfg,\n        isHorizontal = _a.isHorizontal,\n        thumbOffset = _a.thumbOffset;\n      e.preventDefault();\n      var clientX = _this.isMobile ? get(e, 'touches.0.clientX') : e.clientX;\n      var clientY = _this.isMobile ? get(e, 'touches.0.clientY') : e.clientY;\n      // 鼠标松开的位置\n      var endPos = isHorizontal ? clientX : clientY;\n      // 滑块需要移动的距离, 由于这里是对滑块监听，所以移动的距离就是 diffDis, 如果监听对象是 container dom，则需要算比例\n      var diff = endPos - _this.startPos;\n      // 更新 _startPos\n      _this.startPos = endPos;\n      _this.updateThumbOffset(thumbOffset + diff);\n    };\n    _this.onMouseUp = function (e) {\n      e.preventDefault();\n      _this.clearEvents();\n    };\n    // 点击滑道的事件回调,移动滑块位置\n    _this.onTrackClick = function (e) {\n      var _a = _this.cfg,\n        isHorizontal = _a.isHorizontal,\n        x = _a.x,\n        y = _a.y,\n        thumbLen = _a.thumbLen;\n      var containerDOM = _this.getContainerDOM();\n      var rect = containerDOM.getBoundingClientRect();\n      var clientX = e.clientX,\n        clientY = e.clientY;\n      var offset = isHorizontal ? clientX - rect.left - x - thumbLen / 2 : clientY - rect.top - y - thumbLen / 2;\n      var newOffset = _this.validateRange(offset);\n      _this.updateThumbOffset(newOffset);\n    };\n    _this.onThumbMouseOver = function () {\n      var thumbColor = _this.cfg.theme.hover.thumbColor;\n      _this.getElementByLocalId('thumb').attr('stroke', thumbColor);\n      _this.draw();\n    };\n    _this.onThumbMouseOut = function () {\n      var thumbColor = _this.cfg.theme.default.thumbColor;\n      _this.getElementByLocalId('thumb').attr('stroke', thumbColor);\n      _this.draw();\n    };\n    return _this;\n  }\n  Scrollbar.prototype.setRange = function (min, max) {\n    this.set('minLimit', min);\n    this.set('maxLimit', max);\n    var curValue = this.getValue();\n    var newValue = clamp(curValue, min, max);\n    if (curValue !== newValue && !this.get('isInit')) {\n      this.setValue(newValue);\n    }\n  };\n  Scrollbar.prototype.getRange = function () {\n    var min = this.get('minLimit') || 0;\n    var max = this.get('maxLimit') || 1;\n    return {\n      min: min,\n      max: max\n    };\n  };\n  Scrollbar.prototype.setValue = function (value) {\n    var range = this.getRange();\n    var originalValue = this.getValue();\n    this.update({\n      thumbOffset: (this.get('trackLen') - this.get('thumbLen')) * clamp(value, range.min, range.max)\n    });\n    this.delegateEmit('valuechange', {\n      originalValue: originalValue,\n      value: this.getValue()\n    });\n  };\n  Scrollbar.prototype.getValue = function () {\n    return clamp(this.get('thumbOffset') / (this.get('trackLen') - this.get('thumbLen')), 0, 1);\n  };\n  Scrollbar.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    return __assign(__assign({}, cfg), {\n      name: 'scrollbar',\n      isHorizontal: true,\n      minThumbLen: 20,\n      thumbOffset: 0,\n      theme: DEFAULT_THEME\n    });\n  };\n  Scrollbar.prototype.renderInner = function (group) {\n    this.renderTrackShape(group);\n    this.renderThumbShape(group);\n  };\n  Scrollbar.prototype.applyOffset = function () {\n    this.moveElementTo(this.get('group'), {\n      x: this.get('x'),\n      y: this.get('y')\n    });\n  };\n  Scrollbar.prototype.initEvent = function () {\n    this.bindEvents();\n  };\n  // 创建滑道的 shape\n  Scrollbar.prototype.renderTrackShape = function (group) {\n    var _a = this.cfg,\n      trackLen = _a.trackLen,\n      _b = _a.theme,\n      theme = _b === void 0 ? {\n        default: {}\n      } : _b;\n    var _c = deepMix({}, DEFAULT_THEME, theme).default,\n      lineCap = _c.lineCap,\n      trackColor = _c.trackColor,\n      themeSize = _c.size;\n    var size = get(this.cfg, 'size', themeSize);\n    var attrs = this.get('isHorizontal') ? {\n      x1: 0 + size / 2,\n      y1: size / 2,\n      x2: trackLen - size / 2,\n      y2: size / 2,\n      lineWidth: size,\n      stroke: trackColor,\n      lineCap: lineCap\n    } : {\n      x1: size / 2,\n      y1: 0 + size / 2,\n      x2: size / 2,\n      y2: trackLen - size / 2,\n      lineWidth: size,\n      stroke: trackColor,\n      lineCap: lineCap\n    };\n    return this.addShape(group, {\n      id: this.getElementId('track'),\n      name: 'track',\n      type: 'line',\n      attrs: attrs\n    });\n  };\n  // 创建滑块的 shape\n  Scrollbar.prototype.renderThumbShape = function (group) {\n    var _a = this.cfg,\n      thumbOffset = _a.thumbOffset,\n      thumbLen = _a.thumbLen,\n      theme = _a.theme;\n    var _b = deepMix({}, DEFAULT_THEME, theme).default,\n      themeSize = _b.size,\n      lineCap = _b.lineCap,\n      thumbColor = _b.thumbColor;\n    var size = get(this.cfg, 'size', themeSize);\n    var attrs = this.get('isHorizontal') ? {\n      x1: thumbOffset + size / 2,\n      y1: size / 2,\n      x2: thumbOffset + thumbLen - size / 2,\n      y2: size / 2,\n      lineWidth: size,\n      stroke: thumbColor,\n      lineCap: lineCap,\n      cursor: 'default'\n    } : {\n      x1: size / 2,\n      y1: thumbOffset + size / 2,\n      x2: size / 2,\n      y2: thumbOffset + thumbLen - size / 2,\n      lineWidth: size,\n      stroke: thumbColor,\n      lineCap: lineCap,\n      cursor: 'default'\n    };\n    return this.addShape(group, {\n      id: this.getElementId('thumb'),\n      name: 'thumb',\n      type: 'line',\n      attrs: attrs\n    });\n  };\n  Scrollbar.prototype.bindEvents = function () {\n    var group = this.get('group');\n    group.on('mousedown', this.onStartEvent(false));\n    group.on('mouseup', this.onMouseUp);\n    group.on('touchstart', this.onStartEvent(true));\n    group.on('touchend', this.onMouseUp);\n    var trackShape = group.findById(this.getElementId('track'));\n    trackShape.on('click', this.onTrackClick);\n    var thumbShape = group.findById(this.getElementId('thumb'));\n    thumbShape.on('mouseover', this.onThumbMouseOver);\n    thumbShape.on('mouseout', this.onThumbMouseOut);\n  };\n  Scrollbar.prototype.getContainerDOM = function () {\n    var container = this.get('container');\n    var canvas = container && container.get('canvas');\n    return canvas && canvas.get('container');\n  };\n  Scrollbar.prototype.validateRange = function (offset) {\n    var _a = this.cfg,\n      thumbLen = _a.thumbLen,\n      trackLen = _a.trackLen;\n    var newOffset = offset;\n    if (offset + thumbLen > trackLen) {\n      newOffset = trackLen - thumbLen;\n    } else if (offset + thumbLen < thumbLen) {\n      newOffset = 0;\n    }\n    return newOffset;\n  };\n  Scrollbar.prototype.draw = function () {\n    var container = this.get('container');\n    var canvas = container && container.get('canvas');\n    if (canvas) {\n      canvas.draw();\n    }\n  };\n  Scrollbar.prototype.updateThumbOffset = function (offset) {\n    var _a = this.cfg,\n      thumbOffset = _a.thumbOffset,\n      isHorizontal = _a.isHorizontal,\n      thumbLen = _a.thumbLen,\n      size = _a.size;\n    var newOffset = this.validateRange(offset);\n    if (newOffset === thumbOffset) {\n      // 如果更新后的 offset 与原值相同，则不改变\n      return;\n    }\n    var thumbShape = this.getElementByLocalId('thumb');\n    if (isHorizontal) {\n      thumbShape.attr({\n        x1: newOffset + size / 2,\n        x2: newOffset + thumbLen - size / 2\n      });\n    } else {\n      thumbShape.attr({\n        y1: newOffset + size / 2,\n        y2: newOffset + thumbLen - size / 2\n      });\n    }\n    this.emitOffsetChange(newOffset);\n  };\n  Scrollbar.prototype.emitOffsetChange = function (offset) {\n    var _a = this.cfg,\n      originalValue = _a.thumbOffset,\n      trackLen = _a.trackLen,\n      thumbLen = _a.thumbLen;\n    this.cfg.thumbOffset = offset;\n    // 发送事件\n    this.emit('scrollchange', {\n      thumbOffset: offset,\n      ratio: clamp(offset / (trackLen - thumbLen), 0, 1)\n    });\n    this.delegateEmit('valuechange', {\n      originalValue: originalValue,\n      value: offset\n    });\n  };\n  return Scrollbar;\n}(GroupComponent);\nexport { Scrollbar };","map":{"version":3,"mappings":"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","names":["addEventListener","clamp","deepMix","get","noop","GroupComponent","DEFAULT_STYLE","trackColor","thumbColor","size","lineCap","DEFAULT_THEME","default","hover","__extends","_this","isMobile","e","originalEvent","preventDefault","clientX","clientY","startPos","cfg","isHorizontal","bindLaterEvent","containerDOM","getContainerDOM","events","onMouseMove","onMouseUp","clearEvents","forEach","remove","thumbOffset","endPos","diff","updateThumbOffset","x","y","thumbLen","rect","getBoundingClientRect","offset","left","top","newOffset","validateRange","theme","getElementByLocalId","attr","draw","Scrollbar","min","max","set","curValue","getValue","newValue","setValue","value","range","getRange","originalValue","update","delegateEmit","_super","getDefaultCfg","name","minThumbLen","group","renderTrackShape","renderThumbShape","moveElementTo","bindEvents","trackLen","_b","themeSize","attrs","x1","y1","x2","y2","lineWidth","stroke","addShape","id","getElementId","type","cursor","on","onStartEvent","trackShape","findById","onTrackClick","thumbShape","onThumbMouseOver","onThumbMouseOut","container","canvas","emitOffsetChange","emit","ratio"],"sources":["/home/iam/Documents/network/node_modules/@antv/component/src/scrollbar/scrollbar.ts"],"sourcesContent":["import { addEventListener } from '@antv/dom-util';\nimport { Event, IGroup } from '@antv/g-base';\nimport { clamp, deepMix, get, noop } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nimport { ISlider } from '../interfaces';\nimport { GroupComponentCfg, Range } from '../types';\n\nexport interface ScrollbarStyle {\n  trackColor: string;\n  thumbColor: string;\n  size: number;\n  lineCap: string;\n}\n\nexport interface ScrollbarTheme {\n  default?: Partial<Readonly<ScrollbarStyle>>;\n  hover?: Pick<Readonly<ScrollbarStyle>, 'thumbColor'>;\n}\n\nconst DEFAULT_STYLE: ScrollbarStyle = {\n  trackColor: 'rgba(0,0,0,0)',\n  thumbColor: 'rgba(0,0,0,0.15)',\n  size: 8,\n  lineCap: 'round',\n};\n\nexport const DEFAULT_THEME: ScrollbarTheme = {\n  // 默认样式\n  default: DEFAULT_STYLE,\n  // 鼠标 hover 的样式\n  hover: {\n    thumbColor: 'rgba(0,0,0,0.2)',\n  },\n};\n\nexport interface ScrollbarCfg extends GroupComponentCfg {\n  // scrollBar 的位置\n  x: number;\n  y: number;\n  // 滚动条的布局，横向 | 纵向, 非必传，默认为 false(纵向)\n  isHorizontal?: boolean;\n  // 滑道长度，必传\n  trackLen: number;\n  // 滑块长度，必传\n  thumbLen: number;\n  // 滑块的最小长度，非必传，默认值为 20\n  minThumbLen?: number;\n  // 滑块相对滑道的偏移, 非必传，默认值为 0\n  thumbOffset?: number;\n  // 滚动条大小（横向代表高度，纵向代表宽度），优先级大于 theme\n  size?: number;\n  // 滚动条样式，非必传\n  theme?: ScrollbarTheme;\n\n  minLimit?: number;\n  maxLimit?: number;\n}\n\nexport class Scrollbar extends GroupComponent<ScrollbarCfg> implements ISlider {\n  public cfg: ScrollbarCfg;\n  // 通过拖拽开始的事件是 mousedown 还是 touchstart 来决定是移动端还是 pc 端\n  private isMobile: boolean;\n  private clearEvents = noop;\n  private startPos: number;\n\n  public setRange(min: number, max: number) {\n    this.set('minLimit', min);\n    this.set('maxLimit', max);\n    const curValue = this.getValue();\n    const newValue = clamp(curValue, min, max);\n    if (curValue !== newValue && !this.get('isInit')) {\n      this.setValue(newValue);\n    }\n  }\n\n  public getRange(): Range {\n    const min: number = this.get('minLimit') || 0;\n    const max: number = this.get('maxLimit') || 1;\n\n    return { min, max };\n  }\n\n  public setValue(value: number) {\n    const range = this.getRange();\n    const originalValue = this.getValue();\n    this.update({\n      thumbOffset: (this.get('trackLen') - this.get('thumbLen')) * clamp(value, range.min, range.max),\n    });\n    this.delegateEmit('valuechange', {\n      originalValue,\n      value: this.getValue(),\n    });\n  }\n\n  public getValue(): number {\n    return clamp(this.get('thumbOffset') / (this.get('trackLen') - this.get('thumbLen')), 0, 1);\n  }\n\n  public getDefaultCfg() {\n    const cfg = super.getDefaultCfg();\n    return {\n      ...cfg,\n      name: 'scrollbar',\n      isHorizontal: true,\n      minThumbLen: 20,\n      thumbOffset: 0,\n      theme: DEFAULT_THEME,\n    };\n  }\n\n  protected renderInner(group: IGroup) {\n    this.renderTrackShape(group);\n    this.renderThumbShape(group);\n  }\n\n  protected applyOffset() {\n    this.moveElementTo(this.get('group'), {\n      x: this.get('x'),\n      y: this.get('y'),\n    });\n  }\n\n  protected initEvent() {\n    this.bindEvents();\n  }\n\n  // 创建滑道的 shape\n  private renderTrackShape(group: IGroup) {\n    const { trackLen, theme = { default: {} } } = this.cfg;\n    const { lineCap, trackColor, size: themeSize } = deepMix({}, DEFAULT_THEME, theme).default;\n    const size = get(this.cfg, 'size', themeSize);\n\n    const attrs = this.get('isHorizontal')\n      ? {\n          x1: 0 + size / 2,\n          y1: size / 2,\n          x2: trackLen - size / 2,\n          y2: size / 2,\n          lineWidth: size,\n          stroke: trackColor,\n          lineCap,\n        }\n      : {\n          x1: size / 2,\n          y1: 0 + size / 2,\n          x2: size / 2,\n          y2: trackLen - size / 2,\n          lineWidth: size,\n          stroke: trackColor,\n          lineCap,\n        };\n    return this.addShape(group, {\n      id: this.getElementId('track'),\n      name: 'track',\n      type: 'line',\n      attrs,\n    });\n  }\n\n  // 创建滑块的 shape\n  private renderThumbShape(group: IGroup) {\n    const { thumbOffset, thumbLen, theme } = this.cfg;\n    const { size: themeSize, lineCap, thumbColor } = deepMix({}, DEFAULT_THEME, theme).default;\n    const size = get(this.cfg, 'size', themeSize);\n\n    const attrs = this.get('isHorizontal')\n      ? {\n          x1: thumbOffset + size / 2,\n          y1: size / 2,\n          x2: thumbOffset + thumbLen - size / 2,\n          y2: size / 2,\n          lineWidth: size,\n          stroke: thumbColor,\n          lineCap,\n          cursor: 'default',\n        }\n      : {\n          x1: size / 2,\n          y1: thumbOffset + size / 2,\n          x2: size / 2,\n          y2: thumbOffset + thumbLen - size / 2,\n          lineWidth: size,\n          stroke: thumbColor,\n          lineCap,\n          cursor: 'default',\n        };\n    return this.addShape(group, {\n      id: this.getElementId('thumb'),\n      name: 'thumb',\n      type: 'line',\n      attrs,\n    });\n  }\n\n  private bindEvents() {\n    const group: IGroup = this.get('group');\n    group.on('mousedown', this.onStartEvent(false));\n    group.on('mouseup', this.onMouseUp);\n\n    group.on('touchstart', this.onStartEvent(true));\n    group.on('touchend', this.onMouseUp);\n\n    const trackShape = group.findById(this.getElementId('track'));\n    trackShape.on('click', this.onTrackClick);\n    const thumbShape = group.findById(this.getElementId('thumb'));\n    thumbShape.on('mouseover', this.onThumbMouseOver);\n    thumbShape.on('mouseout', this.onThumbMouseOut);\n  }\n\n  private onStartEvent = (isMobile: boolean) => (e: Event) => {\n    this.isMobile = isMobile;\n    e.originalEvent.preventDefault();\n    const clientX = isMobile ? get(e.originalEvent, 'touches.0.clientX') : e.clientX;\n    const clientY = isMobile ? get(e.originalEvent, 'touches.0.clientY') : e.clientY;\n\n    // 将开始的点记录下来\n    this.startPos = this.cfg.isHorizontal ? clientX : clientY;\n\n    this.bindLaterEvent();\n  };\n\n  private bindLaterEvent = () => {\n    const containerDOM = this.getContainerDOM();\n    let events = [];\n\n    if (this.isMobile) {\n      events = [\n        addEventListener(containerDOM, 'touchmove', this.onMouseMove),\n        addEventListener(containerDOM, 'touchend', this.onMouseUp),\n        addEventListener(containerDOM, 'touchcancel', this.onMouseUp),\n      ];\n    } else {\n      events = [\n        addEventListener(containerDOM, 'mousemove', this.onMouseMove),\n        addEventListener(containerDOM, 'mouseup', this.onMouseUp),\n        // 为了保证划出 canvas containerDom 时还没触发 mouseup\n        addEventListener(containerDOM, 'mouseleave', this.onMouseUp),\n      ];\n    }\n    this.clearEvents = () => {\n      events.forEach((e) => {\n        e.remove();\n      });\n    };\n  };\n\n  // 拖拽滑块的事件回调\n  // 这里是 dom 原生事件，绑定在 dom 元素上的\n  private onMouseMove = (e: MouseEvent) => {\n    const { isHorizontal, thumbOffset } = this.cfg;\n    e.preventDefault();\n    const clientX = this.isMobile ? get(e, 'touches.0.clientX') : e.clientX;\n    const clientY = this.isMobile ? get(e, 'touches.0.clientY') : e.clientY;\n    // 鼠标松开的位置\n    const endPos = isHorizontal ? clientX : clientY;\n    // 滑块需要移动的距离, 由于这里是对滑块监听，所以移动的距离就是 diffDis, 如果监听对象是 container dom，则需要算比例\n    const diff = endPos - this.startPos;\n    // 更新 _startPos\n    this.startPos = endPos;\n\n    this.updateThumbOffset(thumbOffset + diff);\n  };\n\n  private onMouseUp = (e: Event) => {\n    e.preventDefault();\n    this.clearEvents();\n  };\n\n  // 点击滑道的事件回调,移动滑块位置\n  private onTrackClick = (e: Event) => {\n    const { isHorizontal, x, y, thumbLen } = this.cfg;\n    const containerDOM = this.getContainerDOM();\n    const rect = containerDOM.getBoundingClientRect();\n    const { clientX, clientY } = e;\n    const offset = isHorizontal ? clientX - rect.left - x - thumbLen / 2 : clientY - rect.top - y - thumbLen / 2;\n\n    const newOffset = this.validateRange(offset);\n    this.updateThumbOffset(newOffset);\n  };\n\n  private onThumbMouseOver = () => {\n    const { thumbColor } = this.cfg.theme.hover;\n    this.getElementByLocalId('thumb').attr('stroke', thumbColor);\n    this.draw();\n  };\n\n  private onThumbMouseOut = () => {\n    const { thumbColor } = this.cfg.theme.default;\n    this.getElementByLocalId('thumb').attr('stroke', thumbColor);\n    this.draw();\n  };\n\n  private getContainerDOM() {\n    const container = this.get('container');\n    const canvas = container && container.get('canvas');\n\n    return canvas && canvas.get('container');\n  }\n\n  private validateRange(offset: number) {\n    const { thumbLen, trackLen } = this.cfg;\n    let newOffset = offset;\n    if (offset + thumbLen > trackLen) {\n      newOffset = trackLen - thumbLen;\n    } else if (offset + thumbLen < thumbLen) {\n      newOffset = 0;\n    }\n    return newOffset;\n  }\n\n  private draw() {\n    const container = this.get('container');\n    const canvas = container && container.get('canvas');\n\n    if (canvas) {\n      canvas.draw();\n    }\n  }\n\n  private updateThumbOffset(offset: number) {\n    const { thumbOffset, isHorizontal, thumbLen, size } = this.cfg;\n    const newOffset = this.validateRange(offset);\n    if (newOffset === thumbOffset) {\n      // 如果更新后的 offset 与原值相同，则不改变\n      return;\n    }\n    const thumbShape = this.getElementByLocalId('thumb');\n\n    if (isHorizontal) {\n      thumbShape.attr({\n        x1: newOffset + size / 2,\n        x2: newOffset + thumbLen - size / 2,\n      });\n    } else {\n      thumbShape.attr({\n        y1: newOffset + size / 2,\n        y2: newOffset + thumbLen - size / 2,\n      });\n    }\n    this.emitOffsetChange(newOffset);\n  }\n\n  private emitOffsetChange(offset: number) {\n    const { thumbOffset: originalValue, trackLen, thumbLen } = this.cfg;\n    this.cfg.thumbOffset = offset;\n    // 发送事件\n    this.emit('scrollchange', {\n      thumbOffset: offset,\n      ratio: clamp(offset / (trackLen - thumbLen), 0, 1),\n    });\n    this.delegateEmit('valuechange', {\n      originalValue,\n      value: offset,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}